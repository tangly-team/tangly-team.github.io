<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tangly OS Components – Technical Expertise</title>
    <link>blog.tangly.net/expertise/expertise-technical/</link>
    <description>Recent content in Technical Expertise on tangly OS Components</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="blog.tangly.net/expertise/expertise-technical/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Expertise: Agile Architecture</title>
      <link>blog.tangly.net/expertise/expertise-technical/agile-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>blog.tangly.net/expertise/expertise-technical/agile-architecture/</guid>
      <description>
        
        
        &lt;div class=&#34;card-deck mb-4&#34;&gt;
&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;Evolvable Architectures&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;Every product is unique and needs a tailored architecture.
The goal is to identify an architecture that evolves with new requirements and constraints.
Constraints are new technologies, regulatory changes or improvements in reliability and scalability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transform the architecture to a more modular solution&lt;/li&gt;
&lt;li&gt;Validate continuously the design against the requirements&lt;/li&gt;
&lt;li&gt;Identify and automate fitness functions to verify constraints&lt;/li&gt;
&lt;li&gt;Move from a monolithic to a service architecture&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;Domain-Driven Development&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;Agile cross-functional teams implement and deliver features to the customers.
We have extensive experience defining architectures empowering multiple teams to work on the same product and implement effectively and efficiently new features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement domain-driven development and architecture&lt;/li&gt;
&lt;li&gt;Use event storming to identify domain ubiquitous language&lt;/li&gt;
&lt;li&gt;Establish DDD as an architectural approach to microservice solutions&lt;/li&gt;
&lt;li&gt;Identify bounded contexts to promote parallel development&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;card-deck mb-4&#34;&gt;
&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;Clean Code and Refactoring&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;Successful products outlive their initial development teams and selected technologies.
We must implement approaches to ensure the source code and architecture provide a sound foundation for long-term support and product support.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a clean code culture and promote software craftsmanship&lt;/li&gt;
&lt;li&gt;Show how static analysis tools are a lifesaver to improve the quality of code&lt;/li&gt;
&lt;li&gt;Detect errors, vulnerabilities and smells&lt;/li&gt;
&lt;li&gt;Use refactoring patterns&lt;/li&gt;
&lt;li&gt;Establish test-driven development - TDD -&lt;/li&gt;
&lt;li&gt;Establish acceptance test-driven development -  ATDD -&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;DevOps&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;Lean approach encourages reducing cycle time.
DevOps provides an optimal approach to deliver rapidly and with high-quality applications in production.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You build it, you deploy it, you run it&lt;/li&gt;
&lt;li&gt;Optimise cycle time and lead time in your product development&lt;/li&gt;
&lt;li&gt;Institute configuration as code&lt;/li&gt;
&lt;li&gt;Implement continuous integration, delivery and deployment pipelines&lt;/li&gt;
&lt;li&gt;Establish automatic validation and verification&lt;/li&gt;
&lt;li&gt;Deploy tracing, logging and monitoring&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Expertise: Software Craftsmanship</title>
      <link>blog.tangly.net/expertise/expertise-technical/software-craftsmanship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>blog.tangly.net/expertise/expertise-technical/software-craftsmanship/</guid>
      <description>
        
        
        &lt;div class=&#34;card-deck mb-4&#34;&gt;
&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;Agile Technical Coach&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;Improving software design and construction is our passion. The goal is to help you become a more productive developer—and that does not stop at the end of
your training and coaching sessions. Your success is important to us.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reflect on new solutions to existing challenges&lt;/li&gt;
&lt;li&gt;Review artefacts from sprint planning and design sessions&lt;/li&gt;
&lt;li&gt;Periodically retrospect on your progress and challenges&lt;/li&gt;
&lt;li&gt;Promote team learning with coding dojos, pair programming, design workshops, agile architecture&lt;/li&gt;
&lt;li&gt;Introduce techniques like static code analysis, TDD, ATDD, zero bug policy&lt;/li&gt;
&lt;li&gt;Be available to answer questions as they come&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;


&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;Design Workshops&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;It is often useful to get an outside perspective. We have extensive experience working with design patterns and architecting a variety of systems, from embedded to the enterprise, and custom applications to operating systems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify patterns in your design to simplify and clarify code&lt;/li&gt;
&lt;li&gt;Improve the testability of your designs to help automate validation&lt;/li&gt;
&lt;li&gt;Examine the context and motivation around your design decisions&lt;/li&gt;
&lt;li&gt;Suggest design alternatives to accommodate future changes&lt;/li&gt;
&lt;li&gt;Clarify your domain model, so it is easier to understand and change&lt;/li&gt;
&lt;li&gt;Implement alternative design solutions to resolve longstanding problems&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;card-deck mb-4&#34;&gt;
&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;Code Mentoring&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;It is easy to be overwhelmed by newly inherited legacy Java code.
Legacy code can be difficult to work with.
It can be helpful to have an extra set of eyes and a bunch of techniques for dealing with it.
I can help review your software to identify areas of risk and create approaches for mitigation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Review, prioritize, and organize existing legacy code&lt;/li&gt;
&lt;li&gt;Retrofit unit tests into legacy code, so it’s safe to refactor and modernize&lt;/li&gt;
&lt;li&gt;Identify types of technical debt in your code and how to fix it&lt;/li&gt;
&lt;li&gt;Suggest alternative implementations for challenging code&lt;/li&gt;
&lt;li&gt;Use techniques to clean up existing code for maintainability&lt;/li&gt;
&lt;li&gt;Refactor code so it can readily accommodate new features&lt;/li&gt;
&lt;li&gt;Gain techniques for efficiently refactoring legacy code&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;div class=&#34;card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        &lt;strong&gt;Assessments&lt;/strong&gt;
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;p&gt;Every project is unique and so are its challenges.
Through interviews, questionnaires, and surveys, we provide you with a detailed assessment of your software development process and project along with
recommendations.
I also offer online and remote assessments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Articulate and refine your product definition&lt;/li&gt;
&lt;li&gt;Evaluate your agile software development processes&lt;/li&gt;
&lt;li&gt;Identify what’s working and what needs improvement&lt;/li&gt;
&lt;li&gt;List areas where the best practices can be applied&lt;/li&gt;
&lt;li&gt;Quickly get a snapshot of your situation and where you stand&lt;/li&gt;
&lt;li&gt;Gain a new perspective from an experienced outsider&lt;/li&gt;
&lt;/ul&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
