<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical Expertise on tangly Components</title>
    <link>https://blog.tangly.net/expertise/expertise-technical/</link>
    <description>Recent content in Technical Expertise on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://blog.tangly.net/expertise/expertise-technical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Agile Architecture</title>
      <link>https://blog.tangly.net/expertise/expertise-technical/agile-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/expertise/expertise-technical/agile-architecture/</guid>
      <description>Evolvable Architectures Every product is unique and needs a tailored architecture. The goal is to identify an architecture that evolves with new requirements and constraints. Constraints are new technologies, regulatory changes or improvements in reliability and scalability.&#xA;Transform the architecture to a more modular solution Validate continuously the design against the requirements Identify and automate fitness functions to verify constraints Move from a monolithic to a service architecture Domain-Driven Development Agile cross-functional teams implement and deliver features to the customers.</description>
    </item>
    <item>
      <title>Software Craftsmanship</title>
      <link>https://blog.tangly.net/expertise/expertise-technical/software-craftsmanship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/expertise/expertise-technical/software-craftsmanship/</guid>
      <description>Agile Technical Coach Improving software design and construction is our passion. The goal is to help you become a more productive developerâ€”and that does not stop at the end of your training and coaching sessions. Your success is important to us.&#xA;Reflect on new solutions to existing challenges Review artefacts from sprint planning and design sessions Periodically retrospect on your progress and challenges Promote team learning with coding dojos, pair programming, design workshops, agile architecture Introduce techniques like static code analysis, TDD, ATDD, zero bug policy Be available to answer questions as they come Design Workshops It is often useful to get an outside perspective.</description>
    </item>
  </channel>
</rss>
