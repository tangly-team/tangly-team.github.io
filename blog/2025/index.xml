<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2025 on tangly Components</title>
    <link>https://blog.tangly.net/blog/2025/</link>
    <description>Recent content in 2025 on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/blog/2025/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed Systems</title>
      <link>https://blog.tangly.net/blog/2025/distributed-systems/</link>
      <pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2025/distributed-systems/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2025-01-01-head.png&#34; alt=&#34;2025 01 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The embedded software industry is in the midst of a major revolution.&#xA;A tremendous amount of new development lies ahead.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;New embedded software needs an actual architecture that is inherently safer and easier to understand.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It provides a higher level of abstraction than the usual &lt;em&gt;threading&lt;/em&gt; and &lt;em&gt;synchronization&lt;/em&gt; approach based on a traditional Real-Time Operating System &lt;em&gt;RTOS&lt;/em&gt;&#xA;&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For years, experts in concurrent software have been pointing out that unrestricted use of threads and various blocking mechanisms of an RTOS often leads to programs that are unsafe and difficult to reason about.&#xA;Instead, experts from different industries independently came up with the following best practices, collectively known as the active object or actor design pattern &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#reactive-messaging-patterns-with-actor-model&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
