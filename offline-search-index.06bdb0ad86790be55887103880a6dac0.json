[{"body":" ERPUI-001 Asciidoc for Text Fields Date: 2021-06-01\nStatus Implemented\nContext Asciidoc is a well-established approach to write rich text documentation or comments. The casual user can learn and use the notation without excessive effort. The legibility and professional appearance of asciidoc texts are markantly higher than plain text. Asciidoc is an open standard and used in various environments and tools [1].\nDecision All texts and comments in the ERP components shall use Asciidoc notation to improve legibility.\nAlternatives would be proprietary formats such as Microsoft Word or similar notations such as Markdown. Our open-source approach to product development rejects any propriatary formats. Asciidoc is a very powerful and successful format [2]. The associated complexity for the users is probably an overkill for casual users of our product.\nText and comments in our system should have a limited length complexity. Activity description can be lengthy and use more complex syntax. Asciidoc is an optimal balance between expression power and ease of use.\nConsequences Asciidoc is backward compatible with text fields. No migration of existing records is needed.\nThe user interface components shall be extended to support a Asciidoc visualiation and editing component. Vaadin currently does not provide native support for Asciidoc or Markdow. The tangly-os components will be extended to provide such a component until Vaadin supports in the future such an approach.\n1. The alternative would be to use Markdown notation. The expression power of Asciidoc is higher and better standardized. 2. The team acknowledged we have a preference for Asciidoc. We use the notation for all our achitecture documents based on the arc42 template. ","categories":"","description":"","excerpt":" ERPUI-001 Asciidoc for Text Fields Date: 2021-06-01\nStatus Implemented\nContext Asciidoc is a well-established approach to write rich text documentation or comments. The casual user can learn and use …","ref":"/docs/domains/architecture/adr/erpui-001-asciidoc-for-all-texts/","tags":"","title":"ERPUI-001: AsciiDoc for Text Fields"},{"body":" ERPUI-001 Asciidoc for Text Fields Date: 2021-06-01\nStatus Implemented\nContext Asciidoc is a well-established approach to write rich text documentation or comments. The casual user can learn and use the notation without excessive effort. The legibility and professional appearance of asciidoc texts are markantly higher than plain text. Asciidoc is an open standard and used in various environments and tools [1].\nDecision All texts and comments in the ERP components shall use Asciidoc notation to improve legibility.\nAlternatives would be proprietary formats such as Microsoft Word or similar notations such as Markdown. Our open-source approach to product development rejects any propriatary formats. Asciidoc is a very powerful and successful format [2]. The associated complexity for the users is probably an overkill for casual users of our product.\nText and comments in our system should have a limited length complexity. Activity description can be lengthy and use more complex syntax. Asciidoc is an optimal balance between expression power and ease of use.\nConsequences Asciidoc is backward compatible with text fields. No migration of existing records is needed.\nThe user interface components shall be extended to support a Asciidoc visualiation and editing component. Vaadin currently does not provide native support for Asciidoc or Markdow. The tangly-os components will be extended to provide such a component until Vaadin supports in the future such an approach.\n1. The alternative would be to use Markdown notation. The expression power of Asciidoc is higher and better standardized. 2. The team acknowledged we have a preference for Asciidoc. We use the notation for all our achitecture documents based on the arc42 template. ","categories":"","description":"","excerpt":" ERPUI-001 Asciidoc for Text Fields Date: 2021-06-01\nStatus Implemented\nContext Asciidoc is a well-established approach to write rich text documentation or comments. The casual user can learn and use …","ref":"/docs/domains/shared/_design/adr/erpui-001-asciidoc-for-all-texts/","tags":"","title":"ERPUI-001: AsciiDoc for Text Fields"},{"body":" FSM-001 Replace Guard and Action classes with JDK BiPredicate and BiFunction Classes Date: 2017-06-01\nStatus Implemented\nContext We need a legible data model for finite state machine definitions. New users should easily understand the finite state machine abstractions and map them to their domain.\nDecision We use standard classes of the JDK to minimize contextual complexity when learning and using the FSM library. We will evaluate if the loss of domain names for classes has a negative impact on the legibility of the library.\nConsequences We have a cleaner and simpler interface and have increased dependency on regular JDK classes. The generic names of the guard predicate and functional action should not diminish the legibility of the source code. The role of the type is defined through the name of the parameter in the method signature.\nCare was taken to use explicit parameter names and document them accordingly in JavaDoc. Modern IDEs such as IntelliJ IDEA display formatted JavaDoc as hints to the developer.\n","categories":"","description":"","excerpt":" FSM-001 Replace Guard and Action classes with JDK BiPredicate and BiFunction Classes Date: 2017-06-01\nStatus Implemented\nContext We need a legible data model for finite state machine definitions. New …","ref":"/docs/domains/architecture/adr/fsm-001-move-abstractions-to-jdk-classes/","tags":"","title":"FSM 001: Move Abstractions to JDK Classes"},{"body":" FSM-001 Replace Guard and Action classes with JDK BiPredicate and BiFunction Classes Date: 2017-06-01\nStatus Implemented\nContext We need a legible data model for finite state machine definitions. New users should easily understand the finite state machine abstractions and map them to their domain.\nDecision We use standard classes of the JDK to minimize contextual complexity when learning and using the FSM library. We will evaluate if the loss of domain names for classes has a negative impact on the legibility of the library.\nConsequences We have a cleaner and simpler interface and have increased dependency on regular JDK classes. The generic names of the guard predicate and functional action should not diminish the legibility of the source code. The role of the type is defined through the name of the parameter in the method signature.\nCare was taken to use explicit parameter names and document them accordingly in JavaDoc. Modern IDEs such as IntelliJ IDEA display formatted JavaDoc as hints to the developer.\n","categories":"","description":"","excerpt":" FSM-001 Replace Guard and Action classes with JDK BiPredicate and BiFunction Classes Date: 2017-06-01\nStatus Implemented\nContext We need a legible data model for finite state machine definitions. New …","ref":"/docs/domains/shared/_design/adr/fsm-001-move-abstractions-to-jdk-classes/","tags":"","title":"FSM 001: Move Abstractions to JDK Classes"},{"body":" OS-001 Remove usage of Google Guava Library Date: 2018-02-20\nStatus Implemented\nContext Guava is an historical effort to provide much-needed functionalities to the Java community. The Java ecosystem evolves quite slowly at the beginning of the millennium. Later stewardship clearly improved with a six-month release schedule approach. Preview and incubator initiatives allowed timely evaluation of new features and idioms in the Java language and ecosystem.\nJDK versions from release 8 often provide better replacement methods for a lot of Guava functions. New JDKs are released every six months and provide regular improvements to the API. These improvements make Guava functions more and more obsolete.\nGuava is an external library of high quality but still an additional dependency in the application. We always follow the rule to use language and standard library constructs over using external libraries. Guava tries to support older JDKs and, therefore does not use more modern approaches defined in new API versions. We consider Guava has a legacy library. We are dedicated to writing modern Java using the latest official releases of the language and runtime environment.\nThe advantage is better integration, always synchronized with a new release of the JDK and no incompatibilities. The drawback is sometimes a slightly more cumbersome syntax or solution. [1].\nDecision All Guava usages shall be replaced by JDK standard functions. The main advantages are:\nCurrent JDK versions provide their own implementation e.g., in the Objects class.\nGuava dependency is removed from our source code and compiled artifacts.\nGuava is not optimized for idioms used in current JDK such as streams and extensive use of lambdas. Guava needs years to support new concepts such as algebraic data types.\nThis decision is against good practices documented in the first decade of this millennium. The Guava library did not evolve as rapidly as the new Java versions released in the second and third decades.\nWe strongly advocate timely evolution. Try to avoid becoming laggards in your technology stack. As a rule, use the current Java release, or as a minimal version, the latest long-term supported version of Java.\nConsequences Some operations are more complicated to implement because a solution is already provided in Guava.\nWe have the huge advantage of being able to use the current approaches provided in JDK and associated standard API.\nCode uses the current constructs provided through last released JDK.\n1. If a specific function is only available in Guava and your project strongly relies on it, feel free to continue using Guava ","categories":"","description":"","excerpt":" OS-001 Remove usage of Google Guava Library Date: 2018-02-20\nStatus Implemented\nContext Guava is an historical effort to provide much-needed functionalities to the Java community. The Java ecosystem …","ref":"/docs/domains/architecture/adr/os-001-system-guava-removal/","tags":"","title":"OS 001: System Guava Removal"},{"body":" OS-001 Remove usage of Google Guava Library Date: 2018-02-20\nStatus Implemented\nContext Guava is an historical effort to provide much-needed functionalities to the Java community. The Java ecosystem evolves quite slowly at the beginning of the millennium. Later stewardship clearly improved with a six-month release schedule approach. Preview and incubator initiatives allowed timely evaluation of new features and idioms in the Java language and ecosystem.\nJDK versions from release 8 often provide better replacement methods for a lot of Guava functions. New JDKs are released every six months and provide regular improvements to the API. These improvements make Guava functions more and more obsolete.\nGuava is an external library of high quality but still an additional dependency in the application. We always follow the rule to use language and standard library constructs over using external libraries. Guava tries to support older JDKs and, therefore does not use more modern approaches defined in new API versions. We consider Guava has a legacy library. We are dedicated to writing modern Java using the latest official releases of the language and runtime environment.\nThe advantage is better integration, always synchronized with a new release of the JDK and no incompatibilities. The drawback is sometimes a slightly more cumbersome syntax or solution. [1].\nDecision All Guava usages shall be replaced by JDK standard functions. The main advantages are:\nCurrent JDK versions provide their own implementation e.g., in the Objects class.\nGuava dependency is removed from our source code and compiled artifacts.\nGuava is not optimized for idioms used in current JDK such as streams and extensive use of lambdas. Guava needs years to support new concepts such as algebraic data types.\nThis decision is against good practices documented in the first decade of this millennium. The Guava library did not evolve as rapidly as the new Java versions released in the second and third decades.\nWe strongly advocate timely evolution. Try to avoid becoming laggards in your technology stack. As a rule, use the current Java release, or as a minimal version, the latest long-term supported version of Java.\nConsequences Some operations are more complicated to implement because a solution is already provided in Guava.\nWe have the huge advantage of being able to use the current approaches provided in JDK and associated standard API.\nCode uses the current constructs provided through last released JDK.\n1. If a specific function is only available in Guava and your project strongly relies on it, feel free to continue using Guava ","categories":"","description":"","excerpt":" OS-001 Remove usage of Google Guava Library Date: 2018-02-20\nStatus Implemented\nContext Guava is an historical effort to provide much-needed functionalities to the Java community. The Java ecosystem …","ref":"/docs/domains/shared/_design/adr/os-001-system-guava-removal/","tags":"","title":"OS 001: System Guava Removal"},{"body":" LED-001 Use Tag for VAT costs computation Date: 2017-12-01\nStatus Implemented\nContext We need to record the VAT components of transactions in our ledger system. The VAT value can be different for each position in a transaction therefore the VAT information shall be defined on each part of a transaction.\nThe value of the VAT is computed based on the VAT percentage. The percentage can change over time due to regulatory changes.\nDecision We will support tags at the transaction entry. The tags are a triplet [namespace:]name[=value] format. We recommend the namespace \"fin\", the name \"vat\", and a text identifier has value.\nThe current values are: 1. F1 for VAT invoiced at 8% and paid to the state at 7.1% 1. F2 for VAT invoiced at 7.7% and paid to the state at 6.9%\nConsequences Ontology based on tags are not validated through a type system.\nChecks have to be implemented to guaranty adequate level of tracking.\n","categories":"","description":"","excerpt":" LED-001 Use Tag for VAT costs computation Date: 2017-12-01\nStatus Implemented\nContext We need to record the VAT components of transactions in our ledger system. The VAT value can be different for …","ref":"/docs/domains/ledger/adr/led-001-ledger-tag-for-vat-costs/","tags":"","title":"LED 001"},{"body":" OS-002 Define Unit Test Conventions Date: 2020-06-15\nStatus Implemented\nContext Some libraries need to create files on a file system. For example, you want to generate human-readable paper invoices.\nDecision We recommend the following conventions when writing unit tests creating files. Use Google Java in memory file system Jimfs. Additional file systems can only be used in Java if all operations are performed through Path objects. Path objects have a reference to the file system; File objects always referenced the default file system. When you are writing to the default file system use the root directory /tmp/ available in all Unix like operating systems.\nAvoid writing files to a local file system. This approach is slow, cumbersome and error-prone. Use in-memory file systems.\nConsequences We have a dependency on an open source product currently managed by Google.\nUse of Jimfs requires use of Path instances. We shall remove all references to File instances. File instances do not support alternative file systems. Therefore, we shall use libraries providing a workaround File instances either by using Path instances or reader and writer to access files.\nOperations to the physical file system have the risk that rights problems could rise in some continuous integration environment.\n","categories":"","description":"","excerpt":" OS-002 Define Unit Test Conventions Date: 2020-06-15\nStatus Implemented\nContext Some libraries need to create files on a file system. For example, you want to generate human-readable paper invoices. …","ref":"/docs/domains/architecture/adr/os-002-unit-test-conventions/","tags":"","title":"OS 002: Unit Test Conventions"},{"body":" OS-002 Define Unit Test Conventions Date: 2020-06-15\nStatus Implemented\nContext Some libraries need to create files on a file system. For example, you want to generate human-readable paper invoices.\nDecision We recommend the following conventions when writing unit tests creating files. Use Google Java in memory file system Jimfs. Additional file systems can only be used in Java if all operations are performed through Path objects. Path objects have a reference to the file system; File objects always referenced the default file system. When you are writing to the default file system use the root directory /tmp/ available in all Unix like operating systems.\nAvoid writing files to a local file system. This approach is slow, cumbersome and error-prone. Use in-memory file systems.\nConsequences We have a dependency on an open source product currently managed by Google.\nUse of Jimfs requires use of Path instances. We shall remove all references to File instances. File instances do not support alternative file systems. Therefore, we shall use libraries providing a workaround File instances either by using Path instances or reader and writer to access files.\nOperations to the physical file system have the risk that rights problems could rise in some continuous integration environment.\n","categories":"","description":"","excerpt":" OS-002 Define Unit Test Conventions Date: 2020-06-15\nStatus Implemented\nContext Some libraries need to create files on a file system. For example, you want to generate human-readable paper invoices. …","ref":"/docs/domains/shared/_design/adr/os-002-unit-test-conventions/","tags":"","title":"OS 002: Unit Test Conventions"},{"body":" FSM-002 Publish Artifacts on Public Java Components Repository Date: 2020-01-01\nStatus Retired\nLinks Superseded by: OS-0005\nContext The library is mature enough to be used in commercial and academic projects. The library was used in internal projects and refined to fulfill these requirements. More customers will validate the usefulness of the library and identify extensions for further releases.\nDecision The library shall be published on maven central and be accessible to a wide range of developers and organizations. A website shall be set up to provide adequate documentation for users.\nThe FSM website will use a static web approach to minimize costs and provide good legibility.\nThe library will be published on Maven Central to maximize potential usage.\nThe ADR FSM-001 supports this evolution.\nConsequences We have to establish a publishing process at the company level to deploy signed artifacts to maven central repository.\nWe have to establish a public website to host the documentation of public published libraries.\nWe have to support semantic versioning of all future published releases.\n","categories":"","description":"","excerpt":" FSM-002 Publish Artifacts on Public Java Components Repository Date: 2020-01-01\nStatus Retired\nLinks Superseded by: OS-0005\nContext The library is mature enough to be used in commercial and academic …","ref":"/docs/domains/architecture/adr/fsm-002-publish-maven-central-artifact/","tags":"","title":"FSM-002: Publish Maven Central Artifacts"},{"body":" FSM-002 Publish Artifacts on Public Java Components Repository Date: 2020-01-01\nStatus Retired\nLinks Superseded by: OS-0005\nContext The library is mature enough to be used in commercial and academic projects. The library was used in internal projects and refined to fulfill these requirements. More customers will validate the usefulness of the library and identify extensions for further releases.\nDecision The library shall be published on maven central and be accessible to a wide range of developers and organizations. A website shall be set up to provide adequate documentation for users.\nThe FSM website will use a static web approach to minimize costs and provide good legibility.\nThe library will be published on Maven Central to maximize potential usage.\nThe ADR FSM-001 supports this evolution.\nConsequences We have to establish a publishing process at the company level to deploy signed artifacts to maven central repository.\nWe have to establish a public website to host the documentation of public published libraries.\nWe have to support semantic versioning of all future published releases.\n","categories":"","description":"","excerpt":" FSM-002 Publish Artifacts on Public Java Components Repository Date: 2020-01-01\nStatus Retired\nLinks Superseded by: OS-0005\nContext The library is mature enough to be used in commercial and academic …","ref":"/docs/domains/shared/_design/adr/fsm-002-publish-maven-central-artifact/","tags":"","title":"FSM-002: Publish Maven Central Artifacts"},{"body":" PRJ-001 Use Tag for product costs computation Date: 2017-12-01\nStatus Implemented\nContext We would like to compute earnings and costs on per product base. Each transaction entry should support tags to identify the associated projects or departments. The tag approach supports multiple consolidation of an orthogonal cost structure.\nDecision We will support tags at the transaction entry. The tags are a triplet [namespace:]name[=value] format. We recommend the namespace \"fin\", the name \"segment\", and a text identifier has value.\nConsequences Ontology based on tags are not hard defined through a type system.\nChecks have to be implemented to guaranty adequate level of tracking.\n","categories":"","description":"","excerpt":" PRJ-001 Use Tag for product costs computation Date: 2017-12-01\nStatus Implemented\nContext We would like to compute earnings and costs on per product base. Each transaction entry should support tags …","ref":"/docs/domains/products/adr/prj-001-project-tag-for-project-costs/","tags":"","title":"PRJ 001"},{"body":" OS-003 Remove usage of Google Guava Library Date: 2020-01-01\nStatus Implemented\nContext JDK is released every six months to all Java developers. The latest approach is to release a long-term supported version every two years.\nBetter approaches support clean code, less verbose source code and reduce programming [5] [2]. These constructs shall be used in our modules as soon as they are released to the developers.\nThe advantage is better integration, always synchronized with the current release of the JDK and no incompatibilities. The drawback is that our clients have to use the current JDK released version.\nThe major advantage is that you are using the latest version you do not need to pay license fees for each server you have running. Older Oracle versions always require a support contract and associated fees. The other approach is to use an alternate distribution such as OpenJDK.\nDecision We use the current released JDK and all constructs provided in this JDK [1]. We use preview features and incubating functionality present in this JDK. The main advantages are\nCurrent JDK versions provide efficient and elegant implementation [3] [4]. See, for example, the record construct provided since JDK 14.\nThe source code is legible and has fewer errors.\nOur developers are up-to-date with Java evolution and enjoy writing modern code.\nJDK 18 and 19 give improvements in pattern matching and thread programming.\nConsequences Clients are forced to use the current JDK version.\nTooling is more brittle because a lot of tool maintainers are late to adapt the actual version of JDK.\nExamples of New Features The instanceof operator supports in conditional statement deconstruction.\nThe record construct simplifies data objects and encourages immutability.\nThe UncheckedIOException encourages the use of non-checked exceptions.\nLinks [1] Modernize your Java Landscape\n[2] Immutability in Java\n[3] JDK 17\n[4] JDK 16\n[5] Modern Java Development\n","categories":"","description":"","excerpt":" OS-003 Remove usage of Google Guava Library Date: 2020-01-01\nStatus Implemented\nContext JDK is released every six months to all Java developers. The latest approach is to release a long-term …","ref":"/docs/domains/architecture/adr/os-003-use-modern-java-constructs/","tags":"","title":"OS 003: Use Modern Java Constructs"},{"body":" OS-003 Remove usage of Google Guava Library Date: 2020-01-01\nStatus Implemented\nContext JDK is released every six months to all Java developers. The latest approach is to release a long-term supported version every two years.\nBetter approaches support clean code, less verbose source code and reduce programming [5] [2]. These constructs shall be used in our modules as soon as they are released to the developers.\nThe advantage is better integration, always synchronized with the current release of the JDK and no incompatibilities. The drawback is that our clients have to use the current JDK released version.\nThe major advantage is that you are using the latest version you do not need to pay license fees for each server you have running. Older Oracle versions always require a support contract and associated fees. The other approach is to use an alternate distribution such as OpenJDK.\nDecision We use the current released JDK and all constructs provided in this JDK [1]. We use preview features and incubating functionality present in this JDK. The main advantages are\nCurrent JDK versions provide efficient and elegant implementation [3] [4]. See, for example, the record construct provided since JDK 14.\nThe source code is legible and has fewer errors.\nOur developers are up-to-date with Java evolution and enjoy writing modern code.\nJDK 18 and 19 give improvements in pattern matching and thread programming.\nConsequences Clients are forced to use the current JDK version.\nTooling is more brittle because a lot of tool maintainers are late to adapt the actual version of JDK.\nExamples of New Features The instanceof operator supports in conditional statement deconstruction.\nThe record construct simplifies data objects and encourages immutability.\nThe UncheckedIOException encourages the use of non-checked exceptions.\nLinks [1] Modernize your Java Landscape\n[2] Immutability in Java\n[3] JDK 17\n[4] JDK 16\n[5] Modern Java Development\n","categories":"","description":"","excerpt":" OS-003 Remove usage of Google Guava Library Date: 2020-01-01\nStatus Implemented\nContext JDK is released every six months to all Java developers. The latest approach is to release a long-term …","ref":"/docs/domains/shared/_design/adr/os-003-use-modern-java-constructs/","tags":"","title":"OS 003: Use Modern Java Constructs"},{"body":" OS-004 Publish Technical Documentation Through Static Website Date: 2020-01-01\nStatus Implemented\nContext A legible, well-structured and up-to-date technical documentation of released open source components is a service to all our users. Due to the small size of our team, we want a straight forward tool chain to generate the website. In the future, we could move our product to another hosting platform. The solution should be built on a standard to minimize porting overhead.\nI am personally a fan of Asciidoc and would promote a solution supporting this markup language. I will strongly fight against proprietary solutions.\nDecision All our technical documentation and blogs will be written in Asciidoc.\nThe website is created using the Hugo toolchain.\nThe theme of hugo will be Docsy.\nConsequences Committers are forced to document in Asciidoc.\nTooling is slightly more brittle because Asciidoctor integration in Hugo is work in progress. Asciidoctor is also undergoing changes such as the native support of rouge syntax highlighter. The improvements in both tools were impressive the last year, but we have to update regularly our toolchain and update all Asciidoc documents.\nLearnings (ref-hugo) themes styling for Asciidoc is sketchy. The visual quality is currently hindered due to faulty support of the standard or custom AsciiDoc stylesheet.\nAsciidoc supports native rouge code highlighting module. All source code fragments are nicely displayed without special support from Hugo.\nWe documented our experience in various blogs [1] [2]\u003e. We use currently the Google sponsored theme Docsy for our static website.\nLinks [1] Creating a Technical Website with Hugo and AsciiDoc\n[2] Support Comments for Static Hugo Website\n","categories":"","description":"","excerpt":" OS-004 Publish Technical Documentation Through Static Website Date: 2020-01-01\nStatus Implemented\nContext A legible, well-structured and up-to-date technical documentation of released open source …","ref":"/docs/domains/architecture/adr/os-004-publish-technical-documentation-through-static-website/","tags":"","title":"OS 004: Publish Technical Documentation Through Static Website"},{"body":" OS-004 Publish Technical Documentation Through Static Website Date: 2020-01-01\nStatus Implemented\nContext A legible, well-structured and up-to-date technical documentation of released open source components is a service to all our users. Due to the small size of our team, we want a straight forward tool chain to generate the website. In the future, we could move our product to another hosting platform. The solution should be built on a standard to minimize porting overhead.\nI am personally a fan of Asciidoc and would promote a solution supporting this markup language. I will strongly fight against proprietary solutions.\nDecision All our technical documentation and blogs will be written in Asciidoc.\nThe website is created using the Hugo toolchain.\nThe theme of hugo will be Docsy.\nConsequences Committers are forced to document in Asciidoc.\nTooling is slightly more brittle because Asciidoctor integration in Hugo is work in progress. Asciidoctor is also undergoing changes such as the native support of rouge syntax highlighter. The improvements in both tools were impressive the last year, but we have to update regularly our toolchain and update all Asciidoc documents.\nLearnings (ref-hugo) themes styling for Asciidoc is sketchy. The visual quality is currently hindered due to faulty support of the standard or custom AsciiDoc stylesheet.\nAsciidoc supports native rouge code highlighting module. All source code fragments are nicely displayed without special support from Hugo.\nWe documented our experience in various blogs [1] [2]\u003e. We use currently the Google sponsored theme Docsy for our static website.\nLinks [1] Creating a Technical Website with Hugo and AsciiDoc\n[2] Support Comments for Static Hugo Website\n","categories":"","description":"","excerpt":" OS-004 Publish Technical Documentation Through Static Website Date: 2020-01-01\nStatus Implemented\nContext A legible, well-structured and up-to-date technical documentation of released open source …","ref":"/docs/domains/shared/_design/adr/os-004-publish-technical-documentation-through-static-website/","tags":"","title":"OS 004: Publish Technical Documentation Through Static Website"},{"body":" Introduction and Goals\nArchitecture Constraints\nSystem Scope and Context\nSolution Strategy\nBuilding Block View\nRuntime View\nDeployment View\nCrosscutting Concepts\nArchitecture Decisions\nQuality Requirements\nTechnical Risks\nUser Manual\nGlossary\nchapters ","categories":"","description":"","excerpt":" Introduction and Goals\nArchitecture Constraints\nSystem Scope and Context\nSolution Strategy\nBuilding Block View\nRuntime View\nDeployment View\nCrosscutting Concepts\nArchitecture Decisions\nQuality …","ref":"/docs/domains/architecture/","tags":"","title":"ERP Architecture"},{"body":" Introduction and Goals\nArchitecture Constraints\nSystem Scope and Context\nSolution Strategy\nBuilding Block View\nRuntime View\nDeployment View\nCrosscutting Concepts\nArchitecture Decisions\nQuality Requirements\nTechnical Risks\nUser Manual\nGlossary\nchapters ","categories":"","description":"","excerpt":" Introduction and Goals\nArchitecture Constraints\nSystem Scope and Context\nSolution Strategy\nBuilding Block View\nRuntime View\nDeployment View\nCrosscutting Concepts\nArchitecture Decisions\nQuality …","ref":"/docs/domains/shared/_design/","tags":"","title":"ERP Architecture"},{"body":" OS-005 Publish Artifacts on Public Java Components Repository Date: 2019-05-01\nStatus Implemented\nLinks Supersede: FSM-0002\nContext The tangly open source libraries are mature enough to be used in public commercial and academic projects.\nThe libraries were used in internal projects and refined to fulfill these requirements. More customers will validate the usefulness of the library and identify extensions for further releases.\nWe want to provide a standard and well-known approach for our customers. They shall have access to our libraries through official and well-documented channels.\nDecision The libraries shall be published as artifacts on maven central and be accessible to a wide range of developers and organizations. A website shall be set up to provide an adequate documentation for users.\nThe Technical Documentation will use a static web approach to minimize costs and provide good legibility. All open source components will be hosted on the same site.\nThe libraries will be published on Maven Central to maximize potential usage.\nConsequences We have to establish a publishing process at the company level to deploy signed artifacts to maven central repository. See release and publication process.\nWe have to establish a public website to host the documentation of public-published libraries. The static website is Open Source Components\nWe have to support semantic versioning for all future releases of public-published libraries. See release and publication process.\n","categories":"","description":"","excerpt":" OS-005 Publish Artifacts on Public Java Components Repository Date: 2019-05-01\nStatus Implemented\nLinks Supersede: FSM-0002\nContext The tangly open source libraries are mature enough to be used in …","ref":"/docs/domains/architecture/adr/os-005-publish-maven-central-artifact/","tags":"","title":"OS 005: Publish Maven Central Artifacts"},{"body":" OS-005 Publish Artifacts on Public Java Components Repository Date: 2019-05-01\nStatus Implemented\nLinks Supersede: FSM-0002\nContext The tangly open source libraries are mature enough to be used in public commercial and academic projects.\nThe libraries were used in internal projects and refined to fulfill these requirements. More customers will validate the usefulness of the library and identify extensions for further releases.\nWe want to provide a standard and well-known approach for our customers. They shall have access to our libraries through official and well-documented channels.\nDecision The libraries shall be published as artifacts on maven central and be accessible to a wide range of developers and organizations. A website shall be set up to provide an adequate documentation for users.\nThe Technical Documentation will use a static web approach to minimize costs and provide good legibility. All open source components will be hosted on the same site.\nThe libraries will be published on Maven Central to maximize potential usage.\nConsequences We have to establish a publishing process at the company level to deploy signed artifacts to maven central repository. See release and publication process.\nWe have to establish a public website to host the documentation of public-published libraries. The static website is Open Source Components\nWe have to support semantic versioning for all future releases of public-published libraries. See release and publication process.\n","categories":"","description":"","excerpt":" OS-005 Publish Artifacts on Public Java Components Repository Date: 2019-05-01\nStatus Implemented\nLinks Supersede: FSM-0002\nContext The tangly open source libraries are mature enough to be used in …","ref":"/docs/domains/shared/_design/adr/os-005-publish-maven-central-artifact/","tags":"","title":"OS 005: Publish Maven Central Artifacts"},{"body":" OS-006 Dependency Injection with Guice Date: 2018-02-20\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications.\nThese applications often use dependency injection frameworks to construct and initialize their instances. Dependency injection is a technique in which an object receives other objects that it depends on, called dependencies.\nTypically, the receiving object is called a client. The passed-in injected object is called a service. The code that passes the service to the client is called the injector.\nInstead of the client specifying that service it will use, the injector tells the client what service should be used. The injection refers to the passing of a dependency into the client that uses it.\nDecision Guice is selected as a dependency injection framework.\nGuice is one of the industrial standards with Dagger and Sprint DI.\nGuice supports JDK standard @inject annotation used in other dependency frameworks.\nGuice supports the definition of modules to describe dependencies. The modules are also used as a documentation mechanism.\nCare will be taken to allow users to use a different dependency injection framework.\nConsequences A dependency injection module shall be provided for each relevant module.\nHonestly we are not providing the module for our modules. Our applications are quite simple and use a handful of services. This simple solution of a static repository works fine. This approach is muchj simpler to reason about, much faster to start, much easier to debug and to maintain.\npublic final class Services { private Services() {} public static LoginService getLoginService() {} public static ThatService getThatService() {} } Conventions Constructor injection is the preferred mechanism. In the long term, it should be the only approach.\nPlease avoid field injection as an injection approach.\n","categories":"","description":"","excerpt":" OS-006 Dependency Injection with Guice Date: 2018-02-20\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications.\nThese applications …","ref":"/docs/domains/architecture/adr/os-006-dependency-injection-guice/","tags":"","title":"OS 006: Dependency Injection with Guice"},{"body":" OS-006 Dependency Injection with Guice Date: 2018-02-20\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications.\nThese applications often use dependency injection frameworks to construct and initialize their instances. Dependency injection is a technique in which an object receives other objects that it depends on, called dependencies.\nTypically, the receiving object is called a client. The passed-in injected object is called a service. The code that passes the service to the client is called the injector.\nInstead of the client specifying that service it will use, the injector tells the client what service should be used. The injection refers to the passing of a dependency into the client that uses it.\nDecision Guice is selected as a dependency injection framework.\nGuice is one of the industrial standards with Dagger and Sprint DI.\nGuice supports JDK standard @inject annotation used in other dependency frameworks.\nGuice supports the definition of modules to describe dependencies. The modules are also used as a documentation mechanism.\nCare will be taken to allow users to use a different dependency injection framework.\nConsequences A dependency injection module shall be provided for each relevant module.\nHonestly we are not providing the module for our modules. Our applications are quite simple and use a handful of services. This simple solution of a static repository works fine. This approach is muchj simpler to reason about, much faster to start, much easier to debug and to maintain.\npublic final class Services { private Services() {} public static LoginService getLoginService() {} public static ThatService getThatService() {} } Conventions Constructor injection is the preferred mechanism. In the long term, it should be the only approach.\nPlease avoid field injection as an injection approach.\n","categories":"","description":"","excerpt":" OS-006 Dependency Injection with Guice Date: 2018-02-20\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications.\nThese applications …","ref":"/docs/domains/shared/_design/adr/os-006-dependency-injection-guice/","tags":"","title":"OS 006: Dependency Injection with Guice"},{"body":" OS-007: Persistence with MicroStream Date: 2020-11-13\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications. These applications require a reliable and performant persistence approach for their data.\nIn Java, everything is an object. In contrast, all databases come with their own specific data structure that is incompatible with Java objects.\nThis is called impedance mismatch.\nAs a consequence, a mapping is required, which means all data must be converted behind the scenes. Conversions are inefficient, lead to enormous loss of performance and latencies, and are linked to further serious disadvantages.\nDecision MicroStream was selected as persistence approach for the first versions of the ERP solution.\nAlmost no impedance mismatch between the Java application and persistence store.\nAn elegant approach to provide one persistence container for each bounded domain the same application.\nMicroStream has formally announced their software library will be published under an open source license.\nThe library supports current versions of the JDK and all constructs of the language including preview constructs.\nThe support of the company is good. The answers are fast and professional.\nCare will be taken to provide a fallback to another persistence solution if performance or licensing problems occur.\nA huge advantage is the ease of migrating a java model from Microstream to JPA. Experience shows that the effort is often less than five working days [1].\nConsequences Knowledge in MicroStream library [1] must be build-up.\nSoftware design must be slightly adapted to the MicroStream approach.\nA clear separation of data from functions is required.\nLambdas cannot currently be persisted. Therefore, all data containers with lambda variables must either be redesigned or declared as transient.\nWork on a design enabling domain driven design with MicroStream approach.\nThe MicroStream approach supports a very effective way to persist data. The effort to define storage and map Java objects to a persistent representation are minimal. This approach minimizes the costs for this functionality without impeding the quality or completeness of the solution.\nConventions Realm shall have a private data class to store all data to be persisted.\nThe application must generate unique object identifiers. MicroStream does not provide functions in this area.\nUse specialized features of the library to implement Modern Java Constructs ADR.\nLinks [1] MicroStream 4.x\n1. Under the assumption that enough unit and integration tests are available to validate the migrated solution. ","categories":"","description":"","excerpt":" OS-007: Persistence with MicroStream Date: 2020-11-13\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications. These applications …","ref":"/docs/domains/architecture/adr/os-007-persistence-microstream/","tags":"","title":"OS 007: Persistence with MicroStream"},{"body":" OS-007: Persistence with MicroStream Date: 2020-11-13\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications. These applications require a reliable and performant persistence approach for their data.\nIn Java, everything is an object. In contrast, all databases come with their own specific data structure that is incompatible with Java objects.\nThis is called impedance mismatch.\nAs a consequence, a mapping is required, which means all data must be converted behind the scenes. Conversions are inefficient, lead to enormous loss of performance and latencies, and are linked to further serious disadvantages.\nDecision MicroStream was selected as persistence approach for the first versions of the ERP solution.\nAlmost no impedance mismatch between the Java application and persistence store.\nAn elegant approach to provide one persistence container for each bounded domain the same application.\nMicroStream has formally announced their software library will be published under an open source license.\nThe library supports current versions of the JDK and all constructs of the language including preview constructs.\nThe support of the company is good. The answers are fast and professional.\nCare will be taken to provide a fallback to another persistence solution if performance or licensing problems occur.\nA huge advantage is the ease of migrating a java model from Microstream to JPA. Experience shows that the effort is often less than five working days [1].\nConsequences Knowledge in MicroStream library [1] must be build-up.\nSoftware design must be slightly adapted to the MicroStream approach.\nA clear separation of data from functions is required.\nLambdas cannot currently be persisted. Therefore, all data containers with lambda variables must either be redesigned or declared as transient.\nWork on a design enabling domain driven design with MicroStream approach.\nThe MicroStream approach supports a very effective way to persist data. The effort to define storage and map Java objects to a persistent representation are minimal. This approach minimizes the costs for this functionality without impeding the quality or completeness of the solution.\nConventions Realm shall have a private data class to store all data to be persisted.\nThe application must generate unique object identifiers. MicroStream does not provide functions in this area.\nUse specialized features of the library to implement Modern Java Constructs ADR.\nLinks [1] MicroStream 4.x\n1. Under the assumption that enough unit and integration tests are available to validate the migrated solution. ","categories":"","description":"","excerpt":" OS-007: Persistence with MicroStream Date: 2020-11-13\nStatus Implemented\nContext The modules provided as tangly open source components are used in more complex applications. These applications …","ref":"/docs/domains/shared/_design/adr/os-007-persistence-microstream/","tags":"","title":"OS 007: Persistence with MicroStream"},{"body":" OS-008 Use log4j2 as default logging framework Date: 2021-06-15\nStatus Implemented\nContext The logging library slf4j seems to be a dead project for at least one year. The last commit in the GitHub slf4j repository was performed two years ago. Version 2.0 of the library is an alpha release on Maven Central dating back to October 2019.\nThe apache project log4j has made tremendous progress with the creation of the log4j2 library. All features provided in slf4j are now available in log4j2. In particular, the fluent interface, which is only available in the beta version of slf4j is also supported. Additional features are also provided and performance is better than with other logging frameworks.\nThe project is active and under the umbrella of the Apache Foundation. The library uses well-documented Java module names as any modern library shall provide.\nThis situation raises the question to move our application to the apache logging framework. Both APIs are very similar in style and naming. The effort to migrate is quite reasonable. Usually, only the logger declaration needs a modification. The creation of logging records uses exactly the same syntax and calling conventions.\nThe advantage is better integration with an actively supported and developed library.\nDecision All components will be migrated to the log4j2 library [1].\nAll components shall use the fluent interface to write logging records. This decision shall increase the legibility of the source code.\nStaying in a library no more under active development is too dangerous. Closing of security issues and support of current JDK versions are not guaranteed.\nConsequences All source files must be modified to use the new library\nAll logging record creations shall use a fluent interface. As in slf4j, no string concatenation shall happen in log record calls, use the message feature of the library.\nLogging level is specified by using the fluent interface\nNo conditional statements shall be used to bracket logging statements\nExceptions are always stated through the fluent user interface and are not an argument of the log message\nAll Gradle build files shall use the new library. The API is declared as an implementation dependency. The core library is declared as a test or runtime dependency.\nTesting shall be performed to verify correct behavior and correct configuration.\nWe shall explore if trouble arise from used components which are using other logging libraries. The risk is small because it is already existing wehn using slf4j liberary. The difference is only our new preferred library is now the Apache one.\nConfigure slf4j API to use the log4j2 backend to write logging statements. This configuration is important if some of your libraries are using slf4j.\nThe architecture of log4j2 is described in Log4j2 Main Components.\nLearnings The log4j2 community reacted professionally and fast in 2022 to correct a security attack in the library. The update of all libraries and applications with the patched version was done in a few minutes. A gradle plugin was used to infer, which version of the library was used. The continuous implementation and delivery pipeline were used to generate hardened versions.\nA new feature of Gradle supports the definition of dependencies in a central file for all submodules. The project uses libs.version.toml configuration file to unify library usage through all components.\n1. It is sad that such a well-crafted library as slf4j is fading away. We assume that the community actively working on extensions was too small. Ceki Gülcü did a wonderful job to pave the way for modern and efficient logging concepts in the Java world. ","categories":"","description":"","excerpt":" OS-008 Use log4j2 as default logging framework Date: 2021-06-15\nStatus Implemented\nContext The logging library slf4j seems to be a dead project for at least one year. The last commit in the GitHub …","ref":"/docs/domains/architecture/adr/os-008-use-log4j2-as-default-logger/","tags":"","title":"OS 008: Use log4j2 as default logging framework"},{"body":" OS-008 Use log4j2 as default logging framework Date: 2021-06-15\nStatus Implemented\nContext The logging library slf4j seems to be a dead project for at least one year. The last commit in the GitHub slf4j repository was performed two years ago. Version 2.0 of the library is an alpha release on Maven Central dating back to October 2019.\nThe apache project log4j has made tremendous progress with the creation of the log4j2 library. All features provided in slf4j are now available in log4j2. In particular, the fluent interface, which is only available in the beta version of slf4j is also supported. Additional features are also provided and performance is better than with other logging frameworks.\nThe project is active and under the umbrella of the Apache Foundation. The library uses well-documented Java module names as any modern library shall provide.\nThis situation raises the question to move our application to the apache logging framework. Both APIs are very similar in style and naming. The effort to migrate is quite reasonable. Usually, only the logger declaration needs a modification. The creation of logging records uses exactly the same syntax and calling conventions.\nThe advantage is better integration with an actively supported and developed library.\nDecision All components will be migrated to the log4j2 library [1].\nAll components shall use the fluent interface to write logging records. This decision shall increase the legibility of the source code.\nStaying in a library no more under active development is too dangerous. Closing of security issues and support of current JDK versions are not guaranteed.\nConsequences All source files must be modified to use the new library\nAll logging record creations shall use a fluent interface. As in slf4j, no string concatenation shall happen in log record calls, use the message feature of the library.\nLogging level is specified by using the fluent interface\nNo conditional statements shall be used to bracket logging statements\nExceptions are always stated through the fluent user interface and are not an argument of the log message\nAll Gradle build files shall use the new library. The API is declared as an implementation dependency. The core library is declared as a test or runtime dependency.\nTesting shall be performed to verify correct behavior and correct configuration.\nWe shall explore if trouble arise from used components which are using other logging libraries. The risk is small because it is already existing wehn using slf4j liberary. The difference is only our new preferred library is now the Apache one.\nConfigure slf4j API to use the log4j2 backend to write logging statements. This configuration is important if some of your libraries are using slf4j.\nThe architecture of log4j2 is described in Log4j2 Main Components.\nLearnings The log4j2 community reacted professionally and fast in 2022 to correct a security attack in the library. The update of all libraries and applications with the patched version was done in a few minutes. A gradle plugin was used to infer, which version of the library was used. The continuous implementation and delivery pipeline were used to generate hardened versions.\nA new feature of Gradle supports the definition of dependencies in a central file for all submodules. The project uses libs.version.toml configuration file to unify library usage through all components.\n1. It is sad that such a well-crafted library as slf4j is fading away. We assume that the community actively working on extensions was too small. Ceki Gülcü did a wonderful job to pave the way for modern and efficient logging concepts in the Java world. ","categories":"","description":"","excerpt":" OS-008 Use log4j2 as default logging framework Date: 2021-06-15\nStatus Implemented\nContext The logging library slf4j seems to be a dead project for at least one year. The last commit in the GitHub …","ref":"/docs/domains/shared/_design/adr/os-008-use-log4j2-as-default-logger/","tags":"","title":"OS 008: Use log4j2 as default logging framework"},{"body":" OS-009 Use HSQLDB as an SQL store Date: 2022-01-01\nStatus Implemented\nContext Applications regularly need to store information in a persistent store. A proven approach is to use an SQL database solution for such activities. The Java ecosystem supports a relational database with libraries.\nThe JPA approach provides an object relational mapper. The JOOQL approach has a genuine mapping of SQL statements to type verified Java expressions.\nDecision The HSQLDB SQL database java solution is the preferred choice when an application needs to store data in a relational store.\nBeware the preferred persistence mechanism is Microstream.\nConsequences The advantages of the solution are: * A simple java library packaged as a jar file provides all the need functionalities. * The implementation provides an SQL standard compliant solution * the application can embed the database server. This is a preferred approach in domain-driven design solutions. * No runtime license costs are required. The deployment on virtualized and cloud platforms is hugely simplified.\nThe drawbacks are: * Best of breed products such PostgreSQL, Oracle, or SQL server are not preferred solutions. Operations departments have extensive experience with these products but none with HSQLDB. * The size of the database is limited. The current limitation is in the level of tens of terabytes.\n","categories":"","description":"","excerpt":" OS-009 Use HSQLDB as an SQL store Date: 2022-01-01\nStatus Implemented\nContext Applications regularly need to store information in a persistent store. A proven approach is to use an SQL database …","ref":"/docs/domains/architecture/adr/os-009-use-hsqldb-as-sql-store/","tags":"","title":"OS 009: Use HSQLDB as an SQL DB"},{"body":" OS-009 Use HSQLDB as an SQL store Date: 2022-01-01\nStatus Implemented\nContext Applications regularly need to store information in a persistent store. A proven approach is to use an SQL database solution for such activities. The Java ecosystem supports a relational database with libraries.\nThe JPA approach provides an object relational mapper. The JOOQL approach has a genuine mapping of SQL statements to type verified Java expressions.\nDecision The HSQLDB SQL database java solution is the preferred choice when an application needs to store data in a relational store.\nBeware the preferred persistence mechanism is Microstream.\nConsequences The advantages of the solution are: * A simple java library packaged as a jar file provides all the need functionalities. * The implementation provides an SQL standard compliant solution * the application can embed the database server. This is a preferred approach in domain-driven design solutions. * No runtime license costs are required. The deployment on virtualized and cloud platforms is hugely simplified.\nThe drawbacks are: * Best of breed products such PostgreSQL, Oracle, or SQL server are not preferred solutions. Operations departments have extensive experience with these products but none with HSQLDB. * The size of the database is limited. The current limitation is in the level of tens of terabytes.\n","categories":"","description":"","excerpt":" OS-009 Use HSQLDB as an SQL store Date: 2022-01-01\nStatus Implemented\nContext Applications regularly need to store information in a persistent store. A proven approach is to use an SQL database …","ref":"/docs/domains/shared/_design/adr/os-009-use-hsqldb-as-sql-store/","tags":"","title":"OS 009: Use HSQLDB as an SQL DB"},{"body":" Agile and Lean Approaches [Agile Transformation Catalyst](../../blog/2016/what-is-an-agile-company) Agile and Lean Organization Coach Relaunch Your Agile Project Ad-Interim Agile Product Coordinator Senior Coach for Upper Management Agile Digitalization Digitalization of Business Processes Digital and Agile Company Agile Product Development Design Thinking and Lean Startup Agile Product Portfolio Management Empowering Scrum Teams [Scrum Assessment](../../blog/2018/one-way-to-improve-your-scrum-approach) Scaling Agile and Scrum Agile, Scrum and LeSS Coach [Agile Architecture and Refactoring](../../blog/2019/agile-architecture-principles) Pair Programming Collective Code Ownership Agile Product Development Vision, Roadmap and Release Plan Backlog and Story Refinement Story Mapping and Event Storming Value Stream and Visualization Product Owner Mentoring ","categories":"","description":"","excerpt":" Agile and Lean Approaches [Agile Transformation Catalyst](../../blog/2016/what-is-an-agile-company) Agile and Lean Organization Coach Relaunch Your Agile Project Ad-Interim Agile Product Coordinator …","ref":"/expertise/expertise-agile/","tags":"","title":"Agile Expertise"},{"body":" OS-010 Archive Data using TSV and JSON Date: 2022-01-01\nStatus Implemented\nContext Contrary to XML or JSON, TSV is perfectly suited to represent records with the least possible overhead. There are a lot of tools, like spreadsheet editors, which can read and modify TSV files. The file’s size is at the possible minimum, and the performance of the converter is significantly better than with the other formats.\nDecision TSV is the preferred to import data into the application or export information from the solution. The format is also the preferred solution to import data into or export data from the solution.\nConsequences TSV files cannot express complex nested structures. Regular business models are often quite flat and translate well to a set of TSV files.\nWe recommend JSON format for complex nested documents.\nThe solution tangly ERP is a well-constructed solution using TSV format for import and export of bounded domain persistent data.\nThe complex documents defining invoices are exported as imported using a JSON format.\nWe use the Apache Commons CSV Library to parse and write TSV files.\nThe libray functions are good enough for our designs. The library is well-maintained and under Apache 2.0 open source license.\nWe use the JSON Library to parse and write JSON files.\nWe use the JSON Validator Library to validate JSON files against a JSON schema.\n","categories":"","description":"","excerpt":" OS-010 Archive Data using TSV and JSON Date: 2022-01-01\nStatus Implemented\nContext Contrary to XML or JSON, TSV is perfectly suited to represent records with the least possible overhead. There are a …","ref":"/docs/domains/architecture/adr/os-010-archive-data/","tags":"","title":"OS 010: Archive Data using TSV and JSON"},{"body":" OS-010 Archive Data using TSV and JSON Date: 2022-01-01\nStatus Implemented\nContext Contrary to XML or JSON, TSV is perfectly suited to represent records with the least possible overhead. There are a lot of tools, like spreadsheet editors, which can read and modify TSV files. The file’s size is at the possible minimum, and the performance of the converter is significantly better than with the other formats.\nDecision TSV is the preferred to import data into the application or export information from the solution. The format is also the preferred solution to import data into or export data from the solution.\nConsequences TSV files cannot express complex nested structures. Regular business models are often quite flat and translate well to a set of TSV files.\nWe recommend JSON format for complex nested documents.\nThe solution tangly ERP is a well-constructed solution using TSV format for import and export of bounded domain persistent data.\nThe complex documents defining invoices are exported as imported using a JSON format.\nWe use the Apache Commons CSV Library to parse and write TSV files.\nThe libray functions are good enough for our designs. The library is well-maintained and under Apache 2.0 open source license.\nWe use the JSON Library to parse and write JSON files.\nWe use the JSON Validator Library to validate JSON files against a JSON schema.\n","categories":"","description":"","excerpt":" OS-010 Archive Data using TSV and JSON Date: 2022-01-01\nStatus Implemented\nContext Contrary to XML or JSON, TSV is perfectly suited to represent records with the least possible overhead. There are a …","ref":"/docs/domains/shared/_design/adr/os-010-archive-data/","tags":"","title":"OS 010: Archive Data using TSV and JSON"},{"body":" OS-011 Vaadin User Interface Date: 2022-01-01\nStatus Implemented\nContext Our primary and almost exclusive technical stack is Modern Java.\nA major weakness of the Java ecosystem is the user interface aspects. Swing is old and no more actively supported by Oracle or other major players. JavaFX has a small active community. The platform never had huge acceptance.\nWe could use various JavaScript frameworks to realize our user interfaces. The drawback is supporting an additional technology stack. Complexity is added between the Java backend and the TypeScript frontend.\nDecision Our primary approach to realizing user interface is to use Vaadin.\nThe version of Vaadin should be higher than 14.\nVaadin has some impressive aspects:\nUser interface can fully be written in Java.\nMobile first and progressive Web applications are natively supported with all visual components.\nThe solution can be hosed in a docker image.\nUser interface components are based on Web Components and Lit HTML.\nIf desired, you can write user interface components in Typescript and connect them the Vaadin ecosystem.\nA strength of Vaadin has extensive support for migrating legacy Java solutions to a modern Java technical stack.\nConsequences The advantages are:\nJava is our sole technology stack to realize complete applications.\nThe major part of the framework is under Apache 2.0 open source license.\nVaadin applications easily support a few hundreds of active users. If you respect some design considerations, Vaadin applications scale to a few thousands of active users.\nActive community provides additional user interface components.\nWe use the SO-Charts components to draw our charts. The library is a wrapper around the Apache ECharts library. This library provides a huge number of high-quality graphs.\nThe drawback is:\nYou cannot currently write solutions supporting a hundred thousand of parallel users.\nOur market is the creation of management and organization internal applications.\nThese solutions have seldom more than five hundred of parallel users. Therefore, we never had scalabity or performance problems with Vaadin based programs.\n","categories":"","description":"","excerpt":" OS-011 Vaadin User Interface Date: 2022-01-01\nStatus Implemented\nContext Our primary and almost exclusive technical stack is Modern Java.\nA major weakness of the Java ecosystem is the user interface …","ref":"/docs/domains/architecture/adr/os-011-vaadin-as-user-interface/","tags":"","title":"OS 011: Vaadin User Interface"},{"body":" OS-011 Vaadin User Interface Date: 2022-01-01\nStatus Implemented\nContext Our primary and almost exclusive technical stack is Modern Java.\nA major weakness of the Java ecosystem is the user interface aspects. Swing is old and no more actively supported by Oracle or other major players. JavaFX has a small active community. The platform never had huge acceptance.\nWe could use various JavaScript frameworks to realize our user interfaces. The drawback is supporting an additional technology stack. Complexity is added between the Java backend and the TypeScript frontend.\nDecision Our primary approach to realizing user interface is to use Vaadin.\nThe version of Vaadin should be higher than 14.\nVaadin has some impressive aspects:\nUser interface can fully be written in Java.\nMobile first and progressive Web applications are natively supported with all visual components.\nThe solution can be hosed in a docker image.\nUser interface components are based on Web Components and Lit HTML.\nIf desired, you can write user interface components in Typescript and connect them the Vaadin ecosystem.\nA strength of Vaadin has extensive support for migrating legacy Java solutions to a modern Java technical stack.\nConsequences The advantages are:\nJava is our sole technology stack to realize complete applications.\nThe major part of the framework is under Apache 2.0 open source license.\nVaadin applications easily support a few hundreds of active users. If you respect some design considerations, Vaadin applications scale to a few thousands of active users.\nActive community provides additional user interface components.\nWe use the SO-Charts components to draw our charts. The library is a wrapper around the Apache ECharts library. This library provides a huge number of high-quality graphs.\nThe drawback is:\nYou cannot currently write solutions supporting a hundred thousand of parallel users.\nOur market is the creation of management and organization internal applications.\nThese solutions have seldom more than five hundred of parallel users. Therefore, we never had scalabity or performance problems with Vaadin based programs.\n","categories":"","description":"","excerpt":" OS-011 Vaadin User Interface Date: 2022-01-01\nStatus Implemented\nContext Our primary and almost exclusive technical stack is Modern Java.\nA major weakness of the Java ecosystem is the user interface …","ref":"/docs/domains/shared/_design/adr/os-011-vaadin-as-user-interface/","tags":"","title":"OS 011: Vaadin User Interface"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/bdd/","tags":"","title":"BDD - Behavior Driven Development"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/agile/","tags":"","title":"Agile - Agile Bounded Domain"},{"body":" Finite State Machines Below different formats to document automatically a finite state machine description.\nThe nicest diagrams are often produced through PlantUML. Sometimes you must tinker with the declaration order of the state to improve the layout result.\nFinite State Machine bbv fsm-bbv States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nOff\nRoot\nfalse\ntrue\nfalse\nEntry action of Off state\nExitOffstate\nMaintenance\nRoot\nfalse\nfalse\nfalse\nOn\nRoot\nfalse\nfalse\ntrue\nFM\nOn\nfalse\nfalse\ntrue\nentryFM\nexitFM\nDAB\nOn\nfalse\ntrue\nfalse\nPlay\nFM\nfalse\ntrue\nfalse\nentryPlay\nexitPlay\nAutoTune\nFM\nfalse\nfalse\nfalse\nfsm-bbv Transitions Start State End State Description Local Guard Action Off\nMaintenance\nOff → TogglePower\nfalse\nMaintenance is On\nlog transition Off to Maintenance\nOff\nOn\nOff → On\nfalse\nMaintenance Off\nOfftoOn\nMaintenance\nOff\nMaintenance → Off\nfalse\nMaintainedtoOff\nOn\nOff\nTogglePower → On\nfalse\nOntoOff\nFM\nDAB\nFM → DAB\nfalse\nFMtoDAB\nDAB\nDAB\nDAB → DAB\ntrue\nDAB\nFM\nDAB → FM\nfalse\nDABtoFM\nPlay\nPlay\nPlay → Play\ntrue\nPlay\nAutoTune\nPlay → AutoTune\nfalse\nPlaytoAutoTune\nAutoTune\nPlay\nAutoTune → Play\nfalse\nAutoTunetoPlay\nGraphical Representation with dot Graphical Representation with PlantUml Graphical Representation with mermaid Graphical Representation with State Machine Cat Finite State Machine Test Below different formats to document automatically a finite state machine description.\nfsm-test States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nA\nRoot\nState A\nfalse\ntrue\ntrue\n-\n-\nAA\nA\nState AA\nfalse\ntrue\nfalse\n-\n-\nAB\nA\nState AB\nfalse\nfalse\nfalse\n-\n-\nB\nRoot\nfalse\nfalse\ntrue\n-\n-\nBA\nB\nState BA\nfalse\nfalse\nfalse\n-\n-\nBB\nB\nState BB\nfalse\ntrue\nfalse\n-\n-\nC\nRoot\ntrue\nfalse\nfalse\n-\n-\nfsm-test Transitions Start State End State Description Local Guard Action A\nC\nA → C when A_C\nfalse\nAA\nAA\nLocal transition AA → AA when (AA_AA)\ntrue\nAA\nAB\nAA → AB when AA_AB\nfalse\nAA\nB\nAA → B when AA_B\nfalse\nAA\nBB\nAA → BB when (AA_BB)\nfalse\nAB\nAA\nAB → AA when AB_AA\nfalse\nAB\nAB\nAB → AB when AB_AB\nfalse\nB\nC\nB → C when B_C\nfalse\nBA\nA\nBA → A when BA_C\nfalse\nBA\nBB\nBA → BB when BA_BB\nfalse\nBB\nBB\nLocal transition BB → BB when BB_BB\ntrue\nBB\nBA\nfalse\nVV → BA when BB_BA\nBB\nC\nBB → C when BB_C\nfalse\nGraphical Representation with dot Graphical Representation with PlantUml Graphical Representation with mermaid Graphical Representation with State Machine Cat Finite State Machine Washer Below different formats to document automatically a finite state machine description.\nfsm-washer States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nRunning\nRoot\nRunning State\nfalse\ntrue\ntrue\n-\n-\nEnd\nRoot\nState End\ntrue\nfalse\nfalse\n-\n-\nWashing\nRunning\nWashing State\nfalse\ntrue\nfalse\n-\n-\nRinsing\nRunning\nRising State\nfalse\nfalse\nfalse\n-\n-\nDrying\nRunning\nDrying State\ntrue\nfalse\nfalse\n-\n-\nPowerOff\nRoot\nPowerOff State\nfalse\nfalse\nfalse\n-\n-\nfsm-washer Transitions Start State End State Description Local Guard Action Running\nEnd\nRunning → End\nfalse\nRunning\nPowerOff\nRunning → PowerOff\nfalse\nWashing\nRinsing\nWashing → Rinsing\nfalse\nRinsing\nDrying\nRinsing → Drying\nfalse\nPowerOff\nRunning\nPowerOff → Running\nfalse\nGraphical Representation with dot Graphical Representation with PlantUml Graphical Representation with mermaid Graphical Representation with State Machine Cat ","categories":"","description":"","excerpt":" Finite State Machines Below different formats to document automatically a finite state machine description.\nThe nicest diagrams are often produced through PlantUML. Sometimes you must tinker with the …","ref":"/docs/fsm/examples/fsm-tests/","tags":"","title":"FSM tests"},{"body":" Purpose A behavior-driven development library that provides a custom extension based on the JUnit 5 Jupiter Extension Model. This library can be used to create and run stories and behaviors as BDD specification tests.\nThe library is a developer-first approach. Developers write acceptance tests to validate the functions they have implemented. The generated report provides a living documentation of the features and allows customers to validate the acceptance criteria.\nThe library is compact and integrated with JUnit 5 without disrupting TDD approaches and continuous integration pipelines.\nDownload and Documentation You need to add JUnit 5 dependencies before using this library. If you are using Maven or Gradle, add the following dependency after declaring the JUnit 5 dependency. We recommend using assertJ assertion library to write more legible conditions.\nThe library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003ebdd\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\ntestImplementation \"net.tangly:bdd:0.2.7\" The documentation can be found under BDD documentation.\nFor any further questions, you can use the forum tangly-Discussions.\nAn overall article is available under Behavior Driven Design.\n","categories":"","description":"","excerpt":" Purpose A behavior-driven development library that provides a custom extension based on the JUnit 5 Jupiter Extension Model. This library can be used to create and run stories and behaviors as BDD …","ref":"/docs/bdd/readme/","tags":"","title":"Readme"},{"body":" Purpose A behavior-driven development library that provides a custom extension based on the JUnit 5 Jupiter Extension Model. This library can be used to create and run stories and behaviors as BDD specification tests.\nThe library is a developer-first approach. Developers write acceptance tests to validate the functions they have implemented. The generated report provides a living documentation of the features and allows customers to validate the acceptance criteria.\nThe library is compact and integrated with JUnit 5 without disrupting TDD approaches and continuous integration pipelines.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003ecommons\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly:commons:0.2.7\" The documentation can be found under Commons documentation.\nFor any further questions, you can use the forum tangly-Discussions.\n","categories":"","description":"","excerpt":" Purpose A behavior-driven development library that provides a custom extension based on the JUnit 5 Jupiter Extension Model. This library can be used to create and run stories and behaviors as BDD …","ref":"/docs/commons/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly core component provides a key abstraction for domain-driven development approach and entities with tags and comments. It requires Java 17 or higher.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003ecore\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly:core:0.2.7\" The documentation can be found under Core.\n","categories":"","description":"","excerpt":" Purpose The tangly core component provides a key abstraction for domain-driven development approach and entities with tags and comments. It requires Java 17 or higher.\nDownload and Documentation The …","ref":"/docs/core/readme/","tags":"","title":"Readme"},{"body":" Purpose Download and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003edev\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly:dev:0.2.7\" The documentation can be found under Commons documentation\nFor any further questions, you can use the forum tangly-Discussions.\n","categories":"","description":"","excerpt":" Purpose Download and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003edev\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library …","ref":"/docs/dev/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp agile bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003ecollaborators\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly.erp:collaborators:0.2.7\" The documentation can be found under Business documentation.\n","categories":"","description":"","excerpt":" Purpose The tangly erp agile bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or …","ref":"/docs/domains/agile/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp collaborators bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003ecollaborators\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly.erp:collaborators:0.2.7\" The documentation can be found under Business documentation.\nFor any further questions, you can use the forum tangly-Discussions.\nContribution You are welcome to contribute to the product with pull requests on Bitbucket.You can download the source files from the bitbucket git repository and build the library with the provided gradle configuration file.\nIf you find a bug or want to request a feature, please use the issue tracker.\nLicense The source code is licensed under Apache license 2.0.\nThe documentation and examples are licensed under Creative Common (CC Attribution 4.0 International).\nAwesome Sponsors and Developers Corporate sponsors are\ntangly llc\nIndividual developers are\nMarcel Baumann\n","categories":"","description":"","excerpt":" Purpose The tangly erp collaborators bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java …","ref":"/docs/domains/collaborators/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp crm bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003ecrm\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly.erp:crm:0.2.7\" The documentation can be found under Business documentation.\nFor any further questions, you can use the forum tangly-Discussions.\nContribution You are welcome to contribute to the product with pull requests on Bitbucket.You can download the source files from the bitbucket git repository and build the library with the provided gradle configuration file.\nIf you find a bug or want to request a feature, please use the issue tracker.\nLicense The source code is licensed under Apache license 2.0.\nThe documentation and examples are licensed under Creative Common (CC Attribution 4.0 International).\nAwesome Sponsors and Developers Corporate sponsors are\ntangly llc\nIndividual developers are\nMarcel Baumann\n","categories":"","description":"","excerpt":" Purpose The tangly erp crm bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or …","ref":"/docs/domains/crm/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp invoices bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003einvoices\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly.erp:invoices:0.2.7\" The documentation can be found under Business documentation.\n","categories":"","description":"","excerpt":" Purpose The tangly erp invoices bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or …","ref":"/docs/domains/invoices/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp crm bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003ecrm\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly.erp:crm:0.2.7\" The documentation can be found under Business documentation.\n","categories":"","description":"","excerpt":" Purpose The tangly erp crm bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or …","ref":"/docs/domains/ledger/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp products bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003eproducts\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly.erp:products:0.2.7\" The documentation can be found under Business documentation.\n","categories":"","description":"","excerpt":" Purpose The tangly erp products bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or …","ref":"/docs/domains/products/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp shared bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003eshared\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly.erp:shared:0.2.7\" The documentation can be found under Business documentation.\n","categories":"","description":"","excerpt":" Purpose The tangly erp shared bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or …","ref":"/docs/domains/shared/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly erp ui bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or higher.\nTry it out.\nDownload and Documentation Include the library in your Maven configuration as:\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly.erp\u003c/groupId\u003e \u003cartifactId\u003eui\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e Include the library in your Gradle configuration as:\nimplementation \"net.tangly.erp:ui:0.2.7\" The documentation can be found under Business documentation.\nFor any further questions, you can use the forum tangly-Discussions.\nRun as an Application Run Locally with Gradle The gradle script compiles, packages, and runs the application with an embedded web server. Run from the project root.\ngradle run Run locally as compiled application You can build and run the generated Java Vaadin application locally. Run from the project root.\n./gradlew build installDist -Pvaadin.productionMode (1) net.tangly.erp.ui/build/install/net.tangly.erp.ui/bin/net.tangly.erp.ui (2) Run locally as fatjar application You can build and run the generated Java Vaadin application as fat jar locally. Run from the project root.\n./gradlew build installShadowDist -Pvaadin.productionMode (3) net.tangly.erp.ui/build/install/net.tangly.erp.ui-shadow/bin/net.tangly.erp.ui (2) java $JVM_OPTS -jar net.tangly.erp.ui/build/install/net.tangly.erp.ui-shadow/lib/net.tangly.erp.ui-all.jar (3) \u003c1\u003e The production mode parameter is mandatory. Otherwise, the distribution frontend is not built, and the application cannot run without JavaScript build tools.\n\u003c2\u003e Head to http://localhost:8080/erp/. The default port is 8080, and the application starts with in-memory storage. The environment variables are set in the run script.\n\u003c3\u003e Start the application with java command. You are responsible to provide the JVM options as define below.\nThe JVM options to run the application are\nJVM_OPTS=\"--enable-preview --add-exports=java.base/jdk.internal.misc=ALL_UNNAMED \\ --add-opens=java.base/jdk.internal.misc=ALL-UNNAMED -XX:+ShowCodeDetailsInExceptionMessages -Xmx256m\" Run in a Docker Image The prerequisite is that the application was built locally for production mode as described above. The first step is to build the Docker image with the provided configuration. Run from the project root.\n./gradlew net.tangly.erp.ui:installDist -Pvaadin.productionMode (1) docker login -u tanglyllc -p \u003cpassword\u003e (2) docker build -t tanglyllc/tangly-erp:latest net.tangly.erp.ui/ (3) docker push tanglyllc/tangly-erp:latest (4) 1 Build the Java application and create a binary distribution of the application. 2 Login into DockerHub with username and password. 3 Generate a Docker image containing the binary application generated in the previous step. 4 Push the Docker image to the repository. Customers can retrieve the published Docker image and execute it in a container. We currently push to Docker Hub repository. The image is accessible unde tangly-erp Docker Image.\nTo run the built image use the following commands.\ndocker run --rm -ti -p 8080:8080 -e PORT=8080 -e m=true -v /var/tangly-erp:/var/tangly-erp tanglyllc/tangly-erp:latest The user under which the erp application shall not have root privileges.\nThe port of the application is configured through the port environment variable. This approach is mandatory if the image is deployed in Heroku.\nRun in the Cloud The deployment on the Heroku cloud was removed due to changes in the usage conditions of the platform.\nTherefore, we do not deploy anymore our applications on Heroku.\n","categories":"","description":"","excerpt":" Purpose The tangly erp ui bounded domain component provides regular business model abstractions for business applications written in Java. The component is using records and requires Java 17 or …","ref":"/docs/domains/ui/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly fsm is a finite state machine library. You can use it in productive projects and academic assignments. The component is using records and requires Java 17 or higher.\nThe library provides\nDefinition of hierarchical state machine descriptions. The machine states and transitions are generic classes. You provide an enumeration for the set of states, and an enumeration for the set of events triggering the machine. The builder pattern is used to create complex state machine definition declaratively,\nBuilder approach to construct finite state machine declaration being either classical state machines or hierarchical state machines\nLambda expressions based on standard API functional interfaces are used for guards and actions\nGuard are bi-predicate lambda expressions with the context and event as parameters\nActions are bi-function lambda expressions with the context and event as parameters\nA runtime engine processing events on a finite state machine description. Multiple instances of the same description can be instantiated. The class owning the state machine is passed as context to all guards and actions,\nSupport classes to implement listeners and logging are provided.\nDocumentation helper can generate a graphical representation of a state machine using the graph dot language. Various output formats are supported\nTable representation\nDot graph representation\nPlantUML UML finite hierarchical state machine representation\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003efsm\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly:fsm:0.2.7\" The documentation can be found under FSM documentation.\nFor any further questions, you can use the forum tangly-Discussions.\nContribution The library can be built with Gradle\ngradle build ","categories":"","description":"","excerpt":" Purpose The tangly fsm is a finite state machine library. You can use it in productive projects and academic assignments. The component is using records and requires Java 17 or higher.\nThe library …","ref":"/docs/fsm/readme/","tags":"","title":"Readme"},{"body":" Purpose Download and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003egleam\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly:gleam:0.2.7\" The documentation can be found under Commons documentation.\n","categories":"","description":"","excerpt":" Purpose Download and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003egleam\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library …","ref":"/docs/gleam/readme/","tags":"","title":"Readme"},{"body":" Purpose The tangly ui erp component provides a Vaadin based user interfaces for enterprise applications written in Java. The component is using records and requires Java 17 or higher.\nCurrently, we are moving at the bleeding edge of our components. Therefore, to build and execute the ERP application, please do:\nmvn jetty:run The initial username and password are 'administrator' and 'aeon'.\nThe file application.properties in …/main/resources directory tailors the configuration of the application, mainly the location of data. The file contains comments for new users.\nThe Maven POM file is used to build the application and run it because the Gradle Jetty plugin crashes.\nDownload and Documentation The library can be included in Maven as\n\u003cdependency\u003e \u003cgroupId\u003enet.tangly\u003c/groupId\u003e \u003cartifactId\u003eui\u003c/artifactId\u003e \u003cversion\u003e0.2.7\u003c/version\u003e \u003c/dependency\u003e The library can be included in Gradle as\nimplementation \"net.tangly:ui:0.2.7\" The documentation can be found under UI documentation.\nFor any further questions, you can use the forum tangly-Discussions.\nContribution You are welcome to contribute to the product with pull requests on Bitbucket. You can download the source files from the bitbucket git repository and build the library with the provided gradle configuration file.\nIf you find a bug or want to request a feature, please use the issue tracker.\nLicense The source code is licensed under Apache license 2.0.\nThe documentation and examples are licensed under Creative Common (CC Attribution 4.0 International).\nAwesome Sponsors and Developers Corporate sponsors are\ntangly llc\nIndividual developers are\nMarcel Baumann\n","categories":"","description":"","excerpt":" Purpose The tangly ui erp component provides a Vaadin based user interfaces for enterprise applications written in Java. The component is using records and requires Java 17 or higher.\nCurrently, we …","ref":"/docs/ui/readme/","tags":"","title":"Readme"},{"body":" Evolvable Architectures Every product is unique and needs a tailored architecture. The goal is to identify an architecture that evolves with new requirements and constraints. Constraints are new technologies, regulatory changes or improvements in reliability and scalability.\nTransform the architecture to a more modular solution Validate continuously the design against the requirements Identify and automate fitness functions to verify constraints Move from a monolithic to a service architecture Domain-Driven Development Agile cross-functional teams implement and deliver features to the customers. We have extensive experience defining architectures, empowering multiple teams to work on the same product and implement effectively and efficiently new features.\nImplement domain-driven development and architecture Use event storming to identify domain ubiquitous language Establish DDD as an architectural approach to microservice solutions Identify bounded contexts to promote parallel development Clean Code and Refactoring Successful products outlive their initial development teams and selected technologies. We must implement approaches to ensure the source code and architecture provide a sound foundation for long-term support and product support.\nCreate a clean code culture and promote software craftsmanship Show how static analysis tools are a lifesaver to improve the quality of code Detect errors, vulnerabilities and smells Use refactoring patterns Establish test-driven development - TDD - Establish acceptance test-driven development - ATDD - DevOps Lean approach encourages reducing cycle time. DevOps provides an optimal approach to deliver rapidly and with high-quality applications in production.\nYou build it, you deploy it, you run it Optimise cycle time and lead time in your product development Institute configuration as code Implement continuous integration, delivery and deployment pipelines Establish automatic validation and verification Deploy tracing, logging and monitoring ","categories":"","description":"Methods and tools to define and implement agile architecture in software-based products","excerpt":"Methods and tools to define and implement agile architecture in software-based products","ref":"/expertise/expertise-technical/agile-architecture/","tags":"","title":"Agile Architecture"},{"body":" Digital Delivery Our Scrum Masters and agile coaches help organizations develop a foundation of Scrum good practices and grow the internal expertise needed to become a true learning organization.\nTeach Scrum, Kanban on the job Formulate a vision, a roadmap, a release plan and act on Create a team contract and definition of done DoD Continuously improve team effectiveness Growth your Scrum masters and product owners to high performers Agile Techniques Expertly trained agile and Scrum teams are critical to your company’s business agility. Our intensive workshops will help your agile teams become highly effective.\nNurture high-performance teams Establish a DevOps culture Merge agile teams and software craftsmanship techniques Help your Scrum masters and product owners become talented change agents Define work approaches between agile teams and the organization Scaling Agile We accompany your organization to implement agile through the whole product development cycle. Multiple agile teams develop and effectively deliver products. Leadership teams learn how you deliver twice the work in half the time.\nIdentify efficient coordination ways between teams Install a requirement organization for multiple teams with the area product owner Deliver multi-team applications of high quality and often Promote a learning culture Agile Organizational Design We help you design an agile process that fits your needs. We focus on sharpening your vision and delivering quick changes that bring quick results. We give you the support you need — but not more than you want.\nProvide kick-off workshops Deliver role-based coaching Perform health checks ","categories":"","description":"Agile approaches and techniques to upgrade your process and organization to a more agile way of working","excerpt":"Agile approaches and techniques to upgrade your process and organization to a more agile way of working","ref":"/expertise/expertise-agile/agile-organizations/","tags":"","title":"Agile Organizations"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/commons/","tags":"","title":"Commons - Common utility libraries"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/apps/","tags":"","title":"Applications - Apps Bounded Domain"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/collaborators/","tags":"","title":"Collaborators - Collaborators Bounded Domain"},{"body":"\nThe current released components are written in Java and released on Maven Central. The code uses modern Java constructs and requires the current released JDK.\nThe general components are:\nBDD Behavior Driven Design Test Library based on JUnit 5, COMMONS Internal Common Components to write company internal applications, CORE Core components for domain driven design approaches, DEV Development utilities for software developers and designers, FSM Finite State Machine, GLEAM declarative model definition library, UI Vaadin based user interface. The ERP related components are\nAgile Agile domain model Collaborators Collaborators domain model Customer Relationships Management CRM Customer relationships management domain model Invoices Invoices domain model Ledger Ledger domain model Products Products domain model Shared Shared domain model ERP User Interface Vaadin Vaadin ERP user interface ","categories":"","description":"","excerpt":"\nThe current released components are written in Java and released on Maven Central. The code uses modern Java constructs and requires the current released JDK.\nThe general components are:\nBDD Behavior …","ref":"/docs/","tags":"","title":"Documentation"},{"body":" Commons UI Library Change Logs This document provides a high-level view of the changes introduced in Common UI library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) Improvements CRM analytics are provided to have an analytics reporting of key indicators\nSupport for localized invoice generation and support of CHF and EUR as currency\nUpgrade to Vaadin 19\nProvides full run and debug mode through IntelliJ IDEA and gradle. Removed all dependencies to maven.\nProvides embedded Jetty standalone mode for production deployment\n0.2.4 (2020-06-30) Improvements Initial release of the library\n","categories":"","description":"","excerpt":" Commons UI Library Change Logs This document provides a high-level view of the changes introduced in Common UI library by release. For a detailed view of what has changed, refer to the repository …","ref":"/docs/ui/releasesnotes/","tags":"","title":"Release Notes"},{"body":" Agile Architecture Principles You are applying the agile and lean approach to your software products development. Your teams use Scrum or Kanban to deliver running software at least every two weeks. The product launch is a tremendous success. You will likely sell the solution for the next ten years.\nHow shall you define and nurture the software architecture of your product and insure a long living and high-quality solution? The experts tell you the design is emergent. What does it mean?\nThere are 10 types of people: those who understand binary, and those who do not.\n— Anonymous LeSS Architecture Observations The Large-Scaled Scrum LeSS authors have written quite a few interesting statements about software design and architecture. Their opinionated observations are true for any software product. It is irrelevant if the product was developed using agile approaches or traditional older ones.\nThe sum of the source code is the true design blueprint or software architecture.\nThe real software architecture evolves (better or worse) every day of the product, as people are programming.\nThe real living architecture needs to be grown every day through acts of programming by master programmers.\nA software architect who is not in touch with the evolving source code of the product is out of touch with reality.\nEvery programmer is some kind of architect — whether wanted or not. Every act of programming is some kind of architectural act — good or bad, small or large, intended or not.\nAgile architecture comes from the behavior of agile architecting.\nHands-on master-programmer architects are key for resilient systems; avoid PowerPoint architects no writing any source code.\nA culture of excellence in code and professionalism for the developers.\nAn emphasis on pair-programming coaching for high-quality code and design.\nAgile modeling design workshops using collaborative peer approaches.\nTest-driven development and refactoring [1] to continuously and aggressively remove technical debt.\nAnd other hands-on-the-code and good practice behaviors.\nThese statements reflect the agile and modern approach to software design and architecture. The Open Group also recognized these changes and is trying to modernize enterprise architecture approaches and their de facto standard TOGAF.\nMajor agile companies such as Google, Twitter, Amazon, and Apple do not have a formal enterprise architecture organization. They delegate most of the decisions to senior development teams. Communities of practice are a tried and proven approach to align groups and disseminate knowledge.\nQuality of Your Architecture You shall measure the adequacy and quality of your design and create software artifacts. Avoid opinions and collect empirical data. The scientific approach is key for professionalism.\nUse the findings to improve through small experiments.[1]\nStatic analysis tools: validate your source code against good practice rules,\nSonarLint, SonarCloud, Spotbugs, PMD, Checkstyle\nTest driven development: validate your design with TDD.\nJunit5, AssertJ, Mockito\nAcceptance test driven development - validate your functional requirements with ATDD -.\nJBehave, tangly llc BDD\nFitness functions: validate your non-functional requirements automatically.\nMicro Profile, VisualVM, ELK\nPair programming: improve the produced artifacts through the wisdom of the crowd.\nNo tools, it is a practice\nPair review and pull requests: validate your developers' work.\nGithub, GitLab, Bitbucket, IntelliJ IDEA Git Pull Support.\nThe above validation activities shall always be backed through tools and integrated in your continuous delivery pipeline. Beware these tools can only detect non-quality and never provide a proof you achieved your expected quality. Qualified and experienced engineers are your best guaranty to achieve and sustain high quality in architecture and software products.\nImplement the above measures to gather data and publish the actual state of your source code. You find more advanced approaches in Code Scene as Crime Scene, SonarLint for the Impatient, and Pragmatic Craftsmanship articles.\nRead the LeSS architecture page for a comprehensive discussion of agile architecting.\nGood versus bad architecture A good architecture fulfills the functional and non-functional specifications and is easy to modify. It shall emerge during the development of releases and intentionally implement the known requirements. Your architects are talented developers and are full members of your Scrum teams.\nThe key for professional software development is good teams. Your development team members are\nExpert in the used programming languages and technology stacks,\nUnderstand object-oriented, functional and rule-based programming.\nKnown all major patterns and idioms of the used development stack.\nPractice TDD, ATDD, clean code, refactoring.\nEmbrace continuous integration CI, continuous delivery CD, continuous development CD.\nAutomate everything and establish DevOps.\nJenkins, bitbucket pipeline\nStudy source code from open source projects to learn better ways.\nKnow SMART, INVEST, SOLID, KISS, YAGNI.\nhold weekly design workshops with huge whiteboards.\nUse domain driven design [2, 3, 4] and event storming.\nAvoid BDUF.\nYou shall keep it simple, make it valuable, and build it piece by piece.\nThe above hints and practices shall empower your teams to practice successfully agile architecture and timely deliver delightful software solutions. Your organization shall train your collaborators, see also Shu Ha Ri model. Smart money goes in training your collaborators.\nAgile Code is Clean Code You are applying the agile and lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software at least every two weeks.\nTo create an agile architecture, you must write worthy agile code. Agile code is always clean code. Never compromise on your key strategic asset, the source code of your product. Your source code and your data are strategic advantages for your company. Start early writing clean code, do it continuously and soon your code will be clean, legible and free of defects.\nArchitecture versus Code Be honest. Having a huge class with thousands of lines plainly demonstrates that your organization worked unprofessionally over months in the past. Such monsters are not born over a night coding session or a weekend hack session. It takes time and unwavering incompetence to create such maintenance nightmares.\nAnd as long as your product contains such code monsters, it is worthless to pretend to have a nice and thought through architecture. Team discipline and early warning systems are the key to avoiding such blunders and killing the monster in the egg.\nClean Code and Refactoring The clean code test driven development TDD approach to write code was defined last millennium. Professional developers adopted long ago this approach to deliver high quality, legible and maintainable code artifacts.\nAlways leave the code you are editing a little better than you found it.\n— Robert C. Martin Red - Write a test and run it, validating the test harness. I recommend acceptance tests and unit tests.\nGreen - Write the minimum amount of code to implement the functionality validated in the previously developed test. Update the code and run the tests until the test suite shows successful execution.\nRefactor the code to reach clean code level. Use static analysis tools to achieve faster and better success.\nContinuously run the tests for guaranty compliant changes. So you avoid any regression problem. Good practice is to integrate the test suite execution in a continuous integration pipeline.\nIf you are a Java developer, you will:\nUse JUnit 5 and Mockito 2 to implement the first step. Evaluate AssertJ to write more legible conditions.\nUse a powerful IDE such an IntelliJ IDEA to write and enhance functional code.\nUse tools such as SonarLint, Jacoco, Spotbugs, ArchUnit to refactor your functional code and test cases.\nClean code applies to productive and test code.\nThe described approach has good practice since the beginning of this millennium.\nJUnit 4 is obsolete. Stop writing unit tests with JUnit 4. Junit 5 was released in 2017 and provides modern features and is the official and undisputed successor of JUnit 4.\nAll above mentioned tools are open source and free to use. Your organization has no excuse to write crap code.\nJust write well engineered, legible and maintainable source code. It is a matter of discipline. It is also a prerequisite to agile architecture.\nYou as a developer have no excuse to write crap code. You are a professional developer, behave like one.\nSlaves are not allowed to say no. Laborers may be hesitant to say no. But professionals are expected to say no. Indeed, good managers crave someone who has the guts to say no. It’s the only way you can really get anything done.\n— Robert C. Martin The Clean Coder: A Code of Conduct for Professional Programmers Acceptance Test Driven Development How do you know what are the requirements of a specific feature? Either write a huge amount of outdated documentation or find a better way. The better way is acceptance test driven development ATDD.\nFor each feature, you need acceptance criteria; this approach is also called specification by example.\nFor each acceptance criteria write an acceptance test which is executed each time the application is updated in the continuous delivery pipeline. Therefore, the acceptance tests are the living documentation of the product behavior.\nThe cost of automating acceptance tests is so small in comparison to the cost of executing manual test plans that it makes no economic sense to write scripts for humans to execute.\n— Robert C. Martin The Clean Coder: A Code of Conduct for Professional Programmers To implement this approach, you need:\nAcceptance criteria formulated for each functionality. It implies specifications by example – you need to train your business analysts and article owners.\nCucumber for Java (or equivalent tools) – to write acceptance tests.\nMock all external systems and the database – to have fast building and test time and avoid external dependencies.\nA continuous build and delivery pipeline to automatically run your acceptance validation tests upon each application change,\nAvoid user interface tests – because they are slow and brittle.\nUse an in-memory database only if you have to – they are a fast solution to write acceptance tests but are intrinsically slower than mocks.\nNever access file on the disk or use a database writing to a disk inside tests. This approach is way too slow and destroy fast continuous integration cycles.\nYou can put your file system is memory with jimfs. Use for example hsqldb for the in-memory database and flywaydb to set up the database tables.\nCode Sociology Any fool can write a code that a computer can understand. Good programmers write code that humans can understand.\n— Martin Fowler Simple engineering practices are the most powerful ones. Practice consolidates changes in behavior of your development organization. Exercising new approaches enforces culture change and implicit modify the organization approaches.\nPair Programming - is a training on the job and crowd wisdom approach to steadily improving knowledge and quality. *TDD and ATDD - are safety net to guaranty quality attributes in your source code\\.\nDevOps starting with git, docker, continuous integration, delivery and deployment – to speed up development and eliminate tedious manual errors.\nLack of accountability equates to lack of trust. — your teams are accountable for the quality of your product, and you should trust them.\nCulture change is often necessary. Autonomy and accountability are harsh mistresses.\nWhat would happen if you allowed a bug to slip through a module, and it cost your company $10,000? The nonprofessional would shrug his shoulders, say “stuff happens,” and start writing the next module. The professional would write the company a check for $10,000!”\n— Robert C. Martin The Clean Coder: A Code of Conduct for Professional Programmers Once good practices are established, you can move to more sophisticated tools, such as git history code analysis – to uncover weaknesses in your development department.\nTeams ready to learn from the like of Google could evaluate Trunk Based Development and consider long-lived branches as waste. An extensive description of the advantages can be found in the article branching patterns from Martin Fowler.\nCode Review A code review can be done in different ways. Many teams use GitHub, Bitbucket or GitLab. A very common approach for code reviews is pull requests. However, there are situations where pull requests are not necessary. Different approaches are more cost-effective and have better cycle time.\nFor example, if a feature is implemented through pair programming or mob programming it is a fact that the code is already reviewed while it is written. We decided that it does not have to be reviewed again, but, of course, everybody may look at the commits later on in GitHub and add comments.\nAs a rule of thumb we agreed that every line of code has to be approved by at least one other developer before it is pushed into our master branch.\nPull Requests in Trunk-Based Development In trunk-based development it is different. Since we want to merge our commits into the master branch as quickly as possible, we cannot wait until the complete feature is finished. Unlike in the original trunk based development approach we still use feature branches, but we have much less divergence from the master branch than in Git Flow. We create a pull request as soon as the first commit is pushed into the feature branch. Of course that requires that no commit breaks anything or causes tests to fail. Remember that unfinished features can always be disabled with feature toggles.\nNow, with part of the new feature committed and the pull request created, another developer from the team can review it. In most cases, that does not happen immediately because the developers don’t want to interrupt their work every time a team member pushes a commit. Instead, the code reviews are done when another developer is open for it. Meanwhile, the pull request might grow by a few commits.\nThe code is not always reviewed immediately after the commit but in most cases it reaches the master branch much quicker than in Git Flow.\nAgile Architecture within Scrum You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks.\nAgile architecture is a key element to improve the quality of your product and reduce cycle time of your application outcomes.\nYour journey toward greater business agility starts by identifying what outcomes are most important to your company’s success. A key component is to find out how to create great architecture within the Scrum framework.\nWhat Is Agile Architecture? An agile architecture shall have four characteristics.\nAllow change quickly - because we cannot foreseen the future -.\nAlways verifiable - because we want changes without impeding integrity -.\nSupport rapid development - because we want effective and efficient implementation of new features.\nAlways working - because we want continuous deployment to have customers' feedback - These characteristics are essential for successful agile development of great software products.\nWhat Is The Scrum Approach? Scrum is silent how architecture shall be performed during sprints. We can use the Scrum values, the Scrum guide and the agile manifesto. Do not forget the agile manifesto twelve principles to infer how to apply agile architecture.\nThe architect shall be part of the Scrum development team. This is the most embedded way an architect would fit into a Scrum team. It may not even be an individual who has the title of an architect. The big idea behind Scrum teams is that team members have different skills. Their roles may change to deliver what is required for a particular sprint.\nSo it could be that senior developers within the team got architecture skills, or are in the best position, or have the best knowledge, to make those architectural decisions. Those team members with architectural skills are involved in the sprint on a day-to-day basis. They attend the daily Scrum meetings, take items off the backlog, and work on them.\nInterestingly LeSS is more opinionated and describe successful approaches for agile architecture and design.\nHow Do You Perform Agile Design? Scrum is silent about technical practices. The Scrum fathers and community strongly emphasize adopting eXtreme Programming practices. For bigger systems, use the good practices described in LeSS.\nAn actual very good practice is to use event storming and domain driven design to model the application domain and partition the system.\nUse fitness functions to monitor and validate continuously all non-functional requirements.\nThe well-established practices from the object-oriented and DevOps communities are\nDevelop very early a working skeleton.\nClean architecture implies clean code and requires clean coders in your team (see our post-clean code).\nAggressive refactoring and understand technical debt.\nContinuous integration, continuous delivery, and continuous deployment.\nFor a detailed discussion, consult the post link.././blog/2018/pragmatic-craftsmanship-professional-software-developer/[Pragmatic Craftsmanship].\nWhat is the Architect Role? The architect shall\nBe part of the team, work daily with team members and attend all team events.\nMaintain the pace of development.\nOften and early communicate as a coach and mentor – we mean pair programming and design sessions -.\nBe fluent in the domain driven development, hexagonal architecture, refactoring, and clean code.\nUse architecture design record ADR and light documentation to describe architecture decisions - meaning no lengthy Software Architecture Document SAD or overwhelming UML models -.\nBe a master programmer and writes code in the application technological stack. He writes actual source code as current good practices are.\nHave rich knowledge of architecture and design.\nEngineering is the application of an empirical scientific approach to finding efficient solutions to practical problems.\n— Dave Farley We have mentioned refactoring, which is how we evolve an ever-improving design and architecture while building the product incrementally. To do that, we need to know the difference between good architecture and design and not-so-good. We need a rich pool of architecture and design options in our bag of tricks, ranging from very simple options to the more complex and rich options that we may need as the system grows. One never knows too much about the quality of architecture, code, and design. One does, of course, need to apply that knowledge smoothly, incrementally, little by little.\nAgile Component Design You are responsible to create or modify a component in your current application. This is a design activity.\nHow can you create a good, legible, maintainable component architecture? How can you validate your functional and non-functional requirements?\nYes, you are right. You are responsible for architecture decisions at component or subsystem level. Below a set of tools to improve the quality of your design.\nDesign Approaches Patterns and Idioms The pattern movement was started last millennium. Very talented and experienced developers have documented how to solve common problems elegantly and effectively. Depending on the programming language, you are using different idioms are preferred. The way to solve the same problem is different in Java, Scala, C++, Python or C#.\nYou should know all regular structural, behavioral and creational patterns. Explore your programming language and discover how idioms and patterns have evolved between major releases. For example, lambda expressions and streams introduced in Java 8 - released Spring 2014 - completely transform the solution for regular business logic. Records introduced in Java 14 - released Spring 2020 - have a huge impact how your architecture deals with data transfer objects – DTO – and immutability.\nRead Open Source Code Stop inventing the wheel again and again. Avoid Not Invented Here NIH syndrome. Your current problem was already solved multiple times. Explore open source solutions, read posts, study books. elect the most adequate solution and fill free to improve it.\nInstead of searching for a solution for days, post your question on an adequate forum or on Stack Overflow. Again fill free to improve the suggested solutions.\nBecome more efficient and use the wisdom of all these developers accessible through the Internet. Always verify the quality and adequacy of their proposed solution.\nJava Standard API Know your programming language and the huge associated standard libraries part of your technology stack. Wisdom is coded in this code. Standard patterns are implemented in almost all packages. Idioms are encoded everywhere.\nSee how Java deals with human and machine time with java.time package. Decades of trials and errors were needed to finally create a balanced and simple to use time abstractions. All these decisions and learnings are encoded in this code.\nClean Architecture Clean Code You want to create a clean and resilient architecture you are proud of.\nYou must first write clean code. Clean architecture build up on clean code. Promote, support, teach clean code in your agile team. Agile code is clean code.\nDo not fall to the fallacy to draw beautiful and useless UML diagram and write thick software architecture documents. The real architecture is hidden in the source code of your article.\nYou still document all major design decisions and should use UML to enlighten important architecture decisions.\nKnow Your Language If you are developing in Java, you should use the current features of the programming language. You use Java 14 for example:\nTry with resources and closeable resources\nImmutable collections\nStreams, optionals, filters, and collectors\nPredicates and functions to define lambda expressions\nRecords and immutability for objects\nPattern matching syntactic sugar as for instanceof operator\nSwitch expressions\nText strings\nRecognize technical refactoring is necessary to integrate new concepts and approaches. Development stacks such as Java, Java Script/Type Script or .NET C# introduce every year new constructs. They simplify code, reduce boilerplate or solve elegantly known design problems. A good example is the support of immutable objects at language level.\nAggressive Refactoring The entropy of the source code increases over time. Only continuous and aggressive refactoring mitigates the degenerescence of your application. Study the refactoring catalog and apply daily to your source code. Each time you correct an error or add a new functionality refactor your code. Remove smells, compiler warnings and migrate older code to use newer and better features of your programming language.\nAcceptance Test Driven Development Your users want a working application. Write acceptance tests insuring all relevant functions are tested through your continuous integration pipeline. Therefore you guarantee your users the application behaves as specified.\nTest Driven Development Testability and changeability of your application are architectural aspects. You must have a way to verify these non-functional requirements. Test driven development is a proven approach to fulfill these requirements and validate them continuously.\nContinuous Integration Continuous integration and delivery are the mechanisms to continuously validate and verify all functional and non-functional requirements are correctly implemented. You guarantee your users and customers that any software delivery they get is compliant and correct.\nEach time you find a discrepancy add an additional test validating the requirement behind this fault. Therefore the same error will never happen again.\nGood Practices Publish your components on a central repository such as Maven Central. Your users have easy and standardized access to your components and their latest version. Build tools such as Gradle and Maven or IDE such as IntelliJ IDEA fetch transparently the components.\nJavadoc is the standard and hugely helpful approach to document classes and component public interfaces in Java. Similar tools exist for other programming languages.\nArchitecture design records provide hints why specific design decisions were chosen. Your users can better understand the path you follow and the selected tradeoffs. They do not have to agree, but they can understand the arguments why you choose so.\nStatic code generator is an actual good practice to provide the current documentation and tutorials for your components. We write all our documentation in the asciidoc format - including plantUML and highlighted source code - and generate our website using hugo tool suite.\nStart small and improve your approach every day.\nLegacy System Refactoring With refactoring you can take a bad design, even chaos software, and rework it into well-designed code. Most often it is cheaper refactoring a legacy application instead of rewriting it from scratch.\nEach refactoring step is simple, even simplistic. Yet the cumulative effect of these small changes can radically improve the design.\n— Martin Fowler Approach For a developer new to a legacy software article, it is often hard to understand the existing application, determine the extent of source code and architectural decay, and identify smells and metric violations.\nLegacy applications are often critical to the business and have been in use for years, sometimes decades. Since the business is evolving, there is constant pressure to support additional requirements. However, changing these applications is difficult. You end up spending an increasing number of resources maintaining the software.\nMost dependencies in software development are not physical but knowledge-related and can be eliminated through broadening people’s knowledge.\n— Vas Bodde There are many reasons why maintaining legacy software is a difficult problem. Often, most, if not all, of the original developers are gone, and no one understands how the application is implemented. The technologies used in the application are no longer current, having been replaced by newer and more exciting technologies. Also, software complexity increases as it evolves over time as you add new requirements.\nThe key to managing the lifecycle of software is to continuously work as a professional and skilled developer. A professional engineer opportunistically refactor each time he modifies source code.\nUnderstand Your Product Understand how it is used. These scenarios are the acceptance tests you need to start creating a set of automated validation criteria. And you will better understand how your users are working with your article.\nUnderstand how it is deployed. You need a reproducible and in the long run automated process to deploy a new version of your article.\nUnderstand how it is build. You need a reproducible and automated building process. This process must be integrated into a continuous integration and delivery pipeline.\nUnderstand how it is structured. You need a tentative architecture description to start refactoring and to untangle this big ball of mud into a more modular solution.\nRefactor Your Product Refactoring is always a successful activity. You cannot fail. But you need discipline, continuous involvement, and measurement.\nIf you are new to refactoring it is worth having a coach to smooth the learning curve.\nExtract one big service, refactor, test, and deploy. Iterate. If you are not successful, discard your failure and checkout the working version of git. You should have learnt enough so that the next try will be successful.\nRefactor code. Use static analysis tools to detect the flaws in your source code. You should only improve live code, meaning code you must correct or extend. See Agile Code is Clean Code. Use a modern IDE to automate the smaller refactoring steps, and avoid spurious errors.\nResolve design issues. Your senior design specialists already know them.\nIncrease code coverage. Code coverage is the security net when you are refactoring code.\nSlowly add fitness functions to continuously validate your non-functional requirements.\nBeware of good practices how to write good software products and refactor successfully applications\nMove to Domain Driven Design as an architecture approach. It works either for micro architecture or for modular monolith approaches.\nMaster long live domain driven design and event storming\nMaster your technical stack and use current tools and libraries\nModularize one big service extraction one after the other\nAvoid using dead architectural techniques. TOGAF, UML, PMI, CMMI are obsolete - various activities they recommend are good, do them in your sprints.\nAvoid lengthy, slow and expensive review approach. ATAM is dead.\nThe quality tree technique is superb, use fitness functions to implement your quality tree.\nIf you are running legacy technology, this not only becomes a threat to your business but also to your hiring and employer branding efforts. As fewer and fewer programmers and operation managers will have the knowledge of those systems, you’ll face a dwindling talent pool.\nAmeliorate Your Process Applications do not degrade to legacy or geriatric systems overnight. The organization and development group failed to work professionally over years before the article is doomed.\nYou must establish a culture of professional software development. Professional software developers write code which is maintainable and legible. Only unprofessional organizations create legacy applications.\nEmbrace software craftsmanship. All your developers should have formal training and regular training in new approaches and techniques. They read regularly books. Is it not that you expect from your physician or the pilot of the plane you are taking?\nHow Agile Collaborators Learn Most products are developed by a team, and these achievements are the fruit of teamwork.\nSoftware article development is now agile, and most often uses the Scrum approach.\nJust putting a bunch of people together will not produce a high-performance agile team. Quite a few companies find that out the hard way.\nHow can you increase the odds to create an environment where agile teams bloom and perform?\nAttitude versus Aptitudes Your business is nothing more than the collective energy and efforts of the people working with and for you. If you want to make your business better, invest in your people. They’ll get the job done.\nLearn and pass on development good practices through pair programming and coding dojos. Promote communities of practice.\nIt is not enough that management commit themselves to quality and productivity. They must know what it is they must do. Such a responsibility cannot be delegated — W. Edwards Deming\nYou have hired good people. Train them to improve and perform better.\nContinuous Learning CFO to CEO: “What happens if we invest in developing our people and they leave us?”\nCEO to CFO: “What happens if we don’t, and they stay?”\n— Peter Baeklund Secure collective knowledge of the code through code reviews, by pair or collectively. Avoid any developer working on his own on a specific piece of code. Encourage your collaborators to write blogs and ask questions in forums such as Stack Overflow.\nEstablish together development standards and keep them up to date. Nurture these good practices through communities of practice.\nRely on tools such as continuous integration, static metrics and architecture fitness functions to shorten the feedback loop. See our post about pragmatic software craftsmanship.\nEstablish a culture to use current versions of programming languages, tools and libraries.\nFor instance, on a previous product, we had planned a coding dojo ritual once every two weeks, during which we shared our practices with some perspective over the product. It was an occasion to experiment new technologies, assess their match for the product needs, share new coding techniques, and update our standards together.\nFormal Training I am not a great programmer; I am just a good programmer with great habits.\n— Martin Fowler Refactoring: Improving the Design of Existing Code Professional software developers should have formal training in software development. You should expect from a person working forty hours a week for the next forty years to pursue a bachelor or a master in computer science.\nYou should expect regular certifications in the used technology stacks or development approaches. A Scrum master two days training does not make somebody an expert; but a specialist refusing to invest in a two-day training is probably not a member you want in a high performing team.\nA professional engineer should read multiple technical books every year.\nLeadership Responsibilities Leaders shall create psychological safety in the workplace. And please Walk the Talk.\nLow levels of psychological safety can create a culture of silence. They can also create a Cassandra culture – an environment in which speaking up is belittled and warnings go unheeded.\n— Amy C Edmondson The Fearless Organization: Creating Psychological Safety in the Workplace for Learning The major responsibility of senior management is\nHire and on-board collaborators\nNurture, retain and develop collaborators\nRespectfully off-board departing collaborators\nMove collaborators to the learning zone and let them thrive.\nNurture a culture of learning through training on the job, learning from external sources - such as reading high-quality blogs – and formal education - such as bachelor or master courses, for example, agile architecture -. Learning means trying and failing. Your culture should embrace small-scale failure to accelerate learning.\nPlease reflect how you encourage continuous learning in your organization. Consider the following statements:\nIs training always an investment and never a cost point?\nDo you budget and account training activities over the year?\nDo you consistently reach your learning goals?\nAre they really investment positions in your budget?\nPragmatic Software Craftsmanship The last months I was often confronted with software products having insufficient quality.\nInsufficient means late delivery, and few new features but quite a few errors. The effort to correct errors in the field eats away 30% to 50% from the whole development budget. How can such a dreadful situation occur?\nOne root cause is the low quality of the source code and ignorance of basic coding design approaches. We are not talking about complex design activities or complex patterns; we are discussing basic approaches how to write correct and maintainable code.\nMaster Your Technology Stack Most of the programmers have no formal training in the technology stack they are using daily. Their best friend is the Internet. Copy and paste from Stackoverflow is a saver. And therefore, many agile projects are now, steadily and iteratively producing mediocre software.\nYou shall be a proud software craftsman. You shall work as a professional and deliver professional results. I recommend any Java developer to\nHave formal training in the Java language and library. For example, you should consider a Java Programmer certification for the current JDK you are working daily with.\nLearn the new features in Java e.g. Streams, Lambdas, Reactive Programming, LocalDate, Modules, packaging with jlink.\nRead and understand Effective Java [5] from Joshua Bloch.\nRead and understand Clean Code [6], Clean Coder [7], Clean Architecture [8], Clean Agile [9],\nRead and understand Refactoring [1] from Martin Fowler, And read Refactoring not on the backlog post from Ron Jeffries.\nLearn modern practices such as logging with slf4j, TDD with JUnit5, Mockito and AssertJ, ATDD with Cucumber, Lean DevOps. continuous integration, continuous delivery, continuous deployment, monitoring.\nBe aware of famous Java libraries such as Guava, Apache Commons, Use SonarQube - and the SonarLint plugin for your preferred IDE – to catch well-known weaknesses in your source code and improve your coding skills.\nA software developer not knowing the above items is almost certainly not a professional person, just a more or less talented amateur. See the blog of Mike Cohn, the difference between a professional and an amateur for a similar point of view.\nYou can find a more extensive list of books on tangly llc website\nImprove Continuously You shall strive for mastery. The feeling you reached mastery level is truly awesome.\nRead a technical book each quarter,\nLearn a new language or framework every two years.\nRead books such as The Software Craftsman [10], Refactoring [1], Agile Code [6], Agile Coder [7] Clean Architecture [8], Clean Agile [9]\nKnow approaches such eXtreme Programming.\nWork with Scrum, Kanban, LeSS - Agile approaches are definitively state of the industry techniques -.\nMaster container approaches with Docker - containers are here to stay and will replace virtual machines -.\nTechnical leaders teach during coding dojos and pair programming sessions.\nYou shall write good enough software without errors and using best practices of the industry. If not consider changing your profession. See my blog post about technical debt discussing the consequences of missing mastery.\nSoftware Craftsmanship Software craftsmanship is an initiative to improve the professionalism of software developers. You do not have to agree with them, just look what they are doing. For a detailed discussion read for example the book The Software Craftsman: Professionalism, Pragmatism, Pride by Sandro Mancuso [10].\nDon’t discuss practices, discuss value.\nTheir manifesto is\nCraftsmanship is not enough to guarantee the success of a product, but the lack of it can be the main cause of its failure.\nAgile and Craftsmanship complement each other and both are necessary.\nAgile processes assumes technical excellence and a professional attitude.\nSoftware craftsmanship takes technical excellence and professionalism to a whole new level.\nTake everything you read with a grain of salt.\nSoftware craftsmanship\nIs not a church, trying to convert all developers.\nIs about leading by example and showing how we can be better.\nIs about well-written and designed code - and the customer stays in the center -.\nIs about continuously delivering value not writing crap code.\nYour goal shall to become a professional developer and reach mastery. How you do it is up to you.\nReferences [1] M. Fowler, Refactoring, Second. Addision-Wesley, 2018 [Online]. Available: https://www.amazon.com/dp/0134757599\n[2] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[3] V. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\n[4] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n[5] J. Bloch, Effective Java, Third. Addison-Wesley Professional, 2017 [Online]. Available: https://www.amazon.com/dp/B078H61SCH\n[6] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[7] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[8] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[9] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[10] S. Mancuso, The Software Craftsman. Prentice Hall, 2015 [Online]. Available: https://www.amazon.com/dp/0134052501\n1. Tool examples for the Java stack are provided to bootstrap your empirical approach. ","categories":"","description":"An introduction to software architecture in agile product development","excerpt":"An introduction to software architecture in agile product development","ref":"/ideas/agile-architecture/","tags":"","title":"Agile Architecture"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/core/","tags":"","title":"Core - Core model abstractions"},{"body":" BDD Library Change Logs This document provides a high-level view of the changes introduced in the BDD library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) Update of the dependencies\n0.2.5 (2020-08-31) Update of the dependencies\n0.2.4 (2020-06-30) BDD library is now a regular Java 9 module (thanks to the new module support in Gradle 6.4).\nA JSON schema for the bdd report JSON file was added and used to validate the format in unit tests.\nThe library requires JDK 17 and all dependencies were updated to the current version.\n0.2.3 (2020-03-06) Initial release of the library\n","categories":"","description":"","excerpt":" BDD Library Change Logs This document provides a high-level view of the changes introduced in the BDD library by release. For a detailed view of what has changed, refer to the repository commits. …","ref":"/docs/bdd/releasesnotes/","tags":"","title":"Release Notes"},{"body":" Commons Library Change Logs This document provides a high-level view of the changes introduced in the Commons library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-10-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions\n0.2.6 (2021-08-31) Update of the dependencies\n0.2.5 (2020-08-31) Initial release of the library\n","categories":"","description":"","excerpt":" Commons Library Change Logs This document provides a high-level view of the changes introduced in the Commons library by release. For a detailed view of what has changed, refer to the repository …","ref":"/docs/commons/releasesnotes/","tags":"","title":"Release Notes"},{"body":" Core Library Change Logs This document provides a high-level view of the changes introduced in the Core library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-10-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) Initial release of the library\n","categories":"","description":"","excerpt":" Core Library Change Logs This document provides a high-level view of the changes introduced in the Core library by release. For a detailed view of what has changed, refer to the repository commits. …","ref":"/docs/core/releasesnotes/","tags":"","title":"Release Notes"},{"body":" DEV Library Change Logs This document provides a high-level view of the changes introduced in the DEV library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) Update of the dependencies\n0.2.5 (2020-08-31) Initial release of the library\n","categories":"","description":"","excerpt":" DEV Library Change Logs This document provides a high-level view of the changes introduced in the DEV library by release. For a detailed view of what has changed, refer to the repository commits. …","ref":"/docs/dev/releasesnotes/","tags":"","title":"Release Notes"},{"body":" Agile Change Logs This document provides a high-level view of the changes introduced in the agile ERP library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-10-31) Update of library dependencies, update to JDK-20, and modern Gradle approach to build solutions.\n","categories":"","description":"","excerpt":" Agile Change Logs This document provides a high-level view of the changes introduced in the agile ERP library by release. For a detailed view of what has changed, refer to the repository commits. …","ref":"/docs/domains/agile/releasesnotes/","tags":"","title":"Release Notes"},{"body":" ERP CRM Library Change Logs This document provides a high-level view of the changes introduced in the ERP CRM library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) First version of the library packed as a DDD bounded domain\nRequires Java 16 or higher due to extensive usage of records and sealed classes\n","categories":"","description":"","excerpt":" ERP CRM Library Change Logs This document provides a high-level view of the changes introduced in the ERP CRM library by release. For a detailed view of what has changed, refer to the repository …","ref":"/docs/domains/crm/releasesnotes/","tags":"","title":"Release Notes"},{"body":" ERP Invoices Library Change Logs This document provides a high-level view of the changes introduced in the ERP Invoices library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) First version of the library packed as a DDD bounded domain\nRequires Java 16 or higher due to extensive usage of records and sealed classes\n","categories":"","description":"","excerpt":" ERP Invoices Library Change Logs This document provides a high-level view of the changes introduced in the ERP Invoices library by release. For a detailed view of what has changed, refer to the …","ref":"/docs/domains/invoices/releasesnotes/","tags":"","title":"Release Notes"},{"body":" ERP Ledger Library Change Logs This document provides a high-level view of the changes introduced in the Ledger CRM library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) Initial version of the library packed as a DDD bounded domain.\nRequires Java 16 or higher due to extensive usage of records and sealed classes.\n","categories":"","description":"","excerpt":" ERP Ledger Library Change Logs This document provides a high-level view of the changes introduced in the Ledger CRM library by release. For a detailed view of what has changed, refer to the …","ref":"/docs/domains/ledger/releasesnotes/","tags":"","title":"Release Notes"},{"body":" ERP Products Library Change Logs This document provides a high-level view of the changes introduced in the ERP Products library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions\n0.2.6 (2021-08-31) Initial version of the library packed as a DDD bounded domain\nRequires Java 16 or higher due to extensive usage of records and sealed classes\n","categories":"","description":"","excerpt":" ERP Products Library Change Logs This document provides a high-level view of the changes introduced in the ERP Products library by release. For a detailed view of what has changed, refer to the …","ref":"/docs/domains/products/releasesnotes/","tags":"","title":"Release Notes"},{"body":" ERP Shared Library Change Logs This document provides a high-level view of the changes introduced in the ERP Shared library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-08-31) First version of the library packed as a DDD bounded domain\nRequires Java 16 or higher due to extensive usage of records and sealed classes\n","categories":"","description":"","excerpt":" ERP Shared Library Change Logs This document provides a high-level view of the changes introduced in the ERP Shared library by release. For a detailed view of what has changed, refer to the …","ref":"/docs/domains/shared/releasesnotes/","tags":"","title":"Release Notes"},{"body":" UI Library Change Logs This document provides a high-level view of the changes introduced in the ERP UI library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions\n0.2.6 (2021-08-31) Initial version of the library packed as a DDD bounded domain\nRequires Java 16 or higher due to extensive usage of records and sealed classes\n","categories":"","description":"","excerpt":" UI Library Change Logs This document provides a high-level view of the changes introduced in the ERP UI library by release. For a detailed view of what has changed, refer to the repository commits. …","ref":"/docs/domains/ui/releasesnotes/","tags":"","title":"Release Notes"},{"body":" FSM Library Change Logs This document provides a high-level view of the changes introduced in the FSM library by release. For a detailed view of what has changed, refer to the repository git commits.\n0.2.7 (2023-10-31) Update of library dependencies, update to JDK-20, and modern Gradle approach to build solutions.\nAdded statechart diagram support for smcat and mermaid formats.\nActor library now uses the standard API FLow implementation and virtual thread executor.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.\n0.2.6 (2021-04-30) Update of the dependencies\nCorrected bug in the declaration of local transitions through the builder mechanism\n0.2.5 (2020-08-31) Update of the dependencies\n0.2.4 (2020-06-30) FSM library is now a regular Java 9 module (thanks to the new module support in Gradle 6.4)\nThe new Java record construct is used to simplify the API of the library\nThe library requires JDK 14 and all dependencies were updated to the current version\n0.2.3 (2020-03-06) Dependencies were updated to current versions\nUnit test examples and documentation improvements\n0.2.2 (2019-05-17) Unit tests were extended to provide better code coverage\nTypos in the static site documentation were corrected\n0.2.1 (2019-05-16) Initial release of the library\n","categories":"","description":"","excerpt":" FSM Library Change Logs This document provides a high-level view of the changes introduced in the FSM library by release. For a detailed view of what has changed, refer to the repository git commits. …","ref":"/docs/fsm/releasesnotes/","tags":"","title":"Release Notes"},{"body":" Gleam Library Change Logs This document provides a high-level view of the changes introduced in the Gleam library by release. For a detailed view of what has changed, refer to the repository commits.\n0.2.7 (2023-11-31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions\n0.2.6 (2021-08-31) Update of the dependencies\n0.2.5 (2020-08-31) Initial release of the library\nFramework to generate the TSV representation of business entities\nFramework to generate the JSON representation of business entities\n","categories":"","description":"","excerpt":" Gleam Library Change Logs This document provides a high-level view of the changes introduced in the Gleam library by release. For a detailed view of what has changed, refer to the repository commits. …","ref":"/docs/gleam/releasesnotes/","tags":"","title":"Release Notes"},{"body":" Effective Product Strategy Developing a successful product is not down to luck or trying hard. Product success starts with making the right strategic decisions.\nValidate product strategy with design thinking Review product performance with lean budgets Set the right priorities and establish a growth mindset Implement your digital transformation with your product portfolio Product Leadership with Scrum The product owner is a product management role. Product management is a complex, multi-faceted discipline that takes time and effort to master.\nPublish your vision, roadmap, and release plan Connect your organization with strategy canvas and story maps Growth your stakeholder involvement strategically and tactically Master budget management and tough decisions Select user experience and visual design solutions Product Backlog Refinement A well-refined product backlog facilitates the development of a successful product. It incorporates new insights and provides items ready to be implemented.\nRefine and prioritize the backlog Promote acceptance criteria for stories and connect to development practices Balance technical debt and product success Use fitness functions for non-functional requirements Learning and Emergence Collaborators have to learn and implement changes at a faster pace. The agile pillars of transparency, inspection and adaptation establish a high learning environment and empower you to deliver game-changing products.\nDeploy minimal viable product MVP Sell minimal marketable product MMP Manage the whole product lifecycle Modernize your successful digital products ","categories":"","description":"Agile approaches and techniques to nurture agile product development in your organization","excerpt":"Agile approaches and techniques to nurture agile product development in your organization","ref":"/expertise/expertise-agile/agile-products/","tags":"","title":"Agile Products"},{"body":" Agile Technical Coach Improving software design and construction is our passion. The goal is to help you become a more productive developer—and that does not stop at the end of your training and coaching sessions. Your success is important to us.\nReflect on new solutions to existing challenges Review artefacts from sprint planning and design sessions Periodically retrospect on your progress and challenges Promote team learning with coding dojos, pair programming, design workshops, agile architecture Introduce techniques like static code analysis, TDD, ATDD, zero bug policy Be available to answer questions as they come Design Workshops It is often useful to get an outside perspective. We have extensive experience working with design patterns and architecting a variety of systems, from embedded to the enterprise, and custom applications to operating systems.\nIdentify patterns in your design to simplify and clarify code Improve the testability of your designs to help automate validation Examine the context and motivation around your design decisions Suggest design alternatives to accommodate future changes Clarify your domain model, so it is easier to understand and change Implement alternative design solutions to resolve longstanding problems Code Mentoring It is easy to be overwhelmed by newly inherited legacy Java code. Legacy code can be difficult to work with. It can be helpful to have an extra set of eyes and a bunch of techniques for dealing with it. I can help review your software to identify areas of risk and create approaches for mitigation.\nReview, prioritize, and organize existing legacy code Retrofit unit tests into legacy code, so it’s safe to refactor and modernize Identify types of technical debt in your code and how to fix it Suggest alternative implementations for challenging code Use techniques to clean up existing code for maintainability Refactor code so it can readily accommodate new features Gain techniques for efficiently refactoring legacy code Assessments Every project is unique, and so are its challenges. Through interviews, questionnaires, and surveys, we provide you with a detailed assessment of your software development process and project along with recommendations. I also offer online and remote assessments.\nArticulate and refine your product definition Evaluate your agile software development processes Identify what’s working and what needs improvement List areas where the best practices can be applied Quickly get a snapshot of your situation and where you stand Gain a new perspective from an experienced outsider ","categories":"","description":"Methods and tools your teams need to achieve technical excellence and craftsmanship how to create software products","excerpt":"Methods and tools your teams need to achieve technical excellence and craftsmanship how to create software products","ref":"/expertise/expertise-technical/software-craftsmanship/","tags":"","title":"Software Craftsmanship"},{"body":" Agile Architecture Domain Driven Design [Refactoring](../../blog/2020/legacy-systems-refactoring) Mobile First Approaches Cloud Native Cost Effective Internal Applications Effective Agile Techniques [Clean Code](../../blog/2018/why-is-it-so-cool-to-develop-with-java) [Continuous Integration CI](../../blog/2018/why-is-it-so-cool-to-develop-with-java) [Continuous Deployment and Delivery CD](../../blog/2018/why-is-it-so-cool-to-develop-with-java) [Test Driven Development TDD](../../blog/2018/why-is-it-so-cool-to-develop-with-java) [Acceptance Test Driven Development ATDD](../../blog/2018/why-is-it-so-cool-to-develop-with-java) GitLab, GitHub, Atlassian and JetBrain Tool Stacks Java Technology Stack Java Expert (11, 17, 19) [Migrate to lambda and streams](../../blog/2021/modern-java-development/) Harden Your Applications and Make Them More Secure Java System, Solution and Enterprise Architect Expert Mobile Frontend and Java Backend with Vaadin Enterprise application with Spring Java Application Modernization [Upgrade your Java Product to current Technologies](../../blog/2017/why-use-current-software-components/) Outsource Modernization and Maintenance of Java Applications Remove Security Weaknesses Harden your Product against Hacking ","categories":"","description":"","excerpt":" Agile Architecture Domain Driven Design [Refactoring](../../blog/2020/legacy-systems-refactoring) Mobile First Approaches Cloud Native Cost Effective Internal Applications Effective Agile Techniques …","ref":"/expertise/expertise-technical/","tags":"","title":"Technical Expertise"},{"body":" Good Practices for Enterprise Java Solutions Bounded Domain Development Knowledge Database Todo\nWrite FAQ in Asciidoc\n","categories":"","description":"good practices","excerpt":"good practices","ref":"/ideas/development-good-practices/","tags":"","title":"Good Practices for Enterprise Java Solutions"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/crm/","tags":"","title":"CRM - CRM Bounded Domain"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/dev/","tags":"","title":"Development"},{"body":"\nIdeas and concepts the developers of tangly open source components are following. It is a collection of articles about our journey through agile article development, digitalization, and software craftsmanship.\n","categories":"","description":"","excerpt":"\nIdeas and concepts the developers of tangly open source components are following. It is a collection of articles about our journey through agile article development, digitalization, and software …","ref":"/ideas/","tags":"","title":"Ideas"},{"body":" Design Conventions Audit Event Conventions The event field is one of the following values\nimport Any entity imported from an external source is audited.\nexport Any entity exported to an external source is audited.\ncreate Each time a file is generated and exported shall be audited. For example, the creation of an invoice document is audited.\nlogin Login of a user.\nlogout Logout of a user.\nThe component field has the structure net.tangly.component_name. The component field is the Java module name of the design component.\nAll import and export operations should be audited. An import happens each time the system reads data from an external system. An export happens each time the system sends data to an external system.\nJava Conventions Modern Java Constructs Use modern Java constructs in our daily coding\nPrefer a record over a class abstraction to promote immutable objects.\nPrefer stream approach over explicit control statements to promote functional programming.\nAvoid returning a null value. Return either an optional or an empty collection.\nReturn immutable collections.\nParameters are per default non-null. Use the @Nullable annotation to mark nullable parameters.\nPromote modules for information hiding and reducing coupling between components.\nUse var construct to have more legible code [1].\nString toString() Method The method implementation uses a String.format() approach. We assume that Java will introduce intrinsic support for an efficient implementation of toString method based on String.format(). As soon as the intrinsics is available, we will migrate to the supported version as stated in JEP 348.\nThe toString method is used to create a detailed audit and logging messages and support production error searching. The format of the message is based on the build-in format defined in the JDK for Java records.\n@Override public String toString() { return String.format(\"created=%s, author=%s, text=%s, tags=%s\", created(), author(), text(), Tag.text(tags)); } boolean equals(Object) Method The extended instanceof operator allows a compact and legible definition of the equality method. The whole method body is written as one statement.\n@Override public boolean equals(Object obj) { return (obj instanceof Comment o) \u0026\u0026 Objects.equals(created(), o.created()) \u0026\u0026 Objects.equals(author(), o.author()) \u0026\u0026 Objects.equals(text(), o.text()) \u0026\u0026 Objects.equals(tags(), o.tags()); } Design Conventions Use plantUML to document all design decisions with diagrams. Diagrams shall be defined to explain specific aspects of a component. Do not try to model the whole source code.\n1. Upon using the var construct for a few years, we are convinced the resulting code is more legible and compact. ","categories":"","description":"Design conventions for open source components","excerpt":"Design conventions for open source components","ref":"/ideas/design-conventions/","tags":"","title":"Design Conventions"},{"body":" User Guide Commons Vaadin UI Views Views display a set of instances of an entity. The view provides the regular CRUD operations:\nView details of an entity instance.\nModify an entity instance. The user can edit all properties of an object in the user interface. All changes are buffered in the user interface components. She can decide to propage the changes to the model or discard them through save or cancel operations.\nDelete an entity instance.\nCreate an entity instance.\nItem View Entity View A domain entity shall be displayed and manipulated using the entity view.\nA domain entity has an internal object identifier, an external identifier, a human-readable name, a temporaral period when the entity is active, and a textual description.\nThe entity can optionally have a set of tags and a list of comments.\npublic class MyEntityView extends EntityView\u003cMyEntity\u003e { static class MyEntityForm extends EntityForm\u003cMyEntity, MyEntityView\u003e { MyEntityForm(@NotNull MyEntityView parent) { super(parent); } } } The comments and the tags of an entity are modelled as a one2many immutable owned object relations.\nRelationship Components These components allow the display and handling of relations between objects.\nAll changes of a relation are done in the buffered values of the user interface.\nChanges are only performed on the model if the save action is called. Mandatory relations are enforced with validation rules.\nOne2One Component The component displays a relation from one object to another entity instance.\nReferenced Object The functions are:\nDisplay the relation and show key attributes of the referenced item as a composite field. The item is a subclass of entity. The attributes of an entity are displayed\nRemove the referenced object from the relation. The object is not deleted, only the relation to it.\nUpdate the relation to a new referenced item. The user can select an instance from a set of available objects. This set of objects is provided through a provider.\nThe provider for selectabe instance is provided to the constructor of the one2one control.\nProviders support composition with _ProviderView to define selection on the eligible instances.\nOwned Object This mode is not supported through the One2One component. Implement custom controls to display the object and to create a new one.\nCustom controls cannot be defined in a generic way. Expected controls for an entity are well-defined in the framework.\nOne2Many Component The component displays regular objects or instances for a subclass of entity.\nThe display view can support multiple selections to remove multiple referenced items from the relation at once.\nThe selection view can support multiple selections to add multiple items to the relation at once.\nReferenced Objects The component is One2ManyReferencesField. The functions are for referenced objects:\nDisplay all objects referenced and show key attributes of the referenced items as a grid. A provided view displays selected properties in columns.\nRemove a referenced object from the instances which are part of the relation. The object is not deleted, only the relation to it.\nAdd an existing object to the instances which are part of the relation. The user can select an instance from a set of available objects displayed in a view.\nThe view to display referenced objects shall be provided to the component.\nThe view to select objects which are added to the relation should be provided to the component. A dialog will open with the view and the cancel or add options.\nAn example of referenced object is an employee list of companies she is working for.\nOwned Objects The component is One2ManyOwnedField. The functions are for owned objects:\nDisplay all objects referenced and show key attributes of the referenced items as a grid. A provided view displays selected properties in columns.\nRemove a referenced object from the instances which are part of the relation. The object is removed from the relation and deleted.\nCreate an object and add it to the instances which are part of the relation.\nThe view to display referenced objects shall be provided to the component. The view is an item view with the create method\nThe provider is a shallow copy of the collection for referenced objects belonging to the relation.\nBecause the copy is shallow, we should not provide an update operation modifying the shared object. The object is shared between the model and the user interface buffering.\nWe recommend that owned objects are immutable.\nExamples of owned objects are comments and tags of an entity.\nEntities should generally not be handled as owned objects. An entity instance should be created through the view handling all objects of this entity type.\nReflections One key decision is that the user interface library does not require the use of annotations, interfaces, or inheritance in the business model.\nVisualized entities are manipulated under different access rights.\nReadonly or full access\nReadonly access allows a user to view an entity and associated properties. The update, delete and create operations are disabled.\nFull access allows a user to view, update, create and delete an entity and associated properties.\nEditable, immutable, or audited immutable entities\nImmutable entities or properties support view, create and delete. The update operation is not available. We avoid support for hybrid approach such as clone a new instance and delete an old one. The semantics are often slightly awkward.\nAudited immutable entities or properties support view, and create. Neither update nor delete operations are available to provide an audit trail. Immutable instances can be added programmatically to provide an exhaustive audit trail.\n","categories":"","description":"","excerpt":" User Guide Commons Vaadin UI Views Views display a set of instances of an entity. The view provides the regular CRUD operations:\nView details of an entity instance.\nModify an entity instance. The …","ref":"/docs/ui/userguide/","tags":"","title":"User Guide UI"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/fsm/","tags":"","title":"FSM - Hierarchical Finite State Machine"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/invoices/","tags":"","title":"Invoices - Invoices Bounded Domain"},{"body":" Ideas Behavior-driven development BDD is an agile software development process that encourages collaboration among developers, quality assurance experts, and customer representatives in a software project. It encourages teams to use conversation and concrete examples to formalize a shared understanding of how the application should behave. It emerged from test-driven development TDD. Behavior-driven development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development.\nA separate subcategory of behavior-driven development is formed by tools that use specifications as an input language rather than user stories. An example of this style is the RSpec tool that was also originally developed by Dan North.\nSpecification tools do not use user stories as an input format for test scenarios but rather use functional specifications for units that are being tested. These specifications are often more technical than user stories and are usually less convenient for communication with business personnel than are user stories.\nYou want to:\nTrack Requirements\nReview Requirements\nDecompose Requirements\nCommunicate With Stakeholders\nConnect Requirements to Tests\nPrioritize Requirements\nSpecifications by Example Features A behavior-driven development BDD library that provides a custom extension based on the JUnit 5 Jupiter Extension Model. This library can be used to create and run features, stories and behaviors as BDD specification tests.\nThe library promotes a test engineer approach. The test cases are programmed against the system under development. Upon execution, the living documentation of all features, and their associated stories are generated. This document describes the behavior of the system as it is tested.\nWe believe that agile teams should write source code and tests. Unit tests shall validate the internal quality of the application.\nIntegration tests verify that requirements are implemented in the solution. Integration tests shall be derived from acceptance criteria formulated as specification by example [1, 2]. Seldom can users or stakeholders invest the time and learn the capabilities to formulate maintainable and binding acceptance tests. They are the domain know-how experts and rarely software specialists.\nSoftware developers should write all acceptance tests together with domain experts [3, 4]. The acceptance tests should generate legible living documentation. Stakeholders use this documentation for feature review and acceptance decisions.\nThe library is implemented as an extension to the de facto standard JUnit5 for unit testing in the Java ecosystem.\nTags and identifiers are supported for regulatory aspects and traceability.\nScenarios @ExtendWith(StoryExtension.class) @Story(value = \"Return go back to the stockpile\", description = \"As a store owner, in order to keep track of stock, I want to add items back to stock when they're returned.\") public class StoreTestStoryOne { @Scenario(\"Refunded items from the customer should be returned to stock\") public void refundAndRestock(Scene scene) { scene.given(\"that a customer previously bought a black sweater from me\", t -\u003e t.put(\"store\", new Store(0, 4).buyBlack(1))). and(\"I have three black sweaters in stock\", t -\u003e assertEquals(3, t.\u003cStore\u003eget(\"store\").blacks(), \"Store should carry 3 black sweaters\")). when(\"the customer returns the black sweater for a refund\", t -\u003e t.\u003cStore\u003eget(\"store\").refundBlack(1)). then(\"I should have four black sweaters in stock\", t -\u003e assertEquals(4, t.\u003cStore\u003eget(\"store\").blacks(), \"Store should carry 4 black sweaters\")). run(); } @Scenario(\"Replaced items should be returned to stock\") public void replaceAndRestock(Scene scene) { scene.given(\"that a customer previously bought a blue garment from me\", t -\u003e t.put(\"store\", new Store(3, 3).buyBlue(1))). and(\"I have two blue garments in stock\", t -\u003e assertEquals(2, t.\u003cStore\u003eget(\"store\").blues(), \"Store should carry 2 blue garments\")). and(\"three black garments in stock\", t -\u003e assertEquals(3, t.\u003cStore\u003eget(\"store\").blacks(), \"Store should carry 3 black garments\")). when(\"she returns the blue garment for a replacement in black\", t -\u003e t.\u003cStore\u003eget(\"store\").refundBlue(1).buyBlack(1)). then(\"I should have three blue garments in stock\", t -\u003e assertEquals(3, t.\u003cStore\u003eget(\"store\").blues(), \"Store should carry 3 blue garments\")). and(\"two black garments in stock\", t -\u003e assertEquals(2, t.\u003cStore\u003eget(\"store\").blacks(), \"Store should carry 2 black garments\")). run(); } } Get Started Add the library to your Gradle or maven build.\nWrite your scenarios as test methods as shown in the above examples.\nRun your JUnit 5 tests.\nThe provided utilities generate JSON and AsciiDoc reports as living documentation.\nConcepts The behavior-driven development library defines the following concepts:\nA feature describes a high-level function of the system. A feature annotation @feature allows the textual description of a feature and supports additional information such as an identifier or a set of tags. A feature is defined a package level.\nA story describes a specific function of the system. A story annotation @story allows the textual description of a story and supports additional information such as an identifier or a set of tags. A feature is defined a class level.\nA scenario describes a specific flow of a story. A scenario annotation @scenario allows the textual description of a scenario. A scenario is defied at method level.\nAcceptance criteria are documented together with the given and when stages inside the method using the bdd library.\nWe believe that the three level hierarchy feature - story - scenario is enough to describe the requirements of regular software products.\nBeware that feature and story as used in agile development approaches, such as Scrum, are work break-down structures. They are not a requirement repository.\nYou can change the content and the acceptance criteria of stories over the development cycle. No information is available in a backlog or JIRA, which variant is now the one implemented in the system.\nMore examples are available as unit tests.\nReferences [1] G. Adzic, Bridging the Communication Gap. Neuri Limited, 2009 [Online]. Available: https://www.amazon.com/dp/B008YZ993W/\n[2] G. Adzic, D. Evans, and T. Roden, Fifty Quick Ideas To Improve Your Tests. Neuri Consulting LLP, 2015 [Online]. Available: https://www.amazon.com/dp/0993088112\n[3] L. Crispin, Agile testing. Addison-Wesley, 2009 [Online]. Available: https://www.amazon.com/dp/0321534468\n[4] J. G. Gregory and L. Crispin, More Agile Testing. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/0321967054\n","categories":"","description":"","excerpt":" Ideas Behavior-driven development BDD is an agile software development process that encourages collaboration among developers, quality assurance experts, and customer representatives in a software …","ref":"/docs/bdd/userguidebdd/","tags":"","title":"User Guide Behavior Driven Design Library"},{"body":" Features The FSM library aims to provide the following features:\nEasy to use flat state machine for simple use cases. This type of FSM is taught in bachelor engineering courses.\nHierarchical state machine structure to ease complex state configuration. The hierarchical type of FSM is part of the UML notation.\nUsage of events, transitions, guards and actions. Transition actions, state entry actions, and state exit actions are supported.\nBuilder pattern for easy creation of a complete state machine declaration using a fluent approach,\nRecipes for usual use cases,\nState machine event listeners,\nDiagrams generators for dot and plantUml applications; diagrams are living documentation.\nState machines are powerful because their behavior is always guaranteed to be consistent, making it relatively easy to debug. This is because operational rules are written in stone when the machine is started. The idea is that your application may exist in a finite number of states and certain predefined events can take your application from one state to the next. Such triggers can be based on either events or timers.\nIt is much easier to define high-level logic outside your application and then rely on the state machine to manage state. You can interact with the state machine by sending an event, listening for changes or simply request a current state.\nScenarios Applications are a good candidate to use a finite state machine if:\nApplication or part of its structure can be represented as states.\nYou want to split complex logic into smaller manageable tasks.\nApplication is already suffering concurrency issues with i.e. some operations are happening asynchronously.\nYou are already trying to implement a finite state machine if you:\nUse of boolean flags or enums to model situations and states.\nHave variables which only have meaning for some part of your application lifecycle.\nLoop through if/else structure and check if a particular flag or enum is set and then make further exceptions what to do when a certain combination of your flags and enums exists or does not exist together.\nFinite state machines provide a clear and well-documented approach for complex logic with states.\nGet Started FSM finite state machine module supports both a fluent API and a more declarative manner to define a state machine, and also enables a user to define the action methods in a straightforward manner. Lambda constructs support a compact and legible notation.\nActions and guards declarations use the lambda feature of Java 8. Guard is a boolean function, and an action is a method without return value. Once a finite state machine is declared, you can execute multiple instances of the declaration in your application.\nStateMachine interface takes free generic type parameters.\nE stands for the type of implemented event. The event values must be a Java enumeration type. The enumeration type defines all the different event values\nS stands for the type of implemented state. The state values must be a Java enumeration type. The enumeration type defines the possible states of the finite state machine\nC stands for the class owning the state machine and defining the context in which the machine is executed.\nStates represent the system state available for some time.\nA simple state is as a state without children and without history.\nComposite state is a hierarchical state. It may contain nested simple or composite states. The composite children states may themselves have nested children. This may proceed to any depth. When a hierarchical state is active, one and only one of its child states is active\nThe initial state is the state selected when entering a composite state no having active history states\nThe final state is a state with only afferent transitions and no efferent transitions\nState with history allows a composite state to remember its configuration. A transition taking the history composite state as its target will return the child state stored in the history as the last active state last time the target composite state was exited\nTransitions represent a possible change from a start state to a destination state.\nNormal transition moving from a source state to a destination state\nInternal transition means after the transition completes, no state is excited or entered. Therefore, no entry or exit actions are executed\nGuards are implemented as an extension of a standard Java BiPrediction functional interface. The parameters are the event triggering the guard and the context.\nboolean expression lambda expression deciding if the transition shall be fired or not.\nActions are implemented as an extension of a standard Java BiFunction functional interface. The parameters are the event triggering the guard and the context.\nEntry actions are executed upon activation of the state when the fired transition enters the state\nExit actions are executed upon deactivation of the state when the fired transition leaves the state\nTransition actions are executed when a transition is fired\nThe design requires that the set of states and the set of events are declared as enumeration types. Enumeration types allow static checking at compile time. They diminish runtime errors.\nModern development environments allow fast round trip changes, therefore, static type declarations should not slow your development speed.\nBelow the UML diagram of the public interface of the finite state machine component.\n![Finite State Machine UML](./pics/fsm-uml.svg \"Finite State Machine UML Diagram\")\nFluent Examples How to create the state machine builder In order to create a state machine, you need to create a state machine builder first. For example:\nDefinitionBuilder\u003cOwner, States, Events\u003e builder = new DefinitionBuilder\u003c\u003e(States.Root); After a state machine builder was created, we can use the fluent API to define states, transitions and actions of the state machine declaration. The internal objects are implicitly built during creation.\nHow to create states Below how to create a state Off as substrate of the root state.\nbuilder.root().add(States.Off) Below two variants how to create an initial state with an entry and an exit action. The isInitial marker specifies that the state Off is an initial state.\nbuilder.root().add(States.Off).isInitial().onEntry(Fsm::logOffEntry).onExit(Fsm::logOffExit); builder.addToRoot(States.Off).isInitial().onEntry(Fsm::logOffEntry).onExit(Fsm::logOffExit); Below how to create a nested initial state with an entry and an exit action. The state DAB is a substate of state On. The isInitial marker specifies that the state DAB is an initial state.\nbuilder.in(States.On).add(States.DAB).isInitial().onEntry(Fsm::logDabEntry).onExit(Fsm::logDabExit); How to create transitions Below how to create a transition between two states with an event and an action – without a guard -. The transition starts on state Maintenance when the event TogglePower is received and finishes in state Off_. The action logTransitionFromMaintenanceToOff__ is executed when the transition is traversed.\nbuilder.in(States.Maintenance).on(Events.TogglePower).to(States.Off).execute(Fsm::logTransitionFromMaintenanceToOff); Below how to create a transition between two states with an event, a guard and an action. The first statement uses a lambda expression calling a method of the owner object. The second statement uses a lambda expression with a code block.\nbuilder.in(States.Off).on(Events.TogglePower).to(States.Maintenance).onlyIf(Fsm::isMaintenanceMode).execute(Fsm::logTransitionFromOffToMaintenance); builder.in(States.Off).on(Events.TogglePower).to(States.On).onlyIf((o) -\u003e !o.isMaintenanceMode()).execute(Fsm::logTransitionFromOffToOn); Below how to create a local transition in the state. A local transition does not trigger the exit and entry action of the state.\nbuilder.in(States.On).onLocal(Events.StoreStation).execute(Fsm::logIgnoreStoreOperation); An example of a complete finite state machine definition The example below declares a complete state machine. The enumeration of States defines the states. The enumeration of Events defines the events recognized and processed through the finite state machine.\nenum States { Root, Off, Maintenance, On, FM, DAB, Play, AutoTune, (1) } enum Events { TogglePower, ToggleMode, StationLost, StationFound, StoreStation (2) } DefinitionBuilder\u003cOwner, States, Events\u003e builder = new DefinitionBuilder\u003c\u003e(States.Root); (3) builder.addToRoot(States.Off).isInitial().onEntry(Fsm::logOffEntry).onExit(Fsm::logOffExit); builder.addToRoot(States.Maintenance).onEntry(Fsm::logMaintenanceEntry).onExit(Fsm::logMaintenanceExit); builder.addToRoot(States.On).hasHistory().onEntry(Fsm::logOnEntry).onExit(Fsm::logOnExit); builder.in(States.On).add(States.DAB).isInitial().onEntry(Fsm::logDabEntry).onExit(Fsm::logDabExit); builder.in(States.DAB).onLocal(Events.StoreStation).execute((o, e) -\u003e o.appendToLog(\"DABToDAB\")); builder.in(States.On).add(States.FM).hasHistory().onEntry(Fsm::logFmEntry).onExit(Fsm::logFmExit); builder.in(States.FM).add(States.Play).isInitial().hasHistory().onEntry(Fsm::logPlayEntry).onExit(Fsm::logPlayExit); builder.in(States.Play).onLocal(Events.StoreStation).execute((o, e) -\u003e o.appendToLog(\"PlayToPlay\")); builder.in(States.FM).add(States.AutoTune).onEntry(Fsm::logAutoTuneEntry).onExit(Fsm::logAutoTuneExit); builder.in(States.Off).on(Events.TogglePower).to(States.Maintenance).onlyIf(Fsm::isMaintenanceMode).execute(Fsm::logTransitionFromOffToMaintenance); builder.in(States.Maintenance).on(Events.TogglePower).to(States.Off).execute(Fsm::logTransitionFromMaintenanceToOff); builder.in(States.Off).on(Events.TogglePower).to(States.On).onlyIf((o) -\u003e !o.isMaintenanceMode()).execute(Fsm::logTransitionFromOffToOn); builder.in(States.On).on(Events.TogglePower).to(States.Off).execute(Fsm::logTransitionFromOnToOff); builder.in(States.DAB).on(Events.ToggleMode).to(States.FM).execute(Fsm::logTransitionFromDabToFm); builder.in(States.FM).on(Events.ToggleMode).to(States.DAB).execute(Fsm::logTransitionFromFmToDab); builder.in(States.Play).on(Events.StationLost).to(States.AutoTune).execute(Fsm::logTransitionFromPlayToAutoTune); builder.in(States.AutoTune).on(Events.StationFound).to(States.Play).execute(Fsm::logTransitionFromAutoTuneToPlay); builder.machine(\"name of the machine\", owner); (4) 1 Defines the set of states for the finite state machine 2 Defines the set of events processed by the finite state machine 3 Creates a builder instance 4 Returns a finite state machine instance with the given human rea-able name and the given owning object, ready to process events The above finite state machine description will generate the following machine.\nHow to create an instance of a finite state machine and fire events After you have defined the state machine behavior in the description, you create a new state machine instance. The initial state of the machine is inferred from the definition of the state machine.\nStateMachine\u003cFsm, States, Events\u003e fsm = builder.machine(\"name-of-fsm\", ownerInstance); You can fire events with the statement:\nfsm.fire(new Event\u003cEvents\u003e(Events.TogglePower)); Advanced User Guide Static Validation The static validator verifies the syntax of finite state machine declaration. The implemented checks are\nEach value of the state identifier enumeration is used exactly once in the declaration.\nA state has at most one initial substate.\nA state with a different transition has an initial substate.\nThe hierarchy of initial states allows a clean identification of the first state when the machine is reset to default.\nA final state cannot have efferent transitions.\nDynamic Validation The static validator verifies the semantics of a finite state machine during execution. The implemented checks are\nTo be written\nLog a state machine instance To be written\nDocumentation of State Machines You can document your state machine declaration by\nGenerate a diagram in the dot language and visualize your state machine as a hierarchical graph.\nGenerate a plantUML state machine diagram following UML notation.\nAdd description to states, actions and guards directly in the builder. These descriptions are used to enrich the hierarchical graph.\nWe provide the finite state machine diagrams of the builder FSM and the Washer FSM as complete examples. Please consult the unit tests for the complete source code. Use JUnit to run the state machine programs.\n","categories":"","description":"","excerpt":" Features The FSM library aims to provide the following features:\nEasy to use flat state machine for simple use cases. This type of FSM is taught in bachelor engineering courses.\nHierarchical state …","ref":"/docs/fsm/userguidefsm/","tags":"","title":"User Guide Finite State Machine"},{"body":" Knowledge Base Knowledge base for key themes mastered in our organization.\nAgile and Scrum Agile Transformations\nAgile and Scrum Blogs\nAgile Scrum Workshop\nAgile Technical Fluency Workshop\nLean Software Development, Scrum, LeSS, Scrum Guide, Scrum Alliance, Scrum Alliance\nAgile Manifesto and 12 Agile Manifesto Principles, Kaizen, eXtreme Programming\nSoftware Craftsmanship, Sociocracy, Beyond Budgeting Round Table\n{ref-trunk-based-development}\nDevOps Git, GitHub, GitLab, BitBucket Blogs\nDevOps Blogs\nAgile Technical Fluency Workshop\nDevOps\nGit, GitHub, GitLab\nAgile Software Architecture and Design Agile Architecture\nAgile Architecture Blogs\nAgile Design Blogs\nAgile Software Architecture and Techniques Lecture\narc 42 Workshop\nC4 and UML Workshop\nC4 Model, plantUML, Mermaid, UML, {ref-state-machine-cat}\n{ref-actor-model}, OpenAPI, Async API\nDomain-Driven Design Domain-Driven Design\nDDD Workshop\nIdentifier Blogs\nModern Java Modern Java Blogs\nJVM Languages Blogs\nProgramming Concepts and Paradigms Lecture\nJavaDoc\nMicroStream\nEmbedded Devices Embedded Devices Blogs\nC++ Blogs\nDoxygen\n{ref-cmsis-rtos2}, {ref-can-bus}, {ref-micro-os-II}\n","categories":"","description":"","excerpt":" Knowledge Base Knowledge base for key themes mastered in our organization.\nAgile and Scrum Agile Transformations\nAgile and Scrum Blogs\nAgile Scrum Workshop\nAgile Technical Fluency Workshop\nLean …","ref":"/expertise/knowledge-base/","tags":"","title":"Knowledge Base"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/ledger/","tags":"","title":"Ledger - Ledger Bounded Domain"},{"body":" Components Publication Regular Git Repository Update Push the changes to the GitHub repository Open Source Components.\nVerify that the build job in the CI pipeline was successful.\nPush the changes to the GitHub repository. The statistics for developer activities will be automatically updated.\nContinuous Delivery Pipelines See Readme.\nMaven Central Publication The following process is used to publish tangly open source component on Maven Central.\nPublish artifacts of a component with the script uploadToMavenCentral.sh. Do not use the gradle task gradle publishAllPublicationsToMavenRepository -Pmode=prod. Sonatype cannot handle a parallel upload of multiple components and simply close the connections during upload (Status 2020-Q2).\nPre-activity: test publishing with gradle publishToMavenLocal\nPre-activity: check on bitbucket the product compiles through the CI continuous integration pipeline\nPost-activity: tag repository on git to identify the version of the published packages. The tag version semantic part must be the same as the package version on Maven Central The tag is of the form -{AcronymComponent}-MajorVersion-MinorVersion-PatchVersion-\nVerify with git tag label and git push origin --tags\nLog into Sonatype Maven Central Repository\nGo to Staging Repositories\nFind your temporary repository at the end of the list\nReview the content of the repository\nClose the repository-button on tool list-\nClose stage is initiated and checks are performed. If everything was fine, the content was published.\nRelease the artifact-button on the tool list-\nSee Static Website Publication to update the website\nIt takes up to one day until the component is visible in Maven Central website upon publication.\nOn the positive side, the last publications were performed in less than 30 minutes.\nBelow the dependencies between tangly open source components as defined in the multi-modules Gradle Build Tool build file.\nnettanglyerpbddcommonscoredevfsmgleamuicollaboratorscrminvoicesledgerproductssharedui Decisions The open source components are stored in a mono repository. Each component is declared as a gradle module.\nWe use de facto standard Git.\nWe are hosted at GitHub [1]. Mirror repositories are hosted at GitLab, Bitbucket, and the technical university of Lucerne.\nThe continuous delivery pipelines work for the primary and all mirror platforms. The build uses the eclipse-temurin Java distribution. This docker image is based on Ubuntu. The installation of additional packages is therefore simplified [2].\nThe synchronization is performed with the command\ngit push --prune https://github.com/marcelbaumann/tangly-os.git +refs/remotes/origin/*:refs/heads/* +refs/tags/*:refs/tags/* (1) git remote (2) git push origin-github (3) git push origin-gitlab git push origin-hslu git push origin-bitbucket 1 Push the repository with all remotes, references and tags to GitHub specified repository 2 List all remotes associated with this git repository 3 Push the master branch to the origin-github remote repository. The push shall trigger the continuous integration pipeline You must create a token for developer account to be able to push changes and trigger the CI pipeline. The username is your account username The password is the generated token [3]. Store it in a safe place.\nFindings We needed to manually publish the public key on keys.openpgp.org\nGradle build file has a condition including disabling the signing plugin on the CI pipeline because keys and associated authentication are not available. I decided not to upload private keys to bitbucket. See the documentation at the beginning of the Gradle build file for details.\nSet the property if you want to sign the component artifacts and publish to Maven Central. Static Website Publication Introduction The static website uses Asciidoc to write all documents.\nThe static website uses Hugo as site generator. The Hugo theme is Docsy.\nConfigure Asciidoctor The new version of the Hugo support configuration of Asciidoctor through config.toml therefore no manipulation of asciidoctor is needed. As a bonus, the files generated by PlantUml are created in the correct folder. We still need to install the referenced packages.\nsudo gem install asciidoctor-diagram (1) sudo gem install asciidoctor-bibtex (2) sudo gem install asciimath (3) 1 Provides support for all diagrams such as plantUML and mermaid. 2 Provides support for formal bibliography references. 3 Provides support for mathematical and logical expressions in documents. Docsy Tailoring The docsy theme is missing some features. It does not support asciidoc styling or commenting blogs. Our extensions follow the official rules how a theme can be tailored and expended.\nThe major changes are:\nInclusion of the styling sheet asciidoctor.scss to style asciidoc documents [4].\nInclusion of the shortcodes extension shortcodes.html layouts and the style file shortcodes.scss to support file attachments in the website [5].\nExtension of the blog section with comments-uttereances.html to support comments on blog articles [6].\nChanges in the header and footer partials to display mathematical expressions and well-styled copyright [7].\nAll changes are defined in the assets and layouts folders as part of our website content. Hugo’s algorithms select local overwritten files and ignore the corresponding theme files.\\\nThe current structure of our extensions follows the official approach how a Hugo module should be extended. We do not change any files in the theme. All changes are defined locally. We use the selection algorithm of Hugo to activate our tailoring and extensions.\nCreate Website The tangly open source components website is hosted under Documentation.\nRead the instructions in the asciidoctor script file under the scripts' folder. Four scripts are provided to generate the Hugo static site with associated structure and theme.\nthe script initiateHugo.sh creates the layout of the site and retrieves the theme.\nthe script populateHugo.sh populates the site with our content.\nUpon completion of local development, you must start a local Hugo server and generate the indexing files for lunr search. Before uploading the site, stop the Hugo local server.\nthe script completeHugo.sh generates the static pictures and copies them to the static folder and publish the whole site on bitbucket.\nUpon completion, the site is published on the web for all.\nSet JDK Version under macOS Install regular Java JDK such as the Oracle or OpenJDK distribution. They will be located under /Library/Java/JavaVirtualMachines.\nIf using bash or zsh shell, add the following commands to your .bash_profile or .zshrc [8].\nalias java17 = \"export JAVA_HOME=`/usr/libexec/java_home -v 17`; java -version\" alias java19 = \"export JAVA_HOME=`/usr/libexec/java_home -v 19`; java -version\" alias java20 = \"export JAVA_HOME=`/usr/libexec/java_home -v 20`; java -version\" alias java21 = \"export JAVA_HOME=`/usr/libexec/java_home -v 21`; java -version\" You can set the exact version such as 17.0.1 to precisely select a JDK or set an overall version such as 17 to select a generic version.\nAfter restarting your terminal, the command java17 will set JDK 17 to default JDK (if installed on your macOS).\nThe list of JDK can be found with\n/usr/libexec/java_home -V Create Docker Distribution Generate the ERP application as a production release.\ngradle install -DproductionMode=true (1) gradle install -Pproduction unzip ./build/distributions/net.tangly.erp.ui-\u003cversion\u003e.zip (2) docker build -t erp-docker . (3) docker run -ti -p 8080:8080 erp-docker (4) 1 Generates a production distribution stored under ./build/distributions 2 Unzip the packed distribution because the docker base image does not contain unzip utility 3 Build the docker image named erp-docker 4 Run the docker image erp-docker and map the image port to 8080 1. We moved from Bitbucket to GitHub in 2022. The reasons were that the new platform supports publishing of static website with a lot more functionalities. The new agile project management functionality with Scrum boards, sprint iterations and insights report is very interesting. 2. It is a shame that each hosting platform has created their own incompatible pipeline script syntax. 3. This is necessary if you have enabled two factors authentication. The other approach is to generate an SSH key and perform all operations other SSH. 4. I asked for a change request on GitHub for Docsy to better support asciidoc documents. The Docsy team decided that their priorities are different and rejected the request. 5. This change is defined as a merge request. The pull request is quite old and seems to have a low priority. 6. The current setup of the template does not allow selection of a comment solution per configuration. 7. An issue report exists on GitHub about the copyright issue. 8. zsh is the default shell in current macOS versions. ","categories":"","description":"Workflow to publish open source components","excerpt":"Workflow to publish open source components","ref":"/ideas/components-publication/","tags":"","title":"Components Publication"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/gleam/","tags":"","title":"Gleam - Library to import and export domain objects to TSV and JSON data files"},{"body":" Collaborators Bounded Domain Domain Model Scenario Yearly Legal Salary Form As a collaborator I have a work contract with an organization. The organization provides legal insurances, social insurances and pension funds. The minimal coverage is defined by law in Switzerland. Companies are free to provide additional services.\nI shall receive a yearly legal salary form documenting my salary and paid insurances. The form is a key document for the Swiss tax declaration.\nPension Fund Individual Rebate Pension funds can offer a rebate for each collaborator based on non-documented rules. The pension funds must provide a rebate based on legal requirements to ease the burden of cotisations for older collaborators.\nOur domain model shall provide a mechanism to track these yearly individual rebates. The rebates have an impact to some positions in the yearly legal salary form.\nSocial Insurances Social insurances are a percentage deducation of the salary of each collaborator. The percentages can be modified on a yearly basis. The percentages are dependant of the salary of the collaborator.\n","categories":"","description":"","excerpt":" Collaborators Bounded Domain Domain Model Scenario Yearly Legal Salary Form As a collaborator I have a work contract with an organization. The organization provides legal insurances, social …","ref":"/docs/domains/collaborators/collaborators-design/","tags":"","title":"Collaborators Design"},{"body":" Developer Guide Commons UI Develop ERP Application Run From Command Line To run quickly from the command-line in development mode:\n./gradlew run (1) 1 Your app will be running on http://localhost:8080. Run From IDE Run ./gradle vaadinPrepareFrontend in the project, to configure Vaadin for npm mode.\nRun/Debug the EmbeddedJetty class as an application (run the _main()- method). The app will use npm to download all javascript libraries (will take a long time) and will start in development mode. Your app will be running on http://localhost:8080.\nIf in trouble you can find and kill the server on a specific port address, here 8080 with the following commands.\nlsof -i :8080 | grep LISTEN (1) ps -ef pid kill pid (2) 1 to get the pid of process using port 8080 2 kill the process using port 8080 Deploy ERP Application Packaging for production To package in production mode:\n/gradlew build -PproductionMode=true The project packages itself as a zip file with dependencies. The file is in build/distributions/net.tangly.ui-X.Y.Z.zip\nRunning in production mode To build and run the zip file:\ngradle build -PproductionMode=true (1) cd build/distributions/ unzip net.tangly.ui-X.Y.Z.zip cd net.tangly.ui-X.Y.Z/bin export NET_TANGLY_UI_OPTS=--enable-preview (2) ./net.tangly.ui (3) 1 Create the distribution as a zip file with all dependencies for production 2 Enable preview mode for the JVM to support preview features 3 Head to localhost:8080/ If you do not have nodeJS installed in your CI environment, you can use the Vaadin plugin to download node.js for you beforehand:\ngradle clean vaadinPrepareNode build -Pvaadin.productionMode Running in Docker To build and package this project as a docker image:\ngradle build -Pvaadin.productionMode=true unzip build/distributions/build/distributions/net.tangly.ui-X.Y.Z.zip # modify run shell and update NET_TANGLY_UI_OPTS=\"--enable-preview\" or JVM_ARGS=\"-enable-preview\" docker build --no-cache -t test/erp-tangly:latest . (1) docker run --rm -ti -p8080:8080 test/erp-tangly (2) 1 Docker will run the Dockerfile and build a docker image. Beware the dot tells docker that the Dockerfile is in the local directory 2 Run the image, head to localhost:8080/ Tips and Tricks The application works well with Google Chrome, Safari, and Firefox. We have trouble with iPad Safari. The menu bar and button bars are not always visible, and scrolling is slow and bumpy.\nUsing addAndExpand(Components …​) instead of add(Components …​) displays the button bar of a vertical component in iPad Safari.\n","categories":"","description":"","excerpt":" Developer Guide Commons UI Develop ERP Application Run From Command Line To run quickly from the command-line in development mode:\n./gradlew run (1) 1 Your app will be running on …","ref":"/docs/ui/developerguide/","tags":"","title":"Developer Guide UI"},{"body":" Extendable Domain Models - === Introduction\nIdentifiers Names Codes Tags Comments Lessons Learnt Future Research Themes To be written\nLinks [1] The power of Tags and Comments. Marcel Baumann. 2020\n[1] Reference Codes. Marcel Baumann. 2020\n[1] Meaningful Identifiers. Marcel Baumann. 2021\n[1] Identifiers and Names. Marcel Baumann. 2020\n","categories":"","description":"Extension mechanisms to domain driven models with the modern Java technology stack","excerpt":"Extension mechanisms to domain driven models with the modern Java technology stack","ref":"/ideas/extendable-domain-models/","tags":"","title":"Extendable Models"},{"body":" ERP Introduction The tangly ERP application promotes the various open source components our {ref:tangly} company develops, supports, and publishes.\nWe are a strong supporter of the eat your own dog food approach. The application is used to run daily business and all financial processes of our company. All data since the inception were moved in the application. This approach is ideal for the industrialisation and validation of all features.\nWe are proud to provide quite a few advanced functions in the released application.\nFull support of the Swiss 2D barcode payment solution for all invoices issued for Swiss customers,\nFull support of digital invoice data based on the EN 16931 standard for all interested customers. The standard is also know as Factur-X and ZUGFeRD version 2.1 in France and Germany. E-invoices are mandatory for some business in Germany and France. Switzerland is a slow adapter.\nSliding windows for all financial reports to support rolling financial planning and reporting. {ref:bbrt} advocates similar approaches for digital and agile company-wide transformation.\nThe first objective of Factur-X is to enable suppliers, invoice issuers, to create added-value e-invoices. The e-invoices shall contain a maximum of information in structured form, according to their ability to produce them in this form. Let customers recipients free to use the invoice data or the readable presentation, depending on their needs, and their invoice process maturity on automation.\nComponents The application provides independant components to manage all aspects of a service company\nCustomer Relationships To be written\nProducts and Projects To be written\nArticles and Invoices To be written\nFinancial Accounting To be written\n","categories":"","description":"","excerpt":" ERP Introduction The tangly ERP application promotes the various open source components our {ref:tangly} company develops, supports, and publishes.\nWe are a strong supporter of the eat your own dog …","ref":"/docs/ui/userguideerp/","tags":"","title":"User Guide tangly ERP"},{"body":" Bounded Domain CRM Context The bounded domain contextCRM implements\nThe core domain Customer Relationship Management\nIt uses the shared kernel Core providing core abstractions to modeling\nBounded Domain Workflow The workflows describe the regular activities a service company has with their contacts and customers.\nTable 1. CRM Workflows ID Description CRM-001\nAs a salesperson I want to create and modify a legal entity so that I have a record of every organization my company is working with. I want to have access to data describing the organization so that I can formally interact with them.\nCRM-002\nAs a salesperson I want to create and modify a natural entity so that I have a record of every prospect my company interacts with. I want to have access to data describing the person so that I can better interact with her.\nCRM-003\nAs a salesperson I want to define when a person is working for an organization so that I have an history of which companies a contact worked for. We register the duration when a person is an employee of an organization. A person can work for multiple organizations simultaneously.\nCRM-004\nAs an employee I want to create and modify an interaction describing how I interact with a legal entity so that an history of all initiatives exists. The goal of an interaction is to conclude a contract.\nCRM-005\nAs an employee I want to document all activities with entities necessary during an interaction so that an history of all communicaitons exists\nCRM-006\nAs a salesperson I want to register all legal contracts with an organization so taht I have a trace of these legal documens.\nCRM-007\nAs a salesperson I want to initiate an interaction with a legal entity and actively work to conclude a contract with them. I can have multiple activities to interact with the organization before concluding the interaction. An interaction can be completed successfully or not. During the timeline of the interaction the potential and probability of success can change. As a salesperson I am only interested on the current potential and success odds and not on their timely evolution.\nA legal and natural entity shall provide links to gather additional information. A standard approach is to provide a link to the organization or persson LinkedIn profile.\nAll entities support tags and comments to add additional information or define orthogonal classifiations.\nThe following secondary workflows are under evaluation\nAs a salesperson I want to create a lead so that A list of potential prospects is available.\nAs a salesperson I want to promote a lead to a legal entity so that I can perform sales activities with this organization.\nThe non-functional constraints for typical regular small and medium enterprise datasets.\nThe legal entities are less than 5'000 organizations.\nThe natural entities are less than 20'000 persons.\nThe contract entities are less than 5'000 a year with a legal retention of the year. The total number is less than 50'000.\nThe active employees of the company are less than 200.\nShared Features The bounded domain uses the features provided through the tangly-os shared kernel.\nAll entities can have human-readable comments and orthogonal tags. Comments provide a mechanism to add unstructured human-readable information. Tags allow the definition of classification and informal ontologies.\nBounded Domain CRM model ","categories":"","description":"","excerpt":" Bounded Domain CRM Context The bounded domain contextCRM implements\nThe core domain Customer Relationship Management\nIt uses the shared kernel Core providing core abstractions to modeling\nBounded …","ref":"/docs/domains/crm/models/","tags":"","title":"Bounded Domain CRM Model"},{"body":" Invoices Model Concepts Invoices define a business bounded domain as defined in domain-driven design approach. They are not constrained through external entities such as products, contracts or legal entities. External entities can provide hints to streamline the creation of regular invoices. The invoice article identifier is available as an external identifier to the article bounded domain. Similar identifiers are available for legal entities.\nVAT rates are defined within an article definition. Therefore, different VAT rates require different article definitions. For example, in Switzerland, a service company has two VAT rates. One for regular services and one for services exempted from VAT taxes.\nThe currency is defined at the invoice level, meaning all invoice items and subtotals should use the same currency.\nArchiving An invoice contains all the information to create a legally binding document and hove no dependencies to external systems. Invoices should have a unique identifier for accounting purposes. A good practice is to use the identifier as part of the archived file to streamline traceability. Invoices can be stored in a database, exported as a PDF file or as a JSON file. The PDF file is human-readable and adequate for document archiving and legal auditing. The JSON file is an adequate archive format which can digitally be processed.\n","categories":"","description":"","excerpt":" Invoices Model Concepts Invoices define a business bounded domain as defined in domain-driven design approach. They are not constrained through external entities such as products, contracts or legal …","ref":"/docs/domains/invoices/models/","tags":"","title":"Bounded Domain Invoice Model"},{"body":"Agile Software Architecture and Techniques Lectures Software Architecture and Techniques SWAT discuss approaches, methods and tools taught in the context of agile development approaches. It reflects current trends where more than 80 % of new software development is performed using agile software development approaches.\nThe depth of the concepts shall be modulated to the knowledge of the participants. Primary goals are to establish comprehension of agile architecture and master a small set of techniques enabling the participant to define a component or a small application architecture.\nSWAT Lectures 01-WhyAgileArchitectureAndDesign.pdf (774.8 kB) 02-EvolutionOfSoftwareArchitectureOverTheLastDecades.pdf (1.5 MB) 03-WhatIsAgileArchitecture.pdf (1.4 MB) 04-AgileApproachesWithScrumXpLess.pdf (1.9 MB) 05-Refactoring.pdf (261.7 kB) 06-ErrorsVulnerabilitiesSmellsInSourceCode.pdf (614.9 kB) 07-ArchitectureOfComponentsAndSubsystems.pdf (594.3 kB) 08-VerifyFunctionalFeatures.pdf (625.8 kB) 09-ValidateArchitectureCharacteristics.pdf (905.6 kB) 10-ArchitectureDocumentation.pdf (480.3 kB) 11-ArchitectureTrends-I.pdf (1.0 MB) 12-ArchitectureTrends-II.pdf (635.8 kB) 13-DomainDrivenDesignWorkshop.pdf (787.5 kB) 14-TeamAndTechnicalExcellenceForArchitects.pdf (1.5 MB) Software Architecture and Techniques SWAT lectures SWAT Recommended Literature 01-DevDotStar_Reeves_CodeAsDesign (optional).pdf (76.7 kB) 01-WhoNeedsArchitect.pdf (147.5 kB) 02-TOGAF-AgileArchitectureInTheDigitalAge.pdf (721.3 kB) 02-TOGAF-OpenAgileArchitecture (optional).pdf (19.2 MB) 03-CleanArchitectureCheatSheet.pdf (596.2 kB) 04-LargeScaleAgileDesignAndArchitectureWaysOfWorking.pdf (2.9 MB) 04-LeSS-Poster (optional).pdf (11.9 MB) 04-ScrumAndXpFromTheTrenches-2nd (optional).pdf (5.2 MB) 04-ScrumGuide2020.pdf (248.4 kB) 05-CleanTDDCheatSheet.pdf (1.7 MB) 06-CleanCodeCheatSheet.pdf (1.6 MB) 06-OWASPTop10-2017 (optional).pdf (1.7 MB) 07-JavaDesignPatterns (optional).pdf (3.5 MB) 08-ArchitecturesExamples (optional) .pdf (2.9 MB) 09-ModernJavaEEDesignPatterns.pdf (9.1 MB) 10-CheatSheet-UML-Notation (optional).pdf (10.3 MB) 10-Checklist-C4-Notation.pdf (33.2 kB) 11-DomainDrivenDesignQuickly.pdf (1.2 MB) 11-MicroservicesVsMonoliths (optional).pdf (4.7 MB) 12-ContinuousDeliveryPatterns (optional).pdf (950.4 kB) 12-FasterSmarterDevOps (optional).pdf (6.0 MB) 14-HighPerformanceTeamsTheFoundations.pdf (1.3 MB) 14-Leading-Self-Organising-Teams (optional).pdf (3.7 MB) 14-WhyAgileWorks (optional).pdf (2.2 MB) Recommended readings for the Software Architecture and Techniques SWAT lectures SWAT Optional Historical Papers 1968-Conway-how-do-committees-invent.pdf (2.9 MB) 1968-Dijkstra-goto-statement-considered-harmful.pdf (609.2 kB) 1970-Royce-managing-the-development-of-large-systems.pdf (433.5 kB) 1971-Parnas-on-the-criteria-to-be-used-in-decomposing-systems.pdf (575.7 kB) 1986-Brooks-no-silver-bullet.pdf (260.0 kB) 1995-Frederick-Brooks-No-Silver-Bullet.pdf (260.0 kB) 2006-Moseley-out-of-the-tar-pit.pdf (401.2 kB) Readings to explore the history of software development and architecture Agile Technical Fluency Books .DS_Store (6.0 kB) KanbanAndScrum.epub (18.3 MB) Moving-your-Scrum-downfield.pdf (5.5 MB) ProGit.epub (13.4 MB) ScrumAndXpFromTheTrenches-2nd.epub (8.7 MB) Books to acquire technical fluency Modern Java and Selected JVM Languages Lectures Modern Java and Selected JVM languages PCP discuss programming paradigms to write legible, efficient source code. The theory is mapped to programming language features. The participants learn how to create modern design concepts and implement them in JVM languages such as Java, Clojure, and Groovy.\nKey themes are:\nAlgebraic data types with records, sealed types and libraries such as lombok Functional programming with lambdas, streams, and optional. Functional concepts of first-class citizens, currying, recursion are discussed. Pattern matching extensions in switch, if and instanceof expressions. Module concept in Java environment Advanced concepts such as Valhalla, Loom, Panama, and Amber and their impact on JVM programming Clojure and Groovy are extensively used to explain better implementations of the above concepts. Modern Java Lectures PCP-Modern-Java-01-Algebraic-Data-Types.pdf (133.6 kB) PCP-Modern-Java-02-Lambdas-Streams.pdf (406.3 kB) PCP-Modern-Java-03-Modules.pdf (339.4 kB) PCP-Modern-Java-04-Structured-Concurrency.pdf (1.2 MB) Modern Java and Selected JVM Languages Lectures Modern Java Recommended Literature 2003-Martin-Fowler-When-To-Make-A-Type.pdf (282.3 kB) Java-9-modules-cheatsheet.pdf (204.2 kB) Recommended readings for the Modern Java and selected JVM languages lectures User Interfaces with Vaadin User Interface Books 2016-vaadin-programming-cookbook.pdf (3.6 MB) 2019-Book-of-Vaadin-14.pdf (9.4 MB) Modern Java User Interfaces ","categories":"","description":"Lectures and associated literature","excerpt":"Lectures and associated literature","ref":"/ideas/learnings/lectures/","tags":"","title":"Lectures"},{"body":" PCP Lectures Introduction The programming concepts and paradigms PCP convey the basic for functional programming and modern java programming. The Clojure language [1] is used to teach functional programming approaches. The focus is on immutability, functions as first-class citizens, and parallel programming. Later, we analyze how far it is possible to use these techniques in the modern Java language.\nSlides and reference literature are in English and published under Slides and Literature.\nDescription \\$2/3\\$ of the lecture is the presentation of new concepts. \\$1/3\\$ of the lecture is used to discuss exercise solutions and support the students in the application of the concepts.\nModern Java The modern Java [2, 3, 4, 5] lectures are:\nLecture Content Details Lecture 1\nAlgebraic Data Types\nRecords\nSealed types — interfaces, abstract classes, classes, and records -\nPattern matching and deconstruction in the conditional statements if and switch\nImplement the visitor pattern with a functional approach\nLecture 2\nLambdas and Streams\nSingle abstract method SAM interface and abstract class\nCustom intermediate and final operations with gatherers and collectors\nTricks with type inference. An example of a functional builder is discussed.\nFunctional Programming with Java\nLecture 3\nModules\nModule concepts and declarations\nCreate and deploy services\nModernize Java legacy applications and migrate them to a module structure\nLecture 4\nStructured Concurrency with Loom\nVirtual threads\nExecutors\nStructured concurrency\nDo we still need asynchronous programming or asynchronous frameworks?\nInterested readers can explore further functional programming [6] and Java modules [7].\nClojure To be written\nReferences [1] S. D. Halloway, Programming Clojure. 2012 [Online]. Available: https://www.amazon.com/dp/B07BN4C92X\n[2] S. Harrer, J. Lenhard, and L. Dietz, Java By Comparison. Pragmatic Bookshelf, 2018 [Online]. Available: https://www.amazon.com/dp/B07CLFTVZS\n[3] J. Bloch and N. Gafter, Java™ Puzzlers. Addison-Wesley Professional, 2005 [Online]. Available: https://www.amazon.com/dp/032133678X\n[4] J. Bloch, Effective Java, Third. Addison-Wesley Professional, 2017 [Online]. Available: https://www.amazon.com/dp/B078H61SCH\n[5] K. Henney, 97 Things Every Java Programmer Should Know. O’Reilly Media, Incorporated, 2019 [Online]. Available: https://www.amazon.com/dp/B088P8GV8X\n[6] V. Subramaniam, Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions. The Pragmatic Programmers, 2014 [Online]. Available: https://www.amazon.com/dp/B0CJL7VKFL\n[7] S. Mak, Java 9 Modularity. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491954167\n","categories":"","description":"","excerpt":" PCP Lectures Introduction The programming concepts and paradigms PCP convey the basic for functional programming and modern java programming. The Clojure language [1] is used to teach functional …","ref":"/ideas/learnings/lectures/pcp-lecture/","tags":"","title":"PCP Lectures"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/products/","tags":"","title":"Products - Products Bounded Domain"},{"body":" SWAT Lectures Introduction The software architecture and techniques SWAT lecture conveys the basics of systematic agile design of a software architecture. The approach is adequate for the problem of (agile architectural thinking) as well as methods of agile quality assurance. Students apply the learnt principles of their semester or private software projects.\nIt is particularly suitable for students who are working on a larger software project at the same time. The course with 3 ECTS was taught at Swiss technical universities during this and the last decade. The themes are regularly updated to reflect actual trends and technical possibilities.\nSlides and reference literature are in English and published under Slides and Literature.\nDescription \\$2/3\\$ of the lecture is the presentation of new concepts. \\$1/3\\$ of the lecture is used to discuss the literature and support the students in the application of the concepts of their software project.\nThe reference books are [1, 2, 3].\nRecommended books are [4, 5, 6, 7, 8].\nThe basics of the domain-driven design approach are presented in the third part of the training [9, 10, 11].\nLecture Content Details Lecture 1\nWhy agile architecture and design?\nIntroduction and administrative information\nWhy is software architecture and design a needed discipline?\nArchitecture Styles\nOOP Anti-Patterns\nSetup environment for exercises and portfolio\nLecture 2\nEvolution of Software Architecture and Design over the last Decades\nEvolution of software architecture\nUML, RUP and TOGAF\nAgile approaches\nLecture 3\nWhat is Agile Architecture?\nAgile architecture principles\nDeveloper vs Architects\nDomain-Driven Design DDD\nLecture 4\nAgile Approaches with Scrum, eXtreme Programming, LeSS\nArchitect roles\nTechnology stacks\nDevOps impact with continuous integration CI, continuous delivery CD, and continuous deployment CD.\nLecture 5\nRefactoring\nWhy refactor?\nHow to refactor?\nTest driven design TDD, acceptance test driven development ATDD\nClean code and clean architecture\nLecture 6\nErrors, Vulnerabilities, and Smells in Source Code\nDefinition of smells and how to remove smells.\nRefactoring process with TDD.\nEvolve architecture to newer versions of programming languages or more modular architecture.\nTools to detect non-quality\nComponent quality\nLecture 7\nArchitecture of Components and Subsystems\nPatterns, idioms, paradigms\nSOLID principles\nOnion architecture\nBounded domains\nLecture 8\nVerify functional features\nFunctional and non-functional requirements\nVerification of functional requirements\nTDD, ATDD, BDD approaches\nLecture 9\nValidate Architecture Characteristics\nNon-functional requirement NFR measurement\nArchitecture Characteristics and fitness functions\nDevOps and DORA metrics\nMetrics and Automation\nCompliance and corporate governance\nLecture 10\nArchitecture Documentation\nWhy document?\nLiving documentation, architecture document record ADR\nDocumentation as a managed source published in a static website\nLecture 11\nSoftware Architectural Trends (1/2)\nFunctional Programming\nReactive Programming\nLecture 12\nSoftware Architectural Trends (2/2)\nSecurity\nMonitoring and Auditing\nRealtime Data Warehouse DWH\nLecture 13\nDomain-Driven Design Workshop\nDomain-Driven Development, ubiquitous language\nBounded domains, entities, aggregates\nEvent Storming\nConnection to modular monoliths and microservices based architecture\nAgile and DevOps affiliation\nLecture 14\nTeam and Technical Excellence for Architects\nDaily work of architects in agile environment\nReferences [1] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Automated Software Governance, Second. O’Reilly Media, 2023 [Online]. Available: https://www.amazon.com/dp/B0BN4T1P27\n[2] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\n[3] M. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\n[4] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[5] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[6] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[7] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[8] R. C. Martin, Clean Craftsmanship. Addison-Wesley Professional, 2021 [Online]. Available: https://www.amazon.com/dp/B095C16LSW\n[9] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[10] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n[11] V. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\n","categories":"","description":"","excerpt":" SWAT Lectures Introduction The software architecture and techniques SWAT lecture conveys the basics of systematic agile design of a software architecture. The approach is adequate for the problem of …","ref":"/ideas/learnings/lectures/swat-lecture/","tags":"","title":"SWAT Lectures"},{"body":" User Guide Actors Get Starting A finite state machine actor class is provided to easily create an active class whose behavior is defined through a finite state machine\nclass FsmActor\u003cO extends FsmActor\u003cO, S, E\u003e, S extends Enum\u003cS\u003e, E extends Enum\u003cE\u003e\u003e extends Actor\u003cEvent\u003c?\u003e, Void\u003e { private static final Logger logger = LoggerFactory.getLogger(); private final StateMachine\u003cO, S, E\u003e fsm; public FsmActor(@Nonnull FsmBuilder\u003cO, S, E\u003e builder, String name) throws SuspendExecution { super(name, new MailboxConfig()); fsm = builder.machine(name, (O) this); spawn(); try { register(name); } catch (SuspendExecution e) { logger.error(\"Could not register actor {} in name registry due {}\", name, e); } } public void process(@Nonnull Event\u003cE\u003e event) throws SuspendExecution { self().send(event); } protected Void doRun() throws InterruptedException, SuspendExecution { for (; ; ) { Event\u003c?\u003e event = receive(); fsm.fire((Event\u003cE\u003e) event); if (fsm.isFinal()) { return null; } } } } You can find an example of how to create FSM actor derived classes in the tests in package net.tangly.fsm.actors.\nActors and Finite State Machine Messages The message sent to a finite state machine instance is a regular event instance with a generic parameter being the enumeration of all event kinds the machine should process.\nYou send a message to a quasar actor with the following snippet such as. The run method of the FSM actor will retrieve the event from the message queue of the quasar actor instance and dispatch it to the finite state machine instance\nActorRef\u003cObject\u003e clientRef = ActorRegistry.getActor(clientName); clientRef.send(new Event\u003cEvents\u003e(Events.Response, List.of(clientName, self()))); If you have reference to the FSM actor instance use the convenience method process such as\nclient.process(new Event\u003c\u003e(Events.Inquiry)); Actors Communication ","categories":"","description":"","excerpt":" User Guide Actors Get Starting A finite state machine actor class is provided to easily create an active class whose behavior is defined through a finite state machine\nclass FsmActor\u003cO extends …","ref":"/docs/fsm/userguideactor/","tags":"","title":"User Guide Actors"},{"body":" User Guide Gleam JSON Mapping Strengths The advantages of the Gleam JSON mapping library are:\nUse POJO - Plain Old Java Objects - and do not require Java Bean naming conventions for getters and setters.\nSupport immutable record constructs of Java. The field values are retrieved from CSV record in the first step. The record is constructed with values in the second step.\nSupport heteregeneous collections and can instantiate the expected instances through a user provided discriminator function.\nUse lambda for reading and writing properties\nThe JSON manipulation uses the JSON-Java library. We use the library variant com.guicedee.services:json supporting Java 9 module semantic.\nComplex structures are implemented through fields have a JSON entity as the generic parameter U.\nTSV Mapping The advantages of the Gleam TSV mapping library are:\nStrengths Recipes The classes provide factory methods to create JSON entity defining the transformation of a Java object to a JSON instance and vice-versa. Below the code to map a bank connection object defined as a Java record with three String properties.\npublic static JsonEntity\u003cBankConnection\u003e createJsonBankConnection() { Function\u003cJSONObject, BankConnection\u003e imports = object -\u003e { (1) BankConnection connection = new BankConnection(JsonField.get(\"iban\", object), JsonField.get(\"bic\", object), JsonField.get(\"institute\", object)); return (connection.isValid()) ? connection : null; }; List\u003cJsonField\u003cBankConnection, ?\u003e\u003e fields = List.of(JsonProperty.ofString(\"iban\", BankConnection::iban, null), JsonProperty.ofString(\"bic\", BankConnection::bic, null), JsonProperty.ofString(\"institute\", BankConnection::institute, null)); return JsonEntity.of(fields, imports); (2) } 1 Defines the import method to retrieve the values to create a bank connection, create an immutable Java record object, and validate the properties. 2 Returns a JSON entity defining an import method to construct an instance, and regular properties to create the JSON represenation. The InvoiceJson class is a good example using most of the factory methods provided in the JSON conversion library.\nTSV Mapping Strengths The advantages of the Gleam TSV mapping library are:\nUse POJO - Plain Old Java Objects - and do not require Java Bean naming conventions for getters and setters.\nSupport for immutable record constructs of Java\nSupport one to one and one to multiple instances relations. The identifier of the owner is stored in the TSV file as a foreign key. You do not need to change your classes to support the relation.\nThe TSV manipulation uses the apache commons csv library.\nTransform a Java Record The classes provide factory methods to create an entity defining the transformation of a Java object to a TSV instance and vice-versa. Below the code to map a bank connection object defined as a Java record with three String properties.\nThe key features to realize the transformation are:\nDefinition of the mapping of properties to TSV columns To be written\nDefinition of a constructor for the Java object To be written\nDefinition of tranformation methods To be written\nstatic TsvEntity\u003cBankConnection\u003e createTsvBankConnection() { Function\u003cCSVRecord, BankConnection\u003e imports = (CSVRecord record) -\u003e { (1) BankConnection connection = new BankConnection(get(record, IBAN), get(record, BIC), get(record, INSTITUTE)); if (!connection.isValid()) { logger.atWarn().log(\"Invalid bank connection {}\", connection); } return connection; }; List\u003cTsvProperty\u003cBankConnection, ?\u003e\u003e fields = List.of(TsvProperty.ofString(IBAN, BankConnection::iban, null), (2) TsvProperty.ofString(BIC, BankConnection::bic, null), TsvProperty.ofString(INSTITUDE, BankConnection::institute, null) return TsvEntity.of(BankConnection.class, fields, imports); (3) } 1 Define the import method to retrieve the values to create a bank connection, create an immutable Java record object, and validate the properties. The constants IBAN, BIC, and INSTITUTE define the column headers in the TSV file. 2 Declare a property of type string to a colom named IBAN with a getter and no setter to identify a read-only property. These declarations are used to transform a Java object into a TSV record. 3 Return a TSV entity defining an import method to construct an instance, and regular properties to create the TSV represenation. Transform a 1-1, 1-n, or 0-n Relation The classes provide factory methods to create owned entities defining the transformation of a relationship to a TSV instance and vice-versa.\nThe key features to realize the transformation are:\nDefinition of foreign key owner identifier To be written\nTransform an owned Java object to a TSV record To be written\nTransform a TSV record to an owned Java object To be written\n","categories":"","description":"","excerpt":" User Guide Gleam JSON Mapping Strengths The advantages of the Gleam JSON mapping library are:\nUse POJO - Plain Old Java Objects - and do not require Java Bean naming conventions for getters and …","ref":"/docs/gleam/userguide/","tags":"","title":"User Guide Gleam"},{"body":" Do The Right Thing Respect and tolerance\nSolidarity and social responsibility\nCuriosity, creativity and passion\nTransparency and integrity\nChampion Product Excellence Do not focus on the products you are building, focus on the problems our customers are encountering.\nImprove the world through our culture Do The Right Thing and our technology excellence.\nProduct achievement, accountability and success\nRun A Sustainable Business Great companies are not in business to make money, they make money to stay in business and accomplish an important purpose.\n","categories":"","description":"","excerpt":" Do The Right Thing Respect and tolerance\nSolidarity and social responsibility\nCuriosity, creativity and passion\nTransparency and integrity\nChampion Product Excellence Do not focus on the products you …","ref":"/expertise/values/","tags":"","title":"Values"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/shared/","tags":"","title":"Shared - Shared Kernel"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2026/","tags":"","title":"2026"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/ui/","tags":"","title":"Vaadin UI"},{"body":" ERP Design Context Persistence Folder Structure Files are written in italics font, folders are written in bold font. Examples with content are provided for each file type as test resources. These resources are available in the git repository.\nEntity Abstraction The entity abstraction has five kinds of properties\nSimple Properties are all displayed in a form part of a properties tab for visualization or editing.\nComments are displayed as a CRUD Grid - Form component part of a comments tab for visualization or editing following CRUD approach.\nTags are displayed as a CRUD Grid - Form component part of a tags tab for visualization or editing following CRUD approach. The tag registry provides support for legible namespaces, tag names, and if defined values.\nOne-to-One Relations To be written\nOne-to-Many Relations To be written\nCRUD Forms CRUD forms are programmatically defined to offer full content and layout control to the developer. The programmer populates a form layout and provides it to the CRUD class. The buttons of the form and associated actions are handled by the CRUD class. Callbacks are provided to inform the entity form class defining the form layout if the user accepted or cancelled his changes in the form.\nCrud List View and Details Form ","categories":"","description":"","excerpt":" ERP Design Context Persistence Folder Structure Files are written in italics font, folders are written in bold font. Examples with content are provided for each file type as test resources. These …","ref":"/docs/ui/design/","tags":"","title":"ERP Design"},{"body":" CRM Ports The CRM ports provide a bidirectional interface to persistent file storage.\nCRM entities can be stored to and retrieved from tab separated values TSV files.\nInvoices Ports Invoices are stored to and retrieved from JSON files.\nLedger Ports To be written\nLedger Banana Import Handler Importing Ledger Structure The following steps export the information from the banana application:\nSelect the accounts tab displaying all the accounts and their structure of the period\nGoto Data \u003e Export Rows \u003e Export Rows to txt\nSelect the destination file\nIf necessary change the extension to tsv\nThe generated file is a CSV file containing the whole ledger account plan. The separator is TAB.\nImporting Transactions The following steps export the information from the banana application:\nSelect the transaction tab displaying all the transactions of the period\nGoto Data \u003e Export Rows \u003e Export Rows to txt\nSelect the destination file\nIf necessary change the extension to tsv\nThe generated file is a CSV file containing the transaction details. The separator is TAB. It is a good practice to generate a file per fiscal year.\nAll imported transactions should use the same ledger structure to support benchmarking and reporting over multiple periods.\n","categories":"","description":"","excerpt":" CRM Ports The CRM ports provide a bidirectional interface to persistent file storage.\nCRM entities can be stored to and retrieved from tab separated values TSV files.\nInvoices Ports Invoices are …","ref":"/docs/domains/ledger/userguideports/","tags":"","title":"ERP Ports"},{"body":" Architecture Code Scene Purpose Agile development teams shall manage and diminish their technical debt. We provide instruments to increase the pay-off of refactoring measures. The most relevant source code parts should be refactored first. But how can we identify them?\nGit is the de facto standard for version management systems. Git contains the whole evolution story of our source code. We use these data to identify areas under repetitive change or often needing fixing. In parallel, the evolution of the source code hints us for complexity hotspots.\nThe three areas of statistical data are combined to identify the most promising area for refactoring. * History of commits reflecting the behavior and priorities of team members over time. * Evolution of source code artifacts reflecting changes in complexity and legibility. * Corrections of identified defects and their location identify non-quality hotspots.\nThe provided tools extract the requested indicators and present them graphically. The findings are used to support refactoring prioritization.\nRequirements Gather changes in the repository artifacts over a specified time interval.\nThe gathered data are date of change, the author of change, number of added lines and of removed lines.\nEach file change is gathered.\nOnly the version management system git is supported.\nGather complexity metrics over source code artifacts – classes and packages – over a specified time interval.\nGather location and time when identified defects were fixed in the source code repository.\nuse the official conventions to identify a closed ticket in a commit comment.\nModules, Packages, Classes and Files ","categories":"","description":"Analysis of source code as a code scene with specialized tools","excerpt":"Analysis of source code as a code scene with specialized tools","ref":"/ideas/architecture-code-scene/","tags":"","title":"Architecture Code Scene"},{"body":"Unknown reference: skilled-facilitator-resoruce Unknown reference: agile-produt-management Agile and Technical Excellence Books Agile J. Hesselberg, Unlocking Agility. Addison-Wesley Professional, 2019 [Online]. Available: https://www.amazon.com/dp/0134542843\nM. Poppendieck and T. Poppendieck, Implementing Lean Software Development. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/0321437381\nJ. Appelo, Management 3.0. Addison-Wesley, 2011 [Online]. Available: https://www.amazon.com/dp/0321712471\nF. Laloux, Reinventing Organizations. Nelson Parker, 2014 [Online]. Available: https://www.amazon.com/dp/2960133501\nH. Hamel and B. Breen, The Future of Management. Harvard Business Review Press, 2007 [Online]. Available: https://www.amazon.com/dp/1422102505\nScrum G. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\nH. Kniberg, Scrum and Xp from the trenches. C4MEDIA, 2015 [Online]. Available: https://www.amazon.com/dp/1329224272\nM. Lacey, The scrum field guide agile advice for your first year and beyond. 2016 [Online]. Available: https://www.amazon.com/dp/0133853624\nM. Cohn, Succeeding with agile. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321579364\nK. S. Rubin, Essential Scrum. Addison-Wesley, 2012 [Online]. Available: https://www.amazon.com/dp/0137043295\nM. Cohn, Agile estimating and planning. Prentice Hall Professional Technical Reference, 2005 [Online]. Available: https://www.amazon.com/dp/0131479415\nJ. Sutherland, Scrum: The Art of Doing Twice the Work in Half the Time. Crown Publishing Group, 2014 [Online]. Available: https://www.amazon.com/dp/038534645X\nS. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\nLean \u0026 kanban H. Kniberg, Lean from the Trenches. Pragmatic Bookshelf, 2011 [Online]. Available: https://www.amazon.com/dp/B00N4HZ6PK\nE. Ries, The Lean Startup. Crown Business, 2011 [Online]. Available: https://www.amazon.com/dp/0307887898\nM. Poppendieck and T. Poppendieck, The Lean Mindset. Addison-Wesley Professional, 2013 [Online]. Available: https://www.amazon.com/dp/0321896904\nF. Ballé and M. Ballé, The Gold Mine. Lean Enterprises Inst Inc, 2005 [Online]. Available: https://www.amazon.com/dp/0974322563\nM. Ballé, F. Ballé, and J. Liker, The Lean Manager. Len Publishing, 2009 [Online]. Available: https://www.amazon.com/dp/1934109258\nM. Ballé and F. Ballé, Lead with Respect. Len Publishing, 2014 [Online]. Available: https://www.amazon.com/dp/1934109479\nM. Balle, R. Priolo, and D. T. Jones, Lead with Lean. CreateSpace Independent Publishing Platform, 2016 [Online]. Available: https://www.amazon.com/dp/B075GTQHFX\nM. Poppendieck and T. Poppendieck, Implementing Lean Software Development. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/0321437381\nLess \u0026 Other Scaling Frameworks C. Larman, Large-scale scrum. 2017 [Online]. Available: https://www.amazon.com/dp/0321985710\nC. Larman, Scaling lean \u0026 agile development. Addison-Wesley, 2008 [Online]. Available: https://www.amazon.com/dp/0321480961\nC. Larman, Practices for scaling lean \u0026 agile development. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321636406\nK. Bittner, The Nexus framework for scaling scrum. 2018 [Online]. Available: https://www.amazon.com/dp/0134682661\nTeams Z. Sochova, The Great ScrumMaster. Addison Wesley, 2016 [Online]. Available: https://www.amazon.com/dp/013465711X\nG. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\nS. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\nL. Adkins, Coaching agile teams. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321534468\nE. Derby, D. Larsen, and K. Schwaber, Agile Retrospectives. Pragmatic Bookshelf, 2006 [Online]. Available: https://www.amazon.com/dp/0977616649\nR. Schwarz, The Skilled Facilitator. Jossey-Bass, 2002 [Online]. Available: https://www.amazon.com/dp/B0BT11C39N\nskilled-facilitator-resoruce\nT. DeMarco, Peopleware productive projects and teams, Third. 2013 [Online]. Available: https://www.amazon.com/dp/B00DY5A8X2\nProduct Owner D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\nJ. Patton, User Story Mapping. O’Reilly and Associates, 2014 [Online]. Available: https://www.amazon.com/dp/1491904909\nG. Adzic, M. Bisset, and T. Poppendieck, Impact Mapping. Provoking Thoughts, 2012 [Online]. Available: https://www.amazon.com/dp/0955683645\nR. Pichler, Strategize. Pichler Consulting, 2016 [Online]. Available: https://www.amazon.com/dp/0993499201\nagile-produt-management\nR. Pichler, How to Lead in Product Management. 978-1-9163030-0-3, 2020 [Online]. Available: https://www.amazon.com/dp/B085L8Z4YS\nM. Cohn, User Stories Applied. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321205685\nA. Osterwalder, Value proposition design. 2014 [Online]. Available: https://www.amazon.com/dp/1118968050\nC. Alvarez, Lean Customer Development. O’Reilly Media, 2014 [Online]. Available: https://www.amazon.com/dp/1492023744\nG. Adzic, Bridging the Communication Gap. Neuri Limited, 2009 [Online]. Available: https://www.amazon.com/dp/B008YZ993W/\nAgile Architecture N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\nM. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\nE. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\nV. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\nV. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\nM. C. Feathers, Working Effectively with Legacy Code. Prentice Hall, 2004 [Online]. Available: https://www.amazon.com/dp/0131177052\nJ. Kerievsky, Refactoring to Patterns. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321213351\nE. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns. Addison-Wesley Professional, 1995 [Online]. Available: https://www.amazon.com/dp/B000SEIBB8\nS. Newman, Building Microservices. O’Reilly Media, Incorporated, 2020 [Online]. Available: https://www.amazon.com/dp/B09B5L4NVT\nS. Newman, Building Microservices. O’Reilly Media [Online]. Available: https://www.amazon.com/dp/B00T3N7XB4\nD. Farley, Modern Software Engineering. Pearson Education, Limited, 2022 [Online]. Available: https://www.amazon.com/dp/B09GG6XKS4\nTechnical Excellence D. Thomas and A. Hunt, The Pragmatic Programmer - 20th Anniversary Edition, Second. Addison Wesley, 2020 [Online]. Available: https://www.amazon.com/dp/0135957052\nS. Mancuso, The Software Craftsman. Prentice Hall, 2015 [Online]. Available: https://www.amazon.com/dp/0134052501\nK. Beck and C. Andres, Extreme Programming Explained, Second. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321278658\nL. Crispin, Agile testing. Addison-Wesley, 2009 [Online]. Available: https://www.amazon.com/dp/0321534468\nJ. G. Gregory and L. Crispin, More Agile Testing. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/0321967054\nR. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\nR. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\nR. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\nR. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\nR. C. Martin, Clean Craftsmanship. Addison-Wesley Professional, 2021 [Online]. Available: https://www.amazon.com/dp/B095C16LSW\nDevOps B. Beyer, C. Jones, J. Petoff, and N. R. Murphy, Site Reliability Engineering. O’Reilly Media, Inc., 2016 [Online]. Available: https://www.amazon.com/dp/1492029505\nN. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\nG. Kim and N. Forsgren, DevOps Handbook, Second. IT Revolution Press, 2021 [Online]. Available: https://www.amazon.com//dp/B09G2GS39R\nG. Kim, The Phoenix Project a novel about IT, DevOps, and helping your business win. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/0988262592\nJ. Humble and D. Farley, Continuous Delivery. Addison-Wesley Professional, 2010 [Online]. Available: https://www.amazon.com/dp/0321601912\nChange Process M. L. Manns and L. Rising, Fearless Change. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/B019TM4P6Y\nM. L. Manns, More fearless change. 2015 [Online]. Available: https://www.amazon.com/dp/0133966445\nJ. P. Kotter, Leading change. Harvard Business Review Press, 2012 [Online]. Available: https://www.amazon.com/dp/1422186431\nH. R. John Kotter, Our Iceberg Is Melting. Penguin Publishing Group, 2016 [Online]. Available: https://www.amazon.com/dp/0399563911\nJ. P. Kotter, Accelerate building strategic agility for a faster moving world. 2014 [Online]. Available: https://www.amazon.com/dp/1625271743\nE. H. Schein and P. Schein, Organizational Leadership and Culture. John Wiely, 2017 [Online]. Available: https://www.amazon.com/dp/1119212049\nE. H. Schein and P. Schein, Corporate Culture Survival Guide. Wiley \u0026 Sons, Incorporated, John, 2019 [Online]. Available: https://www.amazon.com/dp/1119212286\nE. H. Schein and P. A. Schein, Humble Inquiry, Second. Berrett-Koehler Publishers, Incorporated, 2021 [Online]. Available: https://www.amazon.com/dp/1609949811\nP. M. Senge, The fifth discipline. Doubleday/Currency, 1990 [Online]. Available: https://www.amazon.com/dp/0385517254\nJava J. Bloch, Effective Java, Third. Addison-Wesley Professional, 2017 [Online]. Available: https://www.amazon.com/dp/B078H61SCH\nJ. Bloch, Effective Java, Second. Addison-Wesley Professional, 2008 [Online]. Available: https://www.amazon.com/dp/B078H61SCH\nJ. Bloch and N. Gafter, Java™ Puzzlers. Addison-Wesley Professional, 2005 [Online]. Available: https://www.amazon.com/dp/032133678X\nS. Harrer, J. Lenhard, and L. Dietz, Java By Comparison. Pragmatic Bookshelf, 2018 [Online]. Available: https://www.amazon.com/dp/B07CLFTVZS\nS. Mak, Java 9 Modularity. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491954167\n","categories":"","description":"bibliography agile and technical excellence books","excerpt":"bibliography agile and technical excellence books","ref":"/ideas/learnings/books/","tags":"","title":"Books"},{"body":" Ledger Model ","categories":"","description":"","excerpt":" Ledger Model ","ref":"/docs/domains/ledger/-models/","tags":"","title":"Bounded Domain Invoice Model"},{"body":" Bounded Domain Products Model ","categories":"","description":"","excerpt":" Bounded Domain Products Model ","ref":"/docs/domains/products/models/","tags":"","title":"Bounded Domain Producgts Model"},{"body":" Bounded Domain UI Model ","categories":"","description":"","excerpt":" Bounded Domain UI Model ","ref":"/docs/domains/ui/models/","tags":"","title":"Bounded Domain UI Model"},{"body":" Core Models Codes Model The abstraction of a reference table or reference codes. A code table is an extensible set of values. You can add values when needed and extend the model with temporal activation if desired. For example, currencies are typical code values with a temporal duration; well-known retired currencies are the European Currency Unit ECU or the German deutsche mark DM. New values can be added without recompiling the application. A code can have an optional validity period or simply a flag stating it is active or not. To guaranty consistency with exported datasets, a code format shall never be deleted, only be disabled. Code instances are immutable objects.\nYou can smooth your transition from enumeration types to reference codes. Extend your enumeration types with the Code interface.\nNow you can transform your code to support generic reference codes and make your application more dynamic to domain model changes.\nCore Model Entity An entity and all subclasses have a set of attributes present in any CSV file.\noid Object identifier of the entity instance as the string representation of a 64 bits long. The value is mandatory.\nid Identifier of the entity instance as a string. The value is optional.\nname Human-readable name of the entity instance as a string. The value is optional.\ntext Human-readable description of the entity instance as a long string. The value is optional.\nfromDate Start date when the entity instance is active. The value is optional.\ntoDate End date when the entity instance is active. Upon the end date, the entity should be read-only and no more edited in the system. The value is optional.\nSee our blogs for a discussion concerning the cornerstone abstractions of the business core model:\nEntities, internal Identifiers, external Identifiers, and Names,\nThe Power of Tags and Comments,\nReference Codes.\nCustomer Relationship Model CRM ","categories":"","description":"","excerpt":" Core Models Codes Model The abstraction of a reference table or reference codes. A code table is an extensible set of values. You can add values when needed and extend the model with temporal …","ref":"/docs/core/models/","tags":"","title":"Core Models"},{"body":" Design Finite State Machine Definitions A person who never made a mistake never tried anything new. — Albert Einstein What is a finite state machine? A Finite State Machine or FSM is an abstract model of deterministic computation, which can be in only one finite state at a specific moment. Finite State Machines are used to model problems in different domains such as AI, games, or application flows. It describes how a program should behave by specifying states and routes between them.\nFinite state machines are also called deterministic Finite Automaton.\nAnother open source implementation can be found under Easy States.\nStates A state is a description of the status for a system that is waiting to execute a transition. A transition is a set of actions to be executed when an event is received. For example, when using an audio system to listen to the radio, receiving the next stimulus results in moving to the next station. When the system is in the \"CD\" state, the \"next\" stimulus results in moving to the next track. Identical stimuli trigger different actions depending on the current state.\nIt is also possible to associate actions with a state:\nan entry action performed when entering the state, and\nan exit action performed when exiting the state.\nThe set of possible states is defined as an enumeration type in our library.\nStates can contain substates. A state containing a set of substates is called a hierarchical state.\nWhen you enter a hierarchical state, it is possible to define an initial state which is activated when a transition terminates on the border of the hierarchical state and no history is active.\nA hierarchical state can have a history. When a transition terminates on the border of the hierarchical state with history, the latest active state is automatically activated. If no history is available, the default state is activated. If none is defined, an illegal state error occurs.\nEvents An event is an external trigger processed in the finite state machine. The trigger can induce the firing of one transition.\nThe set of possible events is defined as an enumeration type in our library.\nTransitions A transition defines a potential change from one state to another one. A transition has a mandatory event triggering the firing of transition and an optional guard evaluation as a boolean condition.\nA local transition is a transition starting and ending in the same state. When fired, the exit and entry actions of the state are not executed.\nAn external transition between two states or the same state. When fired, the exit and entry actions of the states are always executed.\nActions and Guards An operation executed when the state machine processes an event. An action can be executed * when a transition is fired and the action is associated with the transition * when a state is entered through the firing of a transition * when a state is exited through the firing of a transition\nAn action has two parameters. The first is the context object owning the instance of the finite state machine. The second is the event being processed.\nThe order of the processing is the ordered list of actions associated with the exited states, the action on the transition, and the ordered list of actions associated with the entered states. The ordering is based on the traversal of the states seen from the transition being fired.\nA guard evaluates a transition which could potentially be fired. A transition is only fired if the guard returns true and the transition event is the event being fired.\nA guard has two parameters. The first is the context object owning the instance of the finite state machine. The second is the event being processed.\nFinite State Machine Model The event class triggering transitions in the finite state machine must be an enumeration type.\nThe state class defining the set of possible states in the finite state machine must be an enumeration type. the root state enclosing the whole machine is called per convention Root.\nFinite State Machine Builder Model The builder interfaces provide the implementation of the builder pattern to construct a finite state machine description using a fluent API.\n","categories":"","description":"","excerpt":" Design Finite State Machine Definitions A person who never made a mistake never tried anything new. — Albert Einstein What is a finite state machine? A Finite State Machine or FSM is an abstract …","ref":"/docs/fsm/design/","tags":"","title":"Design Considerations"},{"body":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","categories":"","description":"","excerpt":"The readme, user manual, documentation of the component and architecture consideration of the components.\nThe API documentation can be found under Javadoc.\n","ref":"/docs/domains/ui/","tags":"","title":"ERP-UI - UI for ERP Bounded Domains"},{"body":" Reference Codes Design Considerations The application is the sole and exclusive owner of the database instance. Instances can never be changed from another system when the application is running.\nThe domain model shall not be tainted with active record interfaces or forced inheritance structure. This decision reflects the hexagon architecture.\nUnique object identifiers are necessary to identify instances outside the Java virtual machine, such as databases, CSV files or JSON files. Object identifiers shall be managed and allocated through the active record library. The domain model shall not be a burden to managing internal identity tokens.\nExtensions shall be provided to support common model concepts. Extensions supporting reference codes, tags, and comments are provided.\nWe are enthusiasts to follow functional programming paradigm and object immutability. Therefore, the active record library should provide support for classes enforcing immutability.\n","categories":"","description":"","excerpt":" Reference Codes Design Considerations The application is the sole and exclusive owner of the database instance. Instances can never be changed from another system when the application is running.\nThe …","ref":"/docs/commons/referencecodes/","tags":"","title":"Reference Codes"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2025/","tags":"","title":"2025"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2024/","tags":"","title":"2024"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2023/","tags":"","title":"2023"},{"body":"Ambitious Missions need Disruptive Thinking We are passionate coaches and engineers. We are experts on agile transformation, technical excellence, and agile product development. We support organizations with ambitious missions.\nWe promote the digitalization of the society and organization’s processes. We believe innovation and technology are a positive force of change for business and society.\nWe support our clients to increase their innovation and delivery processes through agile approaches and technical excellence. We found out this mostly boils down to technical excellence, leadership, culture and organizational structure.\nThe most effective approaches so far to improve are Lean and Agile approaches. We truly believe agile approaches are a huge improvement in the workplace and the competitiveness in the marketplace. We promote\nSoftware craftsmanship at the individual level, Scrum, sometimes Kanban or XP at the team level, LeSS at the product and departmental level, Lean, Beyond Budgeting, Sociocracy at the organization level, Our technical expertise is in domain-driven design DDD and the modern Java stack. We provide onsite trainings, workshops and coaching of agile software development teams.\n","categories":"","description":"","excerpt":"Ambitious Missions need Disruptive Thinking We are passionate coaches and engineers. We are experts on agile transformation, technical excellence, and agile product development. We support …","ref":"/expertise/","tags":"","title":"Expertise"},{"body":" Feature: Sell items to customers The customer can buy various items from the store. Upon completion the stock of the store reflects the purchasing action.\ntags: 'Feature Example' 'Mandatory'\nStory: Buy Sweater As a store owner I want to update the stock when I am selling sweaters to customers.\ntags: 'Release 1.0'\nScenario: Sell some blue sweaters in stock to a customer given The store is stocked with sweaters and has 5 black sweaters in stock and 4 blue sweaters in stock when The customer buys 3 blue sweaters then The store should have 5 black sweaters in stock and 1 blue sweaters in stock\nScenario: Refuse to sell more blue sweaters than the store in stock given The store is stocked with sweaters and has 5 black sweaters in stock and 4 blue sweaters in stock when The customer try to buy 6 blue sweaters, and an exception is thrown then the store should have 5 black sweaters in stock and 4 blue sweaters in stock\nScenario: Sell some blacks and blue sweaters in stock given The store is stocked with sweaters and has 5 black sweaters in stock and 4 blue sweaters in stock when The customer buys 3 black sweaters then The store should have 2 black sweaters in stock and 2 blue sweaters in stock\nScenario: Sell some black sweaters in stock to a customer given The store is stocked with sweaters and has 5 black sweaters in stock and 4 blue sweaters in stock when The customer buys 3 black sweaters then The store should have 2 black sweaters in stock and 4 blue sweaters in stock\nScenario: Refuse to sell more black sweaters than the store in stock given The store is stocked with sweaters and has 5 black sweaters in stock and 4 blue sweaters in stock when The customer try to buy 6 blue sweaters, and an exception is thrown then the store should have 5 black sweaters in stock and 4 blue sweaters in stock\nFeature: Refund items to customers The customer can return items to the store and be refunded. Upon completion the stock of the store reflects the purchasing action.\nStory: Refunded items go back to the stockpile As a store owner, in order to keep track of stock, I want to add items back to stock when they’re refunded.\ntags: 'Release 2.0'\nScenario: Refunded items from the customer should be returned to stock given A customer bought a black sweater from the store having 4 black and 0 blue sweaters and the store has now 3 black sweaters in stock and 0 blue sweaters in stock when The customer returns one black sweater for a refund then the store should have 4 black sweaters in stock and 0 blue sweaters in stock\nStory: Replaced are switched form the stockpile As a store owner, in order to keep track of stock, I want to switch itemsback to stock when they’re returned and replaced.\ntags: 'Release 2.0'\nScenario: Replaced items should be returned to stock, and the new ones deduced from the stock given A customer previously bought a blue garment from the store having 3 black and 3 blue sweaters and the store now has 2 blue garments in stock and the store has 3 black garments in stock when The customer returns one blue garment for a replacement with one in black then The store should have 3 blue garments in stock and the store should have 2 black garments in stock\n","categories":"","description":"","excerpt":" Feature: Sell items to customers The customer can buy various items from the store. Upon completion the stock of the store reflects the purchasing action.\ntags: 'Feature Example' 'Mandatory'\nStory: …","ref":"/docs/bdd/bdd-report/","tags":"","title":"bdd Report"},{"body":" Agile and Technical Excellence Links - === Scrum Food For Thoughts Links\nWe are continuously looking for fresh approaches and implementing continuous improvements. These sites and blogs are a source of knowledge and experience.\nScrum Alliance\nScrum Alliance Blog\nScrum Alliance Labs videos\nScrum.org\nScrum.org Blog\nScrum Master Reading List Scrum masters shall read these books to achieve proficiency.\nLeSS - extensive documentation on important aspects using Large Scaled Scrum approach -\nMike Cohn Blog\nRoman Pichler Blog especially for product owners\nRon Jeffries Blog\nGunther Verheyen Blog A Scrum caretaker\nCrisp Company\nCrisp Blog Henrik Kniberg works at Crisp, and they are often the coaches at Spotify and initiators of the Spotify Model -\nKniberg books Scrum and XP from the trenches and Kanban and Scrum\nKniberg has also very professional and interesting YouTube presentations.\nMartin Fowler Blog Martin Fowler is working at Thoughtworks and has written seminal books.\nViktor Grgic Blog\nStefan Wolpers Age of Product Blog tons of materials, and a weekly newsletter with links to interesting articles\ntangly Blog our learnings over the years with the support of our customers -.\nSeminal references are found under Agile Manifesto – also read the 12 principles of the manifesto\nScrum Guide - the seminal work defining what Scrum is from Jeff Sutherland and KenSchwaber - Read the history section to understand the evolution of the guide over the years.\nKnowledge Facts Analyze facts and act on them – Lean and Agile are rooted in empirical methods and scientific approaches -. Fascinating how our civilisation lost the belief in facts and science.\nThe World in Data is an initiative to decide based on facts and empirical approaches.\n","categories":"","description":"links to agile and technical excellence themes such as Scrum, XP, LeSS, Software Craftsmanship","excerpt":"links to agile and technical excellence themes such as Scrum, XP, LeSS, Software Craftsmanship","ref":"/ideas/learnings/links/","tags":"","title":"Links"},{"body":" tangly llc company provides commercial support for the tangly open source components.\nWe do product development and consulting for European companies. Onsite coaching is limited to the German part of Switzerland.\nContact us for inquiries on commercial support for tangly OS components, Modern Java, DevOps and Vaadin.\nContact Information\nPostal Address:\ntangly llc Lorzenhof 27 6330 Cham Switzerland\nPlus Code:\n8FVC5FM5+Q6G\nEmail:\nemail contact\nPhone:\n+41 79 778 86 89\nLinkedIn:\ntangly llc\n","categories":"","description":"","excerpt":" tangly llc company provides commercial support for the tangly open source components.\nWe do product development and consulting for European companies. Onsite coaching is limited to the German part of …","ref":"/expertise/commercial-support/","tags":"","title":"Commercial Support"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2022/","tags":"","title":"2022"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2021/","tags":"","title":"2021"},{"body":"Workshops The available workshops are:\nAgile and Scrum Agile Technical Fluency Arc42 Software Architecture Template C4 and UML Notations Domain-Driven Design Tips All workshops use asciidoctor revealjs.\nThe important keyboard shortcuts are:\n? help for all shortcuts F Fullscreen presentation S Speaker mode with notes, next slide, and timers Books Agile Technical Fluency Books .DS_Store (6.0 kB) KanbanAndScrum.epub (18.3 MB) Moving-your-Scrum-downfield.pdf (5.5 MB) ProGit.epub (13.4 MB) ScrumAndXpFromTheTrenches-2nd.epub (8.7 MB) Books to acquire technical fluency ","categories":"","description":"links to workshops","excerpt":"links to workshops","ref":"/ideas/learnings/workshops/","tags":"","title":"Workshops"},{"body":"Talks Scrum User Groups Our crusade Scrum and agile approaches require technical excellence. The talk Why Organizational Agility Depends on Technical Excellence! was held on the events\nScrum User Group Bern, 2020-01-20 Scrum User Group Zürich, 2020-02-19 .NET User Group Bern, 2020-03-09 Talks 2020-Meetup-Technical-Agility.pdf (956.1 kB) 2023-FHNW-ModernSoftwareEngineering.pdf (1.3 MB) Agile and Technical Excellence Talks ","categories":"","description":"links to public talks of Marcel Baumann discussing agile, Scrum, technical excellence","excerpt":"links to public talks of Marcel Baumann discussing agile, Scrum, technical excellence","ref":"/ideas/learnings/talks/","tags":"","title":"Talks"},{"body":" Come to work with us at tangly and start changing the world We are working following agile values and principles since the beginning of this millennium. Join our team.\nYou are a passionate software professional who strives to create new products with our customers.\nYou thrive for purpose, mastery and autonomy.\nYou are agile, you feel responsible and accountable.\nYou know how to provide maximum product value to our customers.\nYou love to work in an agile team.\nYou advocate agile approaches, DevOps, interactive design and continuous delivery.\nYou are an expert in the Java technology stack.\nPlease apply under info@tangly.net or call +41 79 778 8689 and join our team.\n","categories":"","description":"","excerpt":" Come to work with us at tangly and start changing the world We are working following agile values and principles since the beginning of this millennium. Join our team.\nYou are a passionate software …","ref":"/expertise/careers/","tags":"","title":"Careers"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2020/","tags":"","title":"2020"},{"body":"The Architecture Design Records ADR for the overall open source products of tangly.\nThese design decisions often define how we want to develop applications in Modern Java.\n","categories":"","description":"","excerpt":"The Architecture Design Records ADR for the overall open source products of tangly.\nThese design decisions often define how we want to develop applications in Modern Java.\n","ref":"/docs/domains/architecture/adr/","tags":"","title":"ADR"},{"body":"The Architecture Design Records ADR for the overall open source products of tangly.\nThese design decisions often define how we want to develop applications in Modern Java.\n","categories":"","description":"","excerpt":"The Architecture Design Records ADR for the overall open source products of tangly.\nThese design decisions often define how we want to develop applications in Modern Java.\n","ref":"/docs/domains/shared/_design/adr/","tags":"","title":"ADR"},{"body":"The bounded domain models to build an enterprise resources planning application for services companies.\n","categories":"","description":"","excerpt":"The bounded domain models to build an enterprise resources planning application for services companies.\n","ref":"/docs/domains/","tags":"","title":"ERP Bounded Domains"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2019/","tags":"","title":"2019"},{"body":" Agile Transformations Agile transformation is as an act of transforming an organization’s form or nature gradually. The new form is able to thrive in a flexible, collaborative, self-organizing, fast changing environment.\nThe Agile Manifesto values and principles can be taught and exercised throughout any type of organization as it is not limited to development teams.\nThe entire organization needs to understand the values and principles of an agile transformation to benefit from the rewards of achieving healthy agility. The cultural and organizational mindset shall change to one that embraces a culture of self-organization and collaboration.\nNever forget the Agile Manifesto.\nRead the second page. The 12 Agile Manifesto Principles identify your focus and improvement areas.\nWe are pragmatic engineers.\nWe collect first the low-hanging fruits.\nFirst digital steps are often straightforward to implement. The return on investment is often calculated as a few weeks or months at most.\nThe First steps in the agile journey feel natural. The gains are visible for all involved parties.\nDeveloping digital products with DevOps, Scrum and DecSecOps approaches are industry standard approaches.\nThe next iterations are often more challenging.\nPeople like change. They seldom like to change.\nOur approach to initiating and supporting an agile transformation is\nEstablish leadership situation awareness, discovery of weaknesses and kickoff of transformation Conduct a Go And See - Gemba - to assess and understand your organization’s context and specific challenges.\nWork with leadership to make those challenges visible and define steps to address them.\nIdentify urgency and core champions actively supporting the transformation.\nLaunch leadership teams and communities of practices to guide your organization’s transformation.\nEnable leadership to deploy transformation incrementally and guide the scope and pace of change.\nOrganize your collaborators and workflow around your products and strategy Design a custom transformation approach with immediately actionable steps.\nSelect a few pilot groups for launch and involve all participants – open space meeting, information radiators -.\nCreate a coherent, actionable backlog, which connects strategy to execution, so the entire organization is aligned around shared goals.\nIdentify indicators to measure progress.\nBuild team level backlogs so the entire organization is aligned around shared goals.\nWork with leadership to discover and address organizational pain points and challenges.\nLaunch your teams Train your pilot teams in the roles, artifacts, and events of Scrum and LeSS.\nEmbed coaches to support your teams become high-performing.\nEstablish team excellence and technical craftsmanship.\nUse specific, demonstrable success to train, launch, and coach additional teams.\nBuild team sustainability Build and extend communities of practice.\nNurture internal coaching capabilities to sustain your agile practice beyond the pilot.\nEstablish continuous improvement as culture in the organization.\nProvide additional follow-up as needed to continue to build business agility.\nFocus on product delivery Value stream mapping and waste elimination.\nAmplify learning.\nLate decision-making.\nFast delivery - continuous integration, continuous delivery, continuous deployment, DevOps -.\nTeam empowerment and technical fluency. Professional teams are required for awesome products.\nBuilt-in integrity.\nView applications as a whole.\nI am often surprised how reluctant organizations are to adopt new technologies and digital approaches.\nNone of them want to be laggards or late adaptors. And statistically, half of them are slower than average.\nWe reinforce learning theory, streamline how to apply agile principles and experiments, help you to develop a routine, promote awareness, boost ownership, facilitate barrier removal, and avoid painful or costly dead ends. Our goal is to shorten the learning curve and optimize human and financial investments. We truly believe in the first directive.\nRegardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.\n","categories":"","description":"Recipes for agile transformation initiatives","excerpt":"Recipes for agile transformation initiatives","ref":"/ideas/agile-transformations/","tags":"","title":"Agile Transformations"},{"body":" Contact Information\nPostal Address:\ntangly llc Lorzenhof 27 6330 Cham Switzerland\nPlus Code:\n8FVC5FM5+Q6G\nEmail:\nemail contact\nPhone:\n+41 79 778 86 89\nLinkedIn:\ntangly llc\nCompany Identification\nCompany ID:\nCHE-357-875.339\nVAT Number:\nCHE-357-875.339 MWST\nBank Connection\nIBAN Number:\nCH88 0900 0000 3064 1768 2\nBank BIC:\nPOFICHBEXXX (Postfinanz Schweiz)\nCompany Location\n123movies google maps widget html ","categories":"","description":"","excerpt":" Contact Information\nPostal Address:\ntangly llc Lorzenhof 27 6330 Cham Switzerland\nPlus Code:\n8FVC5FM5+Q6G\nEmail:\nemail contact\nPhone:\n+41 79 778 86 89\nLinkedIn:\ntangly llc\nCompany Identification …","ref":"/expertise/contact/","tags":"","title":"Contact"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2018/","tags":"","title":"2018"},{"body":" Introduction Functional Object-Oriented Order of execution is not always important. It can be asynchronous.\nA specific execution sequence of statements is crucial\nFunctions are basic building elements to work with data structures.\nObjects are the main abstractions for data\nFollows the declarative paradigm.\nFollows the imperative paradigm.\nFocuses on the result desired and its final conditions.\nFocuses on how the desired result can be achieved.\nEnsure immutability; programs should be stateless.\nState changes are an important part of the execution.\nPrimary activity is writing new functions and composing existing ones\nPrimary activity is building, extending and composing objects\nConcepts Definitions Referential Transparency A function, or more generally an expression, is called referentially transparent if a call can be replaced by its value without affecting the behavior of the program. Simply spoken, given the same input implies the output is always the same.\nPersistent Data Structure A persistent data structure is a data structure that always preserves the previous version of itself when it is modified. Such data structures are effectively immutable, as their operations do not visibly update the structure in-place, but instead yield a new updated structure.\nHigher Order Functions In computer science, a higher-order function is a function that does at least one of the following:\nTakes one or more functions as arguments\nReturns a function as its result\nPure Functions The function return values are identical for identical arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams). The function application has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or input/output streams).\nFunctional Composition In mathematics, function composition is an operation that takes two functions f and g and produces a function h such that h(x) = g(f(x)) Composition requires higher order functions. For instance, the functions \\$f(x): X → Y\\$ and \\$g(y): Y → Z\\$ are composed to yield a function \\$h(x): g(f(x))\\$ which maps \\$X → Z\\$.\nLambda Lifting is a meta-process that restructures a computer program so that functions are defined independently of each other in a global scope. An individual \"lift\" transforms a local function into a global function. It is a two-steps process: Eliminating free variables in the function by adding parameters Moving functions from a restricted scope to broader or global scope.\nCurrying In computer science, currying is the technique of converting a function that takes multiple arguments into a sequence of functions that each take a single argument.\nMonads Monad is just a monoid in the category of endofunctors.\n— Saunders Mac Lane Examples of monads in modern day Java programming language:\nStream\u003cT\u003e\nOptional\u003cT\u003e\nTry\u003cT\u003e\nMonad Laws The last thing that needs to mention while speaking of monads is their laws. If we want to consider our implementation a real monad, we must obey them. There are three laws: left identity, right identity and associativity. In my opinion, it can be somewhat hard to understand what they actually mean. With the help of Optional\u003cT\u003e, I will try to explain the above laws in a more detailed way.\nFirst a few assumptions:\n\\$F\\$ is a function with the signature: \\$(T -\u003e Optional\u003cU\u003e) = Optional\u003cU\u003e\\$.\n\\$G\\$ is a function with the signature \\$(A -\u003e Optional\u003cB\u003e) = Optional\u003cB\u003e\\$.\n\\$FG = F.apply(value).flatMap(G)\\$ with the signature: \\$(T -\u003e Optional\u003cB\u003e) = Optional\u003cB\u003e\\$.\nLeft identity If we create a new monad and bind it to the function, the result should be the same as applying the function to the value:\n\\$Optional.of(value).flatMap(F).equals(F.apply(value))\\$\nRight identity The result of binding a unit function to a monad should be the same as the creation of a new monad:\n\\$Optional.of(value).flatMap(Optional::of).equals(Optional.of(value))\\$\nAssociativity In the chain of function applications, it should not matter how functions are nested:\nOptional\u003cT\u003e left = Optional.of(value).flatMap(F).flatMap(G); Optional\u003cT\u003e right = Optional.of(value).flatMap(F.apply(value).flatMap(G)); assert(left.equals(right)); Creation of Monad The first thing we need is a parameterized type M\u003cT\u003e, which is a wrapper for our value of type T. Our type must implement two functions:\nUnit which is used to wrap our value and has a following signature \\$(T) = M\u003cT\u003e\\$.\nBind is responsible for performing operations. Here we pass a function, which operates on value in our context and returns it with another type already wrapped in context. This method should have the following signature \\$(T -\u003e M\u003cU\u003e) = M\u003cU\u003e\\$.\nTo make it more understandable, I will use Optional one more time and show what the above structure looks like in its case.\nHere, the first condition is met right away because Optional is a parameterized type. The role of the unit function is fulfilled by ofNullable and of methods. FlatMap plays the role of the bind function. Of course, in the case of Optional, type boundaries allow us to use more complex types than in the definition above. == Streams\nOther Approaches Closure Functional Advantages Groovy Functional Advantages Future Java Functional Enhancements Concise Method Bodies Pattern Matching and Deconstruction References ","categories":"","description":"Functional programming in modern Java","excerpt":"Functional programming in modern Java","ref":"/ideas/functional-programming-in-java/","tags":"","title":"Functional Programming"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ideas/learnings/","tags":"","title":"Learnings"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2017/","tags":"","title":"2017"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/2016/","tags":"","title":"2016"},{"body":" Contribution Guidelines How to contribute to tangly Open Source Components This is an open source product. We love getting patches and contributions to make our components, and their documentation even better.\nContributing to tangly Open Source Components The components live in Open Source Components. The git repository and the issue tracker are public and accessible to all interested parties.\nYou can create the set of git remotes with the following instructions.\ngit remote add origin-github git@github.com:marcelbaumann/tangly-os.git (1) git remote add origin-gitlab git@gitlab.com:marcelbaumann/tangly-os.git (2) git remote add origin-bitbucket git@bitbucket.org:tangly-team/tangly-os.git (3) git remote add origin-hslu https://gitlab.enterpriselab.ch/tangly/tangly-os.git (4) git remote -v (5) git push \u003cremote\u003e master (6) git remote rm \u003cremote\u003e (7) 1 Primary git repository of the project 2 Secondary mirrored git repository of the project 3 Third mirrored git repository of the project exists due to historical reason 4 Repository for the lectures at the technical university of Lucerne, Switzerland (https due to limitations of their server) 5 List all remote defined for this git project 6 Push the local master branch to the selected remote 7 Remove the given remote from this git project Contributor License Agreement Source Code contributions to this product must be published under Apache 2.0 license.\nAll documentations and texts to this product must be published under CC-BY-SA 4.0.\nThis simply gives us permission to use and redistribute your contributions as part of the product.\nCode reviews All submissions, including submissions by product members, require review. We use bitbucket pull requests for this purpose. Consult bitbucket Tutorial and Help for more information on using pull requests.\nPreviewing your changes Source Code Changes Build locally the code changes with the provided Gradle scripts.\nDocumentation Changes The scripts to generate and populate the site from the product clone repository are located under scripts.\nCreating issues Alternatively, if there’s something you’d like to see (or if you’ve found something that is not working the way you would expect). You are not sure how to fix it yourself, please create an issue in Issue Tracker.\n","categories":"","description":"Contributing guidelines for the open source components of tangly OS product","excerpt":"Contributing guidelines for the open source components of tangly OS product","ref":"/docs/contribution-guidelines/","tags":"","title":"Contributing Guidelines"},{"body":" Development Environment The development environment is MacOS [1].\nJava JDKs Install Java development kits. You should at least install the last released version and the last LTS version. We use the distributions of Oracle.\nalias java17 = \"export JAVA_HOME=`/usr/libexec/java_home -v 17`; java -version\" alias java19 = \"export JAVA_HOME=`/usr/libexec/java_home -v 19`; java -version\" alias java20 = \"export JAVA_HOME=`/usr/libexec/java_home -v 20`; java -version\" Tools We use brew to install. The following tools shall be installed:\nasciidoctor\nhugo\ngit\nghostscript\ngradle\ngraphviz\nmaven\ngraphviz\nhugo\nmermaid-cli\nnode\nplantuml\nrsync\nwget\nIntelliJ IDEA All development activities are performed with IntelliJ IDEA IDE.\nThe following plugins shall be installed\nAntlr\nAsciidoc\nGrazie Professional\nSonarLint\nStatistics\nGit and ssh keys You can generate an SSH key with the following commands\nssh-keygen -t ed25519 -C \"marcel.baumann@tangly.net\" (1) 1 Replace with your email address you are registered with in your GitHub or GitLab account. The config file stored in your ~/.ssh directory to select the key accordingly to the host.\nHost bitbucket.org HostName bitbucket.org IdentityFile ~/.ssh/marcel-baumann-tangly (1) Host github.com HostName github.com IdentityFile ~/.ssh/marcel-baumann-tangly (1) Host gitlab.com Hostname gitlab.com PreferredAuthentications publickey IdentityFile ~/.ssh/marcel-baumann-tangly (1) Host gitlab.enterprise.ch HostName gitlab.enterprise.ch IdentityFile ~/.ssh/marcel-baumann-hslu (1) 1 Replace with the name of the file containing your ssh key. git config --global user.name \"marcelbaumann\" git config --global user.email \"marcel.baumann@tangly.net\" Static website Install the following additional packages for asciidoctor to work without errors.\ngem install asciidoctor-diagram gem install asciidoctor-bibtex gem install rouge Tricks Backup of Local Development Artifacts Local Git repositories cannot be stored on a local cloud drive. You will get repository corruptions due to the way the could drive performs synchronization.\nIt would be nice to have a way to back up local changes to the cloud to avoid losses. Please, do not use your remote git repository as a backup medium.\nThe following approach works nicely for us:\ncreate a bare git repository on a local cloud drive.\nadd a remote to your project to store changes into the local bare repository.\nnow you can just commit and push changes to your git backup repository.\nonce you have completed a feature, push the changes as usual to your regular remote git repository.\ngit init -bare (1) git add remote backup /Volumes/GoogleDrive/My Drive/tangly/08-Data/git/tangly-os.git (2) git push backup master (3) 1 Create a bare repository 2 Add a remote for the backup repository to the tangly-os project 3 Pushes the changes to the backup repository. The cloud folder will be replicated to the cloud for backup. npm Troubles Do not use sudo when installing node or npm.\nDelete ~/.npm to enable updates if you once used sudo to install extensions for node.\n1. It is nonsense to use Microsoft Windows to develop applications in Java. Use macOS or Linux operating systems. You do not need to install a virus scanner or a special personal firewall. ","categories":"","description":"Development Environment for tangly OS","excerpt":"Development Environment for tangly OS","ref":"/docs/development-environment/","tags":"","title":"Development Environment"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/architecture/","tags":"","title":"architecture"},{"body":"A collection of articles about our journey through agile product development, digitalization, and software craftsmanship.\n","categories":"","description":"","excerpt":"A collection of articles about our journey through agile product development, digitalization, and software craftsmanship.\n","ref":"/blog/","tags":"","title":"tangly llc Blog"},{"body":" Your embedded system has a set of sensors and actors.\nSome sensors and actors are connected to a bus. Typical buses are CAN bus, Serial Peripherical Interface, Ethernet, Bluetooth, or I2C standards.\nThe bus is a shared medium used to communicate with a set of external active or passive components.\nWhich design rules shall you follow when designing sensors and actors using a bus architecture?\nDo you need to consider threading design?\nShould you use synchronous or asynchronous communication?\nShould you provide queues for sending and receiving messages?\nSynchronous Sending Your application can always send messages to a bus synchronously. These messages are in general commands to physical devices connected through the bus.\nSynchronous Unbuffered Sending The send function is a blocking operation until the message is transformed into a frame and sent over the bus. You should select this approach only if the frame creation and the bus frame transmission is fast.\nBeware that bus contention can slow down the frame transmission.\nI do not recommend this approach if you send burst of messages or messages with bigger payloads.\nThe approach works well for transmitting irregular short frames and is simple to implement.\nAnalyze the application call stack for all synchronous sending operations.\nIf some driver functions use blocking calls such as polling waits, the thread, the process and in the worst case, the processor core can be blocked until the call returns.\nIf the instruction is a slow initialization request, the system freezes for tens of seconds.\nAsynchronous Buffered Sending Modern bus drivers are able to buffer messages and return immediately. Often CAN bus drivers are implemented with a transmission queue. This approach provides asynchronous processing of a synchronous transmission request. The caller still has to handle the case when the queue is full.\nBeware that transmission errors are not reported back synchronously to the caller. An asynchronous error can be reported through a callback function.\nThis approach requires a thread to process the queue. The processing thread is either part of the bus driver or part of the application.\nMicrocontrollers sometimes implement the thread as an interrupt service routine. I would try to avoid the interrupt routine approach if you have a RTOS available.\nThis approach scales well for hundreds of devices and thousands of messages per second. The sole limitation is the bus bandwidth.\nAsynchronous Receiving Please never use a synchronous receiving operation approach. If you do so, you will block the thread until a message is received. The waiting time is unpredictable. If the sending function call graph also handles the sending of the message, you will end up in a deadlock.\nThis is a major design rule. You must at least once break the synchronous application calling sequence of sending and receiving frames. Therefore, you need at least two threads in your solution. One application thread and one bus driver thread.\nAsynchronous Callbacks The bus driver can call a callback function when a message is received. The asynchronous called function is executed in the context of the bus driver. Therefore, the callback function shall delegate further processing to another thread.\nlely CANOpen asynchronous callback when a PDO is written in the memory of the device representation.\nThe documentation clearly states the user is responsible to provide needed threads for processing.\nThe design of the lely CANOpen is an example of shared memory implementation. The device state is replicated in the local application. The bus receives frames and updates the local device state objects.\nChanges are propagated to the application with registered asynchronous callbacks.\nCANopenNode is another example of a CAN bus driver. All code of the CANopenNode driver is non-blocking.\nThe callback shall not block the bus driver thread. It should hand over the payload to another thread for further processing. The handover is easily done by sending a message to the processing thread.\nThis approach is implemented through the actor model. All realtime operating systems support this approach through tasks and message queues.\nPerformance Use a synchronous calling sequence for all sending operations only if the bus frame transmission is fast.\nBreak a synchronization calling sequence for all receiving operations.\nThe actor model is an ideal solution for asynchronous message processing.\nThe lely CANOpen design is based on a set of clever decisions.\nThe implementation is completely passive. The library does not perform any I/O besides maybe reading some files from the disk.\nIt does not create threads nor does it access the system clock. Instead, it relies on the user to send and receive bus frames and update the clock. This allows the library to be easily embedded in a wide variety of applications. This implies that the user shall provide at least one thread to run the library.\nThe library is also asynchronous. Issuing a request is always a non-blocking operation. If the request is confirmed, the API accepts a callback function which is invoked once the request completes with success or failure. This allows the stack to run in a single thread, even when processing dozens of simultaneous requests. This configuration is not uncommon for a master node.\nThreading is delegated to the user of the driver. The calling application is responsible for creating threads and protecting shared resources accessed through the callbacks.\nThe operation sendMsg simply adds a message to the driver mailbox. The operation callback similarly adds a message to the motor actor mailbox. These operations are fast and non-blocking. Shared resources are the mailboxes. The RTOS explicitly protects these objects against concurrent modifications.\nThe callback mechanism shall implement a selector. The callback function shall dispatch the message to the correct actor mailbox.\nThe selector is a simple mapping between the device identifier and the actor object if exactly one actor is responsible for the device. Otherwise, a more complex registration mechanism mapping a list of actors to a device identifier is required.\nBoth approaches are implemented with a few tens of source code lines. The C++ or Java standard libraries provide the required data structures and algorithms.\nThe activation blocks show when a thread is active in a single core processor. If multiple cores are available to the application, the threads can run in parallel when messages are delivered in actor mailboxes.\nIn both cases, most of the time, actors are suspended waiting for the next message.\nLessons Learnt Do not ignore threading design when designing sensors and actors using a bus architecture. Bus architectures are common in embedded systems. Classical buses are CAN bus, Serial Peripherical Interface, Ethernet, I2C standards.\nFuture Tesla cars will use a Ethernet bus to connect all sensors and actors. CAN bus is discarded as a legacy bus.\nSubsystems will be connected through a Ethernet switch and have local processing capabilities. The latency is below 1 millisecond and is suitable for control by wire approaches.\nPower is provided through a Ethernet cable and Power over Ethernet. The standard voltage for the whole car is 48V.\nThe approach tremendously simplifies the wiring of the car.\nMultiple devices connected to a bus are per nature asynchronous. You cannot predict when a device will send a message. Therefore, the reception and processing of a received message must be asynchronous and run in a separate thread.\nAlways provide send and receive queues for sending and receiving messages for sophisticated devices. The queues are used to decouple the bus driver from the application. All receive and transmit operations are asynchronous. This design implies asynchronous handling of protocol error codes.\nSmall embedded systems shall use the RTOS provided primitives for communication between the driver and the application.\nDo not use abstraction layers to isolate the used realtime kernel. It makes the code more complex and less efficient. Modern development environments with powerful refactoring tools make the change of the RTOS simple.\nBe honest. You seldom replace the selected RTOS with another one in your device family.\nIf you have a complex realtime system, evaluate using a linux based operating system. Use linux design patterns to implement your application. Training will be easier. Numerous external suppliers can provide support.\nLinks Agile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\n","categories":"","description":"","excerpt":" Your embedded system has a set of sensors and actors.\nSome sensors and actors are connected to a bus. Typical buses are CAN bus, Serial Peripherical Interface, Ethernet, Bluetooth, or I2C standards. …","ref":"/blog/2023/bus-sensors-and-actuators/","tags":["C++","architecture","embedded"],"title":"Bus Sensors and Actuators"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/c++/","tags":"","title":"C++"},{"body":" Welcome to tangly Blog and Open Source Components Learn More Download Open Source Components for Technical and Business Applications\nOpen Source Components The documentation site for open source components is published under tangly OS components.\nThe current released components are written in Modern Java and released on Maven Central.\nBDD Behavior Driven Design Test Library based on JUnit 5 (code first approach), COMMONS Internal Common Components to write company internal applications, CORE Internal Core Components to write company business applications, FSM Hierarchical Finite State Machine, GLEAM declarative model definition library (map Java objects hierarchy to the TSV and JSON format), UI Vaadin based user interface. The current components for the services ERP are written in Modern Java and released on Maven Central .\nDomains Enterprise Resources Planning components for service companies tangly llc Articles and Blog The ideas area is a collection of articles about our journey through agile product development, digitalization and software craftsmanship.\nOur company blog hosts articles on the topics of\nAgile, Scrum, Lean and Less Modern Java technical stack experiences Personal opinions about technological aspects A classification accordingly to topics is available. We publish regularly new articles. The goal is to publish at least one article per month. Stay tuned.\n","categories":"","description":"","excerpt":" Welcome to tangly Blog and Open Source Components Learn More Download Open Source Components for Technical and Business Applications\nOpen Source Components The documentation site for open source …","ref":"/","tags":"","title":"tangly OS components"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/embedded/","tags":"","title":"embedded"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":" Embedded design maps domain abstractions to the underlying hardware.\nA temperature sensor is a domain abstraction of a physical hardware temperature sensor.\nA valve is a domain abstraction of a physical hardware valve. A physical valve can be a simple opened-closed device, or a proportional device.\nThe microcontroller board reads the temperature sensor through an I2C or SPI bus. It controls the valve through a GPIO, a PWM or a CAN bus controller.\nThese hardware components map the domain object to the electronics controlling the physical device.\nModel The C++ declaration of a valve object could be:\nThe designers should decide if a progressive valve is a kind of on/off valve or not.\nAll instances of the namespaces HAL and BSP are static and created when the application starts. Our machines are not hot-pluggable. All components are wired and fixed with screws.\nRelations between objects are defined through constructor parameters. This approach is a clean and legible Dependency Injection implementation.\nThe algorithms should ideally only access the abstractions defined in the model namespace.\nThe instantiation of objects should define the initialization of abstractions and the underlying physical devices.\nDo we start our system and bring all devices to a well-defined initial state?\nOr do we start our system, retrieve the state of all devices and initialize our objects accordingly?\nThis approach is only possible if each hardware component has sensors providing its current state.\nC++ Approach A physical device shall be mapped to a C++ class. Instances of the class map to existing devices.\nTherefore, the copy constructor and the copy operator should be disabled. The physical devices are defined through the machine the software controls.\nThe software accesses the physical device through an electronics interface such as a GPIO, PWM or CAN controller. The mapping between the electronic component and the physical device is hardwired at construction.\nclass ValveOnOff { public: void open(); void close(); bool isOpen() const; private: ValveOnOff(const ValveOnOff\u0026) = delete; (1) const ValveOnOff\u0026 operator=(const ValveOnOff\u0026) = delete; (2) bool _opened = false; (3) }; 1 A physical device cannot be replicated. 2 A physical device cannot be copied. You should evaluate if a default constructor does make sense. Often the constructor needs other objects connecting the abstraction to the hardware. This pattern is a hand-coded dependency injection through constructor parameters. The default move constructor and move operator can be useful. 3 Imply that the application resets the system when booting. Constant mapping between the electronic wiring and logical representation shall be provided. The application should only need to change the mapping when the hardware layout is changed or a microcontroller revision is used.\nInterrupt Routines Output devices do not need interrupts. A driver provides a function to output the new value on the electronics. As an example, the function writes the new value to a memory-mapped register. The designer is responsible to avoid concurrent access to the register.\nInput devices should always support interrupts. Otherwise, the application must poll registers to detect changes. Polling is cumbersome and expensive. Either the programmer guesses a polling frequency and misses sometimes data. Or he chooses a high-frequency sampling rate and wastes computing resources.\nInterrupt routines are written in C or in assembler. The C++ language is not supported in interrupt routines. Three major interrupt approaches exist:\nThe interrupt routine reads the new value of the sensor and stores the data at a defined location. The application accesses the sensor stored value when needed.\nThis approach decouples the application from the external sensors. The drawback is that the program is not informed when a new value is received.\nThe interrupt routine reads the new value and sends the value as a message to interested parties.\nThe approach is a reactive system triggering the application each time input data is received.\nThe interrupt routine calls a callback function. The callback function is a function pointer to a static C++ function and often has the reference of the object abstracting the sensor. Below is a potential implementation of the callback function and callback registration is shown.\n/** * @brief Register a callback function to be called when data is received. * @param callback The callback function. * @param self The reference to the object. */ void registerCallback(void (*callback)(void* self, byte* data, int length), void* self); class Sensor { public: /** * @brief Declares the static callback function. * @param self The reference to the object. * @param data The data received. * @param length The length of the data. */ static void callback(void* self, byte* data, int length) { Sensor* sensor = reinterpret_cast\u003cSensor*\u003e(self); sensor-\u003ecallback(data, length); } /** * @brief Object callback function. * @param data The data received. * @param length The length of the data. */ void callback(byte* data, int length) { // 1. do something with the data. If the sensor is a thread, protect the object data with a mutex or a lock. // 2. if the sensor is an actor, create a message with the payload and send it to own mailbox. } The interrupt routine or the underlying hardware can handle sensor inputs in two ways:\nData is retrieved regularly. This synchronous approach gives a rhythm to the system but often uses computing resources without gains.\nData is retrieved when a value has changed. Either the hardware detects the change or the interrupt routine compares the received data with the stored value.\nThis approach is purely reactive. Algorithms are only triggered when the external system has changed.\nI recommend interrupt triggering input data gathering and reacting to input changes.\nThis design approach minimizes microcontroller resource consumption and simplifies the control algorithms.\nTasks and Synchronization Actuators Actuators are often plain old objects. Modern microcontrollers provide memory-mapped registers to propagate the value to the actuator hardware. The update operation often writes a new value to a memory-mapped register. The writing into one register is atomic and does not need additional synchronization.\nIf the update operation is more complex and writes multiple registers, the operation should be protected by a mutex.\nBeware that mutexes can create deadlocks. The cleanest approach is to use mutexes with priority inheritance. Therefore, a task will never have to wait for a lower priority task to release a lock or a mutex.\nAnother trick is to set all writing tasks to the same priority. This guarantees that an update operation is not interrupted by another task requesting the same resource.\nYou could also implement the actuator with a tread.\nThis approach is often overkill. It complicates unnecessary application design.\nSensors Sensors shall always be implemented as a thread. Otherwise, a client calling an actuator with a synchronous call and waiting for a sensor result will block the whole system.\nAnother trick is to use an interrupt routine to trigger the sensor reading and publish the data on a message queue. The interrupt routine takes the role of the thread. This guarantees that clients are not blocked by the sensor reading because they get the data asynchronously.\nLessons Learnt Try to define the simplest model to implement your features. Follow the Keeep It Simple, Stupid principle.\nModel the physical world. A valve, a GPIO, a CAN controller are real things. Model them. Do not try to hide things.\nThe introductory book Realtime C++ [1] is a rigorous introduction how to program microcontrollers in C++. You learn how to access hardware resources from C++ and what are the costs of various C++ constructs.\nUse the actor pattern to implement thread communication [distributed-asynchronous-systems] [actors-in-cpp] [actors-cmsis-cpp].\nLinks Agile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nReferences [1] C. Kormanyos, Real-Time C++ Efficient Object-Oriented and Template Microcontroller Programming. Springer Berlin / Heidelberg, 2021 [Online]. Available: https://www.amazon.com/dp/B099J441CH\n","categories":"","description":"","excerpt":" Embedded design maps domain abstractions to the underlying hardware.\nA temperature sensor is a domain abstraction of a physical hardware temperature sensor.\nA valve is a domain abstraction of a …","ref":"/blog/2023/sensors-and-actuators/","tags":["C++","architecture","embedded"],"title":"Sensors and Actuators"},{"body":" Most digital products have a command interpreter.\nExternal systems send requests to the system and often await an answer. A command interpreter can model this behavior.\nThe channels used to transmit requests and return answers are variable. Messages can be transmitted other various buses and protocols.\nAn operator can send a command over a CAN bus, Serial Peripherical Interface, Ethernet or Bluetooth connection.\nA regular command line interpreter inputs commands as a string containing a request and associated parameters. The answer is displayed as a string.\nThe processed commands are the instructions executed on the machine. They are independent of the transmission layer and communication protocol.\nHow could you design such a versatile interface using modern software constructs from Java or C++?\nWhich design delegates most of the validation to the compiler [1]?\nCommand Descriptors and Commands A description of a command could be encoded in a set of classes defining a bounded domain. This approach is often used in command line interpreters. It works well, but the compiler will not validate the descriptors. The solution does not well integrate with modern communication protocols such as Protocol Buffers.\nA modern approach would be to encode the command universe as a sealed class hierarchy in Java.\nA similar approach could be based on a variant template instance in C++.\nThe key concept is to encode the command structure into declarations instead of defining a domain model to describe them. The sole drawback of this approach is that you cannot dynamically add a command type. You have to declare a new class and compile the program [2].\nThe sealed class hierarchy defines the command types and their parameters. Each command type is defined through a class definition.\nInstances of a command type are commands. Each command is defined through an instance of a class.\nThe sealed structure guarantees that the compiler will mark all code segments needing edition when a new command type is added. The sealed class structure and the pattern matching approach is a compiler-validated visitor pattern.\nWe decided to store the result of a query into an answer object. A computed answer can have a reference to the query initiating the processing.\nYou can pack the result into a future wrapper to support asynchronous command processing. The interpreter itself behaves as a synchronous command processor matching answers to the related query command.\nInterpreters and Dispatcher The interpreter is quite simple to realize.\nIt processes all commands it is in charge of. An interpreter is in charge of one or more command sets with a specific group identifier.\nA second responsibility is to build a command object based on input data. It parses the input and generates the command instance representing the received data.\nObject-oriented approach states that you should not mix the received data with the internal command classes. Do not inherit from any classes defined in the channel abstraction.\nDomain-driven design approach clearly states the channels are interfaces to a bounded domain. No abstraction defined in the interface layer should pollute the domain model.\nThe dispatcher delegates the processing to multiple interpreters. Each subsystem can provide their interpreter to execute commands specific to the bounded domain. The dispatching criteria is either a group identifier or an interface marker.\nA channel receives and transmits command data. The channel should be able to extract the message group from a raw message.\nWhy should we support multiple channels to propagate commands?\nAn operator would input commands as text on a command line. An external software system would send commands through a bus such as Ethernet, CAN bus or Serial Peripherical Interface. Multiple channels are a requirement for a versatile command interpreter.\nI recommend Protocol Buffers for binary encoding of commands, queries, and answers.\nChannels The channel decodes all commands send through it into a command instances. The channel has knowledge of the command structure. This is needed to decode the command and dispatch it to the right interpreter.\nThis approach delegates the encoding and decoding of commands to messages to the channel. This approach is the standard one for bus communication.\nYou can implement a two-step decoding process for maximum flexibility.\nThe first step is to decode the message type and encoding format before dispatching the message to the right interpreter. The interpreter will decode the message payload and transform it into a command instance.\nThis approach shall only be used if you need to support multiple complex encoding formats due to its complexity. Most decoding libraries for JSON, proto buffers, or command line parsers are ill-suited for this approach.\nThe payload of the message does not need to be interpreted by the channel. This activity can be delegated to the interpreter.\nConsider using a factory pattern for the decoding operations.\nIf you are using the Google Protocol Buffers library, you will have to describe the structure of all messages send over the channel. The library will generate the code to encode and decode the messages.\nThe same can be said if your transmission format is JSON and you want to validate the structure of the messages with a JSON Schema.\nThe above describes constraints are in line with how major encoding approaches are designed.\nThoughts This design approach is almost codified as a design pattern. The solution is constrained by the decision to use the compiler toolchain to validate the command types and to program the processing with a pattern matching approach.\nThis approach melts object-orientation with functional aspects. It reflects the evolution of modern programming languages blending object-orientation and functional approaches.\nLinks Agile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\n1. A powerful software quality approach is to delegate validation activities to the compiler. 2. Agile and DevOps approaches mitigate the problem. You should be able to generate a new version of your application in at most a few minutes without manual activities. ","categories":"","description":"","excerpt":" Most digital products have a command interpreter.\nExternal systems send requests to the system and often await an answer. A command interpreter can model this behavior.\nThe channels used to transmit …","ref":"/blog/2023/command-interpreter/","tags":["java","C++","architecture"],"title":"Command Interpreter"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/java/","tags":"","title":"java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/agile/","tags":"","title":"agile"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/git/","tags":"","title":"git"},{"body":" The conventional commits specification is a lightweight convention on top of commit messages. The additional information classifies the type of work performed in the commit.\nA developer infers the importance of the task by looking to the type of the commit. The message communicates the nature of changes to teammates, the public, and other stakeholders.\nContributors of project repositories know that a well-designed Git commit message is the best way to communicate the context about a change to other developers. And in fact, they will help themselves in the future. A diff will tell you what has changed, but only the confirmation message can say why.\nIt provides an easy set of rules for creating an explicit commit history which makes it easier to write automated tools on top of.\nThe development team can use scripts to filter and aggregate commit information based on the tags in the commit message.\nThis convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages.\nStructure The commit message should be structured as follows:\n\u003ctype\u003e[optional scope]: \u003cdescription\u003e (1) [optional body] [optional footer(s)] 1 Use the body to explain what and why. Do not explain how. That is the code. The commit contains the following structural elements to communicate intent to the consumers of your library:\nfix A commit of the type fix patches a bug in your codebase. This correlates with PATCH in Semantic Versioning. It is used to identify production changes related to backward-compatible bug fixes.\nfeature A commit of the type feat introduces a new feature to the codebase. It is used to identify production changes related to new backward-compatible abilities or functionality. This correlates with MINOR in Semantic Versioning.\nBREAKING CHANGE A commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change. This correlates with MAJOR in Semantic Versioning. A BREAKING CHANGE can be part of commits of any type.\nOther types are allowed, for example:\nbuild The build type is used to identify development changes related to the build system. They involve scripts, configurations or tools, and package dependencies.\nci The ci type is used to identify development changes related to the continuous integration and deployment system. They involve scripts, configurations or tools.\ndoc The doc type is used to identify documentation changes related to the project. Whether intended externally for the end users (in case of a library) or internally for the developers.\nrefactor The refactor type is used to identify development changes related to modifying the codebase, which neither adds a feature nor fixes a bug. Examples are removing redundant code, simplifying the code, or renaming variables.\ntest The test type is used to identify development changes related to tests. chore: Activities not adding new features or fixing a fault. This type is used when you do not know which other tag you could use.\nfooters other than BREAKING CHANGE: \u003cdescription\u003e may be provided and follow a convention similar to git trailer format.\nHow to Create a Semantic Commit with Git The command line for a complex git commit message is simple:\ngit commit -m \"fix(core): remove deprecated and defunct wtf* apis\" (1) (2) -m \"These apis have been deprecated in v8, so they should stick around till v10.\" -m \"PR Close #33949\" 1 We use multiple -m to concatenate paragraphs instead of simple lines. The header and body are supposed to be separated by a blank line. That is distinctly true due to the paragraphs. 2 Summary in present tense. Your IDE probably provides a comfortable user interface to create a commit message as a set of paragraphs.\nUse your preferred IDE to write semantic commits with multiple blocks.\nThoughts Please start with a small list and extend it if needed. I suggest: feature, refactor, fix, build, chore [1].\nAsk yourself if identifying the subsystem where the changes were performed makes sense for your application. Often changes are not local to a specific component.\nSome teams put a ticker number instead of the subsystem name. It makes sense if your platform transforms the ticket number into a link to the ticket content.\nI use the tags feature, refactor, build, and chore. I do not put component or ticket information in the parenthesis after the tag.\nI put the ticket number in the summary of the commit message.\nI seldom use the footer for breaking change information. I handle this information through semantic versioning in tags.\nLinks Git Branches for the Impatient Marcel Baumann. 2016.\nGit Local Repositories for the Impatient Marcel Baumann. 2017.\nGit Rebase and Merge for the Impatient Marcel Baumann. 2023.\nGit Tag for the Impatient Marcel Baumann. 2023.\nSemantic Commits for the Impatient Marcel Baumann. 2023.\n1. I never needed the doc tag. Feel free to use it if you find it useful for your product. ","categories":"","description":"","excerpt":" The conventional commits specification is a lightweight convention on top of commit messages. The additional information classifies the type of work performed in the commit.\nA developer infers the …","ref":"/blog/2023/semantic-commits-for-the-impatient/","tags":["agile","git","series-students"],"title":"Semantic Commits for the Impatient"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/series-students/","tags":"","title":"series-students"},{"body":" Gradle Build Tool is a fast, dependable, and adaptable open-source build automation tool with an elegant and extensible declarative build language. Java is the primary supported programming language.\nGradle Build Tool is a popular build system for the JVM and is the default system for Android and Kotlin Multi-Platform projects.\nIt has a rich community plugin ecosystem. Groovy, Kotlin, C++, and Swift stacks are well-supported.\nGradle is fast, scalable, and can build projects of any size and complexity.\nLong ago I migrated all my projects from Maven to Gradle Build Tool [1].\nIn the first years, I sometimes regretted this decision due to missing or faulty plugins.\nThe plugins have now reached a level of maturity that you can do everything with Gradle [2].\nPros and Cons Advantages Great Flexibility You can do everything within the build script as you write them with the full-fledged programming language Groovy or Kotlin based DSL. XML is a data modeling language and probably the worst programming language ever used. The Maven approach to declarative builds is a reasonable idea, but the XML syntax is a nightmare.\nGreat Performance Gradle does an awesome job in speeding up your builds with features like incremental builds, daemons, and clustered builds.\nGreat IDE Support Jetbrains IntelliJ IDE has extensive Gradle support.\nDrawbacks Steep learning curve Moreover, the whole team has to learn Gradle or you will be depending on the single Gradle ninja in your team.\nGroovy or Kotlin DSL The dynamic Groovy DSL and the heterogeneous plugin APIs will make you google everything. Unexpected side effects, behavior, and interdependencies between plugins often feel like magic. As Groovy is dynamically typed, it is really hard for IDEs to provide good and fast tooling. Contrarily, parsing and interpreting Maven’s XML is dead simple.\nBreaking Changes New Gradle versions are often breaking existing plugins, and the poor maintainer of these one-man-open-source-projects cannot keep up with this speed.\nBest practices how Gradle Build Tool scripts should be structured have quite changed over the years. The Gradle Build Tool team has learned a lot and has impressively improved the tooling.\nAs a drawback, I had to regularly refactor my scripts to keep them up to date with best practices.\nMaintain Your Build Build rot is the silent degradation of your build system’s effectiveness. It is a result of poor practices, neglect, or simply the passage of time. It is like rust corroding a piece of machinery.\nIn this case, it gradually eats into the heart of your build system, causing it to slow down, become unpredictable, or become more challenging to maintain. This phenomenon can manifest within any build tool, but for our exploration.\nWhat are the most common sources of build rot?\nDependencies Poorly managed dependencies are one characteristic of build rot common to Maven and Gradle. Both build systems offer powerful dependency management capabilities. But neglecting regular updates to these dependencies can add vulnerable libraries to your build, directly impact build speed, and introduce compatibility issues.\nAn overly complex Gradle build.gradle or maven pom.xml file, cluttered with unnecessary dependencies or outdated plugins, can significantly extend build times and become a maintenance nightmare.\nUse the Versions Plugin to identify outdated dependencies and plugins. Define all your dependencies in a central version catalog configuration file.\nCheck your dependencies once a week and systematically update them. Use the latest version and run your unit and integration tests. If everything is green, you are good to go.\nOver-customization Gradle’s flexibility is one of its strong suits and yet it can ironically invite build rot. Over-customization, while seemingly advantageous in the short run, can result in a convoluted build.gradle files. These scripts can become so complicated that they require more effort to first comprehend and then maintain.\nDefine standard build processes as plugins in your buildSrc. Eliminate all imperative logic from regular build.gradle scripts. Better follow the conventions and processes of standard plugins instead of creating custom logic.\nWe use this approach in our projects and Open Source Components to ensure a consistent build process across all projects.\nRedundant tasks and misconfigured scripts Moreover, this complexity can have a significant impact on build speed. If scripts include redundant tasks, or simply take a long time to execute your Groovy or Kotlin configuration, the build speed can slow to a frustrating crawl. Misconfigured scripts can also lead to extended test times, further exacerbating the build rot.\nAlways prefer standard plugins to build artifacts.\nSuboptimal parallelization Another silent perpetrator of build rot is the under-utilization of parallel execution capabilities offered by both Maven and Gradle. Both support parallel builds. Not taking advantage of this feature can lead to unnecessarily long build times. Similarly, not properly organizing your project into modules can result in unnecessary rebuilds of unchanged code, further slowing down your build process.\nModern software engineering practices promote modularity and low-coupling between components.\nDeprecated features and APIs Sticking with deprecated features or APIs in your build scripts can also contribute to build rot. These deprecated features might be less efficient than their newer counterparts and might be removed in future build tool versions. The time and effort needed to refactor your scripts, once these features are eventually removed, add to the maintenance burden and deepen the build rot.\nRefactoring is a mandatory practice to integrate improvements of your build tool into your scripts.\nLessons Learnt Developers must understand the intricacies of these tools to use build systems like Maven and Gradle Build Tool to the greatest effect. By promoting a learning culture, you equip your team with the knowledge they need to best leverage these tools. Regular training and knowledge-sharing sessions can help reduce build rot and enhance productivity.\nEach team of developers should have one savvy build tool expert. Do not rely on external consultants or the build tool vendor to solve your problems.\nUpdate regularly your tools, plugins, and dependencies ensures you are leveraging the most efficient, optimized versions of libraries. This practice mitigates potential security issues and prevents the accumulation of update debt.\nI mean it. Update every week. Run your continuous delivery pipeline to validate your changes. You reduce the risk of breaking changes and can react immediately. The updates remove known bugs and security issues.\nObservability is critical in managing build rot.\nTrack your build and test times, identify trends, and analyze the impact of changes.\n1. Last millennium I had to migrate all my projects from Apache Ant to Maven. 2. I had to wait until {ref-vaadin} provided an official supported Gradle Build Tool plugin. ","categories":"","description":"","excerpt":" Gradle Build Tool is a fast, dependable, and adaptable open-source build automation tool with an elegant and extensible declarative build language. Java is the primary supported programming language. …","ref":"/blog/2023/gradle-good-practices/","tags":["agile","java","series-students"],"title":"Gradle Good Practices"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/hugo/","tags":"","title":"hugo"},{"body":" The static website build tool Hugo is awesome.\nThe extensive built-in feature set of Hugo and the feature-rich text-formatting options that Asciidoc offers creates a blogging experience composed of easy content management and fun writing experience.\nThe Hugo theme Docsy is ideal to create a good-looking software documentation site. The templates for blogging are good enough for our needs.\nThis theme is currently the best match I found to combine product documentation with blogging.\nI love to write my documentation and blogs using Asciidoc notation. The expression power covers all our needs. A major tool chain is the Asciidoctor ecosystem.\nLately, I needed new features to ameliorate the usability of our open-source documentation and blogging site.\nI had to deepen my understanding of how Hugo is working with themes.\nTabs I wanted to display plantUML diagrams and the associated code side by side in my article. The tab approach is perfect and lets the reader switch between both views in her browser.\nprovides an extension to support tabular display [1].\nThe trick was to integrate the extension in Hugo and Docsy.\nThe stylesheet for Asciidoc was extended to handle the tabular notation. The crew provides a styling example. Find my scss stylesheet under Asciidoc Docsy Stylesheet.\nAdd the Javascript code to react to user selections. Find my javascript code under Asciidoc Tabs Javascript.\nThe script code shall be included in the Hugo partials. Find the HTML code under Hugo Docsy Partials in the file footer.html.\nAn article using this functionality is C4 and UML with plantUML.\nI hope that the tabular display extension will soon graduate to an official Asciidoc extension.\nAttachments I am a lecturer at Lucerne School of Information Technology. All my course materials are under Creative Commons CC BY-SA..\nI wanted to provide recommended reading materials as a list of downloadable documents on the website.\nHow can you provide this function with Hugo and Docsy?\nThe Docsy theme as a merge request for exactly this function. The request was created in June 2021. It is still open end of November 2023, more than two years later [2].\nI decided to add the necessary code as a local extension to the docsy theme.\nAdd the Hugo shortcodes to the theme under Hugo Docsy Shortcodes in the file attachments.html\nAdd my scss stylesheet under Asciidoc Docsy Stylesheet in the file shortcodes.scss.\nA document using this functionality is https:/blog.tangly.net/ideas/learnings/lectures/[Lectures]. The page displays multiple lists of documents. The reader can download the material she is interested in.\nMundane Work I invested quite some time to improve the layout of the blog articles in the context of the Docsy theme. Hugo supports Asciidoc out of the box. It does not mean that the layout is perfect.\nAnother tedious activity is to remove broken links from the website.\nThe Asciidoc stylesheet had to be extended to support the additional features I am using.\nThe work is low tech. But I am convinced that users will appreciate the improvements.\nLinks [1] Static Website Improvements Marcel Baumann. 2023.\n[2] Improving a Static Website Build With Hugo and Docsy Marcel Baumann. 2021.\n[3] Support Comments for Static Hugo Website Marcel Baumann. 2020.\n[4] Creating a technical Website with Hugo and Asciidoc Marcel Baumann. 2020.\n1. The extension is still beta level end of 2023. 2. You can read the pull request under Docsy. Select the pull requests tab. ","categories":"","description":"","excerpt":" The static website build tool Hugo is awesome.\nThe extensive built-in feature set of Hugo and the feature-rich text-formatting options that Asciidoc offers creates a blogging experience composed of …","ref":"/blog/2023/static-website-improvements/","tags":["hugo"],"title":"Static Website Improvements"},{"body":" I attended the 20th edition of the Devoxx Belgium conference in Antwerp.\nI heard about beautiful examples of how to design complex software applications written in Java.\nThe solutions scale to hundreds of thousands of users, are resilient to network disruption and use fancy libraries and tools.\nThe applications are deployed on cloud infrastructure and are available worldwide.\nAfter the conference, I went to Ibiza for a family holiday. Our family enjoys prolonging the summer on this beautiful balearic island.\nThe weather is Switzerland is typical for fall. Cold, misty and often rainy.\nI used the relaxed location to reflect about the kind of applications I often develop for customers.\nThe application goal often is to digitalize an internal process or a more complex workflow involving customers and suppliers.\nThe product we have to develop has the following characteristics:\nIt is a web-based application. Customers and their IT departments do not want to install an application locally. Only a few users access the application through a tablet or a smartphone. I expect that mobile user numbers will increase in the future.\nIt has from a few dozens to a maximum of a few hundreds of parallel active users. The user interface should be responsive to reflect modern user interface expectation.\nPersistent data is often a few tens of gigabytes.\nIt has few computational intensive algorithms.\nIt often has to produce various output documents for distribution. The preferred format is PDF.\nA CRM system for a small company uses quite a small persistent storage.\nThe marketing department has less than 10'000 prospects and less than 1'000'000 interactions. The company has at most 10'000 contracts and 1'000'000 invoices. We can assume each object is less than 10 KBytes.\nThe size of the whole database is therefore around 20 GB. Modern servers can easily load this data in memory and provide lightning fast access to information.\nPlease factor in the fact that quite a slice of this data is in the past and is very seldom accessed. The application will not need regular access to all the historical information.\nMost of the time the application only accesses active customers, contracts, and invoices issued in the current year.\nModular Monolith The good approach to design such a system is to use a modular monolith architecture [2].\nThe technologies I use are:\nDomain Driven Design Is a good architecture approach to creating modular monoliths with object-oriented technologies [1, 2, 3, 4].\nModern Java technology stack Is probably the most effective stack for engineering maintainable solutions. Trained engineers are available. High-quality open source and commercial libraries are available to solve most requirements [1].\nEclipseStore and HyperSQL Are cost-effective and stable approaches for persistence.\nLogging log4j2 Is a powerful and established logging approach for your productive systems.\nMonitoring with Micrometer Is an industry standard to monitor your productive solutions on premises or in the cloud.\nVaadin, SO Charts Is a Java-based approach to creating modern user interfaces. {ref-vaadin} empowers developers to use one technology stack for the whole application.\nPDF Box Is a powerful library to generate your PDF output documents.\nFacturX and Swiss QR Code Are used to create compliant invoices in Europe and Switzerland.\nLimit the number of external libraries you are using in your products. Each additional framework increases maintenance costs and slow down your innovation progress. Java open-source projects are often laggards in adopting modern Java constructs.\nThe application could have a huge success and be sold as a product to customers. You must now support thousands of concurrent users and more persistent data.\nThe following changes are needed:\nSplit modular monolith into a set of services.\nMove to PostreSQL database.\nShard your application services and data either geographically or per customer groups.\nThe user interface written with Vaadin currently scales up to around ten thousand concurrent users for one server. If you have more users, you must create shards for your application.\nThis approach will only scale for around hundred thousand concurrent users.\nHonestly, I never created an application with more than eight thousand concurrent users. Products with more parallel users are seldom in Europe.\nLessons Learnt We are professional engineers. Form should follow function.\nThe huge majority of digital products we build do not need fanciful and expensive technologies.\nWe should build solid products [5]. Evolutive architecture principles [6, 7] help us to scale later.\nBeware that if your market grows exponentially, you will have to rewrite your solution.\nThis approach is the best for your company and your cash flow.\nOnce your product is successful and attracts swarms of customers, you will better understand your customers and have the necessary budget to create a truly complex solution.\nTrack new technologies. Evaluate their adequacy for your organization and products.\nI am currently evaluating Development Containers. It has the potential to simplify the setup of a development environment for a team. The approach also solves the maintenance nightmare to support multiple development environements for older product versions.\nLinks [1 ] Monolith First Martin Fowler. 2015.\n[2] Modular Monoliths Are the new Graal Marcel Baumann. 2022.\n[3] Behavior Driven Design Marcel Baumann. 2022.\nReferences [1] V. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\n[2] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n[3] S. Hofer and H. Schwentner, Domain Storytelling. Pearson Education, Limited, 2021 [Online]. Available: https://www.amazon.com/dp/B099ZNXCJT\n[4] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[5] D. Farley, Modern Software Engineering. Pearson Education, Limited, 2022 [Online]. Available: https://www.amazon.com/dp/B09GG6XKS4\n[6] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Automated Software Governance, Second. O’Reilly Media, 2023 [Online]. Available: https://www.amazon.com/dp/B0BN4T1P27\n[7] M. Erder, P. Pureur, and E. Woods, Continuous architecture in practice, First. Addison-Wesley, 2021 [Online]. Available: https://www.amazon.com/dp/B08ZRTQGLJ\n1. Modern applications are deployed on public or private cloud. I do not understand why such an application should run on an outdated Java runtime. You must update the runtime at least every three months to deploy the quarterly security patches. ","categories":"","description":"","excerpt":" I attended the 20th edition of the Devoxx Belgium conference in Antwerp.\nI heard about beautiful examples of how to design complex software applications written in Java.\nThe solutions scale to …","ref":"/blog/2023/pragmatic-java-application-design/","tags":["agile","architecture"],"title":"Pragmatic Java Application Design"},{"body":" You are creating an awesome digital product. The software part shall work flawlessly over the years.\nTechnology changes will be added to the product. Legal changes and security improvements are implemented in a timely manner over the years.\nThis application will evolve to satisfy new needs and customer segments. The life span of your product is probably more than a decade.\nHow can you document critical cross-cutting design decisions and key mechanisms?\nHow to help new team members understand your architecture and key concepts?\nWe are convinced that arc42, C4 Model, UML and plantUML are approaches to better communicate your intent to team members.\nInclude C4 Templates in plantUML The C4 Model notation is available as a template file [3]. Include the template in your plantUML diagram.\nThe following code generates the below diagram [1].\nDiagram\nSource\n@startuml !include \u003cC4/C4_Container\u003e Person(personAlias, \"Customer\", \"Optional Description\") Container(containerAlias, \"tangly\", \"Technology\", \"tangly open source components\") Rel(personAlias, containerAlias, \"use\", \"Cool Technology\") @enduml System Context Diagram A System Context diagram is a good starting point for diagramming and documenting a software system, allowing you to step back and see the big picture. Draw a diagram showing your system as a box in the center, surrounded by its users and the other systems that it interacts with.\nDetail is not important here as this is your zoomed-out view showing a big picture of the system landscape. The focus should be on people (actors, roles, personas, etc.) and software systems rather than technologies, protocols and other low-level details.\nDiagram\nSource\n@startuml !include \u003cC4/C4_Component\u003e LAYOUT_WITH_LEGEND() title Context Diagram for Voice Activated Door Control System Person(customer, \"Person\", \"person walks to the door\") System(VoiceActivatedDoorControl,\"Voice Activated Door Control System\",\"Receives realtime voice of person and makes recognition, then opens door if access permited\") System_Ext(DoorControlHardware, \"Door Control System\", \"Opens/Closes Door with electronics systems\") System_Ext(MicrophoneSystem, \"Microphone System\", \"Microphone for door control\") Rel(customer, VoiceActivatedDoorControl, \"Uses system to enter the house using own voice\") Rel(VoiceActivatedDoorControl, DoorControlHardware, \"Disceate IO\",\"Commands to open/close door\") Rel(VoiceActivatedDoorControl, MicrophoneSystem, \"UDP\",\"Gets voice data as UDP stream\") @enduml Container Diagram Once you understand how your system fits in to the overall IT environment, a really useful next step is to zoom-in to the system boundary with a Container diagram. A \"container\" is something like a server-side web application, single-page application, desktop application, mobile app, database schema, file system, etc. Essentially, a container is a separately runnable/deployable unit (e.g., a separate process space) that executes code or stores data.\nThe Container diagram shows the high-level shape of the software architecture and how responsibilities are distributed across it. It also shows the major technology choices and how the containers communicate with one another. It is a simple, high-level technology focussed diagram that is useful for software developers and support/operations staff alike.\nDiagram\nSource\n@startuml !include \u003cC4/C4_Container\u003e LAYOUT_WITH_LEGEND() title Container Diagram for Voice Activated Door Control System Person_Ext(customer, \"Person\", \"person walks to the door\") Container(VoiceActivatedDoorControl,\"Voice Activated Door Control Microservice\",\"c++\",\"Receives realtime voice of person and makes recognition, then opens door if access permited\") Container(VoiceTraining,\"Voice Training Microservice\",\"c++\",\"Gets sample voices from rest sdervice and uses them for machine learing purpose\") Container(WEBComponent,\"WebComponent\",\"React\",\"User interface for management and monitoring of system\") ContainerDb(DB, \"DB\", \"PosgreeSQL\", \"Stores metadata for voice recognition\") Rel_Down(customer,VoiceActivatedDoorControl,\"audio\") Rel_Down(customer,WEBComponent,\"Trains own voice to system\") Rel(VoiceActivatedDoorControl,DB,\"Gets voice recognition data\") Rel(VoiceTraining,DB,\"Puts voice recognition data\") Rel(WEBComponent,VoiceTraining,\"Rest\",\"Sends Voice Recognition Data\") Component Diagram Next, you can zoom in and decompose each container further to identify the major structural building blocks and their interactions.\nThe Component diagram shows how a container is made up of a number of \"components\", what each of those components are, their responsibilities and the technology/implementation details.\nDiagram\nSource\n@startuml !include \u003cC4/C4_Component\u003e LAYOUT_WITH_LEGEND() title Component Diagram for Voice Activated door control system Person_Ext(customer, \"Person\", \"person walks to the door\") Container(Service, \"Service\", \"C++\", \"Main Service\") Container(VoiceRecogniton, \"VoiceRecogniton\", \"C++\", \"Voice Recognition Module\") Container(DoorControl, \"DoorControl\", \"C++\", \"Opens and Clsoeses door\") Rel(customer,Service,\"talks\") Rel(Service,VoiceRecogniton,\"Initiatesd Voice Recognition\") Rel(Service,DoorControl,\"Initiates Door control\") @enduml Code Finally, you can zoom in to each component to show how it is implemented as code; using UML class diagrams, entity relationship diagrams or similar.\nThis is an optional level of detail and is often available on-demand from tooling such as IDEs. Ideally, this diagram would be automatically generated using tooling, (e.g., an IDE or UML modeling tool), and you should consider showing only those attributes and methods that allow you to tell the story that you want to tell. This level of detail is not recommended for anything but the most important or complex components.\nDiagram\nSource\n@startuml class Message\u003cT\u003e { int kind(); T data(); } abstract class ConcurrentQueue\u003cT\u003e abstract class Actor\u003cT\u003e Actor \"1\"*-\"1\" ConcurrentQueue : queue ConcurrentQueue \"1\"*-\"n\" Message : messages @enduml Additional Diagrams System Landscape diagram The C4 model provides a static view of a single software system but, in the real-world, software systems never live in isolation. For this reason, and particularly if you are responsible for a collection/portfolio of software systems, it’s often useful to understand how all of these software systems fit together within a given enterprise, organisation, department, etc. Essentially this is a map of the software systems within the chosen scope, with a C4 drill-down for each software system of interest.\nFrom a practical perspective, a system landscape diagram is really just a system context diagram without a specific focus on a particular software system.\nDynamic Diagram A dynamic diagram can be useful when you want to show how elements in the static model collaborate at runtime to implement a user story, a use case, a feature, etc. This dynamic diagram is based upon a UML communication diagram (previously known as a \"UML collaboration diagram\"). It is similar to a UML sequence diagram, although it allows a free-form arrangement of diagram elements with numbered interactions to indicate ordering.\nDeployment Diagram A deployment diagram allows you to illustrate how instances of software systems and/or containers in the static model are deployed on to the infrastructure within a given deployment environment such as production, staging, development, etc. It is based upon UML deployment diagrams.\nA deployment node represents where an instance of a software system/container is running; perhaps physical infrastructure (e.g. a physical server or device), virtualized infrastructure (e.g. IaaS, PaaS, a virtual machine), containerised infrastructure (e.g. a Docker container), an execution environment (e.g. a database server, Java EE web/application server, Microsoft IIS), etc. Deployment nodes can be nested.\nYou may also want to include infrastructure nodes such as DNS services, load balancers, firewalls, etc.\nFeel free to use icons provided by Amazon Web Services, Azure, etc. to complement your deployment diagrams . Make sure any icons you use are included in your diagram legend.\nLessons Learnt You should discuss intensively in your team and organization why you create diagrams. Each diagram has creation and maintenance costs.\nIf you decide to create a lot of diagrams for your system, consider using a full-fledged C4 or UML modeling tool instead of a diagramming tool. Be aware one team member shall be a power user. He will support the team and write utilities to simplify usage of the tool [2].\nWhat are the purpose and goals of your diagrams?\nI suggest using diagrams to document key design cross-cutting decisions.\nCross-cutting decisions are the backbone of your design. Document them extensively with graphical tools.\nKey architecture decisions are often tactical decisions and should be documented in Architecture Design Records ADR. Future team members will understand why you decided to use a specific technology or design pattern.\nPublic API shall be documented with OpenAPI or a similar approach.\nModules and classes are documented with JavaDoc. Maintainers will be thankful for high-quality documentation.\nNew team members should understand the application design with the help of these diagrams and associated documentation.\nPlease do not try to document all classes and packages with diagrams. It is not worth the money.\nReflect what you document in overall diagrams and document and what you document in your API documentation. The Java API documentation is a good example of high-quality and legible abstraction documentation using JavaDoc. You can use Doxygen for applications programmed in C++.\nLinks [1] Agile Visual Tools. Marcel Baumann. 2023.\n[2] Creating a Technical Website with Hugo and Asciidoc. Marcel Baumann. 2020.\n[3] PlantUML stdlib C4\n1. Use this diagram block definition generates a vector graphic file centered in the document plantuml,target=\"plantuml-c4\",format=\"svg\",align=\"center\" 2. A typical example of such scripts is the generation of the diagram pictures and their inclusion in the application documentation. The process must be fully automated to guaranty synchronization of modeling results and product documentation. ","categories":"","description":"","excerpt":" You are creating an awesome digital product. The software part shall work flawlessly over the years.\nTechnology changes will be added to the product. Legal changes and security improvements are …","ref":"/blog/2023/c4-and-uml-with-plantuml/","tags":["agile","architecture","series-students"],"title":"C4 and UML with PlantUML"},{"body":" Java expertise is in high demand for all kinds of projects, ranging from big enterprise software implementations down to little web projects. A huge number of enterprise applications are developed in Java.\nBut will those employers want you to have related certifications?\nEven if you are not looking to move any time soon, getting certified boosts the value that you can bring to your organization.\nCertifications can be a great bargaining chip when it comes to negotiating a raise or a promotion.\nPreparing for the certification The current Java SE 17 Developer examination process and examination goals are well-documented. Beware that only one examination exists. The same certification applies for developers pursuing a first certification, and for the developers upgrading to the current LTS version.\nExam Details Syllabus Code: 1Z0-829\nDuration: 90 minutes\nPassing score: 68%\nPrerequisites: None\nNumber of questions: 50\nType: multiple choice\nCost: $244 - CHF 225\nControlling program flow\nUtilizing Java object-oriented approach\nExceptions\nManaging concurrent code execution\nUsing Java I/O API\nAccessing databases using JDBC\nYour preparation approach shall be tailored to how you prefer to learn. You can attend a course or read a book.\nThe OCP Oracle Certified Professional Java SE 17 Developer Study Guide: Exam 1Z0-829 is a great and cost-effective resource. You have access to all materials for less than forty dollars.\nThe book provides a registration to a wiley account where you will have access to a test bank. Once activated, access to the test questions is available for one year for free [1].\nThis book is for anyone from high school students to those beginning their programming journey to experienced professionals who need a review for the certification.\nMockup Questions Try the various online mockup questions to get a grasp of the certification examination.\nThe OCP book contains a full set of questions and answers.\nYou will often find answers to Java questions on Code Ranch. The authors of the book are providing hints on the discussion panel.\nTaking the examination I strongly recommend attending an onsite examination. The setup is more convenient than the online version of the test. The cost of the test in Switzerland is around CHF 225.\nYou will receive a public badge upon successful completion. Interested parties can confirm your certification when provided with the link. You can, for example, publish your certification badge on the LinkedIn platform.\nLessons Learnt Read all chapters of the book to prepare for the examination.\nTrain with mock questions. Do not focus on memorizing the questions.\nTry to relax during the examination. Do not stay too long on one question.\nEach question has the same weight for passing the examination. Answer first the questions you find easier.\nAt the end of the test, reconsider the answered questions and either find or guess an answer. With some luck, you get a few more points.\nIf you are a senior Java developer, you probably do not need to renew your credentials. You already have shown you reached the expected level.\nThe value of taking the updated examination each time a new Java LTS version is released is not clear for me. Investing in the certification every two years has no measurable return on investment. You will not get a salary increase in Europe for a renewal.\nFind a more effective approach to learning the new features of the Java language and environment.\nLinks [1] OCP Oracle Certified Professional Java SE 17 Developer Study Guide: Exam 1Z0-829 Scott Selikoff, Jeanne Boyarsky. Sybex. 2022\n[2] Certified Java 11 Developer Marcel Baumann. 2021.\n[3] Are Certifications Useful? Marcel Baumann. 2023.\n1. The registration process will verify that you own a copy of the book. ","categories":"","description":"","excerpt":" Java expertise is in high demand for all kinds of projects, ranging from big enterprise software implementations down to little web projects. A huge number of enterprise applications are developed in …","ref":"/blog/2023/java-certification/","tags":["agile","java","series-students"],"title":"Java Certification"},{"body":" I attended the highly anticipated 20th edition of Devoxx Belgium 2023.\nBuilding on the success of the previous year, which attracted over 3,200 attendees, this five-day technology conference is set to exceed expectations.\nThe fresh release of Java 21 is a hot topic. Renowned speakers share their knowledge and discuss the enhancements that this new version brings, providing a valuable learning opportunity.\nAttending Devoxx Belgium presents a remarkable opportunity to broaden your knowledge, refine your skills, and gain firsthand experience with the most recent technologies.\nSession recordings are available on YouTube under the Devoxx Channel. The videos are published on the same day the talk was held. Congratulations to the Devoxx committee.\nMost of the talks were good. A few were excellent such as Java Meets AI: A Hands-On Guide to Building LLM-Powered Applications with LangChain4j. The Oracle Java architects are doing a stunning job. They are very professional, polite, and their talks are of high-quality. Brian Goetz and Per Minborg made a big impression on how competent they are [1].\nMy favorite tool companies Jetbrains, vaadin}\u003e, and Oracle Java were exhibitors.\nDay One The train ride from Brussels airport to Antwerp is around half an hour.\nThe venue is easy to find and has splendid public transportation connections. The registration was straightforward and fast. Wireless is working.\nIt was saddening that most attendees are white male engineers. Perhaps the conference committee should more actively pursue diversity. Other conferences try very hard to attract less represented groups in particular women.\nThe coffee was lousy as usual at a software conference [2]. The danish pastries were welcome.\nTest Containers: Needed, Simple, Powerful Integration tests verify your application is working as expected.\nTest containers is a powerful wrapper around docker. You can create the integration environment and the continuous delivery pipeline in Java.\nTest containers seem to lower the anxiety how to set up an integration environment and deploy the application on it. If you prefer to write and debug your integration setup in Java, test containers are useful. The demonstration highlighted you have anyway to learn the subtleties of Docker. You can write your setup code in Java, but it requires quite knowledge about the underlying tooling.\nA cool hint was toxiproxy to simulate network delays and errors.\nAlternative approaches are docker compose or plugins such as jib.\nI am still not convinced the gains using test containers are worth learning a new library. The assumption is that you are already proficient with Docker and Docker Compose. Test containers are certainly useful when you have a complex ecosystem with databases, servers, and a lot of microservices.\nI often have a modular monolithic application. I use Eclipse Store and embedded HyperSQL for persistence. I use Flyway to populate the database. My docker compose file is simple and straightforward.\nWhy should I add the complexity of test containers?\nJava 21 The introduction was well-done. Honestly, if you read the JSR and articles during the early-adopter phase, you did not get new information during the presentation.\nThe presentation is for Java developers lagging behind the latest Java LTS release. Modern developers evaluate a new Java version before it is officially released.\nValue Types and Patterns Matching Data oriented programming separate data and code. This approach is against core concepts of object-oriented programming.\nThe speakers talked about the disadvantages of recompiling code when changing an interface. But honestly what are the costs of compiling in a modern DevOps environment?\nThe advantage of declaring a static method instead of a default method in the interface is not visible to me.\nUse sealed class hierarchies, pattern matching in switch expressions to delegate complex business logic inside business classes.\nConsider using records to write less code and move in the direction of immutable instances.\nDeconstruction patterns and unnamed variables make the algorithms more legible.\nAvoid Anemic Domain Model. I acknowledge there is a tension between behavior which should be part of a class and complex business logic which should be defined separately from the core domain abstractions.\nIf you are not the owner of the code, you want to extend it using:\nPolymorphism You can add new subtypes and cannot create new operations.\nFunctional You can add new operations but cannot create new subtypes.\nThe above constraint clearly defines the tension in designing the abstractions for a bounded domain. Both variants are mutually exclusive in modern programming languages.\nAn experienced architect with domain knowledge should hint which functionalities belong to a class and which ones are better located in business logic abstractions.\nFuture constructs were also presented.\nNamed patterns is a discussion theme in the community. They support the deconstruction of regular classes.\nValue classes as potential first preview of the Valhalla project. Value instances have no identity anc can be stored on the stack. Interestingly, the optimization is only done at runtime.\nThey stated discussions is under to integrate null annotation in the language as discussed in JSpecify [3].\nModern Java programmers implement the equals(Object obj) method with instanceof and not if statement.\nThe statement if (this == obj) is a performance killer when compared with the modern approach. Stop using conditional statements when implementing equals method.\nGetting Started with the Structurizr DSL Simon Brown provided a nice introduction to C4 Model: Context, Container, Component, and Code.\nThe explanations of Structurizr DSL and examples were interesting.\nMultiple diagrams can be defined in views. The types are systemContext, container, and component.\nYou can manipulate the diagrams with scripts.\nThe model stores semantic relations between the various elements.\nYou can use the command line to generate all views as regular or C4 plantUML diagrams.\nThe examples showed that often you start programming diagram items and contents.\nThe major drawback is that Structurizr wants to be the ruler of your documentation. You cannot create a static website with the diagrams and the links between them. The tool plantUML supports such features through the SVG output. Instead Structurizr requires that your Asciidoc or arc42 documents are integrated into it.\nYou can export the content of a model to an HTML page.\nIt is not the same as generating a static website with a static generator and theme. Generators such as Hugo provides mechanisms to generate links and cross-references to link various parts of your documentation.\nThe idea to add a semantic abstraction layer to diagramming tools is brilliant. I think the current solution should be improved to simplify diagram handling.\nDay Two I found a nice coffee shop in town to get a real coffee and a cinnamon roll. Loaded with caffeine and sugar, I am ready to tackle the second conference day.\nKnow Your Java? Entertaining and professional presentation of Java quirks. The examples show Java software archeology. Old coding and naming decisions coming back to bite you.\nDon’t Walk Away From Complexity, Run.\nSpeed without Discipline: a Recipe for Disaster.\n— Venkat Subramaniam New features have sometimes strange impacts on existing code, often due to bad naming or interface segregation troubles.\nLearn the language and the standard API. Stop programming for instructions to iterate through collections. Use the streams API.\nStudy functional programming, pure function, and immutable data structure concepts. Java mixes object-orientation and functional programming. The compiler performs limited checks if your functional code behaves correctly.\nAs a young developer, consider taking the Java developer certification examination.\nTest-Driven Insights: 10 Hints You Were Missing Funny examples of how to write unit tests for crap code. The end of the talk presented good design approaches and the need to refactor. The speaker Victor Rentea outed himself as a clean-code advocate.\nRely on the language and not on tests to detect errors is a profound advice.\nThe C++ bashing was surprising.\nThe attendees hinted that a lot of legacy code exists. Developers are under the yoke of maintaining and extending geriatric solutions.\nI rather advocate performing refactoring to remove technical debt before trying to add functionality. I fully agree that there are rare exceptions due to important business deadlines. Here you could use the tricks with mocks, partial mocks, breaking information hiding to test legacy code.\nBe honest. I would never work on a crap software code application. Either the company is resolute with professionalism and supports refactoring. Or I would look out for a serious development environment.\nMicroservices Got Talent: The Event-Driven Beautiful Dance Event-first design is another approach to look at your domain.\nEnsures there are event handlers for all emitted events before they are effectively persisted. The event sourcing runtime should ensure the approach.\nValidate the command. Execute the commands sequentially on your model.\nMutate the state by applying the events.\nPersist the events Do not use Java serialization. Think about schema evolution. JSON is fine, but you have to manually implement schema changes. Performant approaches are Avro or ProtoBuf which support schema evolution. Eclipse Store is a potential candidate. The event sourcing runtime is responsible to load events into memory and removes them from memory for a specific instance in the domain model.\nProjections are used to process events and create a query optimized views on the model. The concept is similar to a materialized view in a relational database. Events are sent at least once to projection event handlers [4]. Scalability is realized through slicing of the event store. The slicing property is the stable identifier of the entity referenced in the event. Design your system accordingly.\nChoreography sagas are completely based on events and projections. Once triggered, it moves like a wave until completion. Therefore, no error should block the flow and they are hard to debug.\nYou can use complex sagas with orchestration tools such as Temporal or Camunda. A trend is to offer PaaS solutions built around a kubernetes cluster.\nWith Java 21, Your Code Runs Even Faster. But How is that Possible? The presentation was fun, instructive and well-done. The details were inspiring and of high-quality.\nThe speaker showed multiple areas where the JVM was locally massively improved through clever refactoring. Worth every second and a nice way to complete the day.\nDay Three Keynote The themes are Java and AI. Artificial intelligence is a hot topic with few concrete scenarios. The three most cited areas are personal assistant, coding assistant, and image generator.\nA good coding copilot would be a great use case. Jetbrains and other companies solutions are still work in progress and often not released to the public.\nAnd two talks about physics and quantum computing.\nBrian Goetz presented the new features of Java 21. An alluring idea was presented. Library owners should follow a similar release strategy as Java.\nLTS releases are delivered every two years. Once released, only security problems and bugs are corrected in the LTS releases.\nNew features are only implemented for the current Java release. Use the newest Java features. You do not have to provide backward compatibility for older versions. Your users can use your LTS release.\nThe idea is so cool. I will advocate the approach and try it on my open-source projects.\nYou have only to support two versions of your library. You can use old the cool new features in the newest version without stressing about backward compatibility.\nUnlocking the Potential of Bits and Bytes: Reducing Data Footprint for Cost and Eco-Efficiency Beginner introduction of byte encoding for the payload.\nThe speaker advocates the use of cheap raspberry boards to experiment.\nSmaller data packages reduce energy consumption, network traffic, and surprisingly also latency.\nProtoBuf is a good compromise to encode payloads. Hand coded structures are still factors more compact but require code to encode and decode the payload.\nPostgreSQL, The Time-Series Database You Actually Want The speaker shows a demonstration of time series in postgreSQL. Nice to learn the database supports the feature, and I missed concrete examples why should I use it.\nProject Leyden Brian Goetz explained the various mechanisms to speed startup time and increase performance. In the end, Java programs should be more cloud-friendly.\nUse AppCDS to improve the startup performance of your application. It should be a standard step in your deployment before packaging your application into a Docker image.\njava -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=tangly-os-archive.jsa (1) 1 Since JDK 19, the CDS archive file is created automatically as a dynamic archive if it is missing. If the file exists, the JVM will use it. CDS is active per default -Xshare:auto. Ideally, some improvements shall be delivered with JDK 22.\nJava at AWS: Lessons Learned from Upgrading and Modernizing a Massive JVM Codebase Speakers presented the huge gains moving from JDK 8 to JDK 17.\nThey had a few regression cases when doing such a huge jump in versions. The troubles were methods or classes no more accessible in the newer version. Just read the log files; the encountered restriction always generates a log describing the problem.\nBeware that more threads can be active in garbage collection in newer versions.\nThey provided an interesting argumentation why they will wait with the update to Java 21. The known bugs are too critical to update such a huge installed base.\nJames Gosling was interesting and getting older. He had a point that multiple libraries implementing the same functions are eating away your memory. A Java application should have one JSON transformer, one serializer, and one HTTP protocol stack.\nLimit the number of libraries you are using.\nThe biggest inhibitors for updates are test mocks and Lombok.\nInstead of forking an open-source library, write a change request first. Prefer pull requests over forks. Sharing source code is more toxic than sharing binaries. Long live maven central.\nJava on Arm. New horizons It was a boring presentation. I know a little about ARM processor architecture. The speaker just presented the different processors available on the market.\nNo real presentation how Java is optimized for ARM architecture. He could have presented intrinsics, SIMD support and other architecture optimizations.\nCloud companies provide ARM-based solutions with tens or hundreds of cores. All Apple computers are running on ARM.\nOne clear statement was we will run our applications on a platform with a lot of ARM or X86 cores in the future.\nCoding Your Documentation Hubert Klein also known as mrhaki is an advocate of Asciidoc. He has a cool blog. I am also a fan of Asciidoc, Asciidoctor, and Hugo.\nThe presentation was interesting and professional.\nI am an absolute fan of Asciidoc, plantUML and Hugo. I enjoyed seeing how he solved similar problems with the same toolchains. Day Four Surprise, Surprise. The public transportation went on strike today. I had a nice stroll along the harbor to reach the conference venue. The weather was fine and I achieved my daily sport quota.\nIn the evening, I discovered that the strike is going on. I got my second walk and enjoyed the sunset over the harbor and the old city.\nIt was the first day with fall temperatures. The previous days had summer temperatures. You still could have dinner outside on a terrace. It was a little chilly, but locals enjoyed the last warm days of this season.\nOpen Telemetry and Continuous Feedback. Things you need to know about your Java code at runtime The speaker favors integration and production feedbacks how the application behaves.\nHe advocates OpenTelemetry because it is an industrial standard.\nAn introduction how to use OpenTelemetry can be found under Continuous Feedback. The Digma plugin is an approach to support developers. Observability metrics are provided during development and testing directly in your Jetbrains IntelliJ IDEA.\nCool plugin providing developer functionality without having to install multiple docker images as with regular DevOps tools.\nLessons learned using Machine Learning in Java Funny presentation how to classify Lego bricks using machine learning.\nThe speaker is not a machine learning ML specialist and had a steep learning curve. All packages are available as open source packages.\nThe Java ecosystem is smaller and less well documented. He used Deep Java Library.\nOne important finding was use real images, do not create them mechanically. The difference is tremendous.\nTutorials how to set up a machine learning environment, train the models, and process application data are sorely missing. Java Meets AI: A Hands-On Guide to Building LLM-Powered Applications with LangChain4j This presentation was the coolest of the whole Devoxx 2023.\nThe speaker is an active developer of LangChain4J. Her approach solves the troubles described in the previous talk for LLM models.\nIf you are a beginner, go to HuggingFace and localAI. The code examples show how little code you need to set up a chat agent backed with a LLM model.\nYou can define your own tools to compute values instead of asking the model to guess them. Better than you can ask your model to generate a tool because models can also write source code. This is awesome.\nI have to test chat with documents. Train with your documents, for example, your blog. After training, the chat can answer questions about your own documents or source code. Debugging with IntelliJ IDEA Solid presentation of Jetbrains IntelliJ IDEA debugger features with hands-on examples.\nI seldom use the debugger. The tips were good but not really relevant for me.\ngRPC Supercharged with Armeria The speaker presented a solid introduction to gRPC and Armeria.\nThe frameworks provide needed services for highly scalable applications based on microservices. Armeria industrializes gRPC services.\nThe concepts are clean and well-implemented. The decorator pattern is used to add functionality to services. I seldom have non-functional requirements requiring such complex architectures.\nThe Armeria framework provides the equivalent of OpenAPI for gRPC. Beware that Armeria is a framework which again implemented an HTTP engine. Building and Deploying Java Client Desktop Applications With JDK 21 and Beyond A solid presentation about Swing and JavaFX. You can use both libraries in the same application.\nThe demonstration of an email client was solid. I got the impression that not a lot of innovations are happening in the Swing or JavaFX landscapes [5].\nUse jpackage to create a native installer [6]. For example, it creates a dmg installer for the macOS platform. Open standards for building event-driven applications in the cloud The speaker provided a good introduction to Async API and cloudevents.\nFunny to have a speaker at a Java conference stating he did not install Java on his notebook and showing C# examples. It is a proof the speaker did not prepare for this talk. It felt like disrespect to the conference attendees. Day Five The last conference day. I am surprised how tiring it was to listen to so many presentations and trying to memorize interesting concepts.\nI decided to leave earlier to be sure to catch my flight. The yesterday experience with the strikes worried me. It worked well, and I was ahead on time at the airport.\nI decided to enjoy the digital nomad feeling. I published this blog at the airport while waiting to board my plane. The developer’s guide to making money in the open-source galaxy An entertaining presentation about entrepreneurship.\nHe had tribulations between Java and .NET projects. I finally got the courage to realize a product idea I had long ago and implement it as an open-source Java. JobRunr was born as a port of .NET Hangfire.\nHe used redIT to market his product. He enjoys working with the Java community and Java champions. They are very supportive and kind.\nThe commercial model is JobRunr as open-source application and a paid professional version. The first license is a permanent license to a French company priced 400 EUR.\nThe breakthrough was a talk in May 2022 at the Spring I/O conference. The ThoughtWorks technology radar mentioned JobRunr and increased the exposure.\nHe made 90'000 EUR in 2022. The forecast for 2023 is around 260'000 EUR. He hired his first employee.\nThe whole approach is cute, hands-on, and most importantly working. He is able to live from an open-source product. This is an impressive and sadly seldom achievement.\nThe Panama Dojo: Black-Belt Programming with Java 21 and the FFM API Per Minborg provided again a cool high-quality talk about {ref-panama and Foreign Function and Memory API.\nAn arena models the lifecycle of one or more memory segments. All segments allocated in the arena share the same lifetime. Multiple arena types are provided for different scenarios.\nMemory layouts describe the contents of a memory region programmatically.\nWith Panama, it is again good and easier to call C libraries from Java applications. JNI is now officially an obsolete technology. Use Foreign Function and Memory API to call external libraries. Learnings Please use the current release of Java. Most speakers rightly make fun of organizations still using Java 8 or older versions. They seriously asked why you are not yet on the Java LTS 21 version.\nEmbrace functional programming. Conquer streams and lambda expressions defined as pure functions. Promote immutable objects and collections in your source code. These design solutions naturally scale with more processing cores.\nVirtual threads are here. Use them. Concurrent collections shall be used to implement back pressure with virtual thread designs. The performance of concurrent collections will be fabulous with Java 22.\nAdvanced discussions were heard in some talks. How should and would Java evolve in the next years? Current openJDK projects cover all ideas I heard during the conference. The exception is how to support ML and AI approaches. I am only aware of JSR 381 [7].\nGreen IT is regularly cited. I am not sure organizations take the initiative seriously.\nSpeakers are professional engineers. Almost all of them have Apple notebooks. Professional Java developers are using Jetbrains IntelliJ IDEA from Jetbrains. More than 80% of conference participants use it.\nI love the modern connected world. I hold video conferences with my daughters and wife every day without trouble.\nI was pleased that no customers called me during the conference.\nLinks [1] Are Certifications Useful? Marcel Baumann. 2023.\n[2] Java Certification Marcel Baumann. 2023.\n[3] Java Certified Developer Java 11 Marcel Baumann. 2021.\n[4] Modern Java Constructs Marcel Baumann. 2022.\n1. I still think that Oracle Java license conditions are lunatic. You have to pay 250 USD per collaborator. Nothing to do with how many developers you have or how many applications you are running. 2. Agile conferences have often a real coffee machine and a barista. I promise it is not the reason why I also attend agile congresses. 3. The restriction is that the community agrees upon the check definitions. 4. Exactly once is only available for local services using a transactional backend. 5. I do not care too much about the inertia. I am mainly developing web-based applications with vaadin}\u003e. Jetbrains is doing an incredible job to update Swing and Java 2D subsystems to changes. The Lanai and Wakefield projects are awesome. 6. You can only create an installer for the platform where you are running jpackage. Use a continuous delivery platform to build installer for all the platforms you want to support. 7. I have the impression that JSR approach is dead. Oracle architects stated the goal is to make Java a friendly environment for all important trends. Project Panama is an approach to better integrate ML and AI libraries with Java. Panama is available in curren Java versions. Project Valhalla would allow more performant implementation of computation algorithms in Java. It is a pity that we are still waiting on a fist release of the project. ","categories":"","description":"","excerpt":" I attended the highly anticipated 20th edition of Devoxx Belgium 2023.\nBuilding on the success of the previous year, which attracted over 3,200 attendees, this five-day technology conference is set …","ref":"/blog/2023/20th-devoxx-belgium-conference-2023/","tags":["java","organization"],"title":"20th Devoxx Belgium Conference 2023"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/organization/","tags":"","title":"organization"},{"body":" A software architect works with a development team to define how features shall be realized. The selected approach should support corporate governance and legal constraints.\nA new digital product must fulfill a set of technical aspects to be usable. Technical constraints are the non-functional requirements of the product [1].\nSome of these technical requirements are encountered again and again when developing digital products.\nAny software product must provide solutions to standard problems.\nTypical aspects are user interface, persistence, configuration and compatibility issues.\nExperienced software designers often have a list of questions any software architecture should answer.\nBelow the questions I answered every time when implementing a new application.\nUser Experience How should the users interact with the product? How can the application streamline customer activities and diminish user mistakes?\nUsability The navigability of the visual components shall follow standards [2].\nInternationalization and localization The application shall be usable in various countries through i18n and l16n.\nCorporate identity The user interface shall follow corporate identity such as color palette, logo, and navigation.\nTranslation All human-readable texts shall be translated in the supported languages.\nAccessibility The solution shall be accessible to various groups of users. Accessibility laws exist in most of the countries.\nUser manual A user manual shall be provided to the users.\nHire a professional interface and usability expert. Trained collaborators are key to designing world-class user interfaces.\nConfiguration How should the product be configured during production and at customer site?\nDeployment configuration Defines how the application is deployed on the target system.\nParametrization Parametrizes the application to a specific country and customer.\nConfiguration persistence The configuration of the application through the producing company and the user shall be persisted.\nConfiguration migration Existing configurations need to be migrated to new versions of the solutions.\nXML is an obsolete technology. Do not use it in new projects. Consider JSON or TOML.\nAvoid storing configuration parameters into a relational database.\nData Management How are data persisted in the application? Which information should be persisted is a requirement. The manner to persist data is a design decision.\nPersistence How does the application persist data?\nArchiving How is older information archived?\nData migration How is persisted data migrated when a new application version is deployed?\nBackwards compatibility Sometimes the application shall handle older persisted information or configuration without explicit migration. The same constraints can often be requested when communicating with external systems.\nData is often the most valuable asset of an organization.\nOrganizations often store information over decades. This data must be accessible in the future.\nInternal Communication How do the application components communicate inside the software?\nTask communication, synchronization and parallelization How do threads communicate inside the system? How do components communicate inside the software?\nInterprocess communication How does the application communicate with external systems?\nTransaction handling How are transactions handled to provide atomic changes of a set of related data? Scalability: How to scale the system when more requests must be processed?\nResponse times How do we guaranty soft and hard response deadlines?\nAvailability How do we ensure that the application is available when needed?\nInternal communication shall always use asynchronous communication implemented through the actor model. It provides scalability, availability, and response time. Transaction handling is provided through eventual consistency and storno approach.\nBy all means avoid the global lock approach which probably will kill your application in the long term.\nErrors How are runtime faults and errors handled in the product?\nInterface data validation Input information shall always be validated to avoid data corruption.\nPlausibility checks Which information is plausible? Which data values hint to an error or corruption? Plausibility checks are also applicable for internal data.\nError and exception handling How do we detect errors? How do we propagate them through the system and outside? How do we recover from an error? How do we log any error for further offsite analysis?\nError handling is a crosscutting concept in the application. Try using the same approach through the whole system to diminish semantic complexity.\nIntegration How can you integrate the product into a landscape?\nDeployment How should the solution be deployed in a landscape? Is incremental update requested? How do we update the configuration of a subset of the landscape in a consistent way?\nAuthentication How do we authenticate the users of the application?\nAuthorization How do we limit access to specific functionality or data to selected users?\nExternal interfaces How do we document and validate interfaces to external applications?\nBatch processing Should we process batches of requests?\nBusiness rules How can our application be integrated in the processes of the organizational landscape?\nModular monolith approach is currently the most cost-effective approach to structure a software application. Communication between bounded domains is primary asynchronous and message based.\nUse standards for authentication and authorization to minimize security risks.\nMonitoring How could the organization infer that happened during the product use in the field? What are the operational processes?\nLogging How should you trace interesting activities? Log all exceptions, errors, all data received or sent to another system as a minimum.\nMonitoring and data collection for offsite analysis How should you monitor activities of interest in the system?\nAuditing Legal and governance relevant activities should be audited. Audit logs should often be human-readable due to legal considerations.\nReporting How can a user create reports?\nDisaster recovery How should our system recover after a catastrophic crash with data or configuration loss?\nMonitoring is essential in a successful product. Do not skip it.\nThe solution should support automatic offsite processing to extract relevant scenarios from huge data sets.\nDevelopment Practices How should the development team work to produce the right product with the right quality?\nCoding guidelines How should you write source code? The selected guidelines shall be automatically enforced with tools. Use available guidelines for your technology stack to increase quality.\nDesign patterns How can you design and implement recurring functionalities found in most systems? Use well-documented design patterns and code idioms.\nFunctional requirement verification How can you ensure all functional requirements are implemented? Consider automatic acceptance testing.\nNon-functional requirements verification How can ensure all non-functional requirements are correctly implemented? Consider using fitness functions.\nCode legibility How to encourage your developers to write legible and maintainable source code?\nThe standard digital development approach is agile.\nUse the current version of your technology stack. Laggards are losers in the technology field.\nLegal Aspects Which legal restrictions apply to the product [3]?\nIndustry norms Which standards should you fulfill to avoid being sued?\nData confidentiality Which confidentiality regulations should you implement to avoid being sued?\nAccessibility laws Which user interface functions should you provide to avoid being sued?\nLessons Learnt Each architect has preferred solutions for these themes. You can freely select your approach as long as the non-functional requirements are fulfilled.\nBeware that the capabilities of your development team will influence which answers should be selected. Avoid solutions overwhelming your developers.\nConsider choosing well-known approaches to reduce training and coaching effort.\nInvest effort to create an evolvable architecture. The chosen architecture shall adapt to encompass newly discovered requirements.\n1. The ISO standard 25010, 25012, 25040 and 25059 is a family of software and data quality standards. They are an example of non-functional requirement nomenclature. 2. Major platforms such as macOS or Android have extensive visual and usability guidelines. 3. Senior designers should be aware of legal and copyright aspects for digital products. ","categories":"","description":"","excerpt":" A software architect works with a development team to define how features shall be realized. The selected approach should support corporate governance and legal constraints.\nA new digital product …","ref":"/blog/2023/software-architecture-themes-and-questions/","tags":["agile","architecture"],"title":"Software Architecture Themes and Questions"},{"body":" Why is visibility so important for any agile or Scrum team?\nWhen you are running an agile product development initiative, your ultimate goal is customer satisfaction with the delivered solution.\nThe project coordination responsibilities are, however, not limited to this single goal.\nThe product owner shall nurture the vision, roadmap, the release plan and customer journey. You must coordinate the workflow of your team, refine the product backlog, control identified risks, and track deadlines.\nThe development team shall inform about progress, incremental deliveries, technical debt, impediments and risks.\nWhy Visual Tools? Various practices exist to forecast product development progress, like burn-downs, burn-ups, cumulative flow, or velocity diagrams.\nWhile proven useful, these do not replace the importance of empiricism.\nIn complex environments, what will happen is unknown. Only what has already happened may be used for forward-looking decision-making. Visual aids optimally support the Scrum pillars of transparency, inspection and adaptation.\nMost of these diagrams naturally provide the time dimension necessary for forecasting.\nYou cannot manage what you cannot measure.\n— Peter Drucker Criticism and critics are welcome. Bring and sell better solutions.\n— Marcel Baumann Scrum Visual Aids Visibility ensures that trust, reliability and accountability exist in a team.\nDiagrams are information radiators. They provide easy and legible access to progress information.\nIf your team, Scrum Master, Product Owner or stakeholders cannot see what the team is doing, it creates the impression that you are doing lots of nothing. Or do lots of things completely wrong.\nThese doubts are one of the fastest ways to find yourself in a quagmire of unfinished work.\nMaking your work visible raises expectation, and luckily, it raises opinions of you.\nThe time wasted extracting progress status out of a teammate or following up on interdependent tasks will make you risk failing your sprint.\nWorking at a sustainable pace can only be achieved if you make proper use of the time available.\nYour team and anyone else for that matter cannot trust someone who keeps progress hidden. They are in the dark, which leads to uncertainty. They tend to assume something is either being done or not being done and either get stuck into it themselves.\nHow reliable you are depends on how transparent you are about what you have taken responsibility for.\nAnd how much your team can trust you to handle it to completion without causing stress to the team.\nThe agile community experiments with various approaches to visualize what is going on.\nBurn-down and burn-up diagrams are available for sprints, epics, releases and products. This is not a measure of work done but work which is still to be done. It is a valuable tool to use as a thermometer or symptom checker.\nFlat-lining is a symptom of a few things:\nYou are working on too many stories at a time. You are doing lots of nothing, progress gets done very slowly. We recommend introducing WIP limits.\nYour team hast too many started but unfinished stories at the end of the sprint. We recommend institutionalizing pair programming and mob programming.\nYour tasks are not granular enough. Progress is slow and initial estimation does not reflect effective effort. One of the things which we tried is not to accept any six-hour tasks and on agreeing to decompose these tasks further.\nBecause of its appealing visual format, your team members can understand this chart easily. It is used to summarize a thorough description of a feature from an end-user perspective. That is why you can update the chart only after the completion of a user story.\nSprint Burndown Chart The sprint burndown charts depict how many stories are completed and how much work remains in the ongoing sprint. Sprint burndown chart displays user stories, which are selected by the team in the sprint planning session. You measure finished stories providing value to the customer. You shall not track hours or task completion.\nProduct Burndown Chart Product burndown charts can visualize the entire project; in short, it looks at the big picture. It shows how much work is remaining for your team to match the product goals. The vertical axis displays the product backlog items in the product burndown chart, while the horizontal axis implies the sprint numbers.\nRelease Burndown Chart This burndown chart is responsible for tracking all the progress made by your scrum team during reaching a release point. The vertical axis of the chart depicts the stories. The horizontal axis represents the time your team members spent.\nCumulative flow diagrams The diagrams are available for sprints, epics, releases, and products. These diagrams show the bottlenecks due to team member specializations or dependencies to external actors. Lean approaches request to identify and implement corrective measures to remove identified bottlenecks.\nVelocity visualization Business can envision and calculate when they can potentially release a product or subset of a product based on how fast the team is working. If the backlog has been estimated and refinement done properly, the number of story points it contains should be comparable to the velocity the team has been achieving sprint after sprint. Remember estimation cannot be a single value. It must be a set of values with a success probability for each value. You did learn gaussian curves during your school time. An average velocity can be applied to the total of story points in the backlog. With this information, business can plan on tentative release dates.\nExperienced teams sometimes use additional visual aids to improve effectivity:\nEffective work effort per Sprint\nIssues flow diagrams\nCycle-time of stories or cycle-time of errors\nDevOps Visual Aids DORA diagrams are similar visual aids focused on DevOps activities\nDeployment frequency (DF).\nLead time for changes (LT), you can also compute the average age of issues and cumulative flow diagrams for issues.\nChange failure rate (CFR).\nMeantime to Recovery MTTR. Called time to restore service in the above dashboard.\nGitHub Tools GitHub is a web development platform inspired by your work style. It enables you to handle software development projects side-by-side with 40 million developers.\nThe main features are:\nThe tool features built-in review options for hosting code and review changes.\nIntegrate with apps you can find in GitHub Marketplace.\nCoordinate tasks, stay tuned, and optimize output whatever the size of the team.\nWrite up comprehensive documents specifying all the awesome features of the software you develop.\nStore all your code in one place. The platform with its 100+ million hosted projects provides repositories equipped with tools to help you host, version and release private, public, or open-source code.\nThe updated projects functions better support agile approaches such as Scrum or Kanban.\nVarious addons are available for more complex diagrams and visualizations. Start small, learn and adapt your development tools.\nLessons Learnt Visual aids improve your understanding of your product state. They support teams to take improvements as a regular activity. PDCA is easier to implement with realtime visual checks.\nLean approaches strongly advocate visual aids to display process state and identify areas of improvements. Time-based diagrams show changes over time.\nA picture is worth a thousand words. The visualization of facts often helps to identify improvement potential. The same diagrams measure the success of specific improvement measures. One well-documented successful approach are the four DORA metrics and associated graphs. Experienced teams can improve effectivity and efficiency with more advanced technique [1, 2, 3, 4]\nLinks [1] Scrum Guide. Ken Schwaber and Jeff Sutherland. 2020.\n[2] Introducing DevOps Ideas. Marcel Baumann. 2022.\nReferences [1] B. Beyer, C. Jones, J. Petoff, and N. R. Murphy, Site Reliability Engineering. O’Reilly Media, Inc., 2016 [Online]. Available: https://www.amazon.com/dp/1492029505\n[2] G. Kim and N. Forsgren, DevOps Handbook, Second. IT Revolution Press, 2021 [Online]. Available: https://www.amazon.com//dp/B09G2GS39R\n[3] A. Tornhill, Your Code as a Crime Scene. O’Reilly Media [Online]. Available: https://www.amazon.com/dp/B00ZB5XWBI\n[4] A. Tornhill, Software Design X-Rays. Pragmatic Bookshelf [Online]. Available: https://www.amazon.com/dp/B07BVRLZ87\n","categories":"","description":"","excerpt":" Why is visibility so important for any agile or Scrum team?\nWhen you are running an agile product development initiative, your ultimate goal is customer satisfaction with the delivered solution.\nThe …","ref":"/blog/2023/agile-visual-tools/","tags":["agile","devops","series-students"],"title":"Agile Visual Tools"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/devops/","tags":"","title":"devops"},{"body":" The development software team has reached a milestone.\nA working application with a set of features is available. All tests are green.\nThe application can potentially be shipped to internal or external customers.\nHow can you mark this event in the git repository of the application?\nUse tags to recognize this state in the list of changes of your shared Git repository.\nListing Your Tags Listing the existing tags in Git is straightforward. Just type git tag (with optional -l or --list):\n$ git tag v1.0 v2.0 This command lists the tags in alphabetical order; the order in which they are displayed has no real importance.\nCreating Tags Git supports two types of tags: lightweight and annotated.\nAnnotated tags, however, are stored as full objects in the Git database. They have a check sum. They contain the tagger name, email, and date. THey have a tagging message, and can be signed and verified with GNU Privacy Guard (GPG). It is generally recommended that you create annotated tags, so you can have all this information; but if you want a temporary tag or for some reason do not want to keep the other information, lightweight tags are available too.\nAnnotated Tags Creating an annotated tag in Git is simple. The easiest way is to specify -a when you run the tag command:\n$ git tag -a v1.4.0 -m \"1.4.0 (2020.2)\" $ git tag v0.1 v1.3.1 v1.4.0 The -m specifies a tagging message, which is stored with the tag. If you do not specify a message for an annotated tag, Git launches your editor, and you can type it in.\nSharing Tags By default, the git push command does not transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them. This process is just like sharing remote branches you can run:\ngit push origin --tags If you want to correct an error from a tagged version, you should create a branch. If you check out the tag, you are in a detached head mode.\ngit checkout -b v2-fixex v2.0.0 Thoughts You can find a lot of information on Stack Overflow. Beware when reading the answers on Stack Overflow that Git commands have changed over time. Select new posts to find the best answers.\nThe nifty-gritty details can be found in the official Git documentation.\nThe Pro Git book can be downloaded from Git SCM.\nLinks Git Branches for the Impatient Marcel Baumann. 2016.\nGit Local Repositories for the Impatient Marcel Baumann. 2017.\nGit Rebase and Merge for the Impatient Marcel Baumann. 2023.\nGit Tag for the Impatient Marcel Baumann. 2023.\nSemantic Commits for the Impatient Marcel Baumann. 2023.\n","categories":"","description":"","excerpt":" The development software team has reached a milestone.\nA working application with a set of features is available. All tests are green.\nThe application can potentially be shipped to internal or …","ref":"/blog/2023/git-tag-for-the-impatient/","tags":["agile","git","series-students"],"title":"Git Tag for the Impatient"},{"body":" Both the rebase and merge commands provide similar functionalities.\nThey combine the work of multiple developers into a single entity, integrating changes between branches.\nThat about sums up their similarities.\nThe operation git merge is a way of combining changes from one source branch into another target branch. The operation leaves commit messages in the history.\nThe operation git rebase is a way of moving the changes from one branch onto another branch. The operation does not leave any commit message in the history.\nA simple and powerful approach governing the use of these commands is:\nLocal branches shall be updated using rebase. The commit history of the branch stays clean.\nLocal feature branches shall be regularly synchronized against the default remote branch. Therefore, team members will have less merge conflicts.\nRemote branches shall be updated using merge.\nBefore a merge request is created, you can clean up your commit history with an interactive rebase.\nFeature branches should be short-lived. The implementation of a feature shall be shorter than a Scrum sprint, meaning less than two weeks.\nRegular Rebase Rebasing a branch in Git is a way to move the entirety of a branch to another point in the tree. The simplest example is moving a branch further up in the tree. As a developer, you want to regularly integrate the latest changes from the default branch into your feature branch\nIn Git, a rebase updates your feature branch with the contents of another branch. This step is important for Git-based development strategies.\nUse a rebase to confirm that your branch’s changes do not conflict with any changes added to your target branch after you created your feature branch.\nWhen you rebase:\nGit imports all the commits submitted to your target branch after you initially created your feature branch from it.\nGit stacks the commits you have in your feature branch on top of all the commits it imported from that branch:\nTo rebase, make sure you have all the commits you want in the rebase in your main branch. Check out the branch you want to rebase and type\nStandard rebase replays the previous commits on a branch without changes, stopping only if merge conflicts occur.\nFetch the latest changes from main:\ngit fetch origin main Check out your feature branch:\ngit checkout my-feature Rebase it against main:\ngit rebase origin/main Force push to your remote branch with:\ngit push --force-with-lease origin my-feature (1) git push --force origin my-feature (2) 1 lease option preserves any new commits added to the remote branch by other people. 2 force does not preserve any new commits added to the remote branch by other people. If there are merge conflicts, Git prompts you to fix them before continuing the rebase.\ngit rebase main (1) 1 The main branch is the branch you want to rebase on. Git rebase rewrites the commit history. It can be harmful to do it in shared branches. It can cause complex and hard to resolve merge conflicts. In these cases, instead of rebasing your branch against the default branch, consider pulling it with git pull origin main. Pulling has similar effects with less risk of compromising the work of your contributors.\nMerge The git merge command will merge any changes made to the code base on a separate branch to your current branch as a new commit.\nFor example, if you are currently working in a branch named dev and would like to merge any new changes that were made in a branch named new-features, you would issue the following command:\ngit merge new-features If there are any uncommitted changes on your current branch, Git will not allow you to merge until all changes in your current branch have been committed.\nTo handle those changes, you can temporarily stash them:\ngit stash (1) git merge new-feature (2) git stash pop (3) 1 add them to the stash 2 do your merge 3 get the changes back into your working tree Interactive Rebase Use an interactive rebase (the --interactive flag, or -i) to simultaneously update a branch while you modify how its commits are handled. For example, to edit the last five commits in your branch (HEAD~5), run:\ngit rebase -i HEAD~5 Git opens the last five commits in your terminal text editor, the oldest commit first. Each commit shows the action to take on it, the SHA, and the commit title:\npick 111111111111 Second round of structural revisions pick 222222222222 Update inbound link to this changed page pick 333333333333 Shifts from H4 to H3 pick 444444444444 Adds revisions from editorial pick 555555555555 Revisions continue to build the concept part out # Rebase 111111111111..222222222222 onto zzzzzzzzzzzz (5 commands) # # Commands: # p, pick \u003ccommit\u003e = use commit # r, reword \u003ccommit\u003e = use commit, but edit the commit message # e, edit \u003ccommit\u003e = use commit, but stop for amending # s, squash \u003ccommit\u003e = use commit, but meld into previous commit # f, fixup [-C | -c] \u003ccommit\u003e = like \"squash\" but keep only the previous After the list of commits, a commented-out section shows some common actions you can take on a commit:\nPick a commit to use it with no changes. The default option.\nReword a commit message.\nEdit a commit to use it, but pause the rebase to amend (add changes to) it.\nSquash multiple commits together to simplify the commit history of your feature branch.\nReplace the keyword pick according to the operation you want to perform in each commit. To do so, edit the commits in your text editor.\nForce push Complex operations in Git require you to force an update to the remote branch. Operations like squashing commits, resetting a branch, or rebasing a branch rewrite the history of your branch. Git requires a forced update to help safeguard against these more destructive changes from happening accidentally.\nForce pushing is not recommended on shared branches, as you risk destroying the changes of others.\n--force-with-lease flag The --force-with-lease flag force pushes. Because it preserves any new commits added to the remote branch by other people, it is safer than --force:\ngit push --force-with-lease origin my-feature --force flag The --force flag forces pushes, but does not preserve any new commits added to the remote branch by other people. To use this method, pass the flag --force or -f to the push command:\ngit push --force origin my-feature Thoughts Both git merge and git rebase are handy commands. One is not better than the other. However, there are some crucial differences between the two commands that you and your team should take into consideration.\nWhenever git merge is run, an extra merge commit is created. Whenever you are working in your local repository, having too many merge commits can make the commit history look confusing. One way to avoid the merge commit is to use git rebase instead.\ngit rebase is a very powerful feature. It is risky as well if it is not used in the right way. The command alters the commit history, so use it with care. If rebasing is done in the remote repository, then it can create a lot of issues when other developers try to pull the latest code changes. Remember to only run git rebase in a local repository.\nYou can find a lot of information on Stack Overflow. Beware when reading the answers on Stack Overflow that Git commands have changed over time. Select new posts to find the best answers.\nThe nifty-gritty details can be found in the official Git documentation.\nThe Pro Git book can be downloaded from Git SCM.\nLinks Git Branches for the Impatient Marcel Baumann. 2016.\nGit Local Repositories for the Impatient Marcel Baumann. 2017.\nGit Rebase and Merge for the Impatient Marcel Baumann. 2023.\nGit Tag for the Impatient Marcel Baumann. 2023.\nSemantic Commits for the Impatient Marcel Baumann. 2023.\n","categories":"","description":"","excerpt":" Both the rebase and merge commands provide similar functionalities.\nThey combine the work of multiple developers into a single entity, integrating changes between branches.\nThat about sums up their …","ref":"/blog/2023/git-rebase-and-merge-for-the-impatient/","tags":["agile","git","series-students"],"title":"Git Rebase and Merge for the Impatient"},{"body":" Java 21 LTS was released on time to the public. The release has been available for download since 21st September 2023.\nPattern matching is maturing nicely. The hope is that more solutions will more advanced data stream manipulation and functional programming algorithms. Complex inheritance structure are no more considered as good practices in regular application. The pattern matching extensions nicely provide idioms to solve similar design problems.\nThe support for virtual threads is reaching full integration in the official Java distribution. Extensions such as scoped values are available as preview feature. The tail-call optimization for recursive calls is sadly still missing.\nAmber Project The amber initiative is completing the changes with pattern matching. Start adapting your coding idioms and use pattern matching.\nThe visitor pattern can simply be implemented as switch expression with pattern matching. As a bonus, the compiler will verify completeness if your class hierarchy uses sealed inheritance.\nRecord Patterns\nPatten Matching for switch\nUnnamed Patterns and Variables (Preview)\nThe syntactic improvements initiated by Amber and core group are;\nString Templates Preview\nSequenced Collections\nThe string template feature is worth the effort to study the provided functions. My code could be considerably simplified when using this functionality.\nLoom Project The loom initiative is completing the major changes associated with virtual threads.\nVirtual Threads\nScoped Values Preview\nStructured Concurrency Preview\nVirtual threads are now official part of the Java universe. Your design can create as many threads as you want without restrictions.\nMost of the Java developers never create directly thread instances. The feature is useful for library and framework creators.\nPanama Project The panama initiative is iterating through their interfaces. They synchronize as much as possible their interfaces with the Valhalla and Lilliput activities.\nVector API Sixth Incubator\nForeign Function \u0026 Memory API Third Preview\nValhalla Project As usual, the Valhalla initiative did not release any improvements in the current release.\nIt is time that value objects are proposed in the near future. The project is going for ten years.\nLilliput and Leyden Projects The lilliput initiative aims to reduce memory usage.\nMiscellaneous Improvements Obsolete features are removed:\nDeprecate the Windows 32-bit x86 Port for Removal\nPrepare to Disallow the Dynamic Loading of Agents\nExtensions to existing features:\nGenerational ZGC\nUnnamed Classes and Instance Main Methods (Preview)\nKey Encapsulation Mechanism API\nStumbling Blocks Once again Lombok up to version 1.18.28 is not working with JDK 21 [1]. The project uses internal unsafe functions, which are no more supported in this Java release.\nThe edge snapshot release has experimental support for JDK 21. You need the following additions in your Gradle Build Tool configuration.\nadd the repository maven { url \"https://projectlombok.org/edge-releases\" }\nuse the dependency org.projectlombok:lombok:edge-SNAPSHOT for the library and the annotation processor\nAll other libraries and tools I am using worked without troubles. Major libraries test their current release with early-access and solve the problems before the official release of a new Java version.\nLessons Learnt Gradle toolchain feature simplifies experimenting with a new Java version. The current version of Gradle Build Tool runs under Java 21.\nIntelliJ IDE provides support for newer JDK before their official release. It tremendously simplifies exploration of new features.\nOften you can use the continuous integration pipelines of GitHub or GitLab platforms. No virtual machines with an experimental Java version are available.\nUse different distributions to harden your code and explore alternative solutions. The Eclipse foundation temurin distribution is very nice.\nMigrate all your active products to the new Java version. Invest effort to enhance source code and use the new features. So, you will avoid technical obsolesce and geriatric applications.\nLinks [1] Java 20. Marcel Baumann. 2022.\n[2] Vaadin. Marcel Baumann. 2022.\n[3] Java 17. Marcel Baumann. 2021.\n[4] Java 16. Marcel Baumann. 2021.\n[5] Java 10 aka 18.3 Changes. Marcel Baumann. 2018.\n[6] Immutability in Java. Marcel Baumann. 2022.\n[7] Modern Java Constructs. Marcel Baumann. 2022\n[8] Modern Java Development. Marcel Baumann. 2021.\n1. Version 1.18.30 was released in 2023-09-20 and provides initial support for JDK 21. Late but it still saves the day. ","categories":"","description":"","excerpt":" Java 21 LTS was released on time to the public. The release has been available for download since 21st September 2023.\nPattern matching is maturing nicely. The hope is that more solutions will more …","ref":"/blog/2023/java-21/","tags":["java"],"title":"Java 21"},{"body":" There are several benefits to getting an IT certification, and several associated costs too.\nCertifications can give you the chance to learn needed skills, and be a quick way to show employers you have those skills.\nOn the other hand, certifications can require studying or coursework. You will invest a significant amount of time to master the material. They cost up to several hundred dollars to take.\nSo how do you know that the benefits will outweigh the costs for you?\nCertification or no certification, in the end, what matters most is your actual ability to do the job.\nHere are a few things to consider as you decide whether to get an IT certification.\nJava Certifications If you are a young and ambitious Java developer, ypu must acquire the Oracle certified Java developer certification [1, 2]. I do not think you will be a better programmer after getting a certificate. The certification program will push you to learn the details of the programming language and the details of the standard libraries. This knowledge is the difference between a professional engineer and an amateur one.\nThe question is if you want to update your certification each time a new long-term solution is delivered. Over the years, I acquired the certification for Java 2, 7,8, and 11 releases. The exam objectives certainly forced me to learn the new features of the language and libraries. I also discovered some arcane idioms I never used in productive code.\nI think a young developer should be certified for her main programming language and technology stack she is using daily. I also acquired the Vaadin certification because I regularly developed full-stack applications with Java and Vaadin.\nSoftware Architecture Certifications A software architect certainly should possess a certification showing his architectural capabilities.\nThe TOGAF standard is still the seminal reference for all software enterprise architecture activities. On the bright side, the steward Open Group of the TOGAF certification [7] has realized that agile is the way to develop digital products [7].\nThe iSAQB certification is well-known in Europe and especially in the German-speaking countries. The foundation now also provides training in agile software architecture in their advanced track [6].\nAnother approach is a master degree in software engineering or computer science. The curriculum should teach modern ideas [3, 4, 5, 6].\nAgile Certifications Agile approaches and Scrum framework are the regular approach to successfully developer software and digital products. I expect a professional software developer to have a formal training how to apply correctly the Scrum approach [7, 8].\nThe two biggest Scrum associations Scrum Alliance and Scrum.org provide similar certification paths for Scrum. For each role, you can progress from beginner, over advanced and finally reach the professional certification level. You should at least pursue the beginner and advanced level to reflect your professionalism.\nI often suggest pursuing the certifications of Scrum.org because you do need to renew them. Scrum Alliance requests you to renew your certification every two years and provide proof of continuous training. This approach is similar to PMI.\nYou can find more information in these articles about Scrum master [1], product owner [2] and developer [3] certification paths.\nI strongly advocate to avoid SAFe trainings because this approach is flawed. I recognize that sadly SAFe is very popular in big companies.\nIf you are interested in scaling agile, please consider first a formation and certification in LeSS. I strongly recommend to first master Scrum and lean approaches before tackling scaling approaches in software product development.\nOther Certifications The PMI-ACP [4] is the agile certification from the project management institute. It has value in North America. It is quite unknown in Europe.\nThoughts A certification is a proof that a professional software engineer invested in his continuous formation. Consider acquiring a certification to show your commitment to a specific field in our industry. But it cannot replace a formal bachelor or master level education in computer science or software engineering.\nCertifications are quite meaningful for junior engineers. They learnt the theory and proved they understood the concepts.\nExperienced engineers are seldom challenged when learning for a certification. It is more of a memorization exercise and less of learning new techniques.\nTraining on the job is nice and efficient. A few lecture days before taking a multiple choice test and receiving a nice certificate is also worth the time.\nIt definitively cannot replace university level formation. No country in the world would accept only training on the job for a physician, a surgeon, or a structural engineer.\nWhy does our industry still believe you can work as a professional developer without any formal training?\nLinks [1] Scrum Master Certification\n[2] Product Owner Certification\n[3] Scrum Developer Certification\n[4] PMI ACP Certification\n[5] Java Certification\n[6] Agile Software Architecture is Mainstream\n[7] TOGAF Certification\nReferences [1] J. Boyarsky and S. Selikoff, OCP Oracle Certified Professional Java SE 17 Study Guide. Wiley \u0026 Sons, Limited, John, 2022 [Online]. Available: https://www.amazon.com/dp/B09WJP11JL\n[2] J. Boyarsky and S. Selikoff, OCP Oracle Certified Professional Java SE 11 Developer Complete Study Guide. Wiley \u0026 Sons, Incorporated, John, 2020 [Online]. Available: https://www.amazon.com/dp/B08DF4R2V9\n[3] D. Farley, Modern Software Engineering. Pearson Education, Limited, 2022 [Online]. Available: https://www.amazon.com/dp/B09GG6XKS4\n[4] J. Humble and D. Farley, Continuous Delivery. Addison-Wesley Professional, 2010 [Online]. Available: https://www.amazon.com/dp/0321601912\n[5] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Automated Software Governance, Second. O’Reilly Media, 2023 [Online]. Available: https://www.amazon.com/dp/B0BN4T1P27\n[6] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[7] D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\n[8] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n","categories":"","description":"","excerpt":" There are several benefits to getting an IT certification, and several associated costs too.\nCertifications can give you the chance to learn needed skills, and be a quick way to show employers you …","ref":"/blog/2023/are-certifications-useful/","tags":["agile","series-students"],"title":"Are Certifications Useful?"},{"body":" Since good governance is about the processes for making and implementing decisions, then effective governance and accountability structures are vital.\nOrganizations shall successfully use an agile approach to deliver business change through the investment in programs and projects.\nAgile approaches are the most used frameworks to develop successfully digital products.\nOur corporate governance processes shall support agile values and development methods.\nThe four guiding principles to enable successful governance of agile delivery are:\nGovernance should mirror the Agile manifesto principles, particularly the art of simplicity. You shall maximize the work not done.\nAgile delivery teams decide on the empirical performance metrics they will use. They shall self-monitor to learn.\nCollaboration is an essential change in your mindset.\nIndependent reviews of agile delivery should focus on the behaviors and practices and not just the processes and documentation.\nAgile governance is about defining the fastest route that brings the most value. By focusing on the things that matter, we apply an agile focus on governance and how to manage program and project risks effectively.\nAgile works best when processes are clearly defined and transparent to everyone. Good governance for programs and projects, regardless if agile is applied, requires a defined structure, ways of working, processes and systems to operate succinctly. As a result, enabling programmes and projects the ability to scale up and down to adapt quickly to an organization’s changing needs and environment.\nTOGAF defines architecture governance as the practice and orientation by which software products architectures are managed and controlled at an enterprise-wide level.\nArchitecture governance does not operate in isolation, but within a hierarchy of governance structures. The structures can include distinct domains with their own disciplines and processes:\nCorporate Governance\nTechnology Governance\nIT Governance\nArchitecture Governance\nThese domains of governance may exist at multiple geographic levels: the global, regional, and local levels within the overall enterprise.\nCorporate governance is thus a broad topic, beyond the scope of an enterprise architecture framework such as the TOGAF framework.\nAgile Corporate Governance PMI Your governance team, which may be called an oversight, audit, or control function, will monitor and guide teams throughout your organization.\nThe aim is to enable them to succeed by removing or at least reducing any barriers that they may experience, to motivate them to do the right thing for your organization and your customers.\nThey to ensure that they remain compliant with appropriate legal regulations and guidance.\nGovernance typically addresses areas such as:\nThe evolution and support of roles and responsibilities to streamline how people work together.\nDefinition of decision rights and decision-making processes to streamline interactions between people.\nThe evolution and support of common procedures and guidelines to ensure the appropriate commonality of activities and artifacts.\nThe evolution and support of common guidance to motivate the efforts of teams across your organization.\nPromotion of ethics and social responsibility.\nEffective and timely investment to sustain and extend the organization over the long term.\nThe monitoring of activities to provide insight into their effectiveness.\nFormation of a governing body that is responsible for guiding governance activities.\nDefinition of exceptions and escalation processes to streamline critical interactions.\nCreation of a knowledge sharing strategy to grow individuals, teams, and the organization as a whole.\nThe support and monitoring of risk mitigation strategies across your organization.\nAdoption of a reward and compensation structure to support the attraction and retention of excellent staff.\nStrategies to share information throughout the organization.\nDisciplined Agile promotes a lean approach to governance. Lean governance is the leadership, organizational structures and streamlined processes to enable everyone to work together effectively in sustaining and extending the organization’s ability to produce meaningful value for its customers. There are several reasons why a lean governance strategy is important for your organization’s success. Lean governance strives to ensure that:\nYour organization’s investment is spent wisely Organizations make investments in their people, in their infrastructure, and in their processes to enable them to better serve their customers. From a financial point of view, your goals should be to regularly and consistently create real business value and to provide an appropriate return on investment (ROI). To do this, you must determine how you will execute your strategy by selecting and prioritizing the most valuable initiatives to undertake. You must also monitor these initiatives to ensure that they fulfill their promise, and if not then remediate them appropriately.\nYour teams are empowered to carry out their work An important aspect of lean governance is to ensure that people and teams have the authority to fulfill their responsibilities. Many agile transformations run into trouble when the roles and responsibilities of people are not agreed upon, or when they are not properly supported by senior management. Another important strategy is to empower teams to choose their own way of working (WoW), to self-determine how they will work together, enabling them to tailor their approach to meet the needs of the situation that they face.\nPeople are motivated to work together effectively There are two aspects to this. First, teams need to work effectively with their stakeholders. Second, teams also need to work effectively with their colleagues. To do this, you must adopt processes and organizational structures that encourage people to collaborate together and to learn from one another.\nRisks are monitored and mitigated at appropriate organizational levels Although addressing risk at the team-level is a good start, it is not sufficient from an organizational point of view. Many small risks that are acceptable individually can add up to a huge risk for your organization. For example, one team using a new technology platform is an experiment. Fifty teams adopting that new platform at the same time is a significant risk if the platform proves to be problematic. Someone must be looking at risks from a portfolio perspective and guide teams accordingly.\nYour organizational ecosystem is sound Your organization isn’t just a collection of teams. It is an ecosystem of teams working together, supported by culture, ways of working, organizational structures, and technologies. All aspects of your ecosystem need to be healthy for your organization to thrive.\nEveryone works in an open and collaborative manner There are several ways that the DA toolkit promotes this. First, work is performed in an agile manner that is inherently open and collaborative. Second, all teams should present accurate and timely information to their stakeholders. For example, enterprise architects can make their work available to everyone, as can your portfolio management team, your data management team. Third, everyone should be motivated to learn more about your organization, its strategy, its values, and how you intend to work together to achieve the outcomes you’ve set out for yourselves.\nAll of these things will continue to be true in the future Lean governance balances your short-term and long-term needs. Too many organizations have allowed technical debt to grow in recent years, for the skills of their staff to stagnate, and to continue to tolerate traditional strategies that are well past their prime.\nThere are two fundamental reasons why individuals should be interested in lean governance:\nYou are being governed, like it or not Regardless of the size or your organization, the length of time it has been in operation, or the sectors in which you work, someone is keeping an eye on and guiding your overall efforts.\nYou deserve to be governed effectively Sadly, many governance strategies prove to be ineffective in practice due to application of traditional strategies and ways of thinking.\nSecurity Minimal set of security checks for regular compliance.\nOWASP Ensure compliance to OWASP Top Ten and best practices.\nPenetration Tests Implement regular penetration tests for all exposed solutions.\nCVE Mitigation Process Have a process to track and mitigate all published common vulnerabilities and exposures CVE alerts relevant to your digital products.\nLegal Requirements Respect the legal framework of your country and the foreign countries in which your solution is deployed:\nCustomer Protection\nCustomer Data Confidentiality\nAccessibility\nLawful Respect for human beings (misogyny, xenophobia, racism, religious intolerance)\nTechnical Good Practices Professional software engineers have a set of non-functional requirements to improve the adequacy of your software products. These requirements shall be part of the architecture of corporate governance.\nManagement fo used libraries Libraries have to check for licenses, support organization. Regular checks for security flaws or published attacks must be implemented. A timely mitigation process must be in place\nTracking of potential security risks and timely update process Potential vulnerabilities should be detected, documented. The mitigation process shall be triggered in accordance with the corporate governance.\nTraceability and Logging All systems shall have adequate traceability and logging features. Logging data shall be archived accordingly with corporate governance and legal constraints.\nAuditability Auditability is legally mandatory for some systems. An adequate audit solution shall be implemented at corporate level. The architecture trend of distributed systems and services makes an overall solution the sole source of information.\nResilience Resilience shall be part of governance to ensure customer satisfaction and survival of the organization.\nCommunication to Users Transparent and open communication to end users and stakeholders is a must in modern organizations. The communication approach shall be unified at corporate level.\nInterfaces to external systems Interfaces to external systems shall be logged and audited in full. This approach is mandatory to verify service level agreements. The data is also necessary if external partners initiate legal cases\nInput validation Input validation of all interfaces is a mandatory security and quality requirements. Enterprise data is a high-value asset. Care should be taken to guarantee the long-term quality and usability of strategic data. This information is often used over decades.\nLessons Learnt Corporate governance requirements are non-functional requirements. They impact the architecture and design of the solution. The selected solutions are often constrained. Highly secure systems cannot, for example, use Node.js due to known flaws in the security area.\nAwareness of corporate governance issues and legal consequences are often overlooked and not well-understood in many organizations. Education and awareness campaigns are necessary to increase professionalism [1].\nCorporate governance departments have often a coercive approach. They are focused on the legal aspects and seldom understand the societal, commercial and technical facets. Try to reform them.\nLinks TOGAF Architecture Governance. THe Open Group. 2022.\nPMI Disciplined Agile Corporate Governance. PMI. 2022\n1. In Switzerland, multiple organizations had to shut down operations in 2021 and 2022 due to blatant security and governance issues. Beware non-compliance can be extremely costly and endanger the survival of your company. ","categories":"","description":"","excerpt":" Since good governance is about the processes for making and implementing decisions, then effective governance and accountability structures are vital.\nOrganizations shall successfully use an agile …","ref":"/blog/2023/corporate-governance-for-software-products/","tags":["agile","devops"],"title":"Corporate Governance for Software Products"},{"body":" Now that you have gone through the long and tedious process of hiring a talented developer with vetting and interview activities, it is easy to think that the hard part is done [1] [2].\nThere is no doubt that hiring good people is challenging and competitive, but it is a mistake to think that the challenge ends when you hired a new collaborator.\nOnboarding software developers is just as important for getting the most out of the hiring process.\nToo many companies neglect this phase to their own detriment.\nWhy onboarding matters? Onboarding, the process of bringing new employees to a point where they are fully integrated into the company and working at full capacity is a make it or break it process for companies wanting to compete in the tech world. Whether you are a startup with only a few employees, or an established company with hundreds of employees, the onboarding process is the first opportunity you have to set up new employees for long-term success.\nIt can cost employers anywhere from 30–50% of an employee’s yearly salary to replace a developer that leaves. So when an organization loses employees to a bad onboarding process, the company feels it. And if there is an insufficient onboarding process, new hires will leave.\nOne of the most important aspects of onboarding is the timeline. On the one hand, the practical aspects of onboarding should happen pretty quickly, as outlined below. On the other hand, it is important to understand that onboarding an employee meaning getting them to a place where they feel fully immersed and capable at your company takes months.\nYour organization is serious about professional onboarding if you have a formal process description and checklists for the whole onboarding process.\nEach phase is described, and each new collaborator has a contact person for onboarding questions.\nSo what is a realistic expectation for how long it takes to onboard a software engineer?\nHow long should it take? Before diving into how long the onboarding process should take, it is important to note that there are different types of onboarding and each requires a different approach and timeline. There is practical, cultural, and skill onboarding. All are necessary to successfully onboard a software developer into your company.\nPractical onboarding (1 week) Practical onboarding involves things like benefits signups, company-wide training videos, HR requirements, equipment setup and account access [1].\nAnything essential for the new employee to get paid, access benefits, and function as an employee in the company.\nThis onboarding should happen anywhere from a day to a week of being hired, depending on the size of the company and the complexity of the practical requirements.\nThis part may seem obvious as a part of onboarding, but this is often the first impression a new employee has of your company, so the way it happens matters.\nDo everything you can to make the practical aspect of onboarding seamless, efficient, and even fun [3].\nIf there is a way to gather information from the employee before their start date, even better.\nSkill onboarding (3 – 6 months) Just like the practical side of onboarding, skill onboarding should start on the first day for a new employee. You want the software developer to be well versed in your code base, processes, and systems, so the earlier they can get access to it, the better.\nOne of the best ways to do this is to require new employees to push out an actual piece of code within the first week of being hired. Make sure there are safeguards in place, so they cannot do any damage to the code itself, but make sure it is significant enough to give them a complete look at the codebase and the process in place for pushing out code.\nThis is also a great opportunity to employ pair programming. Pair programming sets a new developer up with an experienced developer within the company to work together to complete tickets. Although the entire team should be available to answer questions, this will give the new employee a single point of contact as they are getting up to speed on how your company works.\nFor larger companies, this process should involve multiple points of contact, from a senior managerial level to a peer. Even smaller companies should try and pair new employees with a few different colleagues.\nIf there are any step-by-step processes expected for developers for coding, communication, and workflow, be sure to have them in writing and readily available. New employees should not need to go searching for the same information over and over again.\nSkill onboarding should take anywhere from 3 to 6 months, with monthly reviews every month to gauge progress [2].\nCultural onboarding (6 months – 1 year) Cultural onboarding is often the most overlooked aspect of onboarding, but arguably the most important piece [4].\nDevelopers that stick around do so because they enjoy their work environment, believe in what they are doing, and feel like they belong and matter to the overall company [5].\nOf course, some aspects of cultural onboarding will happen in tandem with skill onboarding, as the new employee is working directly with teams and individuals within the company to accomplish a common goal.\nHowever, that in and of itself is not enough to truly translate company culture to a new employee.\nWithin the first week, there should be some form of communication from the executive management on the larger values of the organization. The big picture of what the company is trying to accomplish, and a way to interact with the team members should be discussed.\nIf you are a small company, this can be as simple as a lunch or coffee with the founder. For mid-size or large companies, it may need to be more formal [1, 2, 3]. However, if at all possible, this should happen in person, even for remote workers [4].\nWe always suggest that new employees do their first two to four weeks of employment on site, if possible.\nIf you are working with a near source team and flying them up to headquarters is not realistic, then make a plan to spend a week or two with the new employees. Cultural onboarding is about relationship building, and doing so in-person makes a difference.\nBest practices for onboarding As a rule, companies of any size should see the first six months as an employees onboarding period. Helping employees get acclimated is a necessary step to seeing the return on the sizable investment made in hiring a software developer in the first place.\nHere are a few simple practices for successful onboarding:\nGive them an early coding assignment that matters.\nGive them access to process, practices, systems, and people right away.\nGet them connected to peers through pair programming, mob programming, and coding dojos.\nGive them a feedback loop through regular reviews.\nGive them time to reach their potential.\nLessons Learnt Train your collaborators. Our company is an agile software boutique with Java and C++ technical stacks. Our collaborators shall be experts in Scrum [6] [7] [8] and Java [9].\nIt is a benefit for us if the collaborator is also a professional C++ developer.\nWalk the talk. Be an agile company [4]. Competent engineers find out early if you are really being agile or just pretending to do agile.\nAdvanced approaches can reduce training and improve cultural match.\nInnerSource [10] [11] is a software development strategy that applies open-source best practices to proprietary code.\nInnerSource can help establish an open-source culture within an organization while retaining software for internal use.\nTeams use InnerSource to increase visibility, strengthen collaboration, and break down silos.\nLinks [1] Evaluate Technical CVs. Marcel Baumann. 2022.\n[2] Technical Interviews. Marcel Baumann. 2023.\n[3] My New MacBook Pro. Marcel Baumann. 2023.\n[4] What is an Agile Company?. Marcel Baumann. 2016.\n[5] Detecting Agile Bullshit. Marcel Baumann. 2019.\n[6] Scrum Master Formation. Marcel Baumann. 2021.\n[7] Product Owner Formation. Marcel Baumann. 2021.\n[8] Scrum Developer Formation. Marcel Baumann. 2021.\n[9] Certified Java Developer. Marcel Baumann. 2021.\n[10] What is Inner Source?. Gitlab. 2022.\n[11] Inner Source Patterns. Gitlab. 2022.\nReferences [1] J. P. Kotter, Corporate Culture and Performance. Simon \u0026 Schuster, Limited, 2008 [Online]. Available: https://www.amazon.com/dp/B0033C58EU\n[2] E. H. Schein and P. Schein, Corporate Culture Survival Guide. Wiley \u0026 Sons, Incorporated, John, 2019 [Online]. Available: https://www.amazon.com/dp/1119212286\n[3] E. H. Schein, Organizational Culture and Leadership. Jossey-Bass, 2004 [Online]. Available: https://www.amazon.com/dp/B01MSYH6K8\n[4] A. Medinilla, Agile Management. Springer London, Limited, 2012 [Online]. Available: https://www.amazon.com/dp/3642289088\n1. Invest in a smooth IT setup. I too often encounter organizations needing months until the new collaborator can finally access all needed applications and resources. Such a cumbersome process demotivates your employees. I am a professional software developer. I really love to have a 4K display, a US keyboard, a quality mouse, and a fast SSD. I will use these tools 8 hours a day for the next years. 2. Skill onboarding can require formal training. Budget shall be available for books, online and classroom courses. ","categories":"","description":"","excerpt":" Now that you have gone through the long and tedious process of hiring a talented developer with vetting and interview activities, it is easy to think that the hard part is done [1] [2].\nThere is no …","ref":"/blog/2023/onboarding-software-developers-in-your-agile-team/","tags":["java","agile","series-students"],"title":"Onboarding Software Developers in Your agile Team"},{"body":" Functional programming is hype for the last ten years.\nAll popular programming languages have added support to functional concepts for years.\nNot all developers are embracing the new approach and using the provided constructs.\nI often have to read source code which uses only idioms defined in the last millennium. I cringed and asked myself why developers are writing such awkward code?\nWhat does it mean to code with functional paradigms?\nI have an interesting test to decide if your code is embracing functional programming approaches:\nYou are using library methods with formal parameters being functions or lambda expressions.\nYou use the map, filter, reduce and apply operations instead of conditional control blocks. Loops and conditional statements are almost disappearing in your code.\nYou declared in your own methods functions as formal parameters.\nYou declared in at least one of your methods a return type being a function.\nClojure is a very nice language to learn functional programming idioms [1].\nFunctional Thinking The key functional concepts of Clojure [1] are:\nAll data structures are per default immutable. Lists, vectors, maps, sets, records are all immutable.\nFunctions are first-class functions. You can also state that functions are first-class citizens. This means that functions have the same functionality as objects. For example, they can be assigned to variables, passed in as arguments, or returned from a function.\n(defrecord Person [^String firstname ^String lastname]) (1) (def aPerson (-\u003ePerson \"John\" \"Doe\")) (2) ;; or (def aPerson (Person. \"John\" \"Doe\")) (:firstname aPerson) ;; =\u003e \"John\" (:lastname aPerson) ;; =\u003e \"Doe (def anotherPerson (assoc aPerson :firstname \"Jane\")) (3) ;; =\u003e Jane doe 1 Define a new record Person with two string properties firstname and lastname. The string type is only a hint and not enforce. 2 Create a new record instance with firstname John and lastname Doe and associate it with reference aPerson. 3 Create a new record instance with the values of aPerson and the new value Jane for the firstname. (defn factorial-loop [^BigDecimal x] (loop [n x prod 1] (if (= 1 n) prod (recur (dec n) (* prod n))))) (1) (defn factorial-tail-recursion [^BigDecimal x] (letfn [(f [result n] (if (= n 1) result (recur (* result n) (dec n))))] (2) (f 1 x))) 1 The recur expression evaluates the new values for all loop variables and restarts the loop with these values. 2 The recur expression evaluates the new values for all function parameters and restarts the function without adding a new stack frame. This mechanism provides tail-recursion call optimization. (defn greet (1) ([] (greet \"you\")) ([name] (print \"Hello\" name))) (greet) ;; =\u003e Hello you (greet \"World\") ;; =\u003e Hello World (defn greet [name \u0026 rest] (print \"Hello\" name rest)) (2) (greet \"Yan\" \"Darryl\" \"John\" \"Tom\") ;; =\u003e Hello Yan (Darryl John Tom) 1 Define a multi-arity function. The first declaration is without parameter, the second one has one parameter. 2 Define a variadic function with a variable number of parameters as the last formal parameter. Advanced Functional Constructs The regular mapping, filtering, reducing and applying functions are fully supported in Clojure.\nPartial application to reduce the arity of a function is supported with the apply construct.\nMemoization is also provided. Beware of the tradeoff between processing improvement versus memory consumption.\n(map inc [1 2 3 4 5]) ;;=\u003e (2 3 4 5 6) (filter even? (range 10)) ;;=\u003e (0 2 4 6 8) (reduce + [1 2 3 4 5]) ;;=\u003e 15 (apply str [\"str1\" \"str2\" \"str3\"]) ;;=\u003e \"str1str2str3\" ;; partial application on the add function (defn add [x y] (+ x y)) (def adder (partial add 5)) (adder 1) ;; =\u003e 6 ;; memoization of function calls (def memoized-fibonacci (memoize (fn [n] (condp = n 0 1 1 1 (+ (memoized-fibonacci(dec n)) (memoized-fibonacci (- n 2))))))) (time (memoized-fibonacci 80)) ;; \"Elapsed time: 0.593208 msecs\" =\u003e 37889062373143906 (time (memoized-fibonacci 80)) ;; \"Elapsed time: 0.022459 msecs\" =\u003e 37889062373143906 Synchronization Concepts Concurrency is built into the language. Rich Hickey designed Clojure to specifically address the problems that develop from shared access to mutable state. Clojure embodies a very clear conception of state that makes it inherently safer for concurrency than most popular programming languages.\nThree concepts shall cover all your concurrency needs.\nAtoms Atoms provide a way to manage shared, synchronous, independent state. Atom allows you to endow a succession of related values with an identity. Atoms are an efficient way to represent some state that will never need to be coordinated with any other, and for which you wish to make synchronous changes\nRefs and Transactions Refs allow you to update the state of multiple identities using transaction semantics. These transactions have three features:\nThey are atomic, meaning that all refs are updated or none of them are.\nThey are consistent, meaning that the refs always appear to have valid states. A sock will always belong to a dryer or a gnome, but never both or neither.\nThey are isolated, meaning that transactions behave as if they executed serially. If two threads are simultaneously running transactions that alter the same ref, one transaction will retry. This is similar to the compare-and-set semantics of atoms.\nYou might recognize these as the A, C, and I in the ACID properties of database transactions. You can think of refs as giving you the same concurrency safety as database transactions, only with in-memory data. Clojure uses software transactional memory STM to implement this behavior.\nAgents Agents are a mechanism for sequencing operations on a particular instance of a data structure. Agents provide independent, asynchronous change of individual locations. Agents are bound to a single storage location for their lifetime, and only allow mutation of that location (to a new state) to occur as a result of an action.\n;; Atoms (def state (atom {})) (1) (swap! state assoc :x 42) (2) (println @state) (3) ;; @state is equivalent to (deref state) =\u003e {:x 42} ;; References (def account-a (ref 100)) (4) (def account-b (ref 100)) (defn transfer! [amount from to] (dosync (5) (if (\u003e= (- @from amount) 0) (do (alter from - amount) (6) (alter to + amount))))) (transfer! 20 account-a account-b) (println @account-a @account-b) ;; 80 120 ;; Agents (def x (agent 0)) (7) (defn increment [c n] (+ c n)) (send x increment 5) (8) ;; @x -\u003e 5 (send x increment 10) ;; @x -\u003e 15 1 Declare an atom. 2 Update the value of the atom. The expression passed as parameter to swap! is applied to the current value of the atom. 3 Gets the current value of the atom. 4 Declare a reference. 5 Define the transactional parenthesis grouping multiple modifications of references. 6 The behavior of alter is: Reach outside the transaction and read the reference’s current state.\nCompare the current state to the state the ref started with within the transaction.\nIf the two differ, make the transaction retry. Otherwise, commit the altered ref state.\n7 Declare an agent. 8 Send the expression to the agent. The expression is executed asynchronously using a thread pool. The first parameter of the expression will be the agent value. Atoms allow multiple threads to apply transformations to a single value and guarantee the transformations are atomic. swap! takes the atom and a function expecting the current value of the atom. The result of calling that function with the current value is stored in the atom. multiple calls to swap! may interleave, but each call will run in isolation.\nRefs allow multiple threads to update multiple values in a co-ordinated way. All updates to all refs inside a sync will complete or none will. You must write your code such that transaction retries are catered for. There are a few potential performance tweaks if you can relax the ordering of operations, which may reduce the chance of transaction retry.\nEmbrace Modern Java Modern Java adds functional approaches [2] to the Java language. I will certainly not pretend that Java is a functional language. You still can go a long way and write more functional and legible code using the provided mechanisms.\nThe major constructs are:\nLambda Functions and Java Functional Idioms\nStreams and Monoids\nAlgebraic Data Types and Pattern Matching\nStructured Concurrency and Virtual Threads\nFunctional Java means no more for, while, and do loops [1].\nFunctional Java means no more checks if a value has the value null.\nVirtual Threads means no more asynchronous programming.\nJava still does not support tail optimization. This constraint limits the use of recursive constructs in your solution.\nPartial application is painful in Java due to the type declarations implied with the single abstract method interface approach for lambdas. Try using var as much as possible. Otherwise, you need to type very lengthy type declarations.\nLessons Learnt Clojure is an ideal language to learn and better understand functional programming approaches [3].\nYou will probably not use it in a commercial product development. None of the functional languages such as Clojure, List, F# has taken over the world of programmers.\nThe principles you learnt shall often be applicable to your technology stack. Your code will certainly be simpler, more legible and maintainable.\nSome advanced concepts exist to better integrate Clojure with Java and provide object-oriented features to the language. I would recommend using Java to teach these concepts and restrict Clojure teaching to functional programming aspects.\nI wish you happy coding in the functional world of Clojure.\nLinks [1] Teaching Clojure I. Marcel Baumann. 2023.\nReferences [1] S. D. Halloway, Programming Clojure. 2012 [Online]. Available: https://www.amazon.com/dp/B07BN4C92X\n[2] V. Subramaniam, Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions. The Pragmatic Programmers, 2014 [Online]. Available: https://www.amazon.com/dp/B0CJL7VKFL\n[3] N. Ford, Functional Thinking: Paradigm Over Syntax. O’Reilly Media [Online]. Available: https://www.amazon.com/dp/B00LEX6SP8\n1. Recursion is sufficient to have a Turing complete language. Loops are not required. ","categories":"","description":"","excerpt":" Functional programming is hype for the last ten years.\nAll popular programming languages have added support to functional concepts for years.\nNot all developers are embracing the new approach and …","ref":"/blog/2023/teaching-clojure-ii/","tags":["jvm-languages","series-students"],"title":"Teaching Clojure II"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/jvm-languages/","tags":"","title":"jvm-languages"},{"body":" Functional programming is hype for the last ten years. You find a lot of blogs and videos stating object-oriented languages are doomed.\nAlmost all the most popular languages have added support to functional concepts in the last years.\nJava introduced lambda expressions and single abstract method interfaces SAM with Java 8 in March 2014. Java developers are empowered to write functional code for almost ten years.\nOther languages such as Python, C++ or C# added their own functional extensions in newer revisions.\nLisp dialects fully supported functional paradigms since the sixties of the last century.\nThe theory behind functional model is \\$lambda\\$ calculus. Alonso Church formulated the lambda calculus theory in the thirties of the last century and millennium.\nWhy are functional programming paradigms suddenly so popular?\nFunctional languages have the following properties:\nFunctions are first-class objects. That is, functions can be created at runtime, passed around, returned, and in general, used like any other datatype.\nData is immutable.\nFunctions are pure; that is, they have no side effects.\nOO Object Orientation makes code understandable by encapsulating moving parts.\nFP Functional Programming makes code understandable by minimizing moving parts.\n— Michael Feathers For many tasks, functional programs are easier to understand, less error-prone, and much easier to reuse.\nClojure Development Environment Clojure [1] is a splendid approach to learn functional programming idioms. The language is well-documented.\nThe integration in the Java ecosystem and virtual machine is well-done.\nPurely functional programs typically operate on immutable data.\nInstead of altering existing values, altered copies are created and the original is preserved.\nSince the unchanged parts of the structure cannot be modified, they can often be shared between the old and new copies, which saves memory.\nThe IntelliJ plugin Cursive hugely simplifies writing code and testing it [1]. IntelliJ IDEA is probably the most popular IDE for Java developers [2]. People are familiar with its functions and do not need to learn a new tool.\nDeclarations You can define values and functions:\n(defn square [param] (* param param)) (1) (def data (list 1 2 3 4 5)) (2) (def computed (map square data)) (3) 1 Define a square function defn with one parameter and return the square value of the parameter. 2 Define a list def with five elements and store it the reference named data. 3 Apply the square method on all items of the data list. The computed list is stored in the reference named computed. Clojure provides extensions to validate type information.\n(defn square [^Number param] (1) {:pre [(number? param)]} (2) (* param param)) 1 Define an optional type hint for the parameter with ^Number to state param must be a number. 2 Declare an optional precondition validating parameter values when the function is called. The equivalent constructs for local value and function declarations inside a function are:\n(defn function-1 [] (let [local-variable-1 local-variable-value-1] (1) body-of-let-block)) (defn function-2 [n] (letfn [(do-local [a] (println a))] (2) (do-local n))) 1 The let expression declares local values in the scope of the function. Use it to minimize global name pollution. 2 The letfn expression declares local functions in the scope of the function. Use it to minimize global name pollution. Conditional Statements You still need to write selection code. The usual constructs are:\n(defn is-small? [number] (if (\u003c number 100) \"yes\" \"no\")) (1) (when (= 1 1) (+ 10 1)) (2) (defn pos-neg-or-zero \"Determines whether or not n is positive, negative, or zero\" [n] (cond (3) (\u003c n 0) \"negative\" (\u003e n 0) \"positive\" :else \"zero\")) 1 The if expression evaluates a boolean expression. If true returns the first expression, if false returns the optional second expression or nil if not defined. 2 The when expression is an if expression with only the true path. 3 The cond expression evaluates boolean conditions until the first one returning true is found. The associated expression is evaluated and the result returned. If no expression evaluates to true, the else expression is evaluated and returned or nil if not defined. Some Definitions Symbols are identifiers that are normally used to refer to something else. They can be used in program forms to refer to function parameters, let bindings, class names, and global vars.\nKeywords are symbolic identifiers that evaluate to themselves. They provide very fast equality tests.\n(char? (char 97)) ;; true (char? 's) ;; false (string? \"This is a string\") ;; true (symbol? 'aSymbol) ;; true (symbol? (symbol \"aSymbol\")) ;; false (keyword? :aKeyword) ;; true (keyword? (keyword \"aKeyword\")) ;; true Arithmetic Clojure supports all the number types of the Java language. Here are some examples:\n(def aLong 42) (def aDouble 42.42) (def aBigInteger 42N) (def aBigDecimal 42.42M) (def aRatio 22/7) ;; =\u003e 22/7 Operator Description Example even?\nReturns true if n is even\n(even? 2) returns true\n+\nAddition of two operands\n(+ 1 2) returns 3\n−\nSubtracts second operand from the first\n(- 2 1) returns 1\n*\nMultiplication of both operands\n(* 2 2) returns 4\n/\nDivision of numerator by denominator\n(float (/ 3 2)) returns 1.5\ninc\nIncrement the value of an operand by 1\n(inc 5) returns 6\ndec\nDecrement the value of an operand by 1\n(dec 5) returns 4\nmax\nReturns the largest of its arguments\n(max 1 2 3) returns 3\nmin\nReturns the smallest of its arguments\n(min 1 2 3) returns 1\nquot\nReturns the rounded division\n(quot 10 3) returns 3\nrem\nRemainder of division\n(rem 3 2) returns 1\nStudy the documentation, more arithmetic and logical operators are available.\nCollections (def aList (list 1 2 3 4 5)) ;; =\u003e (1 2 3 4 5) (def aList '(1 2 3 4 5)) ;; =\u003e (1 2 3 4 5) (def aList (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 ())))))) ;; =\u003e (1 2 3 4 5) (first aList) ;; =\u003e 1 (rest aList) ;; =\u003e (2 3 4 5) (def aMap {\"Fred\" 1400, \"Bob\" 1240}) ;; =\u003e {\"Fred\" 1400, \"Bob\" 1240} (assoc aMap \"Sally\" 0) ;; =\u003e {\"Fred\" 1400, \"Bob\" 1240, \"Sally\" 0} (dissoc aMap \"Fred\") ;; =\u003e {\"Bob\" 1240, \"Sally\" 0} (get aMap \"Bob\") ;; =\u003e 1240 (aMap \"Bob\") ;; =\u003e 1240 (def aSet (set [:a :b :c :d])) ;; #{:a ;b :c :d} (def aSet #{:a :b :c :d}) ;; #{:a ;b :c :d} (count aSet) ;; 4 (aSet :b) ;; :b All the Clojure collections are immutable and persistent. The Clojure collections support efficient creation of 'modified' versions, by utilizing structural sharing.\nThe collections are efficient and inherently thread-safe. Collections are represented by abstractions, and there may be one or more concrete realizations.\nReferences [1] S. D. Halloway, Programming Clojure. 2012 [Online]. Available: https://www.amazon.com/dp/B07BN4C92X\n1. The plugin is free upon registration for students, open source developers and personal use. Please buy a license for commercial development. The company shall have a stream of income to continue developing this awesome environment. 2. IDEA has a free community edition. The Ultimate edition is free for students, teachers, and open source developers. Please buy a license for commercial development. The price is very reasonable. The company shall have a stream of income to continue developing this awesome integrated development environment. ","categories":"","description":"","excerpt":" Functional programming is hype for the last ten years. You find a lot of blogs and videos stating object-oriented languages are doomed.\nAlmost all the most popular languages have added support to …","ref":"/blog/2023/teaching-clojure-i/","tags":["jvm-languages","series-students"],"title":"Teaching Clojure I"},{"body":" Java 20 was released on time to the public. The release has been available for download since 21st March 2023.\nInterestingly, the new Java release contains only incubating or preview JEP proposals. No final improvements are part of this version.\nYou are a Java developer, you should always install the latest JDK and try it out. Most of the time, all your products will compile and run on the new release without any changes.\nYou get new features, performance improvements, and better security for free.\nAs soon as you have to write code, you will enjoy higher productivity thanks to the new features. Your source code will be quite different from functional equivalent source code written with an older Java version.\nThe projects Amber, Loom and Panama provide the improvements provided in JDK 20.\nThe project Amber provided improvements in pattern matching features.\nRecord Patterns Second Preview\nPattern Matching for Switch Fourth Preview\nThe project Loom provided refinements in virtual threads and structured concurrency.\nScoped Values Incubator\nVirtual Threads Second Preview\nStructured Concurrency Second Incubator\nThe project Panama refined the access to functions and data provided by external libraries written in non-JVM languages.\nForeign Functions and Memory API Second Preview\nVector API Fifth Incubator\nAlgebraic Types and Pattern Matching Brian Goetz and his team are adding syntactic sugar constructs to the language. Step by step the algebraic data types with records [5] and sealed types and the pattern matching tools move Java to more complete functional programming approaches.\nThe sum of small improvements finally empowers us to write more legible source code. The switch expression is an elegant and compact solution for conditional selection.\nThe next JDK will hopefully again improve the legibility of the code. The proposed improvements are anonymous variables in deconstruction expressions and support of primitive types in switch expressions.\nVirtual Threads and Structured Concurrency Death to complex asynchronous programming and nightly debugging sessions. The structure of the code visualizes the concurrency flow in your application.\nThe Loom project is the kid on the block. The structured concurrency approach has the promise to tremendously simplify concurrent programming.\nWork is under way to provide scoped values and deprecate thread local storage.\nI hope that Loom will deliver another promise and give us optimized tail recursion in the near future.\nInterfaces to external libraries and memory structures Java is not an island. We want to interface to external digital systems and powerful libraries.\nJNI solution is obsolete. Panama project provides way better approaches to interface with external libraries.\nThoughts Java is steadily improving [7] if sometimes slowly [1].\nThe project amber is a powerful driver for regular Java improvements. The next goodies for JDK LTS 21 should be Sequenced Collections and String Templates. Especially the string templates will simplify quite a few lines of our code.\nThe tools are also getting better. For example, IntelliJ IDEA and Gradle provide timely updates for newer Java versions\nSupport for newer features in regular libraries is catastrophic. The Java community emphasizes backward compatibility and sacrifices elegance [2].\nSeminal works [1, 2] provides examples how to write modern and expressive Java code. Cool products [1] allow the creation of digital products and user interfaces using only the Java stack.\nAn introductory book [3] helps newcomers to the Java language.\nThe diagram shows the hot topics in the Java ecosystem. The adoption takes time before a majority of development organizations jump on the train.\nThe adoption of the Java 17 LTS edition is still in the early adoption phase after two years, as stated in the below diagram.\nWe should rather state that the majority of Java teams are laggards, also called more politely late majority.\nLinks [1] Vaadin. Marcel Baumann. 2022.\n[2] Java 17. Marcel Baumann. 2021.\n[3] Java 16. Marcel Baumann. 2021.\n[4] Java 10 aka 18.3 Changes. Marcel Baumann. 2018.\n[5] Immutability in Java. Marcel Baumann. 2022.\n[6] Modern Java Constructs. Marcel Baumann. 2022\n[7] Modern Java Development. Marcel Baumann. 2021.\nReferences [1] J. Bloch, Effective Java, Third. Addison-Wesley Professional, 2017 [Online]. Available: https://www.amazon.com/dp/B078H61SCH\n[2] V. Subramaniam, Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions. The Pragmatic Programmers, 2014 [Online]. Available: https://www.amazon.com/dp/B0CJL7VKFL\n[3] S. Harrer, J. Lenhard, and L. Dietz, Java By Comparison. Pragmatic Bookshelf, 2018 [Online]. Available: https://www.amazon.com/dp/B07CLFTVZS\n1. I am waiting since 2018 that Brian Goetz proposal of concise method bodies is implemented in a JDK. 2. I advocate that libraries should target the latest LTS version of Java. This approach ensures that a library is at most two years behind the latest Java release. ","categories":"","description":"","excerpt":" Java 20 was released on time to the public. The release has been available for download since 21st March 2023.\nInterestingly, the new Java release contains only incubating or preview JEP proposals. …","ref":"/blog/2023/java-20/","tags":["java","series-students"],"title":"Java 20"},{"body":" I just received my new MacBookPro M2 Max with 32 GB of RAM and 1 TB SSD [1].\nI know. I am a geek who loves his technical gadgets. I convinced my wife these gadgets are way cheaper than a sports car.\nMore seriously, I easily use my workstation forty hours a week. I really appreciate a stable and fast machine. My eyes are thankful if the display has a high resolution and the refresh rate fulfills ergonomic criteria [2].\nThe new notebook replaces my older MacBookPro 2018 I bought five years ago.\nThe new machine is so fast [3]. It is a pleasure to work with it. The only visible difference with the older notebook is the new version has a bulkier build.\nI decided to set up the machine from the ground up. I want to find out which programs I am really using in my work. The setup activities took around one and a half hours [4].\nThe older notebook is now my backup computer. It can be quite useful. A battery replacement on a MacBook notebook takes easily one week in Switzerland.\nStandard Programs I installed manually the following applications:\nBrowsers Google Chrome\nFirefox\nSafari is installed with macOS.\nOffice Applications AsciiDocFX as I write all technical documents using Asciidoc markup language.\nLibreOffice is my primary office suite for all documents.\nMicrosoft Office is optional in case I receive a related file. I do not use it for productive work.\nApple Office Suite is optional in case I receive a related file. I do not use it for productive work.\nConference Tools: Slack, Zoom, Discord, Microsoft Teams [5] , ClickShare [6].\nAmazon Kindle because I have all my technical and science-fiction books on Amazon Kindle. [7].\nJabRef for bibliography references.\nGoogle Drive to access all our company drives.\nSwitch Drive for the Swiss technical university drives.\nSpotify to listen to music.\nGPG Tools to sign all company related emails and encrypt sensitive documents. I am using PGP for the last thirty years.\nEscalidraw\nWacom tablet drivers.\nBanana for accounting as a local installation. The complete accounting activities including VAT declarations are performed with this application.\nvlc as multimedia player\nDeveloper Tools JetBrains IntelliJ IDEA with AsciiDoc, Cursive, SonarLint, Statistics, Grazie Professional, and Snyk plugins.\nJava JDK 17 LTS, JDK 20, and JDK 21 including the documentation for the latest JDK [8].\nVisualVM\nDocker Desktop is used for clean validation and local deployment of complex applications.\nThe JDK documentation shall be copied in the folder /Library/WebServer/Documents. You need sudo rights to move the files into the web server documents folder.\nYou can access the JavaDoc documentation with URI localhost/docs-jdk20/api/index.html.\nI need local access to the documentation when traveling in Switzerland. The official Swiss railway company does not provide Internet access in the trains.\nIf you never started the Apache server, you need to execute once:\nsudo apachectl start Brew Packages Homebrew is an awesome tool to install libraries, tools and applications on macOS.\nbrew install maven gradle git git-lfs node pmd (1) brew install hugo asciidoctor graphviz plantuml mermaid-cli python (2) brew install clojure leiningen (3) brew install wget rsync ghostscript (4) brew install --cask asciidocfx (5) brew install --cask jabref (6) xattr -d com.apple.quarantine /Applications/JabRef.app npm install --global state-machine-cat (7) gem install asciidoctor-bibtex asciidoctor-diagram asciidoctor-chart (8) gem install asciidoctor-rouge asciidoctor-kroki asciidoctor-revealjs brew install --cask netnewswire (9) brew install --cask asciidocfx (10) npm install @mermaid-js/mermaid-cli brew install cmake ninja doxygen (11) 1 Development tools for Java projects. Ant is an obsolete tool and no more part of the set. 2 Documentation tools used to produce all technical documents. The applications are used to generate static websites. I had to update the PATH variable with /opt/homebrew/opt/ruby/bin to ensure that brew ruby installation is used instead of the macOS one. 3 Clojure tools for the technical university lectures I gave. 4 Utilities for developers. 5 Applications managed through homebrew. 6 JabRef for bibliography references management. Due to macOS Ventura, you need to enable the application with xattr command. 7 State machine cat smcat to generate nice statecharts as an asciidoc diagram type. 8 Install the ruby packages used with asciidoctor to create the static websites. 9 Install a newsreader for RSS feeds. It is also used to check if tangly blog RSS feed is working. 10 Install Asciidoc editor and support for plantUML and Mermaid diagram support. 11 Development tools for C++ projects. I use a URL link checker to validate my websites. The link checker is a python package.\nsudo -H pip3 install linkchecker (1) 1 the -H sudo option installs the python package for all users. Git and GitHub Configuration I copied the ssh configuration files stored in .ssh/ folder on the new machine. These configuration files handle the access to the multiple remote repositories I am using.\nI also set up the shell configuration files .zshrc and .gitconfig to have the same environment.\nIf you copy your .ssh folder to the new workstation, you could have access right troubles. Ssh is quite restrictive about the access rights of the various files in the configuration folders due to security considerations. Try the following changes.\nsudo chown -R \u003cuser\u003e ~/.ssh chmod 700 ~/.ssh chmod 600 ~/.ssh/* Local Configuration Folders Collaborators shall store projects under a well-defined path.\nmkdir /Users/Shared/Projects The official company open-source project is under /Users/Shared/Projects/tangly-os.\nThe tangly blog is under /Users/Shared/Projects/tangly-os-site. The site folder is where the site content is generated using Hugo and Docsy.\nConfiguration Here is the startup script\nplugins=(ssh-agent) export PATH=\"/opt/homebrew/bin:/opt/homebrew/opt/ruby/bin:$PATH\" (1) export MAVEN_OPTS=\"--enable-preview\" export GRADLE_OPTS=\"--enable-preview\" export JAVA_HOME=`/usr/libexec/java_home` export GRAPHVIZ_DOT=\"/opt/homebrew/bin/dot\" alias la=\"ls -al\" alias brewup='brew update; brew upgrade; brew cleanup; brew doctor' alias java17=\"export JAVA_HOME=`/usr/libexec/java_home -v 17`; java -version\" (2) alias java20=\"export JAVA_HOME=`/usr/libexec/java_home -v 20`; java -version\" alias java21=\"export JAVA_HOME=`/usr/libexec/java_home -v 21`; java -version\" alias java22=\"export JAVA_HOME=`/usr/libexec/java_home -v 22`; java -version\" java20 (3) 1 Add homebrew to the path. 2 Command to select a JDK version and set it as default under macOS. 3 Select the default JDK version. Remember to install newly released JDKs containing security fixes every three months.\nRegularly run the following commands to update your homebrew and ruby packages.\nbrewup gem update Thoughts All developers in our company are using Apple notebooks since the company’s inception. Our primary development stack is Java. We are regularly working on embedded industrial products and sometimes use C++.\nThe Apple ecosystem and the full access to a Unix system validated the assumption that this platform is best for the kinds of product development we are involved in.\nThe macOS operating system is a cool environment to easily install all the applications you need to work. The Unix terminal console is a game changer for any software engineer [9]. The Homebrew package manager streamlines installation and update of needed software packages.\nAn incredible useful feature is time machine. Buy an external storage medium and setup regular backups. It costs almost nothing and could save your professional life.\nMinimize local files. All business information should be stored on the company shared drive. All product development files should be versioned in a remote Git repository.\nThe new MacBookPro is awesome. It is fast, slick, and the display is gorgeous. The trade-off is the weight of 2.2 kilograms you have to carry around. The build-in loudspeakers are an audible improvement against the sound of the previous machine.\nI was surprised how much faster write operations on the build-in solid state disk are.\nIt is worth the price I paid [10].\nLinks [1] Why I Still Use a MacBookPro notebook and macOS\n[2] Why I Use a MacBookPro Notebook and macOS\n1. I am using Apple products for the last thirty-five years. I am certainly not objective when discussing the advantages and drawbacks of Apple computers. I also used Linux-based workstations and regularly compiled kernels and configured drivers. Some companies forced me to use Windows computers. I learnt to hate virus scanners and firewalls impeding my daily developer tasks. 2. If you are forced to work with a full HD display instead of a 4K display, it is probably time either to bring your own display or move to a company not being stingy. I really mean it. A good 4K display costs around 600 Euros. If your company cannot afford it, they are undoubtedly penny-pinching. 3. To be fair, I am not involved in machine learning or vision application development. Apple support for standard ML libraries is abysmal. The company decided to create their own standard with Metal and do not assume the consequences. 4. The synchronization of the various Cloud storages was performed overnight. We store company related or personal data either on Cloud drives or in Git repositories. 5. I love the Jabra Evolve2-65 headset for audio and video sessions. This bluetooth headset always connects without problems. The audio quality is excellent. The price is reasonable for a professional headset. 6. I need the ClickShare application because the drivers preinstalled on the ClickShare devices are old and do not work with current macOS versions. 7. Amazon still has not released an ARM native application. Shame on them. The worst missing feature is bulk download of purchased books. I like to explore my library during commute train travel. You do not have wireless access to trains in Switzerland. The books shall be stored in the notebook otherwise you cannot read them. 8. I always install the last long-term support LTS Java version, the last official release, and the version under development. I use the development version to validate all projects to ensure they will run when the new version is officially released. I only use the LTS version for legacy activities. I am not aware of any scenarios why an organization should use an older Java version and have an advantage. 9. Professional programmers shall have access to a terminal and have local administrator rights. 10. The price of the Macbook notebook in 2023 was CHF 3'300. I buy a new notebook every five years, meaning the yearly costs are ridiculous low. ","categories":"","description":"","excerpt":" I just received my new MacBookPro M2 Max with 32 GB of RAM and 1 TB SSD [1].\nI know. I am a geek who loves his technical gadgets. I convinced my wife these gadgets are way cheaper than a sports car. …","ref":"/blog/2023/my-new-macbookpro/","tags":["organization"],"title":"My New MacBookPro"},{"body":" Here are some software development topics I have learnt to like after 40 years in the industry.\nI worked at quite a few industrial and commercial digital product development initiatives. I truly enjoyed creating successful solutions.\nOver the years, I encountered similar architecture and design patterns when creating source code for these applications.\nI started programming with languages such as Ada, Portal, and C. I embraced object-oriented languages with first C++ and later Java.\nThe rise of agile approaches quite increased the fun and motivation in digital product development. The Agile Manifesto and the cited 12 Agile Manifesto Principles still ring as worthy ideas to create better products.\nAgain and again, our teams had to find ways to learn, tackle complexity, improve cohesion, and master coupling.\nModern engineers create increasingly complex and sophisticated systems. So as well as focusing on learning and modern engineering, we need to focus on managing complexity.\nWe need to focus our tools, techniques and mindset on dealing with the complexity [1, 2, 3].\nStrongly Agree I strongly agree with these statements:\nTyped languages are better when you are working on a team of people with various experience levels. The bigger your application, the more helpful is compiler support.\nStand-ups are actually useful for keeping an eye on the newbies. They help to detect a team member stuck in a loop.\nSprint retrospectives have their place so long as they are for actual improvements. They are the holy shit, well, that went poorly!, and not some awful scrum master driven waste of everyone’s time.\nDevelopers should not be isolated or left to just code. Bypassing traditional product managers and agile product owners, they should talk directly to the customer. It always reveals more about the problem, in less time, and with higher accuracy.\nSoftware architecture matters probably more than anything else. A shitty implementation of a good abstraction causes no net harm to the code base. A bad abstraction or missing layer causes everything to rot.\nJava is quite a cool language. Modern Java with streams, modules, pattern matching, or structured concurrency is fun to use.\nClever code is not usually good code. Clarity trumps all other concerns.\nBad code can be written in any paradigm. Programmers steadily writing bad code should be fired.\nSo-called best practices are contextual and not broadly applicable. Call them good practices. Blindly following them makes you a fool. The agile community recognized the dangers. They only advocate good practices and emphasize the importance of the context in which they are applied.\nDesigning scalable systems when you do not need to make you a bad engineer.\nStatic analysis is actually useful. Scanners like SpotBugs or SonarLint regularly find errors and smells.\nDRY is about avoiding a specific problem, not an end goal unto itself.\nIn general, RDBMS are better and simpler than NoSql solutions.\nFunctional programming is another tool, not a panacea. The real world has objects and often classes.\nPositive Experiences I learnt to appreciate these approaches:\nYAGNI, SOLID, DRY, KISS.\nPencil and paper are the best design and programming tools and vastly underused. Better are whiteboards to exchange ideas in a team.\nTrading purity in exchange for practicality is usually a good call.\nAdding more technology in response to a minor problem is rarely a good call.\nDesign is driven from requirements [4]. Building anything beyond those requirements puts you into the world of speculative, self-indulgent invention.\n90%, maybe 95%, of project managers, could probably disappear tomorrow to either no effect or a net gain in efficiency [5].\nAfter performing over 2000 interviews, I can say that standard human resources interviewing is thoroughly broken. Technical interviewing and peer interviewing work way better and are more accurate.\nAgile approaches are more successful and more fun. Waterfall approaches suck [1].\nDevOps advantages are worth the effort. Deliver frequently and automate. Each project should have a continuous integration, continuous delivery, and continuous deployment pipeline. The deployment can also be triggered manually. The deployment steps shall still be fully automated.\nStatic websites written in Asciidoc and using site generators such as Hugo are the solution how to document your architecture and technical product [2].\nOld Beliefs I still think these statements should be applied in current teams:\nA software developer shall have formal training in computer science and software engineering. She should hold at least a bachelor’s degree. A software developer should understand theory such as e.g., CAP theorem and big O notation.\nA junior Java developer shall pursue a formal Java programmer certification. The learning effect is not always huge, but as a team member, I have security that they know all basic concepts. Modern Java supports such concepts as algebraic data types, functional programming, monads, structured concurrency. A professional developer shall apply them in her daily work.\nPeople who stress over code style, linting rules, or another minutia are insane weirdos.\nCode coverage has absolutely nothing to do with code quality.\nMonoliths are pretty good in most circumstances. The key is to write modular monoliths. [3].\nMicro-services require justification.\nReferences [1] D. Farley, Modern Software Engineering. Pearson Education, Limited, 2022 [Online]. Available: https://www.amazon.com/dp/B09GG6XKS4\n[2] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Automated Software Governance, Second. O’Reilly Media, 2023 [Online]. Available: https://www.amazon.com/dp/B0BN4T1P27\n[3] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[4] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[5] C. Larman, Large-scale scrum. 2017 [Online]. Available: https://www.amazon.com/dp/0321985710\n1. It is time to retire the V-Model, Hermes method, and similar geriatric methodologies. They have served their time. They can rest in peace. The same could be said about SAFe. 2. The huge gain is always current documentation and free versioning of the documentation with the source code. 3. The spring framework finally recognized that with Modulith. ","categories":"","description":"","excerpt":" Here are some software development topics I have learnt to like after 40 years in the industry.\nI worked at quite a few industrial and commercial digital product development initiatives. I truly …","ref":"/blog/2023/software-developer-assumptions/","tags":["java","architecture","series-students"],"title":"Software Developer Assumptions"},{"body":" Scrum is the most popular agile approach used to develop digital products.\nThe Scrum master role is well-documented in the Scrum Guide. There are probably more than one million of certified Scrum masters in the world.\nTo differentiate themselves from the numerous Scrum masters, consultants call themselves agile coaches.\nQuite a fancy title.\nDoes a difference exist between a Scrum master and an agile coach?\nA Scrum master is a type of Agile coach. A Scrum master works to implement Agile on a team level, while the Agile coach works on the Agile transition of the whole company.\n— Vyras Butkus I suggest that you study again the Scrum Guide when reading the above quote. Here the guide statement how a Scrum master should support her organization.\nThe Scrum Master serves the organization in several ways, including:\nLeading, training, and coaching the organization in its Scrum adoption.\nPlanning and advising Scrum implementations within the organization.\nHelping employees and stakeholders understand and enact an empirical approach for complex work.\nRemoving barriers between stakeholders and Scrum Teams.\nAgile Coaches Profiles Here are some profiles of agile coaches. If you read the Scrum Guide you understand these profiles are facets of the Scrum master role.\nA Scrum master is always an agile coach [1, 2].\nTeam Coach We have experienced that despite the remark made by my manager, the teams will do their things, teams still need help to grow their agile maturity and business impact.\nTherefore, we distinguish the role of the Team coach. The team coach works close with the team citee:[clean-code,clean-coder], PO [3] and the Scrum master [4, 2]. The team coach helps the different teams to identify improvements. He supports the scrum masters in their ambition to help the teams forward [5].\nShe is the advisor to empower the team to reach focusing fluency in the agile fluency model.\nI expect a professional Scrum master to possess the above capabilities. Teaching, coaching, and mentoring the Scrum team to grasp agility is one of her main responsibilities. Scrum masters in an organization shall exchange ideas and tips through a community of practice.\nDelivery Coach The delivery coach has a strong focus on optimizing the flow of the development process. She is the advisor to empower the team to reach delivering fluency in the agile fluency model.\nIn order to increase the delivered business value, the delivery coach identifies bottlenecks, replaces local optimizations for more generic solutions. She builds quality into the software development lifecycle.\nShe sits with the team to help them automate deployments and testing and to embrace development practices like BDD and TDD.\nThe delivery coach will also explain the importance of this to the leadership teams, so they support the teams towards their technical excellence.\nI expect a technical Scrum master to possess the above capabilities. If not, he must hire a technical delivery coach to support his Scrum team. Most organizations cannot afford multiple coaches for one team.\nAgile Counselor The role of leadership is often seen as the biggest challenge in having a successful agile transformation. A leader sets the tone for the entire organization [6, 7, 8, 9].\nLeaders should communicate what agility means for their organization and be an example by adopting agile values and practices.\nThe agile counselor does not focus that much on the development process as the delivery coach but aims to empower leadership. She has an eye for the health of the teams and will address bad smell with the leadership team. The counselor coaches the leaders on their agile mindset [10, 11, 12].\nShe points out, for example, when old-school thinking and behavior hurt on the performance and delivery.\nThese three profiles bear similarities with Adkin’s areas of mastery. Both distinguish between technical and transformational support.\nThe delivery coach has some commonalities with technical mastery, but rather than having a team focus, she will also act on leadership level to create awareness and commitment for technical excellence. While doing this, she plays a crucial part in the Agile transformation.\nThe agile counselor works with the leadership team, which requires business mastery as well as transformational skills.\nA team coach preferably supports the team by offering technical support and coach on the process and Agile mindset. Being part of the coaches’ team, she will actively participate in the transformation as well.\nShall a Coach Be Savvy in Technology? It certainly helps to understand the technology your teams are using. I assume it is quite challenging to be a soccer coach if you have no clue what soccer is and how it is played.\nRealize that smaller companies can seldom afford an agile coach and also a technology coach for one team. So it is really helpful to at least be able to discuss technical aspects with your coachees.\nSo yes, a Scrum master shall understand the domain and the technology her team needs to create an awesome product. She does not need to be an expert, but certainly she should be savvy.\nDo not believe what I wrote on this blog.\nScrum is founded on empiricism and lean thinking. Empiricism asserts that knowledge comes from experience and making decisions based on what is observed. Lean thinking reduces waste and focuses on the essentials.\nThe Scrum pillars are transparency, inspection and adaptation.\nPlease postulate hypotheses, create experiments, and find out what is working for your product development teams and your organization.\nI wish you happy and successful learning.\nLinks [1] Agile Marcom Interview: Catharina Adriaans. Agile Consortium. 2020\n[2] What Does an Agile Coach Do and How Can You Become One?. Butkus, V.\n[3] The Business Agility Report, 3rd Edition. Accenture. 2020\n[4] Scrum Master as Technical Coach. Bas Vodde, 2019-12-05\n[5] What Does A Scrum Master?. Marcel Baumann. 2020\n[6] What You Do Not Need To Do in Scrum. Marcel Baumann. 2016\n[7] Scrum Master Formation. Marcel Baumann. 2021\nReferences [1] J. Shore and S. Warden, Art of Agile Development, Second. O’Reilly Media, Incorporated, 2021 [Online]. Available: https://www.amazon.com/dp/B09JL2JW4V\n[2] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n[3] D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\n[4] Z. Sochova, The Great ScrumMaster. Addison Wesley, 2016 [Online]. Available: https://www.amazon.com/dp/013465711X\n[5] E. Derby, D. Larsen, and K. Schwaber, Agile Retrospectives. Pragmatic Bookshelf, 2006 [Online]. Available: https://www.amazon.com/dp/0977616649\n[6] M. Balle, R. Priolo, and D. T. Jones, Lead with Lean. CreateSpace Independent Publishing Platform, 2016 [Online]. Available: https://www.amazon.com/dp/B075GTQHFX\n[7] M. Ballé, F. Ballé, and J. Liker, The Lean Manager. Len Publishing, 2009 [Online]. Available: https://www.amazon.com/dp/1934109258\n[8] M. Ballé and F. Ballé, Lead with Respect. Len Publishing, 2014 [Online]. Available: https://www.amazon.com/dp/1934109479\n[9] F. Ballé and M. Ballé, The Gold Mine. Lean Enterprises Inst Inc, 2005 [Online]. Available: https://www.amazon.com/dp/0974322563\n[10] M. Poppendieck and T. Poppendieck, Lean Software Development. Pearson Education, Limited [Online]. Available: https://www.amazon.com/dp/B00HEL13HW\n[11] M. Poppendieck and T. Poppendieck, The Lean Mindset. Addison-Wesley Professional, 2013 [Online]. Available: https://www.amazon.com/dp/0321896904\n[12] M. Poppendieck and T. Poppendieck, Implementing Lean Software Development. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/0321437381\n","categories":"","description":"","excerpt":" Scrum is the most popular agile approach used to develop digital products.\nThe Scrum master role is well-documented in the Scrum Guide. There are probably more than one million of certified Scrum …","ref":"/blog/2023/scrum-masters-and-agile-coaches/","tags":["agile"],"title":"Scrum Masters and Agile Coaches"},{"body":" We are an agile software coaching and digital product development boutique.\nSince our inception, we have created digital products using agile approaches. Our preferred tools are Scrum, Lean Software Development, DevOps, LeSS.\nThe created digital products are successful in the market.\nThey exhibit good quality. Sound engineering approaches were used to design and construct them in a timely and economical way.\nOur customers learnt how to deploy updates and new functionalities in a matter of days.\nWhat is the meaning of being agile and being digital for our company?\nBeing Agile Agile organizations combine the efficiencies of scale with the speed, flexibility and resilience to compete and win in today’s world.\nPractices are the structural framework to cement your principles. We live DevOps, Scrum and LeSS.\nPrinciples guide your daily decisions. We believe in the Agile Manifesto and the 12 Agile Manifesto Principles.\nThe difficult parts are values and mindset.\nEmpower your collaborators. Informed people make better trade-offs.\nAll collaborators have access to all internal information. A company shares all possible data with its employees. Collaborators can comment on even strategic topics before the decisions are finalized.\nSalaries, contracts, and financial results are visible to all. The sole exception is personal information about an employee.\nAny collaborator can take over a process and improve it.\nIncreasing agility is a path.\nProgressing on that path requires vision, belief, persistence and hard work.\n— Gunther Verheyen Social Equality We aggressively pursue social equality.\nThe company achieved gender equality and ethnic equality.\nSocial Responsibility Our collaborators are active as part-time lecturers at technical universities. We teach digital and software engineering courses at bachelor level. The training material is often released under Creative Commons license.\nFind our Agile Software Architecture and Techniques and Programming Concepts and Paradigms under Lectures.\nWe support Swiss initiatives such as Future Day to nurture STEM interests of kids and young adults [1].\nAn article about last year’s future day can be found under HSLU Future Day.\nOur collaborators systematically use climate-friendly transportation. Most of our travels use the domestic rail. Home office work is encouraged to reduce commute traffic.\nOffice emissions are minimal. We acquire notebooks to minimise power consumption. Our company does not possess any printers, faxes, or phone landlines.\nAll our documents and correspondence materials are digital. Our technical library is solely composed of ebooks.\nBeing Digital All our internal processes are digital.\nWhen people tell me they have learned from experience, I tell them the trick is to learn from other people’s experience.\n— Warren Buffett The trend towards digital documents, QR Code and digital exchange standards for invoices helps us to extend our digital approaches to our partners and customers.\nWe have almost no manual or paper interactions with government platforms and insurance companies. Swiss government departments provide web portal access to their services. At least we do not need to send paper documents.\nBut none of the governments provided solutions for social insurance, VAT declarations or salary documents have a published API. Swiss government solutions are still stuck in the last millennium and have missed the API integration approach.\nThe Swiss federal government deployed a new Swiss Federal Tax Administration Portal last year. The various services are now located under one portal. The solution is still missing a public API to enable the digital transformation of company’s processes [2].\nBig insurance companies are worse than the federal government. Pension fund and accident insurances still ask for paper correspondence for standardized processes such as mutation or yearly salary structure information. Improvements are visible but incredibly slow [3].\nWe used Google as our main provider of digital applications for daily work. We have a company account and associated contract since the inception of our company.\nWe had to painfully acknowledge that Google has slow innovation and outdated solutions. Try to publish Internet sites with their Sites application. It is cumbersome, and no support for Asciidoc or Markdown is available.\nStatic website concepts and infrastructure as version managed artifacts are sorely missing. We initiated a slow withdrawal from their digital offerings.\nLessons Learnt Website You want a quality and lively website. Collaborators should be empowered to modify content in a timely and cost-effective manner.\nUse a static website. Version each release in a git repository. Deploy in minutes.\nOur main website with this blog is a static website based on Hugo and the Docsy theme [7][8].\nWe use tools to generate new content and deploy the result. Simple scripts create a new version of the site and publish it to the Internet.\nAll texts and the configuration are stored in a git repository. All collaborators have the rights to enhance the content of our site [4].\nBitBucket Platform The BitBucket offered functionalities are archaic. Their wiki-based approach with Confluence and Jira is the wrong approach for modern digital product development. The platform does not support Asciidoc, CI offerings and CNAME support for our static website. The community requests such improvements for years.\nUse GitHub or GitLab.\nWe decided to phase out the usage of BitBucket and use more modern platforms. We currently use GitHub as our primary platform and GitLab as a fallback solution.\nGitHub supports Asciidoc, has a reasonable CI offering, and their CNAME support is awesome [6].\nInternet Platforms Take ownership of the URL for all the sites you own. Your blogs and documentation often link to articles or pages on various organization websites [5].\nPublish under your domain name.\nThe domain name is your identity on the Internet. Prospects and interested parties will find you through your name.\nUse your organization domain for all internal links to simplify migration of your sites to another provider [6].\nLinks [1] Six Year tangly llc Marcel Baumann. 2022.\n[2] Five Year tangly llc Marcel Baumann. 2020.\n[3] Four Year tangly llc Marcel Baumann. 2019.\n[4] Eliminate Your Printer Marcel Baumann. 2022.\n[5] Founding tangly llc Marcel Baumann. 2016.\n[6] Configure a Custom Domain for your GitHub Pages Site GitHub. 2022-12-01.\n[7] Improving a Static Website Build with Hugo and Docsy Marcel Baumann, 2021.\n[8] Support Comments for Static Hugo Website Marcel Baumann, 2020.\n1. The percentage of MINT female students in Switzerland is around 11% (statistics from ICT Switzerland, Position Paper, 2020-02-25). This is a cultural and gender equality catastrophe. Neither the Swiss federal nor state governments have a MINT program with goals and budgets. Volunteer initiatives try to improve this shameful situation for decades. 2. Having collaborator inputting data on a Web form is certainly not the definition of a digital process. 3. In 2022, we could handle most of our communication with insurance companies electronically. Pension funds still regularly require printed communication. They finally accept that we scan their forms and send them per email. Their own collaborators are very helpful and are not proud of their company’s approach. 4. Take it easy. Git easily supports fast rollback if a change was catastrophic. 5. The hosting company can disappear or change their business model. Avoid location dependency. Nothing is more unpleasant than a dead link or a link to outdated information. 6. We decided to move our static websites from BitBucket to GitHub. We were surprised how many links we had to change. ","categories":"","description":"","excerpt":" We are an agile software coaching and digital product development boutique.\nSince our inception, we have created digital products using agile approaches. Our preferred tools are Scrum, Lean Software …","ref":"/blog/2023/the-quest-for-an-agile-company-seven-years-tangly-llc/","tags":["agile","tangly","organization"],"title":"The Quest for an Agile Company: Seven Years tangly llc"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/tangly/","tags":"","title":"tangly"},{"body":" Your sole goal is to hire a qualified collaborator with potential.\nFor example, you need a great software engineer with social competence. He is a professional developer and has knowledge of the technology stack [1] your company is using. The candidate naturally understands agile and DevOps approaches.\nHow can you convince him to sign the contract and start working on your cool product?\nHiring is like dating.\nBoth parties shall be motivated to deepen their relationship and enter a binding agreement. Both parties are willing to invest and believe it will be beneficial for them.\nDating means you have competition. Do your best to convince your potential partner.\nAsk yourself why a candidate should decide to work in your company and develop this awesome digital product?\nIt is worth investing time and effort to succeed [2].\nBefore the Interview You must prepare for the interview. You have read the CV of your candidate and visited her LinkedIn profile.\nTry to find out if the candidate worked on open source projects. Look at the documentation and source code the candidate has written. Read the articles and blog entries published by your candidate.\nExpect a good candidate will also interview you to find out more about your organization and culture. It is almost like a dating meeting. Both parties shall have an opportunity to find out if they are a match.\nGoogle provides hints how to work with creative software collaborators [1].\nPerform the Interview I want to find out how the candidate performs tasks and interacts with his team. I am inquisitive of how she learnt new skills. The area of interests are:\nCoding How do you write source code? What do you think about technical excellence [2, 3, 4, 5, 6]? What approaches do you use to refactor or improve source code?\nSoftware design and architecture How do you design your components? Which techniques do you use for evolving your software architecture? What do you think about design and architecture approaches [7, 8, 9, 10]? What are your approaches with existing and legacy solutions [11, 5]?\nAgile approaches What do you think about agile approaches [12, 2, 8, 13]\nTeamwork, soft skills, teaching and mentoring How do you teach and mentor team members? [14, 15, 16]\nWhy does she want to work in our company? Please elaborate. What do you find interesting about our company, our vision, and our products?\nWhy is she a software engineer? Tell us your story, please. Being an engineer is also a passion. Professional engineers have ethics and are aware of their social responsibilities.\nThe areas are like the ones I check when receiving a CV [1].\nWrite-Down Your Findings and Recommendations You should perform a technical interview with a colleague. Try to write your impressions and findings using the same template for all candidates.\nCompare your findings to diminish biases and misunderstandings.\nInform the candidate about your decision. Communication shall be timely and respectful.\nHave An Onboarding Program Avoid a checklist, avoid predeclared correct answers.\nAim to uncover reasons why you should hire a candidate.\nDo not say: we want developers who can be exchanged.\nYou want to hire good people that can learn and improve.\nYour organization should promote that people can learn and evolve.\nBe clear what you are looking for: make team better, bring new things, what do they value in code and architecture.\nHow do they solve various problems in areas such as architecture, design, process, code, bug?\nOpen-ended questions, to start a discussion.\nMake criteria clear, if a criteria is not reached, inform them that you expect to reach the criteria.\nAn interviewee should also interview the interviewers.\nA powerful technique is extensive pair programming and pair design in particular during probation time. Your new collaborator leans on how her team is working and the specifics of the product.\nThe team understands the strengths of the trainee. They identify improvement areas to improve her effectiveness when working on the product.\nShow your best as a modern development shop. Your collaborators have access to 4K displays and professional keyboards, mice, headsets and desks [3].\nThe employees are using state of the industry platform to create the products and to collaborate as teams [4].\nLinks [1] Evaluate Technical CVs\n[2] Rework with Google\n[3] Select an Agile Software Development Partner, Marcel Baumann, 2023\nReferences [1] L. Bock, Work Rules! Grand Central Publishing, 2015 [Online]. Available: https://www.amazon.com/dp/1455554790\n[2] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[3] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[4] R. C. Martin, Clean Craftsmanship. Addison-Wesley Professional, 2021 [Online]. Available: https://www.amazon.com/dp/B095C16LSW\n[5] M. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\n[6] A. Scott and P. J. Sadalage, Refactoring Databases. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/B001QAP36E\n[7] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns. Addison-Wesley Professional, 1995 [Online]. Available: https://www.amazon.com/dp/B000SEIBB8\n[8] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[9] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[10] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\n[11] M. C. Feathers, Working Effectively with Legacy Code. Prentice Hall, 2004 [Online]. Available: https://www.amazon.com/dp/0131177052\n[12] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[13] N. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\n[14] G. M. Weinberg, Becoming a technical leader. Dorset House, 1986 [Online]. Available: https://www.amazon.com/dp/B004J4VV3I\n[15] R. Schwarz, The Skilled Facilitator. Jossey-Bass, 2002 [Online]. Available: https://www.amazon.com/dp/B0BT11C39N\n[16] E. H. Schein and P. A. Schein, Humble Inquiry, Second. Berrett-Koehler Publishers, Incorporated, 2021 [Online]. Available: https://www.amazon.com/dp/1609949811\n1. The singular form is wanted. A small or medium company SMC should minimize the technologies they used to build their digital products. 2. Once you have found your partner, invest time and effort to keep your relationship healthy. 3. I am regularly depressed that professional developers still do not have access to high-resolution displays or high-quality headsets. 4. I still encounter teams without tools like Slack. Worst, some still cannot use development platforms such as GitHub, GitLab, BitBucket or Azure. ","categories":"","description":"","excerpt":" Your sole goal is to hire a qualified collaborator with potential.\nFor example, you need a great software engineer with social competence. He is a professional developer and has knowledge of the …","ref":"/blog/2023/technical-interviews/","tags":["agile","organization"],"title":"Technical Interviews"},{"body":" What does a senior manager in charge of information technology?\nAn IT director is the information technology right-hand man of the company’s manager. He sometimes has the shiny title of CIO. He proposes and implements the IT strategy of the company.\nHe intervenes at different levels in the management and optimization of the company’s information system.\nThis encompasses hardware and software infrastructures, information architecture, business tools, dedicated internal or external human resources, and often old technology.\nThe size of small and medium companies does not justify a full-time role. The IT manager shall be a part-time role. He shall also work in other roles.\nIdeally, he performs the financial and technical tasks associated with the IT department responsibilities.\nA modern IT leader works mainly on the tactical level. He identifies and deploys solutions optimizing the cost structure and reducing organizational risks.\nThe computer department of a technical university has regular variants to deploy their services:\nBuy own hardware. Install and support applications with an internal team. The challenge is to convince team members to stay.\nDelegate installation and support to the IT department of the technical university. Success is dependent on the affinity of the department to digital tools. Experience shows user satisfaction is low due to lack of technical expertise in the support group.\nDelegate the installation. Use a specialized academic support institution. Examples in Switzerland are Switch or the computing center of Ticino.\nUse a commercial solution provided by a hyperscaler or tool provider. Microsoft GitHub, GitLab, Atlassian BitBucket have academic programs to support universities.\nThe IT responsible shall select the best alternative for his organization. Best means technically adequate and financially sound.\nAreas of Works Every company is now a technology and software development company.\nYour organization needs an infrastructure to build, deliver and deploy digital software solutions [1, 2].\nSoftware is eating the world.\n— Marc Andreesen 2011 Continuous Integration, Delivery and Deployment Pipeline GitLab, GitHub, Bitbucket or Microsoft Azure platforms are the industrial standards for digital product development. Choose the most adequate for your developers.\nDeployment Platform Kubernetes is the industrial standard for deploying software solutions. The major discussion is how you deploy your applications: locally, in the cloud or in a hybrid environment. The decision is tactical and shall regularly be revised to optimize running costs and fulfill corporate governance.\nStorage Solution Your organization must store data in persistent storage. The information shall be backed up and protected against incidents.\nCorporate Governance Stakeholders are sensible that your organization respects laws and pursues an ethical obligation to collaborators, users and society.\nAuthentication and Authorization Modern distributed organizations shall provide a secure and standardized approach to authentication and authorization. Single sign-on and federated solution (FIDO, Edu ID) are current best practices.\nMachine Learning and Graphical Resources Currently, graphic processors are the only approach to computing machine learning and big data problems and provide usable solutions.\nSecurity, Audit, and Firewalls Security and associated firewalls are mandatory to respect corporate governance and laws. Monitoring is a must for all enterprise relevant applications. Special solutions are seldom needed and shall be provided on a case basis.\nTypical Responsibilities An IT director can help the manager of an SME to respond to many problems, such as:\nAre IT purchases carried out optimally?\nHow to choose an IT supplier or service provider?\nCan multiple encodings of the same information be avoided?\nIs integrated management software necessary?\nHow to choose a suitable tool or toolchain?\nIs the security of installations and computer access guaranteed?\nIs a backup procedure in place? Did you test the restore process? Is the restore process timely?\nAre maintenance contracts being followed?\nAre information technology budgets optimized?\nAre the IT teams properly sized and supported?\nIs the computer system still adapted to the needs of the company?\nIdeal Profile The ideal candidate shall have experience and training in:\nTechnical support for a virtual computing solution. The candidate shall have at least a bachelor’s degree in computer science or related fields.\nCorporate governance for digital solutions and legal aspects.\nFinancial understanding to select solutions and drafting the contracts.\nTeam leadership to nurture a competent small group of specialists. The specialists could be collaborators or external experts.\nReadiness to transition from a hardware solution to a service solution.\nThe only wrong approach is to deploy a local solution without maintenance contracts and without disaster recovery plans.\nMost of the decisions are constrained by the trend to outsource hardware and applications to professional companies.\nThe political activities should not be underestimated. As an IT leader, you have to convince the organization to adopt and support the selected solutions. This process is often tiring and full of traps [3, 4, 5].\nA typical scenario is:\nDo we deploy our own storage solution?\nDo we use the services of Switch or Amazon?\nDo we use commercial solutions of other hyperscalers?\nLinks [1] First Steps DevOps Marcel Baumann. 2022.\n[2] Introducing DevOps Ideas Marcel Baumann. 2022.\n[3] DevOps for Small Applications Marcel Baumann. 2021.\n[4] Technical Debt Marcel Baumann. 2022.\n[5] Advocate Zero Bug Policy in Your Projects Marcel Baumann. 2020.\nReferences [1] N. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\n[2] B. Beyer, C. Jones, J. Petoff, and N. R. Murphy, Site Reliability Engineering. O’Reilly Media, Inc., 2016 [Online]. Available: https://www.amazon.com/dp/1492029505\n[3] P. Lencioni, Death by Meeting. Jossey-Bass, 2004 [Online]. Available: https://www.amazon.com/dp/0787968056\n[4] P. Lencioni, Getting naked. Jossey-Bass, 2010 [Online]. Available: https://www.amazon.com/dp/0787976393\n[5] P. Lencioni, Silos, politics \u0026 turf wars. Jossey-Bass, A John Wiley \u0026 Sons, 2006 [Online]. Available: https://www.amazon.com/dp/0787976385\n","categories":"","description":"","excerpt":" What does a senior manager in charge of information technology?\nAn IT director is the information technology right-hand man of the company’s manager. He sometimes has the shiny title of CIO. He …","ref":"/blog/2023/sme-it-responsible/","tags":["agile","devops","organization"],"title":"SME IT Responsible"},{"body":" It is not unusual for businesses to turn to third-party companies when they want help to achieve their goals without increasing internal overhead.\nThis type of outsourcing is especially common for projects that require tremendous amounts of effort or specific skill sets [1].\nTime constraints are often a supplemental driving factor.\nPartnering up with another business to help meet your needs is a viable and widespread solution [2]. It often makes sense for businesses trying to tackle a massive software development project while focusing on the current needs of their clients.\nEvaluation A professional and planned approach greatly improves the odds of success for the partnership:\nIdentify Decision Criteria Decide on your internal team, which helps with making and supporting the decision. Put together a must-have checklist for the capabilities required from a software solution company.\nResearch different approaches and methodologies to discuss with your potential business partner. For instance, will you use Agile and should your partner need to practice it as well? Should you emphasize corporate governance or technology agility?\nThink about the services your business will need in the next few years. Will you require an entire development team, including help with product support? Consider the types of roles required to build your solution and note those you can fulfill with your internal staff. Which positions will you need to fill with experts or dedicated people provided by your new partner?\nEvaluate Candidates Ultimately, you want to choose a partner with the right experience to help you achieve your goals[3]. Avoid choosing a company just because they work with trendy technologies or because they list tons of services on their website.\nThe length of time they have been in business can be important. The length of time they have worked with their own clients can be more telling of the level of expertise they provide.\nEvaluate Costs, Processes and Tools You may be tempted to select the lowest cost option but be cautious. The software company with the lowest bid might not be the most cost-effective. You risk choosing a partner that will go fast but make mistakes, or complete chunks of the work and then need to redo them to match your standards.\nDo not risk quality and reputation for a good price. Ask about change orders. Many companies will underbid a project and later add on new charges throughout the project. It results a dramatic increase in the overall cost of development.\nIt is true that aspects of your project will change during the development process. Experienced software development companies should help you understand how they will handle changes while protecting both your budget and your timeline.\nDiscuss the thorny aspect of scale up and down your external development team. What are the consequences for you and your partner?\nConsider the Location Where will you want your external development partner to be [2]?\nIf it is important that they can integrate with your team and frequently work on site, you might want to only look at local software companies. Evaluate travel time and not the distance to your partner offices.\nIf you are open to working remotely with an onshore company, hold early conversations using the potential conferencing, documentation, and chat systems. You want to ensure your development team can provide help by video as much is lost in exclusively email team communications.\nRemember to account for travel in your budget if you shall expect it from your software development team. If you are thinking of offshoring the work, be sure you consider how you will handle the difference in time zones and communication styles. Many companies offer low-cost solutions that include working with offshore teams to handle services like the help desk, product support, and simple development.\nStart Searching Remember to keep track of your search as you go. Create a document that records potential companies, their attributes, who you are talked to, what you have learned, and any decisions you have made.\nAsk Tough Questions Learn what challenges they have faced with previous clients and what they did to overcome them. If there is something you are particularly worried about, ask about their experience dealing with your prospective challenges to helping their other clients with similar solutions in the past[7]. Ask about their best clients, and the ones that did not stick around.\nBe sure they have clearly outlined what you can expect from working with their team, how you will measure progress, and how they help define success.\nBe wary of any potential development partner that struggles to answer these questions or does not provide stories of failure or follow them up with concrete ways they’ve adapted to ensure future success for their clients.\nEvaluation Criteria You shall implement a clear and founded evaluation approach:\nResearch, learn, classify.\nPick agile and DevOps as a development mantra [1, 2, 3, 4].\nCharacterize why you need a software development partner.\nShortlist the companies you can find to be promising.\nAssess the company experience in your industry.\nEvaluate the adaptability of your potential partner to your future needs.\nThink about cultural compatibility and communications skills [5, 6].\nThink about time zone differences.\nCheck for technologies and knowledge.\nSee how cost-effective they work.\nConsider and evaluate the future of your relationships.\nMeet the employees that will be working with you.\nChecklist Here our checklist we use to discuss a potential partnership:\nHosting and Operations How and where are the servers hosted? Self-hosted or external providers have an impact on the applicable legal context. Update policy and monitoring shall be compatible with corporate governance.\nWhere are the server instances physically located?\nBackup and restore policy including location of backup and how they are protected.\nDevOps aspects: monitoring, alarming, logging, audit logs, security policy. Is the deployment on the various staging areas automated? How is the process of deploying a new version?\nHow is the process of updating a productive application when security alarms are issued?\nDocument your decisions with a formal SLA document.\nSoftware Development Where are the team members located? Are they collocated, in the same area, in the same timezone, distributed over multiple timezones?\nWhich training or certification do they have in the technical stack, programming languages and used tools?\nWhich training or certification do they have in agile and Scrum approaches [4], [5], [6]?\nWhich training or certification do the senior developers and architects have to perform their work?\nWhich languages are the team members proficient in?\nWhich approaches are used for source code management?\nWhere are the source artifacts stored?\nCan our collaborators have read access to all artifacts under source code management?\nGovernance and Methods Which approaches are used for insuring the quality of the written source code?\nHow is the technical documentation such as installation scripts, design decisions, component documents written and managed?\nCould you provide your coding guidelines and documentation guidelines?\nAre modern approaches such as domain-driven design, unit testing, acceptance testing, continuous integration, continuous delivery in place?\nHow can involved people have read access to all artifacts?\nHow do you trace requirements to deliver versions of the product?\nHow do you upgrade an application to a newer version of the technology stack or newer libraries?\nWhich approaches do you use to continuously improve?\nBuild Partnership What is your understanding of a partnership?\nHow would you like to start the partnership between your company and ours?\nLessons Learnt Respect your partner [7, 8]. You will work together for years. Both parties shall be interested in improving the delivered solutions and increasing product success.\nChallenge yourself and your partner to improve the quality and efficiency of delivering digital solutions.\nAll involved companies and people shall harvest the fruits of success.\nAgile approaches are the process for developing software products in the twenty-first century. Your organizations shall be proficient with agile, lean approaches. These frameworks are the most successful approaches for software product development.\nLinks [1] Technical Interviews Marcel Baumann. 2023\n[2] Agile and Nearshore Development Marcel Baumann. 2022\n[3] Evaluate Technical CVs. Marcel Baumann. 2022\n[4] Scrum Master Formation. Marcel Baumann. 2021\n[5] Product Owner Formation. Marcel Baumann. 2021\n[6] Scrum Developer Formation. Marcel Baumann. 2021\n[7] Detecting Agile Bullshit. Marcel Baumann. 2019\nReferences [1] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[2] A. Cockburn, Agile Software Development, Second. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/0321482751\n[3] N. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\n[4] D. Farley, Continuous Delivery Pipelines. 2021 [Online]. Available: https://www.amazon.com/dp/B096YGZVZ9\n[5] J. Appelo, Management 3.0. Addison-Wesley, 2011 [Online]. Available: https://www.amazon.com/dp/0321712471\n[6] H. Hamel and B. Breen, The Future of Management. Harvard Business Review Press, 2007 [Online]. Available: https://www.amazon.com/dp/1422102505\n[7] M. Ballé and F. Ballé, Lead with Respect. Len Publishing, 2014 [Online]. Available: https://www.amazon.com/dp/1934109479\n[8] J. Badaracco, Leading Quietly. Harvard Business School Press, 2002 [Online]. Available: https://www.amazon.com/dp/B005DI8XSK\n1. The demography change and the low unemployment rate make timely recruiting of professional engineers an almost impossible task. 2. Another approach is to build an internal group and develop the solution. The costs of a team with ten collaborators and an investment horizon of five years would be at least 10 MCHF in Switzerland. It is a steep investment that takes time to be planned in a regular organization. The time and the readiness to invest are often not available in a timely manner. ","categories":"","description":"","excerpt":" It is not unusual for businesses to turn to third-party companies when they want help to achieve their goals without increasing internal overhead.\nThis type of outsourcing is especially common for …","ref":"/blog/2023/select-an-agile-software-development-partner/","tags":["agile","organization"],"title":"Select An Agile Software Development Partner"},{"body":" The DevOps movement started to gather momentum with the first DevOps conference held in Ghent, Belgium in 2009 [1].\nThe approach aims to shorten the system development life-cycle and to provide continuous delivery with high software quality. DevOps is complementary with agile software development approaches.\nSeveral DevOps aspects came from the Agile method.\nSeminal books [1, 2, 3, 4] and good practices were published around the same time.\nThe DevOps approach belongs to the regular instruments of professional software developers. Major development platforms, GitHub, GitLab, BitBucket and Microsoft Azure DevOps do support continuous integration, delivery and deployments for years.\nThe DORA metrics define a standard approach to measure the quality and efficiency of a DevOps or agile process implementation in an organization. They were published in 2016. The metrics for throughput are deployment frequency, and lead time for changes. The metrics for stability are mean time to recover and change failure rate.\nThey define a standard approach to measure the quality and efficiency of a DevOps or agile process implementation in an organization. An agile team shall be able to deploy a version of their digital platform multiple times per day. Frequent and economical deployments require the full automation of the integration, delivery and deployment steps.\nBelow, we provide a detailed possible approach to deploying DevOps concepts in your organization. These recipes are helpful for companies with little knowledge and experience in agile and DevOps approaches for digital product development [5].\nContinuous integration In software engineering, continuous integration CI is the practice of merging all developers' working copies to a shared mainline several times a day [2].\nThe workflow is:\nWrite some code, compile and run test locally using a script. No manual activities shall be required to compile the solution and run all tests.\nCommit, push, and compile code in the continuous integration environment. A continuous integration pipeline shall be available. The environment is a clean new one each time the pipeline is triggered.\nRun static code analyzers, unit tests and integration in this integration environment.\nOptionally, trigger continuous delivery if the earlier steps were successful.\nClassical questions and answers FAQ are:\nHow often shall a developer push new code to the shared repository?\nLaggard developers should push multiple times a week. Professional developers push multiple times a day [4].\nWhat steps are part of a continuous integration script?\nThe script shall at least compile the solution. Static code checkers shall be called to validate the changes and ensure minimal code quality. Modern checkers detect syntactic, semantic or security violations. OWASP rules are readily available to start implementing DevSecOps. Unit tests and if reasonable integration shall be executed automatically to verify the changes.\nWhen should the continuous integration script be executed?\nEach time a git push is registered and the repository is updated [3]. You want to guaranty that the repository is in a consistent state. Any developer should be able to check out the repository and start working.\nCan you add manual steps to your continuous integration script?\nNo, manual steps are the death of continuous integration and automation. It is called continuous because it is automated.\nContinuous delivery Continuous delivery CD is a software engineering approach in which teams produce software in short cycles. It ensures that the software can be reliably released at any time and, when releasing the software, without doing so manually. It aims at building, testing, and releasing software with greater speed and frequency.\nThe approach helps reduce the cost, time and risk of delivering changes by allowing for more incremental updates to applications in production. A straightforward and repeatable deployment process is important for continuous delivery.\nClassical questions and answers FAQ are:\nHow can a new delivery package be generated?\nYour continuous integration pipeline should have a delivery step and produce an executable artifact. Your hosting platform provides a service to upload versioned artifacts to a repository. Java artifacts are often stored in Maven Central. Docker images are often uploaded to Docker Hub.\nWhere should we store the migration scripts?\nMigration and configuration scripts are part of the delivery. The installation process shall perform an unattended migration of the configuration and databases. Manual steps are not allowed.\nWhen is a new delivery package created?\nUpon completion of compilation, static verification, unit tests and integration tests, you should create the delivery package.\nWhich preferred format should you use?\nFor complex solutions, the preferred format is a docker image or a kubernetes pod.\nHow do you identify a specific version of a package?\nSemantic versioning is the standard approach to generating legible package identifiers. You are free to adopt another naming scheme for software versioning. Just document your approach. Implement a function so that your users can find out the version of the product they are using.\nContinuous deployment Continuous deployment CD is a software engineering approach in which software functionalities are delivered frequently through automated deployments. Continuous deployment contrasts with continuous delivery. It is a similar approach in which software functionalities are also frequently delivered and deemed to be potentially capable of being deployed.\nAre manual steps good practice for continuous deployment?\nNever perform manual steps. Continuous activities require full automation. Manual steps can only be performed if a trained collaborator is available. Manual activities are expensive, automated activities are cheap.\nWhat should you do if a deployment fails?\nThe environment should perform an automatic rollback to the last working configuration. It is the reason why DORA metrics [1] [2] measure mean time to recover and change failure rate.\nAre commercial platforms available for continuous deployment?\nMajor cloud services Amazon AWS, Google Cloud, Microsoft Azure, Heroku, etc. provide continuous deployment pipelines and integration with product development platforms.\nLogging and Monitoring Site reliability engineering and DevOps practices are standard approaches in any professional organization running digital products productively.\nMonitoring is used as a PDCA loop to continuously improve the construction and delivery process of a productive solution.\nClassical questions and answers FAQ are:\nWhat should be logged?\nThe software architecture document of your solution should document how and what information you are logging. Mapped diagnostic contexts are used to track session and user related actions and log records [4] [5].\nShould logging information be archived?\nThe corporate governance guidelines shall prescribe how long logging information is stored and who can access the data. Logging information should be available to protect your company against legal complaints. The information is also invaluable for security incident analysis [6].\nShould applications be monitored?\nAll productive installations should be monitored through a professional solution. The monitoring approach should detect issues before they impede user processes. You shall document the alarming and recovery process. [7]\nGitHub, GitLab, BitBucket Modern software development departments use these platforms for collaboration and implementation.\nAs stated on GitHub website, we have the following definitions.\nAutomation is a core principle for achieving DevOps success and CI/CD is a critical component. CI/CD consists of continuous integration and continuous delivery or continuous deployment. Put together, they form a CI/CD/CD pipeline. Automated workflows that help DevOps teams cut down on manual tasks:\nContinuous integration (CI) automatically builds, tests and integrates code changes within a shared repository.\nContinuous delivery (CD) automatically delivers code changes to production-ready environments for a final approval.\nContinuous deployment (CD) automatically deploys code changes to customers directly.\nMultiple Toolchains GitHub supports multiple toolchain installation through successive steps in the pipeline.\nBitBucket can only install one toolchain for a pipeline. Additional toolchains must be installed using package management of the operating system of your Docker image. Beware that package managers are dependant of the used distribution. The openjdk regular image uses, for example, microdnf as package manager.\nActual Java JDK Releases GitHub does not support the latest official Java releases on time.\nBitbucket supports all officially released Java versions.\nYou need a platform and automation expert in your development team to harvest the advantages.\nodoo.sh has selected GitHub as their preferred platform. We shall use the GitHub CI/CD/CD approach as defined in odoo.sh to develop and deploy all our application development.\nGitHub provides initial support for Security, DevOps, and agile approaches. We shall evaluate these tools and, if relevant, use them as standard tooling for our Odoo software tailoring and development.\nThe CI tools of GitHub are ideal to implement DevSecOps approaches on odoo modules and internal Python application development. The Sonar scanners verify for example compliance to OWASP vulnerabilities. This verification step can be executed on a repository update to remove vulnerabilities in deployed oddo instances.\nLegacy System Variations Legacy systems must compromise how they implement their pipelines. Source code shall always follow the clean code and DevOps principles. Configuration information stored in the database must often be migrated between staging areas. Please document your automated process and rules.\nModern systems have fully adopted the configuration and infrastructure as code approach. Migrate your approach to automated configuration scripts to configure and initialize your products.\nIncremental migration of database schema and productive data is a well-understood software engineering problem [5] for decades. Tools such as FlyWay or LiquidBase provide enterprise grade productive solutions.\nThe open ERP Odoo platform uses GitHub to offer a clean DevOps process for the Odoo.sh cloud platform. The approach has two components:\nSource code and modules updates follow clean code and DevOps principles. You create new functions in the development branches, merge them in staging branches to test them, and release the changes to the production branch for deployment. The approach is like the staging process of the Linux kernel.\nDatabase updates are performed slightly differently between development and the other staging area. The staging area either gets a copy of the production database or a migrated version of the previous staging area database. This behavior can be configured.\nMerging a staging branch in the production branch only merges the source code. Any configuration changes you made in the staging databases are not passed to the production database.\nIf you test configuration changes in staging branches, and you want them to be applied in production, you have to either:\nWrite the configuration changes in XML data files overriding the default configuration or views in your branches, and then increase the version of your module in its manifest (manifest.py) to trigger the update of the module when you merge your staging branch in your production branch. This is the best practice for a better scalability of your developments as you use the Git versioning features for all your configuration changes. Therefore, you have traceability for your changes. This approach is compatible with clean code and DevOps.\nPass them manually from your staging to your production database, by copying and pasting them. This approach is probably a motive to fire the developer because traceability, auditability and reproducibility are not enforced. Regular corporate governance rules are neglected and could have legal consequences in case of incidents on the production server.\nWhen you want to test the changes of your development branches with the production data, you can either:\nMerge the development branch into your staging branch by dragging and dropping it onto the desired staging branch.\nDrag and dropping the development branch on the staging section title, to make it become a staging branch.\nWhen your latest changes are ready for production, you can merge the staging branch onto your production branch to deploy in production your newest features.\nThe above process is documented for Odoo version 15 under the branches section.\nUnprofessional Odoo Approach Beware that the odoo.sh environment does not hinder amateur developers to do foolish things with git.\nThe quote below is from the official website of Odoo.sh. The statement violates all the rules of clean code, DevOps and professional software development.\nI wishfully hope Odoo organization will mature and remove these misleading statements.\nIf you are bold enough, you can merge your development branches into your production branch as well. It just means you skip the validation of your changes with the production data through a staging branch.\n— odoo.sh 2022 Professional Odoo Approach On the bright side, odoo.sh supports and advocates the following clean code compatible workflow:\nSource code is developed and tested in the development branch. Good practice is to write unit tests and have demonstration data. Each time you push changes, a clean instance is created, the demonstration data loaded and all unit tests are executed. odoo.sh good practices implement TDD, ATDD, and quality gates as expected from a professional approach.\nOnce you are successful, you merge your development branch to the staging branch. The environment will automatically provide a copy of the production database in the staging area. You can test your new functions with production data without impeding the production server.\nOnce you are satisfied with the behavior of the new application with the copy of the production data, you can merge to production. A new production server will be deployed. If the deployment is unsuccessful, it will be rolled back to minimise downtime and to improve mean-time to recover.\nTips and Tricks Professional developers perform only code changes in the development branches. A development branch is often a feature branch.\nStaging and production branches are effectively deployment triggers in the odoo.sh world. Staging branches shall only be used to validate a new version of your product.\nLogically, only one production branch is available.\nodoo.sh abuses git branches as triggers for deployment to staging and production. This approach could historically be justified due to the clumsy way database changes were done in the past.\nMigration scripts shall be robust and test their constraints [8]. For example, if the script expects the existence of a value or an identifier in the database, it should test this integrity rule and abort if an error happens. The goal is to avoid inconsistent states after an update or a migration.\nThe new good practice is finally compatible with clean code, infrastructure as code and DevOps. This approach is promoted in the official odoo.sh documentation. [9].\nAs stated by Odoo, you shall write the configuration changes in XML data files overriding the default configuration or views in your branches. This is the best practice for a better scalability of your developments as you will use the Git versioning features for all your configuration changes.\nLessons Learnt Clean code and DevOps good practices are around for almost two decades. Senior developers in your team should have read the seminal books in this area. These experienced senior designers shall coach younger team members.\nThe InfoQ DevOps and cloud graph show DevOps themes investigated in companies during 2022. Your experts shall apply most or all the approaches documented in the two columns on the right side.\nA professional organization shall have a continuous formation and training path for all collaborators. I currently often have to answer basic questions about DevOps, clean code or Scrum. Quite a few developers do not know basic definitions or how to use Git or GitHub. It is time to read the documentation.\nPlease train and read the documentation. Do not be a noob.\nWe politely ask you to read books and documentation. Avoid receiving an RTFM injunction.\nYou need expertise in Docker, Kubernetes and in your development platform [3]. We recommend initially using GitHub. It is the most used platform. Most developers are versed how to use the provided features.\nIf your company is missing experienced DevOps and agile professionals, it is time to improve your recruitment process [5].\nAll development platforms have extensive support for continuous integration, delivery and deployment. DevOps approaches are well-supported. Often, advanced concepts such as monitoring, DevSecOps or license management are supported. Extensive tutorials and good practices are available.\nJust use the provided tools and approaches to professionally develop and operate your digital platforms.\nLinks [1] How DORA metrics can measure and improve performance\n[2] Using The Four Keys to Measure Your Devops Performance\n[3] DevOps for Small Applications Marcel Baumann. 2021.\n[4] Code Scene as a Crime Scene Marcel Baumann, 2019.\n[5] Detecting Agile Bullshit Marcel Baumann, 2019.\n[6] Introducing DevOps Ideas Marcel Baumann, 2022.\nReferences [1] N. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\n[2] G. Kim and N. Forsgren, DevOps Handbook, Second. IT Revolution Press, 2021 [Online]. Available: https://www.amazon.com//dp/B09G2GS39R\n[3] G. Kim, The Phoenix Project a novel about IT, DevOps, and helping your business win. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/0988262592\n[4] B. Beyer, C. Jones, J. Petoff, and N. R. Murphy, Site Reliability Engineering. O’Reilly Media, Inc., 2016 [Online]. Available: https://www.amazon.com/dp/1492029505\n[5] A. Scott and P. J. Sadalage, Refactoring Databases. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/B001QAP36E\n1. Development organizations had around fifteen years to practice DevOps and adapt their application lifecycle management processes. 2. Grady Booch first proposed the term Continuous Integration CI in 1991. Analyze your git logs and find out if your developers are truly merging working copies to a shared mainlines several times a day. Laggard programmers use git as a backup tool and not as a collaborative development platform. 3. You can either use trunk based development or configure the build trigger for all your feature branches. 4. odoo.sh provides logging support for a deployed solution. Corporate governance often requires that the log files be archived in a separate location. These files are needed when a forensic analysis of a security situation shall be investigated. 5. odoo has an audit module supporting auditing of critical actions initiated through user interactions or external systems. The audit module is somewhat primitive. The audit configuration is performed at the database level and not at functional level. The configuration responsible needs deep understanding of which modules perform specific operations on the database. 6. The logging files and audit traces shall be stored on company premises to fulfill legal and corporate governance rules. 7. odoo.sh provides monitoring for deployed solutions. The monitoring is currently based on Kibana. All productive servers shall be monitored with a similar approach. The monitoring approach shall be tuned based on production incidents. 8. If you write, for example, an SQL database schema migration script, you use clauses such as DROP IF EXISTS. 9. Manual editions through copy and paste are a violation of sound engineering development practices. You lose reproducibility, versioning of a single source of truth, and auditability. Assume that you violate development guidelines and corporate governance. ","categories":"","description":"","excerpt":" The DevOps movement started to gather momentum with the first DevOps conference held in Ghent, Belgium in 2009 [1].\nThe approach aims to shorten the system development life-cycle and to provide …","ref":"/blog/2022/first-steps-devops/","tags":["agile","devops"],"title":"First Steps DevOps"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/gradle/","tags":"","title":"gradle"},{"body":" I love Gradle as the building tool for all my Java projects.\nBut sometimes I was discouraged about how spotty or cumbersome the support for multi-module project is.\nI struggled for years to generate test and code overage reports over modules included in a Gradle Build Tool project.\nGradle finally provides a better approach to generate aggregated test and code coverage reports over multiple modules belonging to the same project. The solution is a huge improvement against the previous quite cumbersome approach described in [1].\nTwo plugins nicely solve this daunting problem for all Java developers preferring Gradle Build Tool over Maven.\nI hope similar solutions will be provided for static code analysers such as SpotBugs, PMD or Checkstyle.\nSelected Approach We use the documented approach to define a separate module to generate the aggregation reports.\nplugins { (1) id 'test-report-aggregation' id 'jacoco-report-aggregation' } dependencies { (2) testReportAggregation project(':net.tangly.bdd') testReportAggregation project(':net.tangly.commons') testReportAggregation project(':net.tangly.core') testReportAggregation project(':net.tangly.dev') jacocoAggregation project(':net.tangly.bdd') jacocoAggregation project(':net.tangly.commons') jacocoAggregation project(':net.tangly.core') jacocoAggregation project(':net.tangly.dev') } reporting { (3) reports { testAggregateTestReport(AggregateTestReport) { testType = TestSuiteType.UNIT_TEST } testCodeCoverageReport(JacocoCoverageReport) { testType = TestSuiteType.UNIT_TEST } } } 1 Load the plugin for test aggregation report and the test coverage aggregation report. 2 Declare the modules which results should be aggregated. We have to declare the same subprojects for each plugin separately. 3 Configure the aggregation reports. We call the following goals to generate the aggregation results:\n./gradlew testAggregateTestReport (1) ./gradlew testCodeCoverageReport (2) 1 Generates an aggregate report over all unit tests. Run before the gradle test. 2 Generates a code coverage aggregate report over all unit tests. Run first gradle jacocoTestReport. Learnings Gradle provides test results aggregation and test coverage aggregation as two separate plugins. The drawback is that we have to configure both plugins with the same information.\nThe plugins make the assumption that modules are called from an application subproject. The scenario of a mono repository containing a set of libraries is not covered.\nWe would encourage the plugin authors to provide a default configuration option based on the gradle settings defined in settings.gradle. The modules are defined in the file and could be retrieved by the plugin using the Gradle API.\nApply the cardinal rule of good user interface design. Do not ask the user to give information already available to the application.\nThe new plugins are a huge simplification over the cumbersome and almost magic statements we needed before to create these reports. Gradle ecosystem is still work in progress to support multi-module Java projects [1] [2].\nLinks [1] Gradle 7 Goodies\n[2] Gradle 6.4 Finally Supports Java Modules\n","categories":"","description":"","excerpt":" I love Gradle as the building tool for all my Java projects.\nBut sometimes I was discouraged about how spotty or cumbersome the support for multi-module project is.\nI struggled for years to generate …","ref":"/blog/2022/multi-module-test-reporting-with-gradle-7.x/","tags":["java","gradle"],"title":"Multi-Module Test Reporting with Gradle 7.x"},{"body":" Domain-Driven Design DDD has been around since Eric Evans published his book about the subject in 2003 [1].\nVernon Vaugh published powerful approaches how to implement DDD concepts into a software solution [2, 3].\nHow do you validate and test your DDD digital solutions?\nBehavior Driven Development BDD is an inversion how systems are often developed. In some ways, it is an extension of Test Driven Development TDD approach to the whole application.\nAcceptance criteria are coded as automated acceptance tests. The software is written to fulfill these acceptance tests.\nThis approach integrates well with agile frameworks. [1]. The product owner can accept the story based on the test description enforcing his acceptance criteria.\nThe documentation describing the acceptance tests is automatically generated. These documented acceptance tests are the requirements of the application. This approach is often called specification by example [4].\nI strongly advocate that the developers write the acceptance tests and generate the legible description of the tests.\nConstraints The BDD approach works well when Domain Driven Design is applied as described in the seminal reference texts.\nThe acceptance tests are often specified against a Bounded Context.\nIt is cumbersome and difficult to test Anemic Domain Model. Rich Domains are models that have full control of their data and do not rely on external objects to manipulate them. Anemic Domains are models that rely on other classes to validate their data.\nAn elegant design approach such as CQRS hugely simplifies the definition and implementation of acceptance tests.\nI want to keep the understanding of the strategies simple. The Domain Events strategy is nothing more than an event fired from a Context X microservice with information that may interest other contexts.\nThis strategy is used when we would like to have asynchronous behavior between our contexts, since the context responsible for publishing the message will not expect a return. For instance, the action that the consumer will take based on this event does not matter to him. For it is always important to think about notifying past actions.\nEvolution A tension exists who is in charge to write the acceptance tests. Experts initially advocated that the product owner or the business analysts should write the tests to validate the work of the development team. Solutions such as Gherkin and Fitnesse were developed to support this approach.\nExperience showed the difficulty of maintaining and refactor test sets written by non-developers. I strongly advocate product owners shall formulate the acceptance criteria. Developers shall always write the acceptance tests and guarantee a reasonable quality of the created code. Use frameworks based on a programming language instead of structured text approaches. Modern development platforms provide powerful refactoring tools for source code but almost none for a regular text.\nRefactoring and clean code principles shall permeate a modern software development approach. Avoid archaic solutions requiring expensive manual activities.\nExperiments We are using a small framework to write acceptance criteria automated tests and create the associated documentation.\nThe library is available as a Java net.tangly:bdd:\u003cversion\u003e Java distribution. It is published on maven central.\nA documentation is available under BDD Documentation.\nA test uses the given, when, then structure and has the following form:\n@Scenario(\"Sell some black sweaters in stock to a customer\") void sellBlackSweaters(@NotNull Scene scene) { final int NrBlueSweaters = 4; final int NrBlackSweaters = 5; final int NrSoldBlackSweaters = 3; scene .given(\"The store is stocked with sweaters\", s -\u003e create(s, NrBlackSweaters, NrBlueSweaters)) .and(\"has 5 black sweaters in stock\", s -\u003e assertThat(store(s).blacks()) .as(\"Store should carry 5 black sweaters\").isEqualTo(NrBlackSweaters)). .and(\"4 blue sweaters in stock\", s -\u003e assertThat(store(s).blues()) .as(\"Store should carry 4 blue sweaters\").isEqualTo(NrBlueSweaters)). .when(\"The customer buys 3 black sweaters\", s -\u003e store(s).sellBlack(NrSoldBlackSweaters)) .then(\"The store should have 2 black sweaters in stock\", s -\u003e assertThat(store(s).blacks()) .as(\"Store should carry 1 black sweaters\") .isEqualTo(NrBlackSweaters - NrSoldBlackSweaters)) .and(\"4 blue sweaters in stock\", s -\u003e assertThat(store(s).blues()) .as(\"Store should carry 4 blue sweaters\").isEqualTo(NrBlueSweaters)) .run(); } Tests are executed as regular JUnit tests. You can easily integrate them in your CI/CD pipeline as integration tests.\nThe generated documentation is [2]:\nAs a store owner, I want to update the stock when I am selling sweaters to customers.\ntags: 'Release 1.0'\nScenario: Sell some blue sweaters in stock to a customer given The store is stocked with sweaters and has 5 black sweaters in stock and 4 blue sweaters in stock when The customer buys 3 blue sweaters then The store should have 5 black sweaters in stock and 1 blue sweater in stock.\nA report example is available under Report Example.\nWe are experimenting with projects to find out if this approach nurtures legibility and conversation between developers and users. The results are mixed. The integration tests are not easier to write with the library instead of regular JUnit 5 tests. The generated documentation and available JSON reports are valuable. The question is how valuable are they?\nWe still try to define metrics to valuate the usefulness of living documentation describing the requirements of the product. The usual approach is either to write a huge Microsoft Word document or use a specification tool storing the information in a database. The advantages of living documentation still need to be quantified.\nReferences [1] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[2] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n[3] V. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\n[4] G. Adzic, Bridging the Communication Gap. Neuri Limited, 2009 [Online]. Available: https://www.amazon.com/dp/B008YZ993W/\n1. Scrum advocates recognize the compatibility with their framework. Each story in the product backlog shall have acceptance criteria defined under the product owner’s responsibility. The key is to formulate the acceptance criteria so that they can be coded as automated tests. 2. A JSON export is also available to tailor the generated documentation to your project needs. ","categories":"","description":"","excerpt":" Domain-Driven Design DDD has been around since Eric Evans published his book about the subject in 2003 [1].\nVernon Vaugh published powerful approaches how to implement DDD concepts into a software …","ref":"/blog/2022/behavior-driven-design/","tags":["java","architecture"],"title":"Behavior Driven Design"},{"body":" Modern Java is quite a departure from the traditional Java available at the beginning of the millennium.\nThe most visible change is certainly lambda expressions and stream, enabling a more functional programming approach in Java.\nFunctional programming is a paradigm that supports developers to think in terms of functions instead of classes. Functions are stateless and without side effects. Avoiding state can lead to better software, especially in high-performance, concurrent applications [1]. Functional programming is also a natural fit for multicore parallel programming. The paradigm is the best way to squeeze more performance out of modern CPUs.\nThe Java Streams library allows algorithms to be coded declaratively meaning the developer specifies what they want, not how they want it. This improves code quality because all the plumbing code is handled by the library itself. The fluent interface style is just a way to express streams algorithm in one continuous line.\nAdditional modern constructs reduce boiler code and often eliminate known potential errors.\nHere a set of extensions we use daily in our code.\nYou can find additional examples in the introductory book Java by Comparison [1] and the more advanced Effective Java [2].\nTry with Closeable Resources Automatic resource management was introduced in Java 7 in 2011. Better handling of final variables was added in Java 9 in 2017. Local variable type inference with the var keyword was added to Java 10 in March 2018.\nThe AutoCloseable interface is the API extension you should use to declare any resource type in your solution.\nA nice feature of the solution is the support of suppressed exception hierarchy to access all exceptions potentially thrown during the closing operations.\ntry (Writer writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) { (1) writer.write(features.toString(4)); } (2) 1 Declares an auto-closeable resource in the block context. 2 The auto-closeable resource is closed by Java runtime when leaving the block either through regular flow or when an exception is thrown. The programmer can never forget to close the resource. Streams You shall always use streams to manipulate data collections. Stream operators support similar functionality as SQL dialects.\npublic String firstname() { return card.getProperties(Property.Id.FN).stream() .map(Property::getValue) .map(o -\u003e o.split(\";\")[1]) .findAny() .orElse(null); } Sequences of values are also streams. Simply use the Stream.iterate(…​) method. Therefore, a for loop is easily transformed into a stream of operations.\nMost imperative operations, such as conditional and loop statements, can be rewritten as stream operators.\nStreams are often more legible and compact. The approach moves the developers from imperative programming to a more functional programming style.\nModern Java code has seldom loops and conditional statements.\nFunctional Programming Null values are acknowledged as a language design fault in modern software engineering.\nYou should never return a null value from any method. Either you give back an empty collection or an optional object for single values.\nOptional\u003cOrganization\u003e findOrganizationById(String identifier) { (1) return (identifier != null) ? Provider.findById(realm.organizations(), identifier) : Optional.empty(); } Collection\u003cSplit\u003e splites{ this.splits = (splits != null) ? List.copyOf(splits) : Collections.emptyList(); (2) } 1 Returns an optional with a value if found or an empty optional. The optional can be processed as a stream instead of using a conditional statement. 2 Returns either a list of items or an empty list. The result can be processed as a stream instead of using a conditional statement. Streams provide the flatmap operator to elegantly handle optional values in collection processing.\nRemember that Optional\u003cT\u003e is almost an implementation of a monad. Time to study the concepts of functional programming and lambda calculus [3].\nYou are really starting to program using functional programming idioms if you:\nPass lambda expressions or single abstract method SAM instances as parameters of some methods.\nReturn lambda expressions or single abstract method SAM instances in some methods.\nJust scan your code and find out how often you write such constructs.\nExplore the java.util.function package to increase your functional programming skills.\nPattern Matching Pattern matching is another approach for functional programming. New versions of Java support more related constructs.\nThe extension of the switch statement into a powerful switch expression was a game changer.\nPattern matching supports:\nSelect a transformation based on the variable type using the instanceof operator. The simplified and type-aware variable declaration is provided.\nRefine the selection though when clause to differentiate the transformation.\nRecord deconstruction gives access to field variables without having to call accessor methods.\nRecords and Sealed Types Sealed types perfectly model a closed inheritance hierarchy. You can control your bounded domain and inhibit any client to change it.\nRecords are immutable objects. Records are the perfect construct to implement value objects as described in domain-driven design.\nBusiness logic is implemented as additional methods. The fact that the value objects are also immutable makes the business operations both thread-safe and side effect free.\npublic sealed interface LList\u003cT\u003e permits LList.Nil, LList.ImmutableList { boolean isEmpty(); T first(); LList\u003cT\u003e rest(); } record ImmutableList\u003cT\u003e(@NotNull T first, @NotNull LList\u003cT\u003e rest) implements LList\u003cT\u003e { @Override public boolean isEmpty() { return false; } @Override public String toString() { return first() + (rest().isEmpty() ? \"\" : \", \" + rest()); } } Factory methods can automatically be created using Lombok annotations.\nModules Modules were introduced with Java 9, which was released in September 2017.\nA module is a group of closely related packages and resources along with a new module descriptor file.\nWhen we create a module, we include a descriptor file that defines several aspects of our new module [4]:\nName the name of our module.\nDependencies a list of other modules that this module depends on.\nPublic Packages a list of all packages we want accessible from outside the module.\nServices Offered we can provide service implementations that can be consumed by other modules.\nServices Consumed allow the current module to be a consumer of a service.\nReflection Permissions explicitly allows other classes to use reflection to access the private members of a package.\nThe approach describes in plain Java the coupling and cohesion principles.\nmodule net.tangly.fsm { exports net.tangly.fsm; exports net.tangly.fsm.dsl; exports net.tangly.fsm.utilities; exports net.tangly.fsm.eventbus; exports net.tangly.fsm.eventbus.imp; requires org.apache.logging.log4j; requires static transitive org.jetbrains.annotations; } Goodies Loom Threads Java 19 introduces lightweight threads in the library. You can now program massively multithreaded applications with hundreds of thousands of threads without taxing the JVM or the operating system.\nJavaDoc code snippets Code examples in your java documentation are declared as a code snippet in a regular Java class. Your unit tests ensure that all your documented code snippets compile and run without trouble.\nJShell You have access to a Read-Evaluate-Print Loop REPL to test new Java code.\nVector Optimizations You have access to the SIMD modules in your CPU directly from your Java code. Speed-ups can be tremendous. The code is still portable for all supported Java platforms.\nReferences [1] S. Harrer, J. Lenhard, and L. Dietz, Java By Comparison. Pragmatic Bookshelf, 2018 [Online]. Available: https://www.amazon.com/dp/B07CLFTVZS\n[2] J. Bloch, Effective Java, Third. Addison-Wesley Professional, 2017 [Online]. Available: https://www.amazon.com/dp/B078H61SCH\n[3] V. Subramaniam, Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions. The Pragmatic Programmers, 2014 [Online]. Available: https://www.amazon.com/dp/B0CJL7VKFL\n[4] S. Mak, Java 9 Modularity. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491954167\n1. The record construct was added to Java 15 in March 2020. Records are shallow immutable objects. You can use them in pure functions to avoid unwanted side effects. ","categories":"","description":"","excerpt":" Modern Java is quite a departure from the traditional Java available at the beginning of the millennium.\nThe most visible change is certainly lambda expressions and stream, enabling a more functional …","ref":"/blog/2022/modern-java-constructs/","tags":["java","architecture"],"title":"Modern Java Constructs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/vaadin/","tags":"","title":"vaadin"},{"body":" Vaadin is an ideal solution if you are a Java developer and wants to provide a user interface for your product. Vaadin is a framework to create graphical user interfaces using plain Java, or any JVM-based language for that matter.\nYou develop in Java, and the framework takes care of all the rest. It generates the client-side code, and the communication between the client-side code in the browser and the backend code on the server.\nYour team only needs to program in the Java stack [1]. Your developers focus on their key competencies. This is a huge advantage.\nProficiency is difficult in one technology stack.\nOnly exceptional individuals really master multiple development environments. You can probably not afford to hire them.\nThe Vaadin framework is optimal for internal applications.\nIt scales up to a few thousands of active users.\nProgressive Web Applications PWA User interfaces shall accommodate various screen resolutions. Ideally, you should support phone displays, tablets, and high-resolution workstations. Progressive Web applications provide the functionalities to realize such solutions.\nVaadin provides first-level support for PWA functions.\nThe regular Vaadin distribution provides the expected regular visual components.\nThe Vaadin Component Factory distributes more specialized components. These components were before created for a particular customer and later released to the community.\nI use the SO-Charts components to draw various charts. This library is a thin wrapper for the Apache project ECharts.\nDeveloping with Vaadin The most popular IDE for Java is currently the IntelliJ IDEA tool. You develop Vaadin applications just as regular Java applications.\nI use Gradle Build Tool as build tool. This approach is well-supported in the IDE. The Vaadin company still seems to prefer Maven as build tool. You find Gradle examples created by the developer of the Karibu library.\nI prefer to deploy Vaadin application with an embedded Web Server. The approach has two advantages. First, debugging the application is easier and snappier. Second, the modern production environment builds on Docker images and Kubernetes. You will never deploy more than one solution on a container instance.\nVaadin components do not hinder domain-driven design approaches.\nTesting with Karibu Digital solutions are developed using agile approaches. They are often deployed multiple times every week in production.\nThe unit and integration tests are run automatically before each deployment. The successful execution of the test suite guarantees no known errors are deployed.\nThe Karibu test library efficiently supports developers writing Vaadin integration or end-to-end automated tests.\nKaribu testing is here to perform:\nContainerless testing You do not need to launch the servlet container. Karibu creates a Vaadin Session, the UI and other necessary Vaadin classes straight in the JVM, which runs your JUnit tests.\nBrowserless testing You look up components straight from UI.getCurrent(), bypassing the browser and the JavaScript bridge completely. You directly call methods on your server-side View classes and on the server-side Java Vaadin components.\nLearning Vaadin Vaadin provides training videos.\nA certification program validates your learning.\nExtensive documentation and tutorials are published on their website. The current examples emphasize the usage of Maven as a build tool. I prefer Gradle Build Tool and had to search the Internet to find clues how to build the examples with Gradle.\nConcrete examples of how to realize specific functions with Vaadin are collected in the cookbook.\nBeware of selecting examples using the current version of the framework. Legacy code uses Vaadin 8 and is useless for modern solutions.\nVery cool is the student program. I am currently trying to introduce computer science bachelor students to the advantages of Vaadin. Students are bombarded with various technology stacks. Java and Vaadin is a single Java-based approach to write more easily semester and bachelor development assignments. The drawback is it is less sexy than React, VueJS, or perhaps Angular.\nVaadin supports the latest version of Java in a timely manner [2]. I acknowledge that the Vaadin company is rather slow to adopt newer Java standards. It took them years to acknowledge the Jakarta renaming scheme footnot:[The renaming was necessary because Oracle screwed up. The delaying of Vaadin means you cannot use the latest version of Jetty or similar frameworks].\nLinks Why I (still) love Vaadin. Nicolas Fränkel. 2020.\n5 Reasons Why Enterprises Use Vaadin For Their Web Application UI Needs. Ankurman Shrestha .2018.\nVaadin Accessibility\n1. It is a modern user interface framework and uses Modern Java as a programming language. It easily superseeds old 4GL approaches such as dBase, Clipper, FileMaker, Visual Fox Pro, PowerBuilder, Borland Paradox, 4th Dimension, or Oracle Forms. 2. The same can be said for the Gradle Build Tool since it supports toolchains configuration. ","categories":"","description":"","excerpt":" Vaadin is an ideal solution if you are a Java developer and wants to provide a user interface for your product. Vaadin is a framework to create graphical user interfaces using plain Java, or any …","ref":"/blog/2022/vaadin/","tags":["java","architecture","vaadin"],"title":"Vaadin"},{"body":" In an increasingly technology-focused world, the demand for businesses to digitize has grown dramatically.\nSo, what does it mean to digitize your business?\nEssentially, it means incorporating technology into your business operations to increase efficiency, enhance customer experience, and boost sales.\nThis could mean developing a mobile application for your startup, transitioning into ecommerce, offering mobile payment options, and more.\nThe goal of digitizing your business is to keep up with the rapidly changing economy by offering your customers more ways to access your business, and streamline daily operations. Therefore, the methods you choose to digitize your business can vary based on your startup’s needs.\nAs a consumer, we know digital approaches work. I can buy an airplane ticket and travel through the world without any paper documents. I can book hotel rooms and museum visits without any paper recipes. I can buy a household and an ebook library without printing out any paper forms. Paper disappeared in the ecommerce world.\nStart small. Optimize your internal process with technology.\nI challenge you. Your company does not need any printers, fax machines or landlines.\nEliminate Your Printer You do not need a printer in your company. Send your documents as PDF documents. Archive these PDF files electronically.\nPrinters are not ecological. They are costly in natural and human resources.\nOur company tangly never possessed any printer, fax machine or phone landline.\nOn average, we need to print around three documents each year. Governmental authorities always required these documents.\nWe did not print any documents in the years 2021 and 2022. This is a powerful contribution to sustainability.\nFax Machines are obsolete I cannot understand why anybody wants to send information using a fax machine.\nElectronic communication, PDF documents and digital photography are better solutions.\nSimply use emails or chat solutions.\nLandlines were used in the last millennium Teams are distributed over the world. Collaborators often work at home or at co-working offices. Why should you use a landline?\nMobile first is the sole logical answer [1].\nUse a mobile phone for your work interactions. Better is to set up channels on Slack or Discord applications.\nEliminate Your Paper Archive I always found very strange that people print their documents and store them in cabinets.\nThey never heard about digital backup with redundancy to avoid loss through incidents. Store your files in the cloud to implement a disaster recovery process.\nNaturally, all confidential information shall be encrypted with a company encryption key. We are using GPG as a simple and secure approach to hide confidential information from prying eyes.\nYou can exchange documents and emails securely with collaborators and customers using GPG and S/Mime solutions.\ntangly uses macOS. We bought the GPG email extension to sign and cipher all communications. We also support the S/Mime-based approach.\nLessons Learnt Printers and fax machines are really obsolete. We never add a true need to buy one in the last eight years [2].\nA paper archive can now slowly be destroyed. Swiss federal and state laws were finally adapted to acknowledge that digital archives are legally allowed.\nWe never own any landlines. Mobile phones are now fully accepted since telecommunication companies offer flat rate contracts. More and more communication is now held over internet communication solutions.\nAll contracts and invoices [3] are sent as electronic signed PDF documents [4].\nNative digital people often do not anymore possess paper books, CDs, or printed photos. Instead, they use the digital equivalent. It is more ecological, cost-effective and is additional features.\nPhysical money has disappeared in the context of companies. All financial transactions are electronic.\nEvery time you use a printer, a fax machine or a scanner, you have identified a process you should digitize.\nAnalog paper and digital processes are not compatible.\nLinks [1] tangly Six Years\n[2] tangly Five Years\n[3] tangly Digital Company\n[4] Found a Limited Liability Company\n1. The cost of mobile connectivity has tremendously decreased the last years. Often the cost of a mobile subscription is lower than the cost of a landline. 2. if a partner or a customer insists receiving a paper form, just send him a PDF document and let him print it out. Ask yourself if a company requesting paper documents is an organization you want to work with. 3. Digital first approach allowed us to implement Swiss QR Code for invoicing with an investment of one working day. The support of Factur-X for B2G processes was around two days effort. 4. We do not digitally sign our documents. Recognized digital certificates are currently way to expensive in Switzerland. Therefore, almost nobody is using this approach. ","categories":"","description":"","excerpt":" In an increasingly technology-focused world, the demand for businesses to digitize has grown dramatically.\nSo, what does it mean to digitize your business?\nEssentially, it means incorporating …","ref":"/blog/2022/eliminate-your-printer/","tags":["agile"],"title":"Eliminate Your Printer"},{"body":" Agile Experiences Context Scrum is the industrial standard to create and develop awesome digital products.\nScrum Scrum is a minimalist framework empowering your organization to deliver digital products.\nScrum is an additive framework. Please be pragmatic and professional.\nRoles: Product Owner, Scrum Master, Team Member\nEvents: Sprint, Sprint Planning, Daily Scrum, Review, Retrospective, Backlog Refinement\nArtifacts: Product Increment, Product Backlog, Spring Backlog, Definition of Done\nTechnical Agile and Scrum\nProduct Development\nGood Practices\nAnti-Patterns: Definition of Ready, Project Leader, Milestones, Quality Group, Undone Work\nScrum and LeSS provide proven approaches and good practices how to efficiently work on one product line with five to hundreds of product developers.\nProduct Development A successful digital product shall fulfill customers' expectations.\nRoadmap with a horizon of maximum 2 years\nRelease Plan with a horizon of maximum 1 year\nStakeholder Map is crucial for onboarding\nRisk Management\nCustomer Journey and Design Thinking\nStory Mapping\nUsability\nLegal Aspects\nTechnical Agility Success with Scrum is often determined how fluent your software development teams are with technical agility. In the end, you shall deliver a working piece of software delighting your customers.\nSoftware Craftsmanship [1, 2]\nSoftware Engineering [3, 4, 5]\nDevOps: Continuous Integration, Continuous Delivery, Continuous Deployment, Git, Living Documentation, Automated Quality Insurance\nClean Programmer [6, 7, 8, 9, 2]\nEvolutive Architectures [10, 11, 12]\nFitness Functions [10]\nDocumentation Good Practices\nContinuous Improvements References [1] S. Mancuso, The Software Craftsman. Prentice Hall, 2015 [Online]. Available: https://www.amazon.com/dp/0134052501\n[2] R. C. Martin, Clean Craftsmanship. Addison-Wesley Professional, 2021 [Online]. Available: https://www.amazon.com/dp/B095C16LSW\n[3] D. Farley, Modern Software Engineering. Pearson Education, Limited, 2022 [Online]. Available: https://www.amazon.com/dp/B09GG6XKS4\n[4] T. Winters, T. Manshreck, and H. Wright, Software Engineering at Google : Lessons Learned from Programming Over Time. O’Reilly Media [Online]. Available: https://www.amazon.com/dp/B0859PF5HB\n[5] R. L. Glass, Facts and Fallacies of Software Engineering. Addison-Wesley Professional, 2002 [Online]. Available: https://www.amazon.com/dp/0321117425\n[6] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[7] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[8] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[9] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[10] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\n[11] M. C. Feathers, Working Effectively with Legacy Code. Prentice Hall, 2004 [Online]. Available: https://www.amazon.com/dp/0131177052\n[12] L. Hohmann, Beyond Software Architecture. Addison-Wesley Professional, 2003 [Online]. Available: https://www.amazon.com/dp/B003YL3P0E\n","categories":"","description":"","excerpt":" Agile Experiences Context Scrum is the industrial standard to create and develop awesome digital products.\nScrum Scrum is a minimalist framework empowering your organization to deliver digital …","ref":"/expertise/expertise-agile/agile-experiences/","tags":["agile"],"title":"Agile Experiences"},{"body":" How often have you experienced a well-defined and understood software architecture on paper? And it falls apart when developers start implementing it?\nWhile re-architecting recently legacy components in an application, I experienced the same.\nAs more and more developers joined the team, it became a constant routine to make them aware of the design and how to adhere to it.\nI know some of you may say, Why not control the implementation during code-review sessions?. Technically you can, but in that case, the reviewer becomes the bottleneck in the whole SDLC process.\nWhat if there was something that could enforce design constraints in the form of the test cases? The violation of the agreed-upon design principles is marked as a failed build.\nMy quest led me to a test library for architecture called ArchUnit. It enforces architectural constraints in Java projects.\nIdea ArchUnit is a test library and allows us to validate whether a solution adheres to a given set of design considerations or architecture rules.\nThe product is a free, simple and extensible library for checking the architecture of your Java code using any plain Java unit test framework. The license is the open source Apache 2.0. The support for JUnit 5 is very good.\nArchUnit can check dependencies between packages and classes, layers and slices, detect cyclic dependencies, and more. It does so by analyzing the given Java bytecode after importing all classes into a Java code structure.\nUse Architectural Constraints You first need to import the library in Gradle.\nimplementation com.tngtech.archunit:archunit:1.0.0 (1) 1 For real projects you should describe your dependencies in a catalog file. The definition of a validation test is easy.\nBelow an architectural rule to respect the Domain-Driven Design concepts in our project [1].\n@AnalyzeClasses(packages = \"net.tangly.erp.collaborators\") (1) public class DomainRules { (2) static final String SERVICES = \"Services\"; static final String PORTS = \"Ports\"; static final String DOMAIN = \"Domain\"; @ArchTest static final ArchRule layersRule = layeredArchitecture().consideringAllDependencies() .layer(DOMAIN).definedBy(\"..domain..\") .layer(SERVICES).definedBy(\"..services..\") .layer(PORTS).definedBy(\"..ports..\") .whereLayer(DOMAIN).mayOnlyBeAccessedByLayers(SERVICES, PORTS) .whereLayer(SERVICES).mayOnlyBeAccessedByLayers(PORTS) .whereLayer(PORTS).mayNotBeAccessedByAnyLayer(); } 1 Declare the root package for the bounded domain classes. The bounded domain should be defined as a Java module. 2 The domain rules class shall be declared as part of the domain library of your application. These rules are defined in the library component and enforced in all the Bounded Domains we implement through the following unit tests.\n@AnalyzeClasses(packages = \"net.tangly.erp.collaborators\") public class ArchitectureTest { (1) @ArchTest static final ArchTests domainRules = ArchTests.in(DomainRules.class); (2) } 1 The class is located in the unit test folder and will be executed with JUnit 5 as part of the unit test CI step. 2 Import all the rules defined in the domain rules class and apply them to the bounded domain collaborators. We can insure architectural constraints to all bounded domains defined in a product. The constraints are defined only once in a common module.\nThe huge advantage is the integration of architectural validations in the continuous integration pipeline [2] [3]. No expensive human activities are required to enforce these rules [4].\nLinks [1] Software Structure with DDD\n[2] Introducing DevOps Ideas\n[3] DevOps for Small Applications\n[4] Agile Architecture\n","categories":"","description":"","excerpt":" How often have you experienced a well-defined and understood software architecture on paper? And it falls apart when developers start implementing it?\nWhile re-architecting recently legacy components …","ref":"/blog/2022/archunit/","tags":["agile","architecture"],"title":"ArchUnit"},{"body":" You developed a new digital product for an internal or external customer. Your solution is awesome.\nThe product is released to delighted users. Your users love your solution.\nThe project is now winding down and closing activities are initiated. The customer organization shall take ownership of all product related artifacts. The handover is a vital part of closing a project [1].\nYour customer paid for the development and own the produced artifacts.\nYou are legally bound to deliver source code, binary artifacts defining the executable application, credentials and documentation to your customer. The ownership transfer is either an explicit part of your contract or implicit through the contract type you are working with.\nRemember, a product development is a work contract.\nWork contracts[2] are a legal and rather well-defined contractual item in Europe. Expected deliveries are already defined in legal texts or through jurisprudence. Your customer has the right to refuse final payment until delivery.\nHow can you cleanly transfer your results to your customers? How can you document the transfer process and provide an acceptance protocol?\nWhich steps shall you implement to delight your clients?\nMigration Steps Most development initiatives are using GitHub, GitLab or Bitbucket. The steps are the same for all these platforms.\nYou should deliver a consistent [3] repository to your client.\nVerify that the repository contains the final state of your solution. Talk with your developers to insure all changes are checked into the git repository.\nUpdate your licenses and copyright. Verify if you have to talk with your legal department.\nValidate continuous integration and delivery pipeline. Run your CI/CD pipeline and check the deliverables [4].\nValidate static documentation website creation [5].\n+ Generate your static website. Use a spellchecker for orthography, and a link checker for your links.\nTag the artifacts to insure traceability between your binary delivery and the source code. You still need an official acceptance form from your client. Do not forget to document your tagging conventions. Are you using semantic versioning?.\nTransfer your repository to the new organization. You should formally document the acceptance of the produced artifacts and handover of all results. Good practice is to sign the transfer protocol. Relinquish formally ownership of the repository and responsibility to your customer.\nCelebrate the successful completion of your project.\nUpdate Your Copyrights The chosen copyrights shall allow the new owner to take over and change all artifacts.\nRepository Copyright GitHub and GitLab strongly support the definition and publishing of the license under which the whole project is published. Examples of open source and closed source licenses are available on the Internet. Please never write your own license text for source code or documents [6]. You are not a lawyer and your text will most certainly contain legal errors or miss required statements.\nSource Code Copyright Beware that source code is often under similar copyright rules as books and pieces of art. Regular infringement laws apply if you use, copy or modify source code. Therefore, any source code file has an implicit or an explicit copyright. Good practice is to have a banner in each source file stating the short version of your copyright.\nDocumentation Copyright Documentation, drawings and sketches are also under copyright legislation. Please add your copyright to all your documents [3].\nRespect the licenses of the open source components you are using.\nThe free software foundation and similar entities consequently sue organizations cheating on open source licenses. Avoid loosing your reputation and money for infringing copyrights.\nUpdate Your Documentation I strongly suggest using actual good practice documentation as static websites to publish your documentation. The huge gain is git based tracking to map a documentation set to a specific release of your solution. Auditability and tracing of the documents are implicitly provided through version management system features [7].\nThe transfer is more complex if your website is published under a custom domain.\nYou must remove your CNAME redirection in your domain record. The receiving party can create a new CNAME redirection in their domain record associated with their company.\nAdditional steps to validate the newly configured domain and enable SSL are well-described on the GitHub site.\nRegister your custom domain in the GitHub pages repository.\nReserve your custom domain in GitHub to block other users to steel your domain if it is once down [2]. Beware you need to add a TXT record in your domain. Bigger companies are quite slow to process such a request.\nEnable HTTPS to be compliant with good practices [2]. GitHub will generate and deploy at no costs a certificate for your custom domain.\nOnce you have created a CNAME record mapping your custom domain to the GitHub pages website address, validate your custom domain in GitHub.\nTest your new site to check that all configuration changes are working. Upon successful deployment, add a redirect page on your old website to support all your users who stored an old link [8].\nBeware that DNS modifications need up to 24 hours to propagate. I strongly advocate performing such changes during the weekend.\nHere is a simple example of a redirect page for your old website.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta http-equiv=\"refresh\" content=\"0; URL=https://blog.tangly.net\" /\u003e \u003ctitle\u003eRedirect to Our New tangly Components Website\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eThis page has been moved. If you are not redirected within 3 seconds, click \u003ca href=\"https://blog.tangly.net\"\u003eRedirect to our new tangly Components website\u003c/a\u003e\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Update Your CI/CD Pipeline The continuous integration and delivery pipelines [1] shall build all expected artifacts associated with the product. Ideally the process shall follow DevOps good practices and be automated.\nIf not document thoroughly the manual steps.\nTransfer Your GitHub Repository The transfer of a repository from one organization to another one is well-supported in GitHub [1]. The whole transfer process is completed in less than five minutes.\nYou need your credentials to log into GitHub and confirm the transfer action. The owner of the receiving organization must confirm the transfer to complete the process.\nDevelopers shall update their git repository remote definition in their local repository.\ngit remote -v (1) git remote set-url origin-github git@github.com:repository-name.git (2) git remote -v (3) 1 List all the remotes of your local git repository. 2 Sets the new URL of the remote origin-github using ssh as transfer protocol. 3 Check that the changes to your remotes are correct. Now you can pull from and push to the new location. Your remote can have a different name such as origin. Look at the URL after the remote name to identify the adequate remote.\nGood Practices Do not transfer a product with known security flaws to another party. Please correct the issues.\nGitHub, SonarQube [4] and other tools provide convenient ways to detect vulnerabilities. Integrate these tools to support the delivery of an application without known vulnerabilities or OWASP smells [9].\nLessons Learnt Development teams seldom understand the legal implications of copyright infringements. All source code files must have a clear copyright banner. Documentation artifacts shall also have an explicit copyright notice. Any files without a copyright will legally be handled as implicitly owned by the authors of the source code or documentation. The whole repository shall also carry an overall license files.\nIf you are using pictures in the documentation, clarify and track the copyrights of the used images.\nThe copyright files for used components shall be made available in the repository as requested by the authors of these components. Care should be taken to avoid mixing non-compatible licenses in the same product. Beware especially of the consequences of using a GPL or AGPL library in your product.\nTools such as GitHub or GitLab increase efficiency if you are adopting DevOps practices when working with them [2, 3, 4].\nLinks [1] Transferring a GitHub Repository\n[2] Configuring Custom Domain\n[3] Creative Commons\n[4] SonarQube\n[5] GitHub Dependabot\nReferences [1] J. Humble and D. Farley, Continuous Delivery. Addison-Wesley Professional, 2010 [Online]. Available: https://www.amazon.com/dp/0321601912\n[2] N. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\n[3] G. Kim and N. Forsgren, DevOps Handbook, Second. IT Revolution Press, 2021 [Online]. Available: https://www.amazon.com//dp/B09G2GS39R\n[4] B. Beyer, C. Jones, J. Petoff, and N. R. Murphy, Site Reliability Engineering. O’Reilly Media, Inc., 2016 [Online]. Available: https://www.amazon.com/dp/1492029505\n1. The handover is most of the time implied through the contract or the corporate governance processes of your customer. 2. The German term is Werkvertrag. The French term is contrat de travail. 3. The project does not contain any merge conflicts or merge requests. All development branches are merged into the main branch and closed. 4. If your delivery and deployment pipelines still contain manual steps, please exhaustively document these steps. Include examples and check lists to reduce the risk of errors. 5. If you are not using pages as a documentation approach, document your solution and how you tag your documentation with the corresponding source code. 6. Use an official license reviewed by professional copyright lawyers. 7. You should easily identify and retrieve the source code, binary artifacts and documentation for a specific release. 8. You also need to update your Google Analytics properties if you are using Google as a site usage analysis tool. 9. GitHub provides DependaBot [5] to handle dependency updates for various ecosystems including Python technology stack. ","categories":"","description":"","excerpt":" You developed a new digital product for an internal or external customer. Your solution is awesome.\nThe product is released to delighted users. Your users love your solution.\nThe project is now …","ref":"/blog/2022/transfer-a-software-project/","tags":["agile","devops"],"title":"Transfer a Software Project"},{"body":" Some organisations are adopting agile and Scrum approaches simply because they see competitors doing it. In these situations, there is rarely a desire to adopt a new mindset and culture, or motivation for true change.\nA common pattern is the adoption of a new nomenclature. Project Managers are renamed as Scrum Masters. Business Analysts become Product Owners.\nVery little actually changes. Few benefits of agility are realised.\nIf anything, the situation may become worse as some previous structures are lost, yet the discipline for Agile is just not there.\nLarman’s Laws Craig Larman is one of the founder of LeSS. He has formulated laws based on his observations. The laws reflect the difficulty of a successful transformation.\nOrganizations are implicitly optimized to avoid changing the status quo of middle- and first-level manager and specialist positions.\nThe corollaries are:\nAny change initiative will be reduced to redefining or overloading the new terminology to mean basically the same as status quo.\nAny change initiative will be derided as purist, theoretical, revolutionary, religion and needing pragmatic customization for local concerns. It deflects from addressing weaknesses, and manager or specialist status quo.\nIf after changing the change some managers and single-specialists are still displaced, they become coaches or trainers for the change. They frequently reinforce (1) and (2).\nIn large established organizations, culture follows structure. And in tiny young orgs, structure follows culture [1].\n— Craig Larman Fake Scrum is around us everywhere we go. This dreadful situation is unavoidable.\nFive Scrum Fake Indicators How to find out you are in a fake agile environment? Indicators you are in a fake agile or Scrum environment often are:\nNo goals If a Scrum team has absolutely no goals, what is the purpose of its existence?\nAll good teams have goals. Scrum bakes the concept of goals right into the framework.\nWe have product goals, which are a commitment to the Product Backlog. And then we have Sprint Goals, which are a commitment to the Sprint Backlog. Those goals are designed to help us achieve focus, get stuff done, and get results.\nIf you do not have goals, you got fake Scrum.\nNo Self-management A team that cannot self-manage is a team that cannot be nimble. They are not going to be quick. They are going to stall. They are going to wait to ask questions. They will always be asking for their boss’s approval.\nTeams like this are very slow. The whole point of being agile is to be nimble, right? So, if it does not feel like they are being nimble, I should look a little deeper.\nSelf-management is a really common problem.\nIt can happen from a lack of trust with the boss or your business stakeholders. It can come from a lack of trust for each other as team members.\nWherever your problems are, self-management is crucial to have working in order for Scrum to work. If you do not have self-managing going on, it is probably fake Scrum.\nNo deliverables No increment at the end of the sprint. The entire point of Scrum is to have releasable increments for every single sprint. Without that, well, we are just cranking a bunch of levers.\nTo get to a deliverable can sometimes be kind of challenging. You have to write requirements in such a way that something can be delivered in just a short timeframe.\nNo transparency Without transparency, I cannot inspect, I cannot adapt. If I cannot inspect and adapt, the entire empirical process falls apart. If the entire empirical process is falling apart, you got fake Scrum. Scrum is built upon this engine.\nScrum is built upon the idea that we make things transparent.\nWe inspect and adapt at the appropriate frequency and that is how we manage all the complexity of product development. We certainly cannot eliminate complexity, but we can work with it. So, if you do not have transparency, you got fake Scrum.\nNo results If you got stakeholders that do not see a difference. They do not care if they are not talking to your team. They are not talking to your product owner [2].\nIf you are not delivering results then what is the point of your work in the first place. You are probably doing fake Scrum.\nDigital Software Product Development The software industry has created and promoted agile and Scrum approaches. A development department is responsible for delivering working software each sprint. Accordingly to the Scrum Guide, a potentially shippable product is the increment result produced multiple times per week.\nYou can easily detect fake Scrum and incompetent software development teams:\nGit commit multiple times per day per developer All your software development teams are working with git. Each developer creates multiple well-commented commits per day. Just use git history to check this hypothesis. Here some links to how you can use git [2][3] [4].\nDeliver working applications multiple times a week All teams deploy their digital increment multiple time per week. DevOps practices [3] are lively in our organization [1, 2].\nNo errors older than a few days Quality and craftsmanship are cornerstones of agile approaches. A way to check these good practices is to study errors reports [5]. Another test is to look at the OWASP static analysis and the obsolete libraries reports.\nLiving documentation Professional developers provide adequate and actual documentation for their solution. Does the team have a living documentation. This documentation is often a generated static website [6]. Agile software architecture regularly uses domain driven design ideas [7]. Ask the team how they do software design activities?\nFinal Thoughts Walk the talk. Become a professional Scrum master [3], product owner [4], or team developer.\nA digital product development team shall be DevOps affine [5, 2, 6].\nSee also another blog [1] describing how the department of defense of the USA detects agile lies.\nLinks [1] Detecting Agile Bullshit Marcel Baumann. 2019.\n[2] Git local repositories for the impatient Marcel Baumann. 2017.\n[3] Git branches for the impatient Marcel Baumann. 2016.\n[4] Code Scene as Crime Scene Marcel Baumann. 2019.\n[5] Advocate Zero Bug Policy in Your Projects Marcel Baumann. 2020.\n[6] Creating a Technical Website with Hugo and Asciidoc Marcel Baumann. 2020.\n[7] Software Structure with DDD Marcel Baumann. 2022.\nReferences [1] N. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\n[2] D. Farley, Continuous Delivery Pipelines. 2021 [Online]. Available: https://www.amazon.com/dp/B096YGZVZ9\n[3] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n[4] D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\n[5] J. Humble and D. Farley, Continuous Delivery. Addison-Wesley Professional, 2010 [Online]. Available: https://www.amazon.com/dp/0321601912\n[6] G. Kim and N. Forsgren, DevOps Handbook, Second. IT Revolution Press, 2021 [Online]. Available: https://www.amazon.com//dp/B09G2GS39R\n1. In big established groups, culture/behavior/mindset follows and is influenced by changes in the organizational system and design. In large established organizations, if you want to really change culture, you have to start with changing the organizational system because culture does not really change otherwise. Said another way, the organizational system is strongly influential on mindset and behavior. 2. Your product owner is not doing her job. One key responsibility of a product owner is to involve and inform all stakeholders. 3. Continuous integration and continuous delivery is Dev practices. Continuous deployment and infrastructure as code are Ops practices. ","categories":"","description":"","excerpt":" Some organisations are adopting agile and Scrum approaches simply because they see competitors doing it. In these situations, there is rarely a desire to adopt a new mindset and culture, or …","ref":"/blog/2022/how-to-detect-fake-scrum/","tags":["agile"],"title":"How to Detect Fake Scrum?"},{"body":" Scrum is the most popular approach to create awesome new digital products.\nPerhaps you are thinking of pursuing a career as a Scrum master. You read the Agile Manifesto and memorized the 12 Agile Manifesto Principles.\nPerhaps you have recently been moved into that role and are wondering if being a Scrum master is right for you.\nThere are plenty of good reasons to become a Scrum master. The job is fascinating, in demand and pays well.\nThe most important reason to become a Scrum master is that it is the right job for your personality, interests and skills.\nWhat is the role of Scrum master?\nIf you choose to accept this mission, what will you do every day [1]?\nWhat is a Scrum Master? Here is a way of considering the role.\nThe scrum master is the product owner for organisational change.\nWhen you introduce Scrum into an organisation, you are focused on the creation of two distinct things: new products and an improved organisation. New products have product owners.\nThe organization needs an owner, someone to manage the vast backlog of requests. Somebody should prioritise, and collaborate with the cross-functional team of makers to deliver incremental value to its stakeholders. The stakeholders are all employees, partners and shareholders.\nIf Scrum does not ripple through an organisation this way, it is set up for failure. Or worse a facade of change, a kind way of saying lies and deceit [2] [3].\nEight Questions Find out if the Scrum master role suits your interests:\nDo You Like Helping Others? Scrum masters need to enjoy helping people. This cannot be something a Scrum master does grudgingly [1, 2, 3].\nDo You Need to Be in the Spotlight? A great Scrum master fades into the background while the team receives the praise [4, 5].\nAre You a Good Listener? We all know that a Scrum master helps remove impediments to a team’s progress and productivity. That often means listening, asking clarifying questions, and then solving the problem. But other times it means just listening: letting a team member vent about something [3, 6, 7].\nAre You Technical Enough? You need to know enough to speak their language fluently and to empathize with the challenges of their work [8, 9].\nDo You Have a Formal Scrum master Training? You are serious about working as a professional Scrum master the next years. You should have formal training and read books describing the various Scrum master stances. A reasonable formal training is a professional level certification [10, 11]. This certification would be your third one. First, you did the basic training and became a Scrum master. Second, you qualified as an advanced Scrum master. Now you are ready to become a certified professional Scrum master. Consider training in facilitation and coaching. Learn the eXtreme Programming methods to achieve technical fluency and understand Software Craftsmanship.\nCan You Influence Without Authority? Influencing without authority is an important skill for all good Scrum masters. If you enjoy leading this way, count that as a point in favor of a career as a Scrum master [12].\nAre You Comfortable with Uncertainty? If you’re the type who secretly wants to eliminate all uncertainties, you will either be frustrated as a Scrum master or will drive your team crazy in pursuit of an impossible goal [13, 14].\nCan You Handle Conflict Well? Agile teams are used on an organization’s hardest challenges—the projects that will not succeed any other way. Add that to the strong personalities found on many development teams and there will be conflict [15, 16, 17, 18, 19].\nEight Stances Are you ready to work as:\nImpediment Remover One of the fundamental responsibilities of the Scrum master is the resolution of impediments. Impediments are critical issues that block the team and require external intervention.\nFacilitator The task of the Scrum master is to facilitate the work of the Product Owner and the team. Contrary to popular belief, she does not only facilitate events, but the whole Scrum process, ensuring a smooth and sustainable pace. Finally, she facilitates relationships, promoting collaboration and creating synergies within the team and with clients.\nCoach Just like a sports coach, the Scrum master focuses on team building. She guides and encourages the team to self-organize, stays focused and has a continuous improvement-oriented mindset. She trains every single team member with a focus on mindset, behavior and organization to collaborate effectively with Scrum Teams.\nTeacher The Scrum master ensures that the Scrum principles and framework are understood and put into practice. She guides the Product Owner and the team towards Agile practices and principles whenever they move away from them.\nServant Leader Servant-leadership focuses on collaboration, trust, empathy and the ethical use of power. As a servant leader, the Scrum master is fully aligned with the Scrum values of courage, openness, respect, focus and commitment. She focuses on the needs of team members with the aim of achieving results in line with the company’s values and goals.\nManager She is responsible for process management, with an eye on team health and waste elimination. She manages the boundaries of self-organization and promoting the Agile culture.\nChange Agent The Scrum master helps create an environment that allows the Scrum spirit to thrive within the Team and the organization.\nMentor A mentor is a wise and trustworthy counselor or teacher. The Scrum master has the task of transferring knowledge and experience to the team, guiding it in the adoption of an Agile mindset.\nThings Scrum Masters Advocates Scrum masters promote, explain, and advocate Scrum values, principles [4, 11].\nScrum is founded on empiricism and lean thinking [20, 21, 22]. Empiricism asserts that knowledge comes from experience and making decisions based on what is observed. Lean thinking reduces waste and focuses on the essentials.\nThe key elements are\nTransparency\nInspection\nAdaptation\nThe Scrum values any organization shall live are\nCommitment\nFocus\nOpenness\nRespect\nCourage\nScrum master explain, teach, protect the Scrum values and adapt Scrum rules and tactics to the organization.\nAs a Scrum master you must strongly identify with these values. You must understand empiricism and how a model can be impacted with closed-loop approaches. Yu should certainly know the official Scrum Guide.\nYou are a professional Scrum master in a digital product development when:\nYou understand the Definition of Done of your team.\nYou know the roadmap of your product and the release plan for the next six months.\nYou understand the major risks potentially impeding your development initiative and the associated mitigation measures.\nYou can teach your team how to improve the above artifacts.\nYou can find all these documents in less than two minutes. Better would be to display them on the sprint board.\nThings Scrum Masters Never Do You are a Scrum master. You are not a secretary or an administrator.\nShe does not take notes during meetings and Scrum ceremonies.\nShe is not a secretary and is not responsible for the team member’s agenda.\nShe does not serve as Scrum Political Police.\nShe is not the Team members’ Boss and does not take decisions for them.\nShe is not an administrator, so she does not manage the tools used by the team.\nShe does not act as the chairman during the meetings.\nShe is not a Superhero, and she does not bring the coffee!\nOver time, a Scrum master Fades Away After a while, team members need less coaching and transition to a high-performing group.\nAll team members pursue technical excellence [4] [5] [6] [7].\nThey learn how to facilitate some of their own meetings. Team members work more closely and directly with the product owner and stakeholders.\nThe Scrum master is no longer needed to resolve communication roadblocks and resolve issues. There are fewer organizational impediments to agility. Those that remain can be particularly difficult to resolve, but there are fewer of them.\nEven the best Scrum team continues to benefit from the coaching, guiding and mentoring provided by a good Scrum master. With that being said, some high-performing teams might find they do not need a Scrum master full-time anymore.\nDedication This blog was written in memory of my late father. He paved the way to my beautiful engineering career.\n— Marcel Baumann 2022-07-04 Links [1] What Does A Scrum Master?. Marcel Baumann. 2017\n[2] Detecting Agile Bullshit. Marcel Baumann. 2019\n[3] What You Do Not Need to Do in Scrum. Marcel Baumann. 2016\n[4] Scrum Master Certification. Marcel Baumann. 2021\n[5] Product Owner Certification. Marcel Baumann. 2021\n[6] Scrum Developer Certification. Marcel Baumann. 2021\n[7] PMI ACP Certification. Marcel Baumann. 2016\nReferences [1] M. L. Manns and L. Rising, Fearless Change. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/B019TM4P6Y\n[2] M. L. Manns, More fearless change. 2015 [Online]. Available: https://www.amazon.com/dp/0133966445\n[3] R. Schwarz, The Skilled Facilitator. Jossey-Bass, 2002 [Online]. Available: https://www.amazon.com/dp/B0BT11C39N\n[4] Z. Sochova, The Great ScrumMaster. Addison Wesley, 2016 [Online]. Available: https://www.amazon.com/dp/013465711X\n[5] T. Mayer, The People’s Scrum. 2013 [Online]. Available: https://www.amazon.com/dp/B00CO8CRDY\n[6] R. M. Schwarz, Skilled Facilitator, Third. Wiley \u0026 Sons, Incorporated, John, 2016 [Online]. Available: https://www.amazon.com/dp/0787947237\n[7] M. Acker, The art and science of facilitation. 2020 [Online]. Available: The art and science of facilitation\n[8] D. Farley, Modern Software Engineering. Pearson Education, Limited, 2022 [Online]. Available: https://www.amazon.com/dp/B09GG6XKS4\n[9] S. Mancuso, The Software Craftsman. Prentice Hall, 2015 [Online]. Available: https://www.amazon.com/dp/0134052501\n[10] F. Heath, Professional Scrum Master Guide. Packt Publishing, Limited, 2021 [Online]. Available: https://www.amazon.com/dp/1800205562\n[11] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n[12] J. Appelo, Management 3.0. Addison-Wesley, 2011 [Online]. Available: https://www.amazon.com/dp/0321712471\n[13] H. Hamel and B. Breen, The Future of Management. Harvard Business Review Press, 2007 [Online]. Available: https://www.amazon.com/dp/1422102505\n[14] F. Laloux, Reinventing Organizations. Nelson Parker, 2014 [Online]. Available: https://www.amazon.com/dp/2960133501\n[15] R. Pichler, How to Lead in Product Management. 978-1-9163030-0-3, 2020 [Online]. Available: https://www.amazon.com/dp/B085L8Z4YS\n[16] J. Hope, Beyond performance management. Harvard Business Review Press, 2011 [Online]. Available: https://www.amazon.com/dp/B0070YNPWE\n[17] J. Hope, The leader’s dilemma. Jossey-Bass, 2011 [Online]. Available: https://www.amazon.com/dp/B005LVQOOO\n[18] J. Badaracco, Leading Quietly. Harvard Business School Press, 2002 [Online]. Available: https://www.amazon.com/dp/B005DI8XSK\n[19] R. M. Schwarz, Smart Leaders, Smarter Teams How You and Your Team Get Unstuck to Get Results. Wiley \u0026 Sons, Incorporated, John, 2013 [Online]. Available: https://www.amazon.com/dp/B00BMU3IC4\n[20] F. Ballé and M. Ballé, The Gold Mine. Lean Enterprises Inst Inc, 2005 [Online]. Available: https://www.amazon.com/dp/0974322563\n[21] M. Ballé, F. Ballé, and J. Liker, The Lean Manager. Len Publishing, 2009 [Online]. Available: https://www.amazon.com/dp/1934109258\n[22] M. Ballé and F. Ballé, Lead with Respect. Len Publishing, 2014 [Online]. Available: https://www.amazon.com/dp/1934109479\n","categories":"","description":"","excerpt":" Scrum is the most popular approach to create awesome new digital products.\nPerhaps you are thinking of pursuing a career as a Scrum master. You read the Agile Manifesto and memorized the 12 Agile …","ref":"/blog/2022/would-you-enjoy-being-a-scrum-master/","tags":["agile"],"title":"Would You Enjoy Being a Scrum Master?"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/domain-driven-design/","tags":"","title":"domain-driven-design"},{"body":" A modular monolith is a software design approach in which a monolith is designed with an emphasis on interchangeable and potentially reusable modules.\nA modular monolith can be split in the future into a set of microservices.\nDelay the split as long as you can. Microservices have a steep price tag during operations.\nA modular monolith provides:\nIndependent and parallel development approach\nDiminish coupling and improve cohesion. The interfaces are better documented and thinner.\nBetter observability\nBenefits of Modular Monoliths Adopting the modular approach for monolithic applications can have benefits in a few key areas, including better-organized dependencies, increased code reusability, and increased code observability.\nIncreased Reusability For large development teams, developing modular components of an application helps to increase reusability. Modular components can be reused and repurposed and can help teams establish a single source of truth. This can lead to faster and more consistent development.\nBetter-Organized Dependencies Because modular monoliths make individual functions more independent, they, by nature, make dependencies more organized and visible. This makes it easier for developers to easily assess which parts of the application require which dependencies.\nIncreased Observability Developing with modularity in mind means code is more accessible to developers. For Java developers in particular, interface classes and their requisite javadoc comments help to enhance accessibility and interoperability for developers who may need to work with the modularized function.\nMonolith Benefits Modular Monolith Benefits Low operational complexity.\nLow operational complexity.\nCan be more secure than microservice application.\nCan be more secure than microservice application.\nEasy to manage database consistency.\nEasy to manage database consistency.\nLess complex than microservice application.\nLess complex than microservice application.\nMonoliths are usually a nightmare to maintain.\nDeveloped code is reusable.\nOften called big ball of mud.\nHas better-organized dependencies than a standard monolith.\nObservability is often low.\nBetter code observability than a standard monolith.\nWhen to Use a Modular Monolith Any time a developer is working on a monolithic application, using principles of modularity can help them to improve the processes for their team. Whether that means making dependencies more manageable within the application, improving developer interoperability on the modular components of that application, or adding modular components to the house repository, embracing modularity can have a positive impact on teams.\nFor the application itself, embracing modularity can help to organize dependencies, making it easier and less time-consuming to change components within the system.\nGood practices shall be applied to refactor the application [1, 2, 3, 4].\nWhen Not to Use a Modular Monolith Of course, just as microservices are not one size fits all solutions, neither is modularity.\nFor developers working on small projects with small development teams, developing their code in a modular way may not be worth the added time or formality.\nFinal Thoughts Architecture approach for modular monoliths or microservices is Domain Driven Design [5, 6, 7].\nIf you are like many Java developers who are still working on a monolithic application, then employing modularization best practices can help make your application achieve some benefits of microservices without the associated cost of refactoring.\nHowever, modular monoliths have significant shortcomings when compared to microservices — especially in terms of continuous testing, integration, and deployment.\nLinks [1] Software Structure with DDD Marcel Baumann. 2022.\nReferences [1] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[2] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[3] M. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\n[4] A. Scott and P. J. Sadalage, Refactoring Databases. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/B001QAP36E\n[5] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[6] V. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\n[7] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n","categories":"","description":"","excerpt":" A modular monolith is a software design approach in which a monolith is designed with an emphasis on interchangeable and potentially reusable modules.\nA modular monolith can be split in the future …","ref":"/blog/2022/modular-monoliths-are-the-new-graal/","tags":["architecture","domain-driven-design","java"],"title":"Modular Monoliths are the new Graal"},{"body":" Domain Driven Development DDD is the preferred software architecture approach for designing digital products. The method nicely matches with the operational concepts of microservices.\nDomain-driven design is a holistic approach to understanding, designing and building software applications.\nSeminal books [1, 2, 3] describes the approach and key concepts defining the development method.\nConcrete recipes and examples of code structure are still sparse.\nHow should you structure your namespaces and modules?\nWe propose a simple and adequate code structure for implementation using modern Java constructs. The approach builds on the strengths of the Java packages and modules.\nThe language visibility rules enforce cohesion and minimize coupling.\nThe described approach is ideal for small to medium software solutions. The source code size of a bounded domain is often less than 50'000 lines of code.\nThe heart of software is its ability to solve domain-related problems for its user.\n— Eric Evans Domain-Driven Design: Tackling Complexity in the Heart of Software Layers in DDD Domain-driven design DDD has four layers in the architecture:\nInterface This layer is in charge of the interaction with the user, whether software presents information to the user or receives information from the user. I use vaadin to increase productivity. Vaadin allows us to use the single technology stack Java to develop all backend and frontend functionalities.\nApplication This is a thin layer between the interface and the domain, it could call domain services to serve the solution purposes.\nDomain The heart of the software, this layer holds domain logic and business knowledge. A major goal is to avoid any tainting of the core domain model from other layers. Try to avoid extending domain entities with implementation specific root classes or to a lesser degree annotations.\nInfrastructure A supporting layer for the other layers. This layer contains supporting libraries or external services like a database or UI supporting library. I use libraries to minimize effort in support functions such as persistence, JSON transformation, archiving, and reporting. The microstream library is a good example of this approach. The persistence capability is less than fifty lines of code. No changes in the domain model was necessary. We did not have to add a root persistent class or use annotations.\nPackage Structure A bounded domain shall be configured as a Java module [4]. The exported services and entities are explicitly listed with the exports directive. A huge advantage is the obligation to list all dependencies with the requires directive.\nThe Java compiler validates the module dependencies and interfaces.\nServices defines the bounded domain context. The domain uses the library to implement a bounded domain. The ports, handlers and realms are declared in the context package for small bounded domains. Complex domains can declare these interfaces in separate packages for legibility.\nLogic contains common business logic and features. Elaborate domains can contain more business features. Use a package structure increasing legibility and enforcing separation of concerns.\nPorts contains the services receiving data and events from the environment.\nHandlers contains the services providing data and events to the environment and to other applications.\nRealm contains the repository functions to persist and create domain entities and object values. The current approach uses the MicroStream library. The amount of code to persist the domain model is minimal and non-intrusive [1].\nDomain contains the abstraction describing the bounded domain. Care is taken to define resilient and legible domain abstractions.\nThe above diagram shows the package structure for a bounded domain named bounded-domain. The names with the regular font are package names, the ones in italics are class names.\nThe infrastructure supports classes are not part of this structure. These classes shall be defined in a separate Java module and imported with regular dependency declaration.\nWe use the ArchUnit tool to ensure the expected structure is provided for each bounded domain.\nThe user interface for a bounded domain is stored in a separate package and often in its own Java module. The bounded domain implementation shall not constrain the technologies used to provide a user interface. Different approaches for user interface realization are available and no clear winner can currently be identified.\nI mainly use Vaadin to realize browser- or mobile-first internal applications.\nJava Considerations Entities shall have well-documented internal or external identifiers. Entities visible to other bounded domains shall always have an external identifier. Identifiers are always immutable objects.\nObjects that have a distinct identity that runs through time and different representations. You also hear these called reference objects.\n— Martin Fowler Value objects shall be expressed as Java value types. Record construct is the preferred way to model a value object in Java. The record concept provides the expected equals(Object) behavior.\nObjects that matter only as the combination of their attributes. Two value objects with the same values for all their attributes are considered equal.\n— Martin Fowler An aggregate is a set of Entities and Value Objects that do not make sense alone. Every aggregate has a root entity, which will be responsible for providing all methods involving business rules that will modify its child entities. The first rule is that aggregates reference each other by identity instead of object references. Aggregates shall be constructed with the help of factory patterns such as factory method, abstract factory, or builder.\nA DDD aggregate is a cluster of domain objects that can be treated as a unit. An example may be an order and its line-items, these will be separate objects. Tt is useful to treat the order together with its line items as a single aggregate.\n— Martin Fowler Rich domains are models that have full control of their data and do not rely on external objects to manipulate them. Anemic domains are models that rely on other classes to validate their data. Anemic domains are a smell in the domain-driven design world.\nServices should be pure functions and be stateless.\nPure functions are functions (or methods) that do not change the value of any object outside it. It avoids side effects and guarantees the same output for certain inputs, meaning it needs to be completely deterministic.\nThe Spring project has added support for bounded domain in their framework with the Modulith extension.\nGradle modules are a natural mapping for bounded domains. Use either Java modules or archUnit to enforce that communication always goes through bounded domain interfaces.\nArchitecture Integrity A Bounded Context is a logical boundary of a domain where particular terms and rules apply consistently. Inside this boundary, all terms, definitions and concepts form the Ubiquitous Language.\nGood practices shall be applied to ensure the quality of the bounded domain software architecture [5, 6, 7]\nThe Java Platform Module System (JPMS) encourages us to build more reliable and strongly encapsulated modules. As a result, these features can help to isolate our contexts and establish clear boundaries.\nA bounded domain is implemented as a Java module.\nThe domain internal layered architecture is verified with ArchUnit custom validation rules. The rules are coded as unit tests and are processed in the continuous integration pipeline.\nThe advantages of the architecture are:\nThe whole company talking the same ubiquitous language, reduced risk of misunderstandings. Everyone needs to be aligned, both in vocabulary and ownership of the components. The engineers have common understanding and coding guidelines to realize the layers inside a bounded domain.\nYou have a segregated architecture defining a modular monolith application.\nSmaller and well-defined components are easier to maintain. Your services are independent and can more easily be refactored.\nDevelopment scalability is implicitly provided. Teams can develop simultaneous and independently bounded domain features.\nBounded Domain Relations There are five main types of relationships between Bounded Contexts:\nPartnership a relationship between two contexts that cooperates to align the two teams with dependent goals.\nShared Kernel a kind of relationship when common parts of several contexts are extracted to another context/module to reduce code duplication.\nCustomer-supplier a connection between two contexts, where one context (upstream) produces data, and the other (downstream) consumes it. In this relationship, both sides are interested in establishing the best possible communication.\nConformist this relationship also has upstream and downstream, however, downstream always conforms to the upstream’s APIs.\nAnti-corruption layer this relationship kind is widely used for legacy systems to adapt them to a new architecture and gradually migrate from the legacy codebase. The protection layer acts as an adapter to translate data from the upstream and protect from undesired changes\nLessons Learnt Great technologies, programming languages and tools are used when building software applications. That is good and right.\nBut unfortunately, it is often lost that the decisive factor for the success of a project is not technology, but the solution. In order to understand the subject matter or domain, we need a common language with the domain experts and users. If we do not map the technical model in the software and its architecture, it will not help our users in their work.\nAs a computer scientist, it is easy to fall into the trap of focusing on technology instead of specialist knowledge footnoote:[In the modern trend of technology driven curriculum this dreadful approach is often encountered]. The principle of bounded contexts from DDD can help us here.\nDomain-driven design (DDD) is a useful approach that provides excellent guidelines for modeling and building systems, but it is a means to an end, not an end in itself.\nWhile the concepts are valid, you lose a lot if you limit yourself to using them only: There actually is a life beyond DDD.\n— Stefan Tilkov 2021 The DDD approach emphasizes systematic refactoring and code improvements [8, 9, 10, 5]. It recommends test driven approach for bounded domain development [11, 12, 13].\nReferences [1] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[2] V. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\n[3] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n[4] S. Mak, Java 9 Modularity. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491954167\n[5] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[6] M. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\n[7] A. Scott and P. J. Sadalage, Refactoring Databases. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/B001QAP36E\n[8] M. Fowler, Refactoring, Second. Addision-Wesley, 2018 [Online]. Available: https://www.amazon.com/dp/0134757599\n[9] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[10] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[11] L. Crispin, Agile testing. Addison-Wesley, 2009 [Online]. Available: https://www.amazon.com/dp/0321534468\n[12] J. G. Gregory and L. Crispin, More Agile Testing. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/0321967054\n[13] G. Adzic, Bridging the Communication Gap. Neuri Limited, 2009 [Online]. Available: https://www.amazon.com/dp/B008YZ993W/\n1. You do not need to modify your domain model. No inheritance from a special persistence class, no annotations are required. ","categories":"","description":"","excerpt":" Domain Driven Development DDD is the preferred software architecture approach for designing digital products. The method nicely matches with the operational concepts of microservices.\nDomain-driven …","ref":"/blog/2022/software-structure-with-ddd/","tags":["architecture","domain-driven-design","java"],"title":"Software Structure with DDD"},{"body":" JSR-385 could have saved Mars Climate Orbiter[2] in year 1999.\nAccidents in computer applications happen again and again due to calculation errors.\nThe International System of Units SI, commonly known as the metric system, is the international standard for measurement.\nThe International Treaty of the Mete was signed in Paris on May 20, 1875, by seventeen countries, including the United States.\nIn May 2019, the system of units was updated. All units are defined by constants of nature.\nStill, various countries use alternate conventions to complicate our lives.\nHere some well-documented and expensive catastrophes originating from wrong approaches to measurements.\nPatriot Missile The cause here was an inaccurate calculation of the time that has passed since the start due to arithmetic errors in the computer system.\nAriane 5 Explosion A floating point number was converted, which then had a larger value than could be stored using the available 16-bit signed integer value.\nUS Air Machine A US airliner nearly crashed on a flight between the United States and Canada, in the Great Lakes area and the greater Chicago area. Here, when refueling the machine, the US gallon and British gallon volume units for liquid and fuel were mixed up. The actual amount of kerosene available was significantly reduced. The machine ending up on the holding pattern on approach without sufficient fuel.\nNumerous, sometimes fatal, incorrect dosages of medication.\nDefinitions The Java classes defined in the JSR-385 specification are not limited to science, physics or math alone.\nAs a result, the terms quantity and unit of measure should be used in their general terminology, such as physical quantity or physical unit of measure, unless otherwise specified.\nThis generalization holds true even if the Units of Measurement API was originally designed with scientific or physical quantities as the primary goal.\nThe names and terms used in the specification are:\nDimension Dimension is one of the fundamental aspects of quantity, including length, mass, time or combinations thereof. The concept of measure expresses a characteristic without any concept of size. So we can talk about length without any implication.\nQuantity Any kind of quantitative property or attribute of a thing. Mass, time, distance, heat, longitude or latitude are among the familiar examples of quantitative properties.\nNo unit of measure is required to express a quantity, nor does one need specific arithmetic to do so. Alice can quantify the size of her shoes by picking them up. Alice can add the mass of her left shoe and the mass of her right shoe by placing them both in the bowl of a scale. Quantities can be measurable or dimensionless: the number of Alice’s shoes is a dimensionless quantity.\nUnits of measure are required to represent measurable quantities on a computer, on paper, on a network, device, etc. Two or more of these specifications do not mandate the use of a particular quantity as a standard unit of measure. Therefore, SI (System-International) is usually used so that the standard system of units of measurement is suitable for most applications. According to the JSR-385 API specification, 7 quantities should be acceptable if they have the same dimensions so that they can be compared with one another in a meaningful way.\nUnit A unit, or unit of measure, is a quantity that is assumed to be the standard with a unique value that can be used to express. The same type units of measurement are used as a comparison value. For example, one foot corresponds to a quantity of 0.3048 meters. Regardless of how this came about, a unit of measure can be expressed as the quantity of other units of measure of the same kind.\nBase-Unit The base unit is a well-defined unit of measurement that is defined as being dimensionally independent of other basic units of measurement. The SI system defines only 7 basic units of measurement (including meters, kilograms and seconds) from which all other SI units of measurement are derived.\nDerived-Unit Derived-Unit is a unit of measurement formed as the product of the results of basic units of measurement. Some derived units of measurement have been given a special name and a symbol for convenience and ease of use. In the SI system, special name derived units of measurement include Hertz, Newtons and Volts.\nSystem-of-Units A system of units is a set of basic and derived units of measure chosen as standards for specifying measures. Examples are the SI (metric) and the imperial (English) system.\nPrefix (multiplier) A prefix is a leading word that can be applied to a unit of measure to form a decimal multiplication or decrease of the unit of measure. Prefixes are used in the SI system, which includes kilo-, centi-, mili- etc. Other cultures and regions use multiplier systems of a similar type, some of which differ from the SI system. Examples are the separate use of multipliers such as Lakh- (100,000) or Crore- (10 million) in countries like India or parts of the Middle East. This can be attributed to the fact that different currency systems exist. It can also be traced back to historical number systems, which differ from the Latin or Arabic origin of today’s western systems in some areas or are absent in these in the same form. On the other hand, the use of others, such as a dozen, is almost unknown there.\nMeasurement In May 2019, all units are defined by constants of nature in the world-wide international system of units. These changes are incorporated in the newer version of the RFC and the reference implementation.\nHow to Use the API JSR-385 defines the API 2.x. Historically, JSR-363 defined the API 1.0 and is now superseded by the newer definitions.\nimplementation(\"javax.measure:unit-api:2.1.3\") implementation(\"tech.units:indriya:2.1.3\") implementation(\"tec.units:unit-ri:1.0.3\") Examples Quantity\u003cLength\u003e distance = Quantities.getQuantity(10, MILLI(Units.METRE)); Quantity\u003cVolume\u003e cubicMetre = Quantities.getQuantity(1, Units.CUBIC_METRE); Quantity\u003cVolume\u003e litres = Quantities.getQuantity(1000, Units.LITRE); ComparableQuantity\u003cVolume\u003e cubicMetre = Quantities.getQuantity(1, Units.CUBIC_METRE); ComparableQuantity\u003cVolume\u003e litres = Quantities.getQuantity(1000, Units.LITRE); assertTrue(cubicMetre.compareTo(litres) == 0); Quantity\u003cSpeed\u003e velocity = Quantities.getQuantity(1, Units.METRE) .divide(Quantities.getQuantity(1, Units.SECOND)) .asType(Speed.class); The power of the approach is in the object-oriented abstractions.\npublic class WaterTank { public void setCapacityMeasure(Quantity\u003cVolume\u003e capacityMeasure); } class WaterTankTest { @Test void givenQuantity_whenGetUnitAndConvertValue_thenSuccess() { WaterTank waterTank = new WaterTank(); waterTank.setCapacityMeasure(Quantities.getQuantity(9.2, LITRE)); assertEquals(LITRE, waterTank.getCapacityMeasure().getUnit()); Quantity\u003cVolume\u003e waterCapacity = waterTank.getCapacityMeasure(); double volumeInLitre = waterCapacity.getValue().doubleValue(); assertEquals(9.2, volumeInLitre, 0.0f); } @Test void conversionTest() { double volumeInMilliLitre = waterCapacity.to(MetricPrefix.MILLI(LITRE)) .getValue().doubleValue(); assertEquals(9200.0, volumeInMilliLitre, 0.0f); } } The abstractions allow compilation time detection of errors.\nwaterCapacity.to(MetricPrefix.MILLI(KILOGRAM)); // compilation error Unit\u003cLength\u003e Kilometer = MetricPrefix.KILO(METRE); Unit\u003cLength\u003e Centimeter = MetricPrefix.CENTI(LITRE); // compilation error Recommendations Keep your unit definitions in a single place.\nEncapsulate your own Quantities by delegation.\nCreate converters when storing units into a JPA-based persistent store.\nIn any case, if a unit does not exist in the system of units, you can create new units with new symbols: — AlternateUnit is a new unit with the same dimension but different symbol and nature. — ProductUnit is a new unit created as the product of rational powers of other units.\nLinks [1] Units of Measurement\n[2] Mars Climate Orbiter\n","categories":"","description":"","excerpt":" JSR-385 could have saved Mars Climate Orbiter[2] in year 1999.\nAccidents in computer applications happen again and again due to calculation errors.\nThe International System of Units SI, commonly …","ref":"/blog/2022/measurements-and-units/","tags":["java","architecture","series-students"],"title":"Measurements and Units"},{"body":" Your organization heard of DevOps, and your developers clamor you should adopt the approach.\nEach organization I talk with has some DevOps initiative. Often because they read that DevOps approach puts customers and end-user satisfaction at the center.\nDoes DevOps really improve the quality of your digital products and customer satisfaction?\nOr is it only the next silver bullet fad used to increase the bonus of consultants and managers?\nYou also find a simple way to boostrap your DevOps adoption Bootstrap Your DevOps Adoption.\nWhat is DevOps? Wikipedia provides the following definition [1]:\nDevOps is a set of practices that combines software development Dev and IT operations Ops.\nIt aims to shorten the system development life-cycle and provide continuous delivery with high software quality. DevOps is complementary with agile software development. Several DevOps aspects came from the agile methodology.\n— Wikipedia DevOps is intended to be a cross-functional mode of working [1, 2, 3]. Practitioners use different toolchains rather than a single one. These toolchains are expected to fit into one or more of the following categories, reflective of key aspects of the development and delivery process.\nThe major software product development platforms GitLab, GitHub or BitBucket are classical examples of toolchains integration.\nDevOps teams practice daily:\nCoding Code development and review, source code management tools, code merging [4, 5, 6]. Emphasize continuous development and testing. Continuous testing can only be fully automated.\nBuilding Continuous integration tools, build status. Emphasize continuous integration, continuous delivery, and continuous deployment [7, 8].\nTesting Continuous testing tools that provide quick and timely feedback on business risks. Supports continuous development activities.\nPackaging Artifact repository, application pre-deployment staging. Supports the continuous delivery activities in a corporate environment.\nReleasing Change management, release approvals, release automation. Supports the continuous delivery and deployment to productive servers.\nConfiguring Infrastructure configuration and management, infrastructure as code tools. Supports the infrastructure as a code approach.\nMonitoring Applications performance monitoring, end-user experience. Emphasize continuous monitoring and alarming, optimize time to recover metric.\nDevelopment Development in an agile and DevOps environment means:\nContinuous integration, where the coding, building, integration, and testing processes are carried out.\nContinuous delivery, which includes continuous integration but mainly focuses on product delivery.\nContinuous deployment, which aims at automating project deliveries.\nYour development teams shall have automatic continuous integration. This pipeline builds the software, runs static code analyzer and executes a reasonable set of unit and integration tests. If not, they are pretending to do DevOps and lying to you.\nThe next step is to configure an automatic continuous delivery. This pipeline packages the complete solution and delivers as an installation package. This package can be deployed in the staging area without manual configuration.\nOnly professional DevOps teams shall dare to implement continuous delivery.\nThe areas that a DevOps engineer must be competent are:\nVersion Control Systems Any DevOps engineer has expertise in Git, and platforms such as GitHub, GitLab, or BitBucket. Infrastructure as Code IaC is used to build and deploy digital products. Documentation is always synchronized with the source artifacts. Approaches such as static websites are preferred.\nContinuous Integration, Continuous Deployment, Continuous Delivery (CI/CD/CD) As for this one, you should look for Jenkins, TeamCity, GitHub, GitLab, or Bitbucket. All products are built and packaged using continuous integration and continuous delivery approaches. No manual steps are required to package a release for production. It is important to note, however, that there are so many DevOps tools out there that it is impossible to cover them.\nTesting and Automation Tools One of the duties of a DevOps engineer is to speed up the delivery of software to the clients. Most companies care about the quality of their software and testing has become an essential part of DevOps engineers' job. Functional and non-functional testing techniques and tools are used to guaranty quality of the installed solutions. It provides the obvious benefits of automation, and helps DevOps engineers save a lot of time.\nContainers and Cloud Services Containers such as Docker and Kubernetes are used to deploy digital solutions. Microsoft Azure, Google Cloud, Amazon Web Services are some examples.\nCommunication DevOps is not isolated to a specific role or to a specific team in your organization. A DevOps specialist must have well-developed empathy because their job implies communication with other people. Conflicts are not going to help them. Deep understanding of empiricism and transparency of all available information and measurements is a must for successful communication in an agile and DevOps environment.\nGoogle has published exhaustive insights how they implement DevOps mindset [9].\nDevSecOps Security and corporate governance awareness tremendously grew during the beginning of this decade. Systematic cyberattacks and more stringent citizen protection laws displayed lack of competence in a lot of IT departments.\nDevOps engineers shall always also be DevSecOps specialists and master:\nCollective Responsibility Security is not something ephemeral whose progress and contribution cannot be measured. Each person in the organization has their own security responsibility and must be aware of their own contribution to the organization’s security stance.\nCollaboration and Integration Security can only be achieved through collaboration, not confrontation.\nPragmatic Implementation They focus on application development to ensure safety, privacy and trust in the digital society. Organizations shall be able to pragmatically approach security in DevOps.\nBridge the Divide between Compliance and Development The key to addressing the gap between compliance and development is to identify applicable controls, translating them to appropriate software measures and identifying inflection points within the software lifecycle where these controls can be automated and measured.\nAutomation Software quality can be better by improving the thoroughness, timeliness and frequency of testing. Processes that can be automated should be automated, and the other ones should be considered for elimination.\nMeasurement, Monitoring, Report and Action The results during software development as well as post-delivery must be continuously controlled by the qualified people at the right time for DevSecOps to succeed.\nBootstrap Your DevOps Adoption You are already using agile approaches to develop your digital products. You want to start your journey with DevOps. Success requires actions in three areas. First, your development teams must adopt automated pipelines to create a new version of your application and deploy it. Second, you shall monitor your productive servers to infer service level agreement metrics. Indicators are used to improve the application by changing usage patterns. Third, a continuous improvement initiative shall continuously improve quality and effectiveness.\nYou shall provide at least the following capabilities for all your teams and products:\nDevelopment Focus on automation and repeatability. Measure deployment frequency and deployment duration.\nEach product can be checked out locally from a git repository and built with less than five commands.\nEach product is built in a continuous delivery pipeline and packaged for deployment in a staging area or in production. Static code analysis and automated tests are executed in the pipeline. They provide an automated, tracked and documented quality gate.\nEach production version is tagged in the repository including associated documentation and technical instructions.\nRunning Focus is on time to repair rather than time between issues. Measure mean-time to recovery, production failure rate and change failure rate.\nEach instance has a monitoring feature, which enabled us to provide realtime information about resource usage, heartbeat, health status and warnings. You can rely on an automated alert and response system to troubleshoot and monitor your enterprise servers. The developing team can quickly rectify errors or hiccups in the workflow without disturbing the operations teams.\nEach instance monitor view is accessible to all involved collaborators.\nEach deployed product has a set of measurable targets and the associated metrics to track them.\nYou have a documented process to handle security issues in a timely manner.\nYou have a documented process to mitigate proactively potential security, performance and governance issues. A governance goal could be to always update libraries once a security defect is corrected. Empiricism and data are the building block to quality and sustainable improvements.\nContinuous Improvement Take small steps. Measure the number of improvements, average lead time, and improvement impact.\nEach product development team has a continuous improvement initiative. The measures for the next releases are documented and progress is tracked.\nEach measure is regularly evaluated for adequacy and success. Does the measure improve the overall quality of the product? Do the actions measurably improve the associated metrics?\nChecklist You give access to a product repository. I can check out the whole project and build it locally with one command.+ I shall install the needed development tools based on written instruction available in the repository.\nYou give access to a product repository. I can initiate a complete build and delivery action in a continuous integration and delivery pipeline.+ I shall use the CI/CD tool chosen for the product.\nI can check out, build and deploy the two last releases in a staging area with less than ten commands.\nYou give me access to the list of all issues and changes ongoing in the repository. The list is specific to one product. I see the information such as priority, cycle-time of these issues and in which release the issue was fixed.\nYou give me read-only access to the health dashboard of any test and productive server on which the product runs. I see:\nUptime, availability, last down events with time of occurrence, duration and explanation.\nDatabase, memory, CPU, etc. usage and trends,\nList of alarms with the involved components and resolution status.\nYou give a list of improvements to continuously improve the quality of the product. For each improvement, a list of actions and their status are available.\nYou automate everything. All automation solutions are documented. Manual configuration or installation are banned.\nMicrosoft has published a checklist for Azure DevOps.\nA vendor-agnostic checklist is the DevOps checklist.\nHere are some of the most critical DevOps metrics [2]:\nElite teams have tremendous overall performance when improving in the areas tracked through these metrics.\nDeployment Frequency It analyzes how frequently you are deploying the current release of software into production. Deployment automation is covered through continuous deployment and continuous delivery. Higher frequencies correlate with high-performance teams.\nAverage Lead Time It identifies how long it takes to develop, examine, deliver, and deploy a brand-new requirement through lead time tracking. Value stream approaches emphasize optimizing lead time.\nMeantime To Recovery Measures the time between an interruption due to deployment or system failure and full recovery through mean time to recovery MTTR tracking. Focus is on efficient recovery and away from mean time between failure. If your organization can recover in minutes, the failure rate is seldom critical.\nChange Failure Rate Indicates how often a team’s changes or hotfixes lead to failures after the code has been deployed.\nAdditional metrics often are:\nDeployment Speed It suggests how quickly you can deploy a new software version into the production environment.\nProduction Failure Rate It analyses how frequently your software crashes in production for a particular period through failure rate.\nCultural change DevOps initiatives create cultural changes in companies by transforming the way operations, developers and testers collaborate during the development and delivery processes. Getting these groups to work cohesively is a critical challenge in enterprise adoption. DevOps is as much about culture, the toolchains are only instruments to implement the approach.\nOrganizational culture is a strong predictor of IT and organizational performance. Cultural practices such as information flow, collaboration, shared responsibilities, learning from failures and encouraging new ideas are central to DevOps.\nTeam-building and other employee engagement activities are often used to create an environment that fosters this communication and cultural change within an organization. DevOps as a service approach allows developers and operations teams to take greater control of their applications and infrastructure without hindering speed. It also transfers the onus of owning a problem on to the development team, making them much more careful in their stride.\nThe 2015 State of DevOps Report discovered that the top seven measures with the strongest correlation to organizational culture and successful DevOps are:\nOrganizational investment,\nTeam leaders' experience and effectiveness,\nContinuous delivery,\nThe ability of different disciplines development, operations and security to achieve win-win outcomes,\nOrganizational performance,\nDeployment pain,\nLean management practices.\nLessons Learnt DevOps will only be successful if your organization adopts agile values.\nSupport transparency, inspection and adaption.\nThese pillars are central to empiricism and lean thinking.\nNurture commitment, focus, openness, respect and courage.\nThese are the official values of Scrum.\nBe honest with yourself.\nIf you do not have concrete and visible initiatives in the areas of development Dev, running Ops and continuous improvement, you are just pretending to be a professional. But in reality, you are just an amateur.\nGlossary Continuous Integration Fowler, 2006 - a software development practice where members of a team integrate their work frequently, usually at least daily. Multiple integrations per day shall be possible. Each integration is verified by an automated build including tests to quickly detect errors.\nPair Programming Williams \u0026 Kessler, 2003 – style of programming in which two programmers work side by side at one computer, continually collaborating on the same design, algorithm, code or test. The driver types and writes the design. The navigator observes the driver and looks for defects.\nRefactoring Fowler, 2014 - the process of changing a software system in such a way that it does not change the external structure of the code, only the internal. When you refactor, you are simply improving the design of the code after it has been written.\nSingle Command Build Biedenharn, personal communication, October 2018 - describes the goal of automating the process of turning the code into a fully functional program. It functions with a single command, thus not requiring a multistep procedure.\nSingle Source Repository Fowler, 2006 - allows teams to keep the main project codebase in one easy-to-access location. This allows for easy version control; and for any new team members to get up and running easily.\nTechnical Excellence managing constraints on software development via techniques, individual skills, and practices as a team. Generally, this includes test-driven development, collective code ownership, continuous integration, and ego-less programming (Gerald Weinberg). Personal commitment to self-improvement in pursuit of software development as a craft is the driver for technical excellence.\nTest-Driven Development development driven by automated tests published by Beck, 2014:\nRed: Write a test that does not work.\nGreen: Make the test work quickly.\nRefactor: Clear up all duplications made in the process to make the test work.\nUnit Testing testing the smallest units possible to prove what was written is true. Unit testing frameworks are Xunit or NUnit for C# and .Net, Junit for Java, PyUnit for Python, Cppunit for C++.\nLinks [1] Technical Debt Marcel Baumann. 2022\n[2] DevOps for Small Applications Marcel Baumann. 2021\n[3] Advocate Zero Bug Policy in Your Projects Marcel Baumann. 2020\n[4] Legacy System Refactoring Marcel Baumann. 2020\n[5] How Healthy is Your Product Delivery Pipeline Marcel Baumann. 2018\nReferences [1] N. Forsgren, J. Humble, and G. Kim, Accelerate: The Science of Lean Software and DevOps. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/B07B9F83WM\n[2] G. Kim and N. Forsgren, DevOps Handbook, Second. IT Revolution Press, 2021 [Online]. Available: https://www.amazon.com//dp/B09G2GS39R\n[3] G. Kim, The Phoenix Project a novel about IT, DevOps, and helping your business win. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/0988262592\n[4] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[5] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[6] M. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\n[7] J. Humble and D. Farley, Continuous Delivery. Addison-Wesley Professional, 2010 [Online]. Available: https://www.amazon.com/dp/0321601912\n[8] D. Farley, Continuous Delivery Pipelines. 2021 [Online]. Available: https://www.amazon.com/dp/B096YGZVZ9\n[9] B. Beyer, C. Jones, J. Petoff, and N. R. Murphy, Site Reliability Engineering. O’Reilly Media, Inc., 2016 [Online]. Available: https://www.amazon.com/dp/1492029505\n1. The first conference dedicated to DevOps themes was held in 2009 in Ghent, Belgium. 2. The DevOps Research and assessment DORA has defined these key metrics and a strong correlation with high-performance organizations. ","categories":"","description":"","excerpt":" Your organization heard of DevOps, and your developers clamor you should adopt the approach.\nEach organization I talk with has some DevOps initiative. Often because they read that DevOps approach …","ref":"/blog/2022/introducing-devops-ideas/","tags":["agile","devops"],"title":"Introducing DevOps Ideas"},{"body":" Effective product management is driven by a customer-centric mindset. The customer is placed at the center of every decision.\nSupported by tools and techniques such as design thinking, this mindset focuses the entire organization on creating desirable, viable, feasible, and sustainable solutions.\nGood product managers balance customer needs, adequate technologies, product delivery, and governance or legal constraints.\nThey shall master project management approaches, financing mechanisms and collaborator nurturing.\nResponsibilities The primary responsibilities of product management often fall into the following areas.\nMeet Business Objectives Products and solutions must meet the economic business goals established by the organization. You should:\nDevelop a clear model of how the solution provides value to customers.\nUnderstand the cost structure and in-license models of all components and suppliers.\nCreate any necessary pricing or revenue-generating elements and out-licensing models.\nDevelop customer-centric ROI models that align with the value provided.\nIdentify financing models to create and maintain the product line. Often you shall acquire and retain the team in charge. Their expertise lowers the cost of the development and support of your product.\nAssume you need formal training in marketing, sales, finances, accounting and controlling. This is typically achieved with an executive master education during your career.\nHire and retain qualified collaborators Great products are always developed with the help of great teams. You should:\nAcquire and retain professional collaborators.\nNurture agile teams with the right set of capabilities.\nDevelop true partnerships with other companies.\nInterestingly, product managers often neglect this responsibility. They are fully aware of logistics and production issues. Seldom do they put similar effort in the development teams in charge of their products.\nGet the Product Built and Meet the Market Product managers collaborate with agile functional teams to build the required functionality.\nUnderstand customer needs As the representative of the customer, product management leverages market research and continuous exploration to continually understand your customer and market needs. Design thinking tools, ranging from personas, empathy maps, journey maps, and story maps are used to communicate these to the development teams.\nEnsure product completeness Product management is responsible for ensuring the product is considered whole and complete from a defined customer’s perspective. Products that serve multiple market segments may have different considerations of whole and complete and of minimum viable products.\nDevelop and communicate the program vision and roadmap Product management continuously develops and communicates the vision to the agile teams, while defining the features of the system. Collaborating with system architects and engineering experts, they also define and maintain the non-functional requirements NFRs to ensure that the solution meets relevant standards and other system quality requirements. They are responsible for the roadmap, which illustrates how features are intended to be implemented over time.\nManage and prioritize the flow of work Product management supports the flow of work through the program Kanban and into the program backlog, responsible for ensuring enough features are ready in the backlog at all times. Because judicious selection and sequencing of features are a key economic driver for each value stream, the backlog is regularly prioritized.\nParticipate in release and sprint planning Product Management presents the vision, which highlights the proposed features of the solution, along with any relevant upcoming milestones. They also participate in sprint planning and are responsible for approving objectives and establishing business value.\nDefine releases and program increments Owning the what means that product management is primarily responsible for release definition as well, including new features, architecture, and allocations for technical debt. This is accomplished through a series of releases, whose definition and business objectives are also determined by product management.\nWork with System Architect/Engineering to understand Enabler work While Product Management is not expected to drive technological decisions, they are expected to understand the scope of upcoming enabler work. They collaborate with System and Solution Engineering to jointly sequence the releases that will host new business functionality.\nParticipate in reviews and Inspect and Adapt (I\u0026A) Product management is an active participant in biweekly demonstrations and reviews. They also participate in assessing metrics, including the evaluation of business value achieved versus planned, and are active participants in the Inspect and Adapt workshop.\nDigital products are now almost exclusively created with agile approaches. The Scrum framework is the most popular variant over the world. A product manager shall be proficient with agile techniques and hold some certification.\nScrum Alliance, Scrum.org and PMI DAD have extensive agile training and certification offerings. Amplify Learnings Product managers ensure their offerings are supported and enhanced to create a continuous flow of value in the organization.\nCollaborating with customer experience and support While customer-centric enterprises seek to create positive customer experiences, the implementation of customer experience and product support practices varies considerably based on the product. A B2C offering may only provide email support, while a B2B offering may provide a wide range of dedicated support options. Product management is responsible for working with customer experience and support professionals to design the right offerings. Once designed, product management is responsible for helping customer experience and support manage these offerings, including creating features designed to improve support functions.\nManage supported versions Customers of complex solutions have a right to know how long they will be supported once deployed in production. Therefore, product management is responsible for defining support policies, including End-of-Life EOL.\nManage legal and compliance Product management is responsible for working with legal and compliance professionals to ensure the product meets all necessary requirements. Corporate governance is mandatory in professional organizations.\nChallenges You need to understand business techniques and financial language to fund your product development.\nYou need to understand agile HR to nurture your collaborators.\nYou should be savvy with product development processes and project-controlling tools to deliver on time and on budget.\nYou need to chop your target markets to identify your customers and products. Beware of the challenges of internal customers, business to business B2B, business to professional B2P, business to consumer B2C, and business to government B2G.\nYou need to deeply understand technologies to Manage your technology stack. Successful companies such as Apple, Microsoft, Twitter, Facebook have senior top executives with deep knowledge and practical experience with software technologies.\nCapabilities You are responsible for the successful development of products. You shall possess a set of capabilities related to this role.\nProduct portfolio responsibility toward customers and organization\nProduct portfolio and life-cycle management.\nRoadmap, release plan, and requirement analysis.\nTechnical and user support is a must for satisfied customers. The legal aspects of security, accessibility, data privacy and user protection are now a central success factor for any digital product. Internationalization and localization are regular aspects of an application.\nLine manager responsibility toward collaborators\nDepartment financial responsibility toward organization\nTechnical responsibility\nTechnology stack selection to optimize development and training costs. Strategical aspects must be considered to optimize long-term revenues and minimize risks.\nProvide interoperability to public interfaces. In the health sector, it could be the Health Level 7 HL7 set of standards. Each government defines her API to provide mandatory information for social security, value-added tax reporting, cyberattacks alarming, or statistics.\nAvoid technology obsolescence and define cost-effective migration paths.\nMotivate collaborators and be an attractive company for professional engineers.\nContinuous Training Training on the job is certainly a good approach to learning some required skills. Be honest. You still need formal continuous training to master the whole set of capabilities. The landscape of potential formal training is heterogeneous.\nProduct management and marketing are one area of specialization The offerings are mature and well-structured. Beware that modern product and project management approaches based on agile principles are often missing in the offering. Big organizations such as PMI have realized the need and are now focusing on more agile approaches.\nDigital transformation and technology awareness are a second area of specialization The available trainings either emphasize business and culture or technology. The integration of the product, organization and technology dimensions is currently not available in regular education. I assume this dichotomy reflects the silo structure of many companies.\nThe most successful digital companies, such as Microsoft, Twitter, Apple, Goggle, and Facebook have such profiles in their highest senior positions. These leaders master product development, collaborators nurturing, financial acumen, and technological savviness.\nSuccessful executives shall master culture, market and technology to launch awesome product lines.\nLeadership and collaborator management are a third specialization Modern and agile approaches are still very young. The offerings are still quite old school and not well-tailored for digital companies. The still used term human resources is quite the indicator of how collaborators hiring and retainment is done wrong in old-fashioned organizations. Persons can never be considered as resources. They are unique individuals to be nurtured and respected.\nThe following formal trainings are available through academic institutions:\nMAS Digital Business FH HWZ\nMAS IT-Leadership and TechManagement ZHAW is one of the first approaches to combine technology, business and organizational aspects.\nMAS Management, Technology and Entrepreneurship EPFL\nCAS Digital Product Lead FH HWZ\nCAS Applied Information Technology ETHZ\nCAS Digital Architect FH HSLU\nCAS Modern Software Engineering \u0026 Development FH HSLU\nCAS Digital Product Management FH ZHAW\nI strongly recommend evaluating the offerings and exhaustively discussing the content with the program director. The offerings are slowly moving to a more holistic and agile approaches. Too often, the institutes still cling to obsolete practices and are not aware of all facets of digital product development.\ntechnological factors and agile collaborator approaches are sorely missing in many curriculums.\n","categories":"","description":"","excerpt":" Effective product management is driven by a customer-centric mindset. The customer is placed at the center of every decision.\nSupported by tools and techniques such as design thinking, this mindset …","ref":"/blog/2022/digital-product-manager/","tags":["agile"],"title":"Digital Product Manager"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/design/","tags":"","title":"design"},{"body":" SoDa Software Development Agile is a homebrew project development method created at the technical university of Lucerne. It is a mixture of Waterfall, RUP and Scrum approaches. It uses a distorted Scrum for the concept and implementation phase[2].\nThe documentation was not updated the last ten years. The approach is clinically dead and should not be promoted for active software development efforts.\nA similar approach exists with the official governmental Swiss project method HERMES. At least the documentation of Hermes is better than SoDa.\nBoth approaches are quite similar. They mix a phase-based Waterfall approach with the four phases of the old RUP project life-cycle approach. RUP belongs to the family of unified process methods.\nThe four phases or gates are [1]\nInception approximate vision, business case, scope, and vague estimates.\nElaboration refined vision, iterative implementation of the core architecture, resolution of high risks, identification of most requirements and scope, more realistic estimates.\nConstruction iterative implementation of the remaining lower risk and easier elements, and preparation for deployment.\nTransition beta tests, deployment.\nIf you are using DevOps approaches, you certainly do not need an inception or a transition phase.\nThese approaches are obsolete. Almost no industrial service companies are explicitly using Waterfall or unified process approaches.\nFor most of these organizations that take a hybrid approach, this is an interim step. They intend to gradually expand their agile activities beyond the development and testing stages to the rest of the software development lifecycle.\n— Malcom Isaacs HERMES Swiss Hybrid Method If you are forced to use a hybrid method in Switzerland, please use Hermes. Never try to use SoDa. It is obsolete and sparingly documented.\nIf you want to be a professional developer, please use an agile approach. Scrum is currently the most used agile approach in the industry.\nHERMES fulfills the current requirements of federal and state administration.\nThey are mainly organized hierarchically and have to handle projects taking governance into account.\n— Hermes FAQ The major problem is that Hermes is mandatory for a set of governmental projects. You are forced to use this method as a software company if you want to work on some government initiatives [2].\nThe method is Swiss and completely unknown in Europe or abroad. Swiss commercial or industrial software development initiatives never use Hermes as a development approach.\nWhy Hybrid Methods are Hindering In his mind-expanding book The Beginning of Infinity, physicist David Deutsch describes science and the enlightenment as the quest for good explanations. He explains how various ideas in human history represent a beginning of infinity that allows us to cope with any conceivable relevant application of these good explanations.\nThis idea of infinite reach or scope is true of an agile approach to development and not true of a waterfall-based approach.\nAn agile approach to software development encourages us to start work on solving problems in smaller pieces. It encourages us to begin work before we know the answer to everything. This approach allows us to make progress, maybe sometimes in suboptimal or even bad directions, but nevertheless, after each step, we learn something new.\nThis does not mean that agile thinking is perfect or the final answer. Rather, it is an important, significant, enabling step in the direction of better performance.\nThe software product development method war is won.\nAgile approaches as described in Agile Manifesto and Scrum are the winners [3]. Eighty percent of all new software development initiatives are based on an agile approach. The most used agile approach is Scrum.\nStop being a laggard. Start using agile approaches and the Scrum framework.\nFuture Work I strongly advocate discarding all hybrid methods. No empirical evidence is available that they work is available. Anecdotal evidence shows that they regularly fail.\nWe shall use the Scrum approach as a preferred approach for developing software application [1, 2, 3]. Scrum and various Scrum scaling frameworks provide approaches for teams up to eighty developers working on the same product. I strongly state that 99.9% of all software initiatives have smaller teams.\nOne of the founders of Scrum strongly stated the same in a famous post Unsafe at any Speed. I strongly recommend avoiding SAFe for the following reasons:\nSAFe is complex and less agile. It contains waterfall elements. Their approach to software architecture is outdated and does not reflect the findings of OpenGroup, the steward of TOGAF.\nAgile release trains should align teams to a shared business and technology mission. The ideal size of a train is between 50 and 125 people working on the same product family. Most product development initiatives are smaller. ALl members of a train shall work on the same products. Using the same technology stack is not a criteria to belong to the same train.\nSAFe is not based or using Scrum. Their definition of Scrum master and product owner is different to the ones in Scrum Guide. Their key roles of a release train engineer RTE and product management do not exist in Scrum. They are more traditional project management roles. All synergy effects are lost. You must retrain your collaborators into SAFe if you go down this path.\nThe planning and release cycle is a program increment. The duration is typically 8 to 12 weeks long. This is too long for agile, DevOps, or Design Thinking approaches.\nLessons Learnt If you have a choice, do not use any hybrid method. Various studies found out that agile initiatives are three times more successful than Waterfall approaches.\nBusiness agility is not compatible with hybrid approaches. Use Lean startup or design thinking frameworks to increase your business agility and adapt to market changes. Design thinking advocates iterations of one week duration. Therefore, product increments of three months or worst RUP phases over half a year are truly incompatible with weekly cycle-time.\nWe train our students and collaborators in Design Thinking, Lean approaches, and Scrum framework. We should not force them to use later obsolete methods such as V-Model, RUP, HERMES or unsupported approaches such as SODA.\nBe responsible. Train adequately your collaborators[3], [4], [5] in the Scrum approach.\nAdvocate the agile manifesto and the twelve principles behind the manifesto.\nThe majority of hybrid methods I still encounter are bad rehearsal of the RUP development approach. The unified process was defined in the nineties and is now obsolete.\nLinks [2] Detecting Agile Bullshit. Marcel Baumann. 2019\n[3] Scrum Master Formation. Marcel Baumann. 2021\n[4] Product Owner Formation. Marcel Baumann. 2021\n[5] Scrum Developer Formation. Marcel Baumann. 2021\n[6] Scrum Guide. Jeff Sutherland, Ken Schwaber. 2020\n[7] Cargo Cult. Wikipedia\n[8] DevOps for Small Applications. Marcel Baumann. 2021\n[9] Advocate Zero Bug Policy in Your Projects. Marcel Baumann. 2020\n[10] What I learnt Teaching Agile Software Architecture. Marcel Baumann. 2021\nReferences [1] F. Heath, Professional Scrum Master Guide. Packt Publishing, Limited, 2021 [Online]. Available: https://www.amazon.com/dp/1800205562\n[2] D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\n[3] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n1. The description Craig Larman book Applying UML and Patterns. 2. The fact the method is only used in Switzerland and only when it is a mandatory requirement is a testament to its lack of success. 3. PMI has adopted disciplined agile. OpenGroup has updated TOGAF to support agile approaches. Major certification authorities such as ISAQB, IREB, ISTQB offer a track of agile certifications. You as a responsible organization shall train your collaborators in agile approaches. Stop clinging to obsolete approaches used in the last millennium. ","categories":"","description":"","excerpt":" SoDa Software Development Agile is a homebrew project development method created at the technical university of Lucerne. It is a mixture of Waterfall, RUP and Scrum approaches. It uses a distorted …","ref":"/blog/2022/yet-another-hybrid-method/","tags":["design","java"],"title":"Yet Another Hybrid Method"},{"body":" Professional software developers shall master their primary technology stack and programming language.\nI am a proficient and experienced programmer in Java.\nI have written production code in Java for the last twenty years.\nI decided to study the language in depth and acquired various Java developer certifications.\nI truly love the modern Java language and the available development environments.\nI want to understand the strengths and weaknesses of Java.\nKnowing the weaknesses of my technology stack empowers me to select alternative design approaches to mitigate the drawbacks.\nAn exploring approach is to learn more about Groovy and Clojure. I want to understand the various strengths of different programming languages. I still want to stay in the Java ecosystem to better apply my learnings.\nGroovy and Clojure are available on the Java virtual machine and have good interoperability with it. One major interest is the functional programming approach [1] and how it impacts design and development activities.\nClojure Clojure is a functional programming language and a Lisp(1) dialect [2]. The language compiles to and runs on the JVM and interfaces nicely with Java and API libraries.\nIt is better to have 100 functions operate on one data structure than to have 10 functions operate on 10 data structures.\n— Alan J. Perlis Clojure is a Lisp dialect not constrained by backward compatibility.\nExtends the code-as-data paradigm to maps, sets and vectors\nDefaults to immutability\nCore data structures are extensible abstractions\nProvides approaches to concurrent programming\nEmbraces the JVM platform\nExpressions and Statements Expressions are as expected in a programming language.\nThe and and or operators provide shortcut evaluation. Beware that they are implemented as macros and do not always behave as functions. You will realize it when you try to pass them as function parameters.\n; binds a name to a value. If value is an expression, it is first evaluated. (def \u003cname\u003e \u003cvalue\u003e) ; binds a name to a function. (defn \u003cname\u003e[{\u003cparameter} ] (\u003cexpression\u003e)) ; else is optional, if not present the expression returns null in the false case (if (\u003ccondition\u003e) (\u003ctrue-expression\u003e) (\u003cfalse-expression)) ; conceptually when is an if with only a true path (when (\u003ccondition\u003e) (\u003ctrue-expression\u003e)) ; conceptually when not is an if with only a false path (when-not (\u003ccondition\u003e) (\u003cfalse-expression\u003e)) ; cond process on condition after another, the expression of the first condition being true is executed and the expression completes. (cond (\u003ccondition-1) (expression-1) (condition-2) (expression-2) :else (expression-else)) (case \u003cvalue\u003e \u003cvalue-1\u003e \u003cexpression\u003e \u003cvalue-2\u003e \u003cexpression\u003e \u003cexpression-else\u003e) (loop [] (\u003cexpression-loop\u003e)) (do {\u003cexpression\u003e}) The truth axioms in Clojure are a refreshing view of the programming world. The numerical tower and implicit type conversions are well-thought and minimize boilerplate code.\nLanguages with implicit conversion function support have similar quality. Sadly, Java does not support an extensible numerical tower or implicit type conversions. The dreadful way to use BigInteger, BigDecimal, and the missing complex type are proofs.\nFunctions and Closures Functions are a key construct for a functional language. You can define functions and closures using:\n(def \u003cname\u003e (fn [] (\u003cexpressions))) (defn name [] (\u003cexpression\u003e)) (let [{\u003cname\u003e \u003cexpression}] (\u003cexpression\u003e)) letfn[{(fn \u003cname\u003e [\u003cparameters\u003e] (\u003cexpression\u003e))}] (\u003cexpression\u003e) Higher-order Functions and Sequences Sequence abstraction permeates the design and API of Clojure. Functional programming and higher order functions emphasize the design of functions working on generic data structures.\n(filter predicate collection) ; (1) (map f)(map f collection)(map f c1 c2)(map f c1 c2 c3)(map f c1 c2 c3 \u0026 collections) ; (2) (reduce f collection)(reduce f value collection) ; (3) (apply f args)(apply f x args)(apply f x y args) (apply f a b c d \u0026 arguments) ; (4) 1 Returns a lazy sequence of the items in coll for which (predicate item) returns logical true. predicate must be free of side effects. Returns a transducer when no collection is provided. 2 Returns a lazy sequence consisting of the result of applying f to the set of first items of each collection, followed by applying f to the set of second items in each collection, until any one of the collections is exhausted. Any remaining items in other collections are ignored. Function f should accept number-of-collections arguments. 3 f should be a function of 2 arguments. If value is not supplied, returns the result of applying f to the first 2 items in coll, then applying f to that result and the 3rd item, etc. If collection contains no items, f must accept no arguments as well, and reduce returns the result of calling f with no arguments. If collection has only 1 item, it is returned and f is not called. If value is supplied, returns the result of applying f to val and the first item in collection, then applying f to that result and the 2nd item, etc. If collection contains no items, returns value and f is not called. 4 Applies fn f to the argument list formed by prepending intervening arguments to args. The powerful advantage of dynamic typed language is that algorithms just work with various parameters. As long as the parameters support the required functions, there is no need to provide a specific interface.\nRecursion, Tail Recursion, Currying, Memoization, Destructuring Recursion is implemented as expected. Recursion is preferred over loops.\nYou can explicitly optimize tail recursion with the operator recur. [1].\nCurrying approach is the partial operator. The operator maps a set of parameters to value and return a function which arity is the number of free parameters.\nMemoization is provided with the memoize operator wrapping the function in need of. The documentation is very shallow about the costs of memoization and the behavior of the cache. No functions are provided to influence or clear the cached data.\nDestructuring is well-supported for sequences, structures, and in keyword arguments.\nThoughts Clojure provides type hints to help the compiler to find the correct method. This feature is necessary to cleanly interface with Java and support edge cases.\nClojure has a spec library to express constraints on the parameters and return types. This approach allows you to define a dynamic type system over your abstractions. You are in charge of maintaining and verifying the coherence of this type system.\nI prefer to delegate such verification and validation to the compiler. I would postulate that if your type system grows in complexity, it is type to reflect and start using object-orientation and object modelization.\nJava Java is the work horse for implementing enterprise and departmental software solutions. The language and libraries are regularly improved and a new version is currently delivered every six months [3]. Early adaptor distributions are provided to smooth the migration of your code.\nToo many Java developers did not realize that their programming language is evolving. They still write archaic and plainly suboptimal code instead of using the new syntax and constructs.\nExpressions and Statements The newer and rediscovered features are:\n(\u003cboolean-expression\u003e) ? true-expression : false-expression (1) switch value { (2) case null -\u003e expression; case value instanceof Type \u0026\u0026 boolean-condition -\u003e expression; case value instanceof Type -\u003e expression; default -\u003e expression; } 1 The ternary operator always provided a conditional expression in the Java language. 2 The switch expression return a value upon completion. A better idiom for equals without any conditional statement is now recommended:\n@Override public boolean equals(Object obj) { return (obj instanceof MyType o) \u0026\u0026 super.equals(o) \u0026\u0026 Objects.equals(someValue(), o.someValue()); } Functions and Lambdas Lambda expressions are well-supported in Java. The java.util.function package provides the expected abstractions. Function composition is supported through the provided abstractions.\nTransparent support of functions as a first-class citizen is still not completed. The concise method bodies proposal is still not implemented in year 2022.\nHigher-order Functions and Streams Lambdas and streams were introduced in Java 8 and released in March 2014. The newer versions of Java have refined the abstractions and added methods to simplify frequent use cases.\nThe stream library is a well-implemented approach to manipulate sequences with higher-order functions.\nRecursion, Tail Recursion, Currying, Memoization, Destructuring Recursion is well-supported in Java. The environment still does not support tail recursion optimization. I almost feel sorry that a modern programming language is missing such a well-known optimization. The Java community somewhat promised us that in the future we could get this optimization through the project Loom.\nCurrying is cumbersome to implement in Java.\nMemoization and destructuring are currently not supported.\nThoughts Java roots are object-orientation and mutability.\nLambda and stream features are the first serious effort to support functional programming idioms. The approach is well-designed and powerful enough to handle all algorithms manipulating sequences and collections.\nFunctions and expressions are still not handled as first-class citizens. The current improvements in the switch expression acknowledge the cliff. These improvements also slowly empower us to write a more functional code.\nGroovy Of course, Groovy is not a perfect tool for every application. Great in script-like, Groovy is not necessarily equally useful in normal, production coding. While dynamic typing gives you a productivity boost, it slows down refactoring afterwards when writing code. That is a huge drawback if you have dozens of classes in a project tangled by dependencies.\nExpressions and Statements One cool feature of Groovy is the support of operators as syntactic sugar. I would welcome this feature in Java. I dream of writing legible expressions with BigInt or BigDecimal types. The current method call approach destroys the legibility of the source code.\nassert 3.2 == 1.2G + 2G (1) assert 10 == 10.1g - 0.1G 1 To create a BigDecimal, we can use the G suffix. Functions and Lambdas Closures are built-in abstractions.\nHigher-order Functions and Sequences Sequences and higher-order functions are built-in constructs. Groovy syntax is certainly groovy and less verbose than Java. But Groovy is not functional style friendly.\nRecursion, Tail Recursion, Currying, Memoization Functional programming prefers recursion to iteration. Groovy provides a tail recursion optimization mechanism the programmer has to explicitly call. The approach eliminates stack overflow exceptions. The performance of the generated code is still below regular recursive Java solutions.\n@TailRecursive (1) static BigInteger factorial(int number, BigInteger acc = 1) { if (number == 1) { return acc } return factorial(number - 1, acc.multiply(BigInteger.valueOf(number))) } def last (2) last = { it.size() == 1 ? it.head() : last.trampoline(it.tail()) } last = last.trampoline() 1 The annotation is used for tail-recursion optimization of methods. 2 The trampoline operator is used for tail-recursion optimization of closures. The transformation avoids stack overflow but makes the code slightly slower. Memoization is also supported through an operator.\ndef fib = { n -\u003e if(n == 0) 0 else if(n == 1) 1 else fib(n-1) + fib(n-2) }.memoize() Thoughts Clojure is brilliant in the support of dynamic dispatch at runtime. The refined design of their collections is a proof of their support for functional approaches. I am not convinced that dynamic inheritance and protocols promote maintainability of software products.\nJava is slowly moving to improve their support:\nSwitch expressions are now more functional. In Spring 2022, deconstruction of records, objects and arrays is still not available.\nFirst class citizen status for functions is still ongoing. You still not define the implementation of a virtual method using the lambda notation or a method reference. I agree it is a detail. But it is a signal if you want to truly support functional approaches.\nNice is the effort to improve the collections. The sequence interface would improve the legibility of the standard collections. It is still a hack that unmodifiable collection throws an exception if your code calls a modifier. It is time to introduce an unmodifiable interface for the various collections.\nGroovy is awesome in how operator support enhances the legibility of the source code. The implementation is syntactic sugar.\nJava libraries are best of breed. Backward compatibility and static type checks are immensely helpful for enterprise applications developed over decades. You do not want to throw away such a huge investment.\nI like properties and the elegance of grouping the declaration of the field with the methods. I am still not certain it makes the code quite more legible or maintainable.\nIf you want to write a functional code with immutable objects, the availability of a with construct is a huge improvement.\nFunctional programming with sequences is well-supported in all three environments. Clojure has the edge. The language is dynamically typed and provides sequence handling for all collections.\nJava is statically type. You need first to convert a collection into a stream. Easy to do, but you have to write the code.\nAnd as an engineer, I truly acknowledge the performance edge of Java against Clojure or Groovy. Newer approaches based on GraalVM should close the performance gap in the future.\nRecommendations for A Java Developer Java 8 and functional features were introduced in March 2014. Every Java programmer should now be a functional programming expert. Here are some idioms you should use:\nEmbrace functional programming and use the stream approach for all collection traversals.\nStop using iterations to process sequences. Please use streams. Declare your intent, do not describe the implementation.\nReturn Optional\u003cT\u003e or an empty list Collections.emptyList(). Please do not return null values.\nCreate predicates using java.util.function.predicate\u003cT\u003e instead of complex boolean conditions.\nLearn to compose functions through the helper methods of the java.util.function package.\nUse the switch expression and the ternary operator ?:. Please avoid if and switch statements.\nThrow only unchecked exceptions. Stop creating and throwing checked exceptions. Beware that stream and lambda expressions cannot handle checked exceptions.\nEmbrace immutability and the record construct.\nUnderstand deconstruction patterns and how you could apply them in our code.\nReferences [1] N. Ford, Functional Thinking: Paradigm Over Syntax. O’Reilly Media [Online]. Available: https://www.amazon.com/dp/B00LEX6SP8\n[2] S. D. Halloway, Programming Clojure. 2012 [Online]. Available: https://www.amazon.com/dp/B07BN4C92X\n[3] J. Boyarsky and S. Selikoff, OCP Oracle Certified Professional Java SE 17 Study Guide. Wiley \u0026 Sons, Limited, John, 2022 [Online]. Available: https://www.amazon.com/dp/B09WJP11JL\n1. The trampoline operator is available for indirect recursion cases. ","categories":"","description":"","excerpt":" Professional software developers shall master their primary technology stack and programming language.\nI am a proficient and experienced programmer in Java.\nI have written production code in Java for …","ref":"/blog/2022/java-groovy-clojure/","tags":["agile","jvm-languages","series-students"],"title":"Java, Groovy, Clojure"},{"body":" The dreaded attack through the log4j logging library was a wake-up call for all companies using obsolete libraries. Many organizations found out the hard way they cannot update the library and deploy the new version in a matter of minutes as professional developers should do. They needed weeks to perform such a simple activity.\nThey also found out that they had no process for such regular situations when a critical flaw is detected in some software they are using. Seldom did they have the expertise how to upgrade or improve open source artifacts they are using on a daily basis. They preferred to use free software and not to invest any thoughts or efforts to support the community.\nUpdate Your JDK and JVM A new version of the Java development kit is released every six months. Early adaptors versions are always available to migrate and test your solutions. Each new version fixes hundreds of bugs and provides new productive features.\nUpdate your JDK in a timely manner.\nDo not be a laggard as most of the big companies are. Most of these organizations are still using Java 8 beginning of year 2022. Java 8 was officially released in March 2014.\nDo not say you cannot update your JDK every six months. If your organization is not able to plan and execute such simple updates for mission-critical products, you have acute problems. Solve them now. Update Your Libraries Gradle versions catalog is a new feature in modern versions of Gradle that allows you to centralise your project dependencies, plugins and their respective versions into a single location. Plugins are available to check if new versions of your libraries and plugin are available. I simply execute the following command to detect new versions.\ngradle dependencyUpdates -Drevision=release (1) 1 Check that any libraries or plugins in the project have a newer available version. I still have to decide if I shall update the library. The usual approach is to simply update, and run all unit and integration tests. If all tests passed successfully, I shall simply upgrade to the newer version otherwise I simply roll back the changes or start a debugging session to find out why some tests failed.\nThe Linux community is not better. Timely updates are not common in quite a few organizations. The Linux core developers decided in 2022 to migrate from the C89 standard to the C11 standard. Instead of using a version created thirty-five years ago, they will now program with a solution specified eleven years ago.\nBeware of Technical Debt Growing technical debt is the death of any application. No company can afford to invest huge amounts of money for small changes in the application.\nUse static code analyzers to detect traditional security issues and legacy programming constructs.\nConstantly remove technical debt from your application. Each time you have to edit a specific source code, remove some smells in the same file.\nIntelliJ IDEA IDE provides static code analysis and improvements suggestion out of the box.\nPlugins such as SonarLint, SpotBugs, PMD, Checkstyle provide different sets of checks. You can run these analyses directly in the IDE. Add these checks to your continuous integration pipeline to introduce a quality gate into your development process.\nMonitor, Log, Audit Professional teams constantly monitor their applications. Activities are logged for regular assessments and in case of troubleshooting. Critical information is audited to respect corporate governance and legal requirements as well.\nWhat We learnt Fallacy of maintenance costs Regular technical maintenance is a well-known approach to optimizing the value of the product. Why does the software industry think that maintenance is a cost point and not an investment?\nIgnorance of legal consequences Your company and you are legally responsible for protecting customers and stakeholders against known dangers and flaws. You are liable to losses of money and reputation for your customers. The big economic blocks have strengthened their protection laws and have introduced heavy fines and potential prison penalties for convicts.\nLacking professional ethics I will never go to a physician not following hygiene and prevention good practices and regulation. Why should I acknowledge a software developer ignoring documented and accepted approaches to improve quality and reduce risks?\nBe proud to create effective and secure products. You are a professional software engineer. You shall behave ethically and take responsibility for failures.\nLinks Modern Java Development\nTime to Migrate to a Modern JDK, Laggards!\n","categories":"","description":"","excerpt":" The dreaded attack through the log4j logging library was a wake-up call for all companies using obsolete libraries. Many organizations found out the hard way they cannot update the library and deploy …","ref":"/blog/2022/modernize-your-java-landscape/","tags":["agile"],"title":"Modernize Your Java Landscape"},{"body":" Spring and Spring Boot frameworks are the standard for enterprise Java applications.\nSpring Boot makes it easy to create stand-alone, production-grade Spring-based Applications that you can just run.\nThey take an opinionated view of the Spring platform and third-party libraries, so you can get started with minimum fuss.\nMost Spring Boot applications need minimal Spring configuration.\nMinimize Boilerplate Code One of the key reasons for the success of Spring is the approach of convention over configuration. You want to minimize boilerplate code and never have to write XML configuration files.\nA lot of approaches, such as DTO force developers to write useless boilerplate code. Try to avoid these cumbersome tasks.\nUse Lombok to create Java bean accessors methods and provide a builder to create instances. Always consider using modern constructs such as record and sealed class to improve the legibility of your design.\nTransform your objects with MapStruct library or similar ones. Better minimize the usage of data transfer objects DTO.\nDeploy as an executable application. You do not need an application server.\nPackage the whole application in a docker image for integration and testing activities.\nLightweight Database Your services need to store persistent information in a database. Spring framework promotes an SQL database and JPA as object mapper.\nA lightweight approach simplifies local development and speed-up the integration testing through your CI/CD pipeline.\nOur current approach is:\nuse HyperSQL embedded database for local development and continuous integration pipeline. No need to install database software and fast turnaround during development.\nisolate domain persistent data in separate databases or schemas.\ncontrol your persistent design using the Spring schema.sql and data.sql description files.\nuse views for read-only complex models. Always implement business logic in Java. Prohibit integrity constraints between schemas to respect the principles of domain-driven design.\nuse Flyway to update database schema and migrate persistent information into the new database schema.\nuse Spring mechanisms to load technical test data into the database before running automated integration tests. Professional software development requires the creation and maintenance of a technical test database.\nDefine a schema per domain to isolate your domain model in the database. Use the Spring files schema.sql to define a clean database model. Do not define any integrity rules between schemas to insure modularity of your bounded domains down to the persistence layer.\nJPA supports schemas through a standard annotation.\nimport javax.persistence.Entity; import javax.persistence.Table; @Entity @Table(name = \"Appointments\", schema = \"Calendar\") (1) public class Appointments {} 1 The name field defines the name of the table for all appointments, the schema field defines the schema containing the table. Views for read-only objects Business logic should be in services.\nFluent Getter and Setter Spring Persistence and JPA Extends persistence to support Java abstractions such as enumeration sets\nUse record construct for immutable entities\nConfigure Jackson\nimport com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @JsonIgnoreProperties({\"hibernateLazyInitializer\"}) @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY) public class Appointments {} Configure lombok through lombok.config configuration file at the root of your project.\nlombok.accessors.chain=false (1) lombok.accessors.fluent=true (2) config.stopBubbling = true 1 traditional accessors without a chaining feature. It is fully compatible with the approach provided by records. 2 discard legacy get and set verbs for getters and setters Libraries such as Lombok, Jackson, JOOQ, Hibernate, MapStruct, Spring, Spring Boot have support for abstractions using the fluent approach.\nFluent getters are standard with the official Java record feature.\nEliminate DTO JSON objects are your data transfer objects JSON schema define the data model and validate it.\nUse annotation to remove AOT artifacts generated through JPA enhancements.\nUse annotation to coerce Jackson to not request old fashion property getters and setters.\nConfigure Jackson to support records.\nUse plain old Java objects POJO to exchange information between layers inside a Java application.\nIf you have to return complex aggregated objects for a persistence store, use views, persistent layer queries to populate read-only objects. Java provides the record construct for such situations. The need to define frequent queries to generate aggregate views are a smell that your design has flaws.\nSchedulers in Spring Scheduled jobs are easy to defined and use with Spring.\nPlease do not use homebrew solutions or cron jobs. The Spring scheduler component is powerful enough for most of the scenarios. It builds up on the features of ScheduledExecutorService provided in the standard Java API.\n@Slf4j @Service @Transactional public class AppointmentScheduler { private final AppointmentService service; public AppointmentScheduler(AppointmentService service) { this.service = service; } @Scheduled(fixedDelay = 1000) public void sendAppointmentRatingEmails() { log.debug(\"Scheduled task to send appointment rating emails {}\", LocalDateTime.now()); service.sendRatingPendingEmails(); } } User Interface Use Vaadin for internal applications and B2B applications. Vaadin is a good approach up to a few thousand active users. Vaadin is a Java solution based on the same technology stack used in Spring. Support libraries and tutorials are provided by Vaadin to integrate the Spring framework.\nUse Thymeleaf and Bootstrap for B2C applications. These frameworks introduce new technologies. Developers shall be trained to avoid bad solutions.\nUse AngularJS or VueJS if you have a lot of budget. These frameworks introduced a technology stack based on JavaScript or ideally on Typescript. New versions of the Typescript language and of the user interface framework are released every few months. Experience shows that a major rework of the source code and design decisions is necessary at least every eighteen months.\nMaster Advanced JPA Concepts We had to find ways to support standard API classes in the Spring and JPA worlds. We had an enumeration set property we needed to persist.\n@Data @Entity @Table(name = \"Ratings\", schema = \"Calendar\") @JsonIgnoreProperties({\"hibernateLazyInitializer\"}) @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY) public class Rating implements Serializable { @Converter public static class RatingTagsConverter extends EnumSetConverter\u003cRatingTags\u003e { @Override protected Class\u003cRatingTags\u003e clazz() { return RatingTags.class; } } @Column(name = \"tags\") @Convert(converter = RatingTagsConverter.class) private EnumSet\u003cRatingTags\u003e tags; } The generic converter for the regular enumeration set Java class is:\n/** * Provides an enumeration set converter to enable storing and retrieving enumeration sets for the persistent store. * * @param \u003cT\u003e Enumeration type of the set */ @Converter public abstract class EnumSetConverter\u003cT extends Enum\u003cT\u003e\u003e implements AttributeConverter\u003cEnumSet\u003cT\u003e, String\u003e { private final static String SEPARATOR = \",\"; @Override public String convertToDatabaseColumn(EnumSet\u003cT\u003e set) { return set.stream().map(Enum::name).collect(Collectors.joining(SEPARATOR)); } @Override public EnumSet\u003cT\u003e convertToEntityAttribute(String values) { return Strings.isBlank(values) ? EnumSet.noneOf(clazz()) : Arrays.stream(values.split(SEPARATOR)).map(o -\u003e Enum.valueOf(clazz(), o.trim())) .collect(Collectors.toCollection(() -\u003e EnumSet.noneOf(clazz()))); } /** * Return the class of the enumeration type stored in the enumeration set. * The method is necessary due to type erasure in Java generics. * * @return class of the enumeration type */ protected abstract Class\u003cT\u003e clazz(); } Different approaches found on Stackoverflow or Spring blogs did not work. I was stunned by the amount of code that I needed to write to persist a standard Java API collection class.\nTips and Tricks Use the Spring mechanisms to streamline unit and integration tests. Please, write unit and integration tests.\nTrain all the developers in Spring framework [1]. The organization shall encourage certification in key technologies used in their mission-critical applications. You need at least one professional Spring developer to smooth the learning curve.\nUse the latest Java version. Motivate your experts and allow them to work with current environments and libraries. Professional developers do not like to work with obsolete tools.\nUse IntelliJ IDEA as an integrated development environment. The environment increases the productivity of your development teams.\n1. Spring organization provides certification path. ","categories":"","description":"","excerpt":" Spring and Spring Boot frameworks are the standard for enterprise Java applications.\nSpring Boot makes it easy to create stand-alone, production-grade Spring-based Applications that you can just run. …","ref":"/blog/2022/modern-java-with-spring/","tags":["agile","java"],"title":"Modern Java with Spring"},{"body":" In the midst of the agile adoption explosion, many teams are experiencing difficulties.\nOrganizations often mix agile with Scrum.\nOne of the most common misconceptions about Scrum is that it is synonymous with agile. Agile Manifesto is an umbrella term that refers to a family of approaches that share common values and principles.\nScrum is a commonly used agile framework that offers suggestions for how work can be organized to maximize the value of the end-user.\nWhile Scrum is implemented at a product development team level, agile has a focus on the entire organization including its leadership and company culture. Both are relatively easy to start down the path but difficult to master.\nMany organizations use Scrum in combination with other agile principles and practices. Even if Scrum seems like a relatively easy framework to implement, there are changes needed on the individual and organizational level that scrum does not address.\nTeams often try hard to use new ways of working and learning. The challenge is to explore the new approaches and not to fall back to traditional processes.\nAccording to the 15th Annual State of Agile report, 46% of survey respondents report struggles with inconsistent practices and 43% report cultural classes.\nWhat are signs your teams are struggling with agile and lean adoption?\nCommon Symptoms Below are some common symptoms of teams who are pretending to be agile:\nTeams are not delivering a done, a usable increment at the end of each sprint. By usable we mean that the product is fully tested and provides a fully usable increment of valuable functionality. The product increment must be deployed on a server for internal or external use.\nThe daily Scrum is a status update instead of a small planning session. Reporting to attending managers is a clear sign of distrust and micromanagement.\nThe sprint review meeting is merely a demonstration, and not an opportunity for collaboration. A clear sign of dysfunctional Scrum is when the content and the priority of backlog items is never updated during a sprint review.\nThe sprint retrospective does not result in actionable improvement ideas that the Scrum team addresses proactively.\nThe quality of the product resulting from the Scrum team’s work is not increasing [1].\nThe Scrum master is not coaching the Scrum Team or the parent organization in techniques to improve the use of the Scrum framework.\nDevelopers do not self-manage or collaborate with the Product Owner on ways to maximize the product’s value.\nThe organization does not respect the Product Owner’s decisions.\nResource managers do not know how to support agile teams.\nDark Agile The problem is when a team begins to use an agile framework incorrectly.\nThe team begins to focus more on their adherence to the process than they do to stay true to Agile values.\nThis is Dark Agile [4].\nThe team presents itself as agile and believes it is practicing agile, but it is not. It is practicing a framework without the support of agile values.\nThis can lead to micromanagement, a squashing of adaptability toward customers’ changing needs, and an extreme lessening of the benefits gained from Agile practice.\nRemember that Scrum, Lean, and agile approaches are tools to improve the quality and effectiveness of your product development.\nScrum is a framework and a set of techniques to help you improve your way of creating awesome products. The ultimate goal is the product, never the process.\nHow to Be Agile? Emphasizes key values and principles over blindly applying a method [9].\nApply the twelve principles of the agile manifesto.\nPlease read the [8]. Delve in documented experiences [1], [2], [3].\nEmpiricism and lean thinking are the foundations of Scrum. Measure your work to find out if your improvement measures are successful. Drop all initiatives which do not provide measurable improvements in quality, effectiveness and productivity.\nTrain your collaborators [5], [6], [7].\nVisualize your initiatives and their metrics. I want to see typical lean diagrams on the walls of your project space. If your Scrum masters or product owners have only attended the initial two days training and never continued on the path, they are laymen. You should work with professionals.\nCheck your culture. Agile means you always trust all your collaborators. Your ways of working emphasize transparency, inspection and adaptation. Therefore, all information is available to all collaborators!\nHire for cultural agile fit. Recognize not everybody wants to develop products in the agile way. Please hire collaborators who are comfortable with agile approaches, autonomy and accountability.\nLinks [1] The Great Scrum Master. Zuzana Šochová, Addison-Wesley. 2017\n[2] Scrum A Pocket Guide, 3rd Edition. Gunther Verheyen. Van Haren Publishing. 2021\n[3] Mastering Professional Scrum: A Practitioner’s Guide To Overcome Challenges and Maximize the Benefits of Agility. Stephanie Ockerman and Simon Reindl. Addison-Wesley. 2020\n[4] Detecting Agile Bullshit. Marcel Baumann. 2019\n[5] Scrum Master Formation. Marcel Baumann. 2021\n[6] Product Owner Formation. Marcel Baumann. 2021\n[7] Scrum Developer Formation. Marcel Baumann. 2021\n[8] Scrum Guide Jeff Sutherland, Ken Schwaber. 2020\n[9] Cargo Cult Wikipedia\n1. Your organization focuses more on how to write stories in JIRA instead of delivering awesome products. ","categories":"","description":"","excerpt":" In the midst of the agile adoption explosion, many teams are experiencing difficulties.\nOrganizations often mix agile with Scrum.\nOne of the most common misconceptions about Scrum is that it is …","ref":"/blog/2022/doing-agile/","tags":["agile","series-students"],"title":"Doing Agile"},{"body":" The majority of software product development initiatives use an agile approach. The most popular framework is currently Scrum.\nIt is natural that organizations would gravitate towards the many benefits agile ideas provide.\nScarce resources and time-to-market constraints have driven the implementation of shoring development initiatives. Awareness that talent can be found at any location speeds up the trend.\nThe outsourcing market is undergoing constant evolution. Traditionally, cost reduction was the key driver for software development outsourcing, but now it doesn’t even make the top five, according to Deloitte’s 2018 Global Outsourcing Survey.\nCost was back as the major driver in 2020. The COVID-19 pandemic had a huge impact in 2020. Instead, the top five reasons organizations opt for IT outsourcing in 2018 are:\nCatalyst for innovation (64%) means internal department cannot innovate fast enough.\nImprovement of speed and time to market (63%) means internal teams are slow.\nImprovement of performance (54%) means the company does not perform.\nEnhancement of scalability and rapid elasticity (54%) means organization is slow to react.\nAccess to new technology (51%) means the company is stuck with obsolete technologies and processes.\nThe top five reasons organizations opt for IT outsourcing in 2020 are:\nCost (70%)\nFlexibility (40%)\nSpeed to market (20%)\nAccess to professional tools and processes (15%)\nAgility (15%)\nCommunication is essential to successfully implementing agile software development. And not just any form of communication. It has to be in real-time. Your team needs to have access to you, and vice versa, throughout the workday so that you and your team can work through issues immediately.\nAn agile shoring approach can be very successful.\nYour organization needs to take the transformation seriously. You must invest in cultural changes and adapt your processes to realize the full potential.\nTeam Models Needs Extended Team Managed Team Outsourced Team Needs\nGet additional development capacity for an existing team.\nBuild a core development team to take over a product development.\nTeam develops a custom solution for you. You get a finished product.\nRisk and Responsibility\nStay fully in charge of product development and team management.\nShare the risks and responsibility with the team and maintain some flexibility.\nExternal team fully responsible for building the team and developing the product from discovery to final release.\nFlexibility\nGet maximum flexibility: interview the candidates, take all decisions, setup processes and policies.\nShare our product vision and product roadmaps, make key technology decisions. The team ensures technology alignment, team training and motivation, professional growth and overall team management.\nYou provided ideas and requirements. The team delivers the product. Take full advantage of the team’s expertise.\nTeam Composition\nDevelopers and a senior engineer to coach and support the developers.\nFull Scrum team with cross-functional team developers including senior designers, quality specialists, and architects. A Scrum master coaches the team and takes over member development and administration tasks.\nFull Scrum team with cross-functional team developers including designers, quality specialists, architects and DevOps. A Scrum master and product owner round up the team capabilities.\nChoose\nDistributed team with smaller size\nLocal development team and remote product owner. You keep product responsibility.\nLocal product development team You delegate product responsibility to the local team.\nNearshore advantages Geographical and Cultural Proximity Nearshore locations are located in or near Europe, making it easy to reach from most European cities via air connection As a European nation. We share the same mentality, values, and business culture as our clients. It provides an excellent foundation for a long-lasting and productive nearshore partnership.\nConvenient time zone and no jet lag A time difference of zero to two hours between nearshore locations and EU countries allows for setting up convenient cooperation. It avoids exhausting jet lag. Software engineers can engage with our clients during their business hours, maximizing efficiency while enhancing productivity.\nIntellectual property protection European security and privacy requirements such as those imposed by ISO, GDPR, PCI and HIPAA are understood. Compliance with European legislation can be achieved.\nRisks Language All documents and comments in the source code shall be legible for all team members. Discussions and remote conferences shall be held in a language available to all members. A shoring strategy implies this language must be International English. All documents, emails and chats must therefore be written in English. Your organization has to recognize this profound change and train all your collaborators to become fluent in written and spoken English.\nCultural Barriers The shored team collaborators shall be integrated in the company as respected and valuable colleagues. Avoid any statements containing we versus they. Meeting times should be good for all participants. Location of documents, source code, and artifacts should have the same availability and comfort for all members.\nCompany Binding Effort must be put in the integration of the nearshore teams. Churn rates can be as high as 50% per year.\nCapabilities Talent is a precious resource. Companies are fighting to acquire talented developers all over the world. You should have a clear strategy to acquire and retain talented engineers. The strategy blends together why you are attractive for talents and why they should stay in your organization.\nAgile Approaches The various departments and locations should have similar approaches to agile frameworks and processes. A good solution is to standardize on Scrum. Train and certify all collaborations in Scrum and your technology stack to create common ground and vocabulary.\nChecklist Ask yourself if your company culture and processes treat all collaborators fairly. Is our company willing to:\nWrite all project documentation, source code, emails and chats in English?\nHold all meetings, workshops and discussions in English?\nTrain all collaborators in cultural aspects?\nHost physical meetings using round-robin in all locations?\nSchedule all meetings so that all locations have similar constraints for early or late work?\nShare financial and strategic information to align all collaborators?\nSet up the infrastructure to not differentiate between company offices and nearshore locations?\nBuy all licenses so that all developers are using the same tools?\nProvide the same trainings, certifications and conference access to all developers?\nSupport meritocracy? Any role can be held by a local or a remote collaborator?\nNext Development The Corona crisis has pushed collaborators to work from home over a long period. I also observe that quite a few teams are heavily distributed geographically and often live in different countries.\nThis constellation is not more a nearshore team. The organization has moved to an all-remote setup without a common office location [1].\nAll-remote work promotes:\nHiring and working from all over the world instead of from a central location.\nFlexible working hours over set working hours.\nWriting down and recording knowledge over verbal explanations.\nWritten processes over on-the-job training.\nPublic sharing of information over need-to-know access.\nOpening up documents for editing by anyone over top-down control of documents.\nAsynchronous communication over synchronous communication.\nThe results of work over the hours put in.\nFormal communication channels over informal communication channels.\nBeware that all-remote approach is a disruptive cultural change for a traditional organization with offices.\nLinks [1] Scrum Master Formation. Marcel Baumann. 2021\n[2] Product Owner Formation. Marcel Baumann. 2021\n[3] Scrum Developer Formation. Marcel Baumann. 2021\n[4] Agile Fluency Model. Marcel Baumann. 2021\n[5] Detecting Agile Bullshit. Marcel Baumann. 2019\n[6] Agile Software Architecture is Mainstream. Marcel Baumann. 2021\n1. Companies such as GitLab, SonarCloud, and Attlassian adopted this model years ago. ","categories":"","description":"","excerpt":" The majority of software product development initiatives use an agile approach. The most popular framework is currently Scrum.\nIt is natural that organizations would gravitate towards the many …","ref":"/blog/2022/agile-and-nearshore-development/","tags":["agile"],"title":"Agile and Nearshore Development"},{"body":" Historically, big beats small. Scale was a sufficient advantage to be successful in the market.\nNow, fast and adaptive beats slow and steadfast.\nNew technologies, evolving customer preferences and changing employee expectations are fundamentally challenging established ways of working [1].\nIt is time to move beyond rigid hierarchies, siloed business units, crippling bureaucracy and an increasingly unwieldy matrix.\nAgile organizations combine the efficiencies of scale with the speed, flexibility and resilience to compete and win in today’s world.\nIncreasing agility is a path.\nProgressing on that path requires vision, belief, persistence and hard work.\n— Gunther Verheyen Companies are asking themselves:\nWhy does our organization struggle to move quickly and what can we do about it?\nHow do we empower our people to take more accountability for performance and truly embed customer centricity?\nHow do we organize for both sides of the productivity equation—cost and innovation-driven growth?\nChallenges of Agile Companies Now, we find the machine paradigm shifting in the face of the organizational challenges brought by the digital revolution that is transforming industries, economies and societies. This is expressed in four current trends:\nQuickly evolving environment Stakeholders’ demand patterns are evolving rapidly: customers, partners and regulators have pressing needs; investors are demanding growth, which results in acquisitions and restructuring; and competitors and collaborators demand action to accommodate fast-changing priorities [2].\nConstant introduction of disruptive technology Established businesses and industries became a commodity or were replaced through digitization, bioscience advancements, the innovative use of new models, and automation. Examples include developments such as machine learning, the Internet of Things, and robotics [3].\nAccelerating digitization and democratization of information The increased volume, transparency and distribution of information require organizations to rapidly engage in multi-directional communication and complex collaboration with customers, partners and colleagues [4].\nThe new war for talent As creative knowledge- and learning-based tasks become more important, organizations need a distinctive value proposition to acquire and retain the best talent. These knowledge workers often have more diverse origins, thoughts, composition and experience and may have different desires, (for example, millennials).\nTrademarks of Agile Organizations Agile organizations are working daily to improve. There is no substitute for doing hard work. They try to figure out solutions to difficult problems as they go along, using Scrum as a canvas to illuminate the way.\nLife can only be understood backwards; but it must be lived forward.\n— Kierkegaard Non-agile organizations are only talking [5]. The illusion of agility is often established in such companies. Internal working groups are drafting transformation plans, updated processes, and guidelines. Where is the doing? It was one of the findings of thw SwissQ agility report 2020.\nIt is not a transformation if it does not change how you work.\nIt is not an agile transformation if it does not simplify how you work.\nIt is not an agile transformation of Scrum if it does not increase the actual collaboration between customers, teams and stakeholders.\n— Gunther Verheyen Just look at all these companies trying to copycat Spotify ways of working. Their dreadful hope is that the copycat will solve all their flaws. Agile is not magic nor a silver bullet!\nFully understand that:\nAgile does not fix poor leadership, poor management, or command-and-control culture.\nAgile does not fix lack of engagement or company political games.\nAgile does not fix people’s ego or lack of motivation.\nAgile does not fix poor behaviors, culture and mindset.\nAgile does not fix over-allocation of people or lack of focus.\nAgile does not fix poor customer focus Agile does not fix poor process workflow or poor collaboration.\nAgile does not fix poor HR compensation processes that do not set the right people’s behavior.\nAgile makes it all visible and transparent. Beware being transparent can be very painful and induce distress.\nAgile is the framework to detect flaws and to measure improvements through an empirical process. A huge intentional effort needs to be taken by those in the process, willing to fix or improve such things.\nAgile Teams Here a set of capabilities strongly improving the throughput of an agile team. Our company is proud of how cool, professional and effective our development teams are. The eight tips are:\nDo Just In-Time kickoffs.\nHave at least one Product Owner that is always available.\nCreate T-shaped developers by pairing different disciplines.\nDo team code reviews, better promote Pair Programming.\nKeep your pipelines in great shape. You shall deploy your software product multiple times a day to an integration staging area.\nTechnical Debt should be zero at all times. A powerful practice is the zero bug policy [4].\nDrop rituals that give you no added value. Avoid Cargo Cult.\nHave a good mix of experience and personality in your team. Promote continuous training and when adequate certification in key technologies. Establish a strong learning culture in your organization. Encourage your collaborators to work on open source projects and publish on blogs.\nFight to avoid becoming a feature factory [6] [7]. Warning signs are:\nYour sprints do not have a written and published goal. The content of a sprint is just a bunch of product backlog items.\nYour teams just implement stories during an interaction. They never adjust the Sprint backlog content to increase the odds of achieving the spring goal\ntangly Agility Advantages We found out being an agile company bring us concrete and gratifying advantages [1] [2] [3] .\nThe decision about what to abandon is by far the most important and most neglected.\nNo organization which purposefully and systematically abandons the unproductive and obsolete ever wants for opportunities.\n— Peter Drucker Age of Discontinuity Social and Cultural Advantages We love to work in a kind and supportive organization.\nWe are proud not to have political games and power struggles.\nWe stand to our collaborators and love to see them growth.\nMotivation, ownership and accountability are high.\nFinancial Advantages and Enhanced Operational Efficiency Timely invoicing process allows us to send all monthly invoices the first day of the following month [5].\nOur company can finally process all federal, local and VAT taxes electronically. The local government systems now support digital sending and processing for tax declarations.\nRealtime financial cockpit\nCash-flow overview provides security how our company is doing and how our liquidity is evolving.\nRolling budgeting optimizes investments when the market shifts [6].\nThe sales pipeline provides indicators how we should perform the next months.\nPaperless processes remove scanning, archiving and printing activities.\nTechnological Advantages and Increased Developer Productivity Agile software development approaches with technical focus provides as strong market proposition. Motivated collaborators love to work on such initiatives. [7].\nTechnological leadership for the Java technology stack delights our collaborators and is a huge market advantage. Our delivered solutions are deployed in hybrid clouds and scale to match customer needs. We leverage automation, DevOps, and emerging technologies to create better experiences and increase work productivity.\nWe are digital affine and project our experience and workflows into the applications we develop. Our company does not own any fax machine, landline phones, or printers. Our workflows are digitized and all our artifacts are stored on secure servers. The information is available worldwide to all involved parties. Sensible artifacts are cryptographically protected. All emails are digitally authenticated and signed.\nBusiness Advantages and Faster Time to Market Leadership how to develop successful software products.\nClear understanding and extensive experience with digitalization. We discarded paper artifacts for years. Your company does not possess any paper archive, printer or fax machine.\nExpertise how to remove waste and streamline digital processes through a whole organization.\nLinks [1] The Quest for an Agile Company: Five Years tangly llc\n[2] A Journey To Be a Digital Company\n[3] Found a Limited Liability Company\n[4] Zero Bug Policy\n[5]Detecting Agile Bullshit\n[6] 12 Signs You are Working in a Feature Factory John Cutler. 2016\n[7] 12 Signs You are Working in a Feature Factory (three Years Later) John Cutler. 2019\n1. The impact of the last pandemic on home office, remote distributed teams and hybrid company models was tremendous and here to stay. 2. An agile organization has partners and not suppliers. Your purchase department is not a sadistic group trying to pressure rebates out of your vendors and forgetting all about quality and supply chains. 3. Evaluate your own company. A digital organization should not possess fax machines, paper archive rooms, landlines. You should finish the phase-out of printers, scanners, and virtual private networks. 4. Check if your company issues electronic invoices. A digital document can automatically be processed by partners' applications. A PDF document is not an electronic slipper. 5. I regularly interact with companies forgetting to invoice you delivered services. They are often quite thankful when I remember them to send the invoice for their work! 6. The Corona catastrophe was a huge test we successfully mastered. 7. To be honest, the biggest problem we have is to find collaborators with the required skill set. ","categories":"","description":"","excerpt":" Historically, big beats small. Scale was a sufficient advantage to be successful in the market.\nNow, fast and adaptive beats slow and steadfast.\nNew technologies, evolving customer preferences and …","ref":"/blog/2022/the-quest-for-an-agile-company-six-years-tangly-llc/","tags":["agile","tangly"],"title":"The Quest for an Agile Company: Six Years tangly llc"},{"body":" The goal of a curriculum vitae is to get an invitation to a job interview. I review hundreds of CVs and must select a few candidates we should invite.\nEach interview will cost hundreds of Euros to the company. I must minimize the number of interviews and increase the probability of a match.\nOver the years I developed a checklist to select promising candidates.\nThe below checklist is biased to the Java technology check. When I use the verb explain in a list item, I mean that I got a hint the candidate is aware of the concept and has used it in his applications.\nSimilar lists can be created for Javascript/Typescript, Python, Ruby, C++, or .NET developers.\nWhat Do I Check? Education Which kind of education did the candidate pursue during his career?\nFormal Training I expect a software developer to have formal training in computer science or related fields. A formal training is given by an accredited institution. The student receives a recognized certificate.\nThe following information should be available:\nTitle of the formation and information if it is a bachelor, a master, or an alternative title,\nTime interval when the formation was attended and year when you graduated. The regular bachelor study duration is three years. The master’s study duration is an additional one and a half years,\nThe name of the school where the formation was attended. I regularly look at the curriculum and the ranking of the institute to better understand your training. A link to the school is always welcome.\nChecks are:\nDid the candidate study computer science? If not, you should pursue an additional formation in computer-related fields. I want to hire a computer specialist, not an all-rounder,\nHow long did the candidate study and when did he graduate? It defines the potential years of experience.\nWhat is the ranking of the school delivering the title? I often want to know the overall ranking of the institute and their curriculum strengths.\nContinuous Formation I expect a professional engineer to regularly pursue formal continuous training. The following information should be available:\nWhat formation did he attend? I am checking if the candidate pursued training in the areas she applies for. A team leader should train in soft skills and product management methods. An agile specialist should train in agile, Scrum and DevOps. A software architect should train in architecture and software design themes. A user interface developer should know about usability, accessibility, design and corporate interface standards.\nWhen did he attend the continuous formation and year when the title was received?\nLink to an authority providing proof of the certificate of the formation.\nSpoken Languages The workplace is international. Relevant computer science documentation are in English.\nThe candidate shall be fluent in English in written and spoken forms. A software specialist not being fluent in English is an imposter because he cannot read actual technical information.\nThe organization can request specific languages. German and Spanish companies are keen to have candidates speaking the national language.\nProgramming Capabilities A software developer shall be a proficient and trained programmer. Here are some examples of capabilities I look for if the candidate is a Java developer:\nJava versions he has experience with [1]. If his current projects use older versions of the language, I expect a professional to study the current version on his own.\nBuild tool he has experience with - maven, gradle -.\nIf he is a junior developer, I check if he has an official Java developer certificate.\nWhich libraries did she use? I expect JUnit, Mockito, AssertJ, slf4j, flyway, Jackson. More capable developers often cite lombok, jimfs, hsqldb.\nDoes he have experience with JSON, HTML, CSS, SQL, or script languages?\nDesign Capabilities A professional developer shall be able to design software components. I am looking for:\nKnowledge of design patterns and Java idioms,\nExplain object-oriented approaches - abstraction, SOLID, KISS, YAGNI, algebraic data types.\nExplain functional approaches - Optional\u003cT\u003e, Streams, immutability, idempotence, Functor, Monad,\nExplain application concepts such as internationalization i18n, localization l16n, or accessibility a11y.\nExplain exception handling approaches in backend and frontend applications.\nExplain test driven development build on JUnit 5, Mockito and AssertJ and the variants TDD, BDD, ATDD.\nExplain continuous integration, continuous delivery, and continuous deployment, infrastructure as code, DevOps.\nExplain refactoring triggered by SonarLint, PMD, SpotBugs.\nArchitecture Capabilities A professional software architect shall be able to define an application architecture. I am looking for:\nExplain architecture patterns such as monolith, modular monolith, modular application, layered application.\nShow knowledge of architecture approach such as domain driven design, Traditional approaches such as RUP. Zachmann can be mentioned but are no more relevant.\nExplain the different facets of the architect role: Teacher, Coach, Mentor, Developer.\nExplain how architecture is documented (ADR, C4), static websites (Pages in GitHub, GitLab, or Bitbucket); and which notation (UML) or approaches can be used.\nExplain continuous architecture improvements and how it is performed - see e.g., refactoring legacy systems -.\nExplain technical debt concepts and how to mitigate technical debt in an application.\nCheck if the candidate knows about ADR Architecture Design Record, ArchUnit.\nCheck if a formal architecture training was performed such as DDD, TOGAF, or arc42.\nAgile Work Capabilities A professional developers should know agile methods which around since this millennium:\nCheck if Scrum, Kanban, Lean approaches were used in projects. Often they only pretend because they hold a daily meeting and a retrospective.\nCheck if CI/CD/CD and DevOps practices were used in projects,\nCheck if understanding of refactoring and automated tests is visible and if techniques were used in projects.\nTeamwork Capabilities What does teamwork mean for the candidate?\nExplain pair programming, mob programming, merge requests\nExplain feature branch versus trunk based development\nCheck if community of practice, coding dojo, design workshops are known concepts\nDoes the candidate show a sensibility to soft factors and team building instruments?\nIf the position is for a team lead position I use the criteria discussed in Techincal Team Lead blog.\nGoodies LinkedIn Profile Digital professionals publish their career and achievements on a platform. I like to visit your LinkedIn profile or your personal career website.\nOpen Source Activities Modern software application development relies heavily on open source libraries and frameworks. Developers who understand how to communicate with the teams behind these projects and how to contribute improvements are worth a lot in any project.\nCommunity Activities Engineers working in communities and user group members are often open, enthusiasts and have a wider network of professional acquaintances.\nBlogs and Articles Developers taking time to write public blogs or articles show a genuine interest in helping others in their learning. I also find very interesting to learn which technical books a candidate has read.\nOther Programming Languages Java developers interested in Groovy, Kotlin, Scala, Clojure are often more knowledgeable and open to new approaches.\nGame Rules Provide a short text describing yourself and your interests I want to understand who the person behind the CV is and the type of work she is interested in.\nEmbellish, do not lie It is normal to show the bright side of your work experience. Feel free to embellish your CV. But please do not lie to me and invent capabilities you do not have. Such a fault is a killer during the interview. I always cross-check the CV during an interview.\nExplain gaps in your CV I truly respect people taking off time or having encountered problems during their careers. And I expect from you a hint to understand gaps in your career.\nExperience section Use this section to discuss what you achieved in each of your previous roles. Using data and numbers can help a hiring manager get a better sense of how you performed, especially because this information is verifiable. Please add more details for the last five years. I am not deeply interested in knowing details about a project ten years old. I do not fully count experience when the project duration was below half a year. You need time to learn the application, the team and the constraints. Therefore, the first six months your personal learning in new approaches and technologies is quite shallow.\nExplain why you apply for a specific job position Either you have the needed capabilities through past and current experiences or explain why you think you could take over the responsibility.\nUse a spell checker A computer specialist not being able to use a spell checker is automatically disqualified.\nInterest in improving You are doomed if you did not learn or formally train the last ten years. This learning and training shall be visible in your resume. I look for Oracle Java Developer, advanced or professional Scrum, iSAQB (senior designer), TOGAF, and JEE (architect) certifications.\nPersonal information I like to see a picture of the candidate. I also expect some information about the location of the candidate such as city and state. I have a strong emphasis on building diverse teams because I am fully aware of the improved productivity. Women must have a higher chance to get an interview and the job. We want to equilibrate our development teams. And I fully understand candidates not providing one due to anxiety of toxic selection processes.\nTips I have the following checks to assess how current the knowledge of a candidate is. If a candidate cites obsolete approaches, I become cautious.\nSVN has died for 10 years. Everybody uses Git.\nRUP has died for 20 years.\nThe Waterfall has died for 25 years.\nExtensive front-end requirement definition has died for 10 years.\nBig front-end architecture and design activities have died for 15 years.\nTechnologies such as NetBeans, Ant, or XML are obsolete.\nNodeJS Candidates A NodeJS developer shall know domain-driven design, clean, refactoring, TDD, CI/CD and agile approaches. General information, computer science, design, software architecture and agile approach requirements are similar.\nThe technical questions for a NodeJS person are slightly different from a Java developer:\nWhich NodeJS version is he working with? How experienced is she with the packet manager npm?\nDoes he have a Typescript certification? Which version of Typescript is she using?\nWhich tools did she use for quality conformance and refactoring in projects?\nDoes he know standard OWASP approaches and why they are important in a NodeJS environment?\nExamples of object-oriented, functional programming, asynchronous and reactive approaches in Typescript code.\nCan senior developers discuss and explain threading, thread library, or async design approaches?\nWhich development environment does he use to develop NodeJS code - e.g. JetBrain WebStorm -?\nDoes he master MEAN stack - MongoDB, Express.JS, Angular, NodeJS -?\nWhich experience and certification does she have with Angular or React?\nWhich training or certificates does she have in user interface design, usability, or accessibility?\nDoes he have experience and training in MongoDB, Mongoose, Meteor, express.js, socket.io?\nIs she experienced with integrating relational database in NodeJS backend solutions?\nAre advanced topics such as WebAssembly or Deno known?\nUse hints in the project experience sections to cover the above topics.\n1. I sadely sometimes encounter candidates who have no clue which version of their programming language they are daily using. ","categories":"","description":"","excerpt":" The goal of a curriculum vitae is to get an invitation to a job interview. I review hundreds of CVs and must select a few candidates we should invite.\nEach interview will cost hundreds of Euros to …","ref":"/blog/2022/evaluate-technical-cvs/","tags":["agile"],"title":"Evaluate Technical CVs"},{"body":" Immutability is a powerful and simple concept in programming theory that is strangely underused.\nAn immutable object is simply a class whose instances cannot be modified. This is in contrast to a mutable object or changeable object, which can be modified after it is created.\nImmutable objects are also useful because they are inherently thread-safe. Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects\nAll the information contained in each instance is provided when it is created and is fixed for the lifetime of the object.\nAn example of immutable objects in Java is the String class.\nWhy are immutable objects so good?\nAdvantages There are many reasons for sure, here are the three main ones:\nProtection Against Programming Errors We can send an immutable object to any class without worrying about it being altered by that class. We never have to make a defensive copy. The same applies when we get an instance for local storage in a cache. We do not have to worry about whether the provider will hold on to a reference and change it later, invalidating our cache without our knowledge.\nIncreased Performance We do not have to make defensive copies all the time. This means that we save some work on the garbage collector which increases performance and decreases memory overhead. We all want that, don’t we?\nThread Safety After creation, any number of threads can access immutable objects simultaneously, without any synchronization mechanism. It is a huge advantage in the modern world of multicore processors.\nImmutable Classes The class must be declared as final. So those mutable child classes cannot be created.\nData members in the class must be declared as private. Direct access to member variables is prohibited.\nData members in the class must be declared as final. We cannot change the value of it after object creation. Java requires that all final properties must be initialized in the constructor.\nNo setters are provided to change the value of an instance variable.\nA parameterized constructor should initialize all the fields performing a deep copy. Data members cannot be modified through external object reference. This is also called reference aliasing.\nIf the instance fields include references to mutable objects, do not allow those objects to be changed:\nDo not provide methods that modify the mutable objects.\nDo not share references to the mutable objects. Never store references to external, mutable objects passed to the constructor. If necessary, create copies, and store references to the copies. Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.\nJava record construct [1] implements most of the above constraints. The major limitation is that Java records do not perform any deep copies.\nRecords provide secure serialization and deserialization mechanisms. Use records as Java DTO objects and automatically improve the security of your application. Therefore, Java records are shallow immutable objects. If you pass immutable objects to the constructor, you will achieve deep immutability.\nImmutable API Classes Java already has an extended and expanding set of immutable classes.\nAll wrapper classes in java.lang package are immutable. These are String, Character, Boolean, Byte, Short, Integer, Long, Float, Double.\nThe class java.awt.Rectangle encapsulates the position and dimension of a rectangle.\njava.lang.StackTraceElement (used in building exception stack traces).\nMost enum classes are immutable, but this in fact depends on the concrete case. Do not implement mutable enums, this will screw. All enum classes are immutable in the standard API.\njava.math.BigInteger and java.math.BigDecimal,\njava.io.File represents a file in a local or remote file system. A file may or may not exist, and has some methods modifying and querying the state of this external object. But the File object itself stays immutable.\njava.util.Locale - representing a specific geographical, political, or cultural region,\nBuilder Pattern Immutable abstractions have often verbose and cumbersome constructors. You want to provide a more elegant approach to create instances of your immutable classes. The builder pattern is ideal for creating immutable instances through legible and maintainable code.\nWriting builders is a tedious and repetitive activity. Consider using the Lombok Project to generate builders. The lombok annotations @Builder and @Superbuilder are time savers.\nProvide factory methods to create often used immutable objects. Use the builder in the body to write the creation code in one Java statement.\nRead-only interface pattern Read-only interface pattern is an alternative to the Immutable object pattern. It allows some objects to modify a value object while other objects can only fetch its values.\nLinks [1] Java Records are Here. Marcel Baumann. 2020\n[2] Record Classes. Oracle\n","categories":"","description":"","excerpt":" Immutability is a powerful and simple concept in programming theory that is strangely underused.\nAn immutable object is simply a class whose instances cannot be modified. This is in contrast to a …","ref":"/blog/2022/immutability-in-java/","tags":["design","java"],"title":"Immutability in Java"},{"body":" The technical debt or code debt is a concept in software development that reflects the implied cost of additional rework. The rework is caused by choosing an easy limited solution now instead of using a better approach that would take longer to realize.\nAnother source of technical debt is natural technical obsolescence.\nAs with monetary debt, if technical debt is not repaid, it accumulates interest, making it harder and harder to implement changes.\nUnaddressed technical debt increases software entropy.\nSpiraling out of control entropy is the death of countless software solutions over the last century.\nSimilarly to monetary debt, technical debt is not necessarily a bad thing. Sometimes, as e.g., a proof-of-concept is required to move projects forward.\nSome experts claim that the technical debt metaphor tends to minimize the ramifications, resulting in insufficient prioritization of the necessary work to correct it.\nShipping first time code is like going into debt. A little debt speeds development as long as it is paid back promptly with a rewrite.\nThe danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt.\nEntire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object-oriented or otherwise.\n— Ward Cunningham 1992 How to Eliminate Technical Debt Use static analysis tools to detect technical debt in your source code.\nUse the features of your IDE [1] to perform simple refactorings and improve the quality of your code.\nUse your IDE to find all TODO comments\nUse your IDE to find and remove commented-out lines of code. Git was created to keep track of your modifications. Keep your source code free of obsolete and unused code.\nUse a gradle plugin [2] To update your libraries and remove technologically obsolesce.\nPlease use the current version of your technical stack and build toolchain. Update your Java version when the next one is coming out. You have access to better libraries, interfaces, and runtime engines. Known security flaws were corrected. Defects were removed.\nEach technological stack is gifted with open source and commercial static analysis tools.\nSonarLint supports all major languages and development environments. You will find a list of tools for static code analysis for all major programming languages.\nA professional software developer shall use these tools to validate and improve her source code.\nShould You Reimburse? We learnt this lesson during our economic training in college.\nA little debt is OK. Big debts will poison your life and source code. Big debts are cumbersome to repay. You need efforts and time for a payback.\nThe lesson is to close your debts before they are too big to be managed.\nYou will otherwise bankrupt either your bank account or the source code of your application.\nPreventive maintenance is a learnt technique for technical products.\nHow to Measure Technical Debt Here are some approaches to quantify the technical debt of a product.\nNew Bugs versus Closed Bugs Every known bug is essentially a tiny sliver of technical debt. If you want to know your total debt, it is important for your engineers to keep a tally. Assuming your engineers make a note in git when bugs are fixed, you can calculate how effectively you are managing your technical debt. If new bugs are outnumbering closed bugs, you need to make some changes. Zero bug policy [1] nicely reimburse this technical debt.\nCode Quality Complex code is a sure sign of growing technical debt. At some point, someone is going to have to unravel that mess. Code quality is an aggregation of several metrics that quantify the overall quality and complexity of your code:\nSmells and potential errors detected through static analysis tools\nCyclomatic complexity, method size, class size\nClass and package coupling\nDepth of inheritance Continuous fitness functions [1] based on static code analyzers are the way to detect this technical debt cite:clean-code,clean-coder,clean-architecture].\nCycle Time This measures the amount of time that passes between the definition of the change, the first commit, and deployment. You need to study the time it takes to make changes to existing code and to solve problems without using quick fixes. If your engineers are spending hours fixing small bugs, you know that there is some technical debt lurking in your code. Your agile and Scrum tool provides cycle time data [4].\nCode Coverage In a sense, the code coverage metric looks at the same issue from the opposite direction. In this case, you are measuring how much of your code is executed when you run your testing suite. The more lines that are unused, the more likely it is that you have poorly written code. Code coverage tools such as Jacoco provide these values [3].\nCode Ownership If you get too many people working on the same tasks, you can easily end up with a steaming pile of cruft. That said, you do not want only one engineer taking ownership of an entire project. If they get sick or leave your organization, it is game over. Social aspects can easily be measured in a code repository [2].\nHow to Continuously Improve A powerful approach is zero defect source code [1] approach.\nYou can start very simply.\nTrack locations of technical debts with TODO and FIXME comments as a first step.\nNext time you have to modify source code in a package, use your IDE features to find all TODO in the package you are working on.\nFix at least one such comment and improve the code.\nRepeat and over time, your technical debt will slowly diminish.\nFixing technical debt is not rocket science. It means to have discipline and behave like a professional software developer.\nLessons Learnt Technical debt does not appear overnight. Debt increases slowly but steadily. Big debt clearly shows the organization was unprofessional.\nInvesting a small amount for continuously improving your source code base is the most effective approach to avoid technical debt.\nUse an actual version of your technology stack. You must anyway upgrade your stack if your product is under active development. So why do you wait and lose capabilities to improve?\nUpdate monthly the libraries you use. Updates often close security vulnerabilities in your code. You have a legal responsibility to secure your code and protect your users.\nUse the static quality checkers and refactoring features of your development environment.\nOnly refactor code you have to change.\nApply the boy scout rule [2, 3]. Leave the code in a better state as it was when you started.\nTrain your developer in refactoring and clean code practices [4, 5, 6]. Beware technical debt is also created through:\nLack of knowledge, when the developer doesn’t know how to write elegant code,\nLack of ownership, when outsourced software efforts result of in-house engineering being required to refactor or rewrite outsourced code.\nProfessional software developers deeply understand the impacts of technical debt.\nAmateurs just ignore the consequences and hop to the next product before they go bankrupt.\nLinks [1] Advocate Zero Bug Policy in Your Projects. Marcel Baumann. 2020.\n[2] Code Scene as Crime Scene. Marcel Baumann. 2019.\n[3] Agile Code is Clean Code. Marcel Baumann, 2019.\n[4] Why Do You Need Metrics and KPI in Agile Product Development?. Marcel Baumann. 2018.\nReferences [1] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\n[2] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[3] R. C. Martin, Clean Craftsmanship. Addison-Wesley Professional, 2021 [Online]. Available: https://www.amazon.com/dp/B095C16LSW\n[4] M. Fowler, Refactoring, Second. Addision-Wesley, 2018 [Online]. Available: https://www.amazon.com/dp/0134757599\n[5] J. Kerievsky, Refactoring to Patterns. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321213351\n[6] A. Scott and P. J. Sadalage, Refactoring Databases. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/B001QAP36E\n1. IntelliJ IDEA IDE has a powerful set of functions to detect code smells and perform automatically standard refactoring activities. The Sonar Lint plugin for various IDEs to detect quality and security issues in your code. 2. I use the com.github.ben-manes.versions for this purpose. The plugin handles nicely multi-modules projects. The plugin also supports the central declaration of dependencies feature in Gradle. ","categories":"","description":"","excerpt":" The technical debt or code debt is a concept in software development that reflects the implied cost of additional rework. The rework is caused by choosing an easy limited solution now instead of …","ref":"/blog/2022/technical-debt/","tags":["design","java"],"title":"Technical Debt"},{"body":" Recently, a client told me that they were adopting the Spotify Model. This statement sounded great for him.\nSpotify has published some great articles and videos about how they have grown and transformed their organization to be agile. Then it occurred to me that what my customer was saying was completely wrong.\nI don’t think you can really understand what it is like to work at Spotify without actually living it. You see, most of us are working from our own paradigm and belief system. We have a hard time imagining how it really works at Spotify.\nAs you review the below list, do a gut check.\nAre you doing this today?\nWould these approaches even fly at your company?\nWhat would it take to implement them?\nThat may be the best test of whether you are anywhere near the Spotify model.\nIn articles or talks like this it may come across that Spotify is some sort of agile nirvana where everything just works and that is simply not true.\n— Henrik Kniberg If you are not familiar with the so-called Spotify model, check out Kniberg’s blog posts at Crisp as well as these popular videos many people refer to Spotify Engineering Culture Part 1 and Part 2.\nDo not scale agile…descale your organization Henrik starts with this quote which directly conflicts with the 5% of people who claim to be scaling agile using Spotify. It isn’t about changing agile to fit your company, it is changing your organization to achieve business agility. Have you considered descaling your organization before scaling agile?\nYour Company is not Spotify Spotify was born agile in 2006, so it is not even 20 years old. And Spotify is small at roughly 1,500 people. Is your company new, do you have thousands of people and a rich history of success doing things a certain way? Do you have layers and layers of rules and bureaucracy for the right way to do things, as well as plenty of checks and balances?\nSpotify was on a Mission The stated Spotify mission is to turn the music business upside down. Does your company have a compelling purpose that aligns and motivates people?\nSquad is equivalent to Scrum Team Like Scrum teams, squads are cross-functional and self-organizing. They are responsible for end-to-end delivery of a complete project. Are your “squads” self-organizing? Are they capable of end to end delivery or do you have hand-offs to other teams or departments?\nSquads are Autonomous Autonomy is the key to the company. It includes not just what to work on next or how to complete their work. Autonomy helps to scale because they don’t need as much central function. Autonomy is fun and motivating. Are the squads you created autonomous?\nMotivation is Essential for Productivity Kniberg talks about how important employee motivation is to resolving the inevitable environmental issues. Motivation has a higher impact on productivity than any other factor. Kniberg has a simple formula showing that Productivity = Effort X Competence X Environment X Motivation^2. Is your company focused on increasing the motivation of each employee?\nBalance alignment and autonomy Spotify strives to strike a balance between alignment (central direction) and autonomy (team self-organization). Managers paint the big picture but don’t tell people how to solve it. This is probably one of the biggest sticking points for most organizations – managers are directly involved in telling people how to solve problems. Who makes decisions in your organization? What is the balance of power between team members and managers?\nShape the Environment Physical space supports informal collaboration and coordination. At Spotify, Squads sit and work together. Tribes sit near each other and there are plenty of spaces for informal meetings without having to schedule a conference room. Has your company made an effort to co-locate people working together on the same team or tribe? Does your physical space support informal meetings without going to the trouble to schedule a conference room?\nNo Magic in the terms Squads and Tribes Henrik said he was not sure why they used weird words like Squads and Tribes. The label itself means nothing. Each tribe is a cross-functional team that is vertically aligned for delivery. Did you change your existing team to a squad without changing anything else?\nGuilds are cross-cutting areas of Expertise Guilds are the equivalent of Communities of Practice. They are not functional departments, they are volunteer-led communities based around a particular expertise. Are your guilds communities based on expertise, or are they organized around key managers or existing functional departments?\nEmphasis on face 2 face communications That is the purpose of the structure of Tribes, Squads, and Guilds. They were formed based on the need to coordinate and collaborate. Tribes and Squads were organized so that they can sit together. Does your organization put a priority on face to face communications?\nBoring Releases Long release cycles are scary and risky. Frequent releases are less scary, less risky and easy. They become routine and boring. How often are you releasing to Production? Are your releases scary or are they boring?\nDecoupled Releases and CI/CD Reduces Cycle Time Spotify focused on changing the architecture to decouple dependencies and make releases easier. Dependencies are reduced and teams can release to production independent of each other. Spotify has also invested heavily in continuous delivery to automate getting code to production in minutes, not days or weeks. On average, how long does it take to get from a changed line of code to that code live in production? Do you measure and track this?\nTrust and the Self-Service Model Spotify empowers and trusts people so that where possible, teams make decisions that involve risks. Kniberg uses the example of the difference in control between a roundabout and a typical traffic light. Where possible, Spotify trusts people and does not try to control them because they believe that most people are doing what is best for the organization. What is the level of trust you place on your employees and teams? Are they empowered with opportunities for self-service, or are there checks and balances and delays due to waiting for approvals that slow them down?\nTransparency \u0026 short feedback loops Transparency is one of the pillars of Scrum and essential for all agility. Transparency is also an enabler for self-organization. Similarly, short feedback loops provide opportunities for inspection and adaptation. Fast feedback ensures teams are building the most valuable features. How long are your sprints? What is the time between when a team builds something and when a real customer uses or provides feedback on that feature?\nManagers are Servant Leaders Spotify believes that managers are servant leaders, focused on serving the highest needs of the team. They think it is better for managers to ask teams how then can help, rather than asking people what they are working on or when they will be done. What is the posture of your managers to your teams? Do they serve the teams, or do they think that the teams serve them?\nLean Startup The Spotify mantra seems to be Think it, Build it, Tweak it, Ship it based on Eric Ries and the Lean Startup approach. Teams establish a hypothesis and then run experiments and A/B tests and measure the results. They strive to get lots of feedback, tweak what they implement and maximize the value. They know the difference between maximizing value and not just output (i.e. more user stories completed). Are you set up to run small experiments? Or are your products/projects the result of a long list of requirements that are all built before deploying to production in a big bang?\nSpotify Hack Week Twice a year Spotify hosts a hack week when they let everyone work for a week on whatever they want. The approach unleashes creativity and improves cross-organizational collaboration They celebrate with a party on Friday. How comfortable would your company be with a one-week hackathon that allows people to do whatever they want? What controls do you think your leaders would demand for that week (e.g. assigned work, time reporting, must show results, etc).\nExperiment-friendly Culture More data-driven decisions, not decisions made by the highest paid person. Teams are encouraged to develop a hypothesis and run an experiment. Teams establish “Keep List” which may include things like: Retros, daily stand-ups, Google Drives, GIT, and Guild UnConferences. They also have a “Dump List”: Time Reports, Hand-offs, Separate Test Teams or Test Phases, Task Estimates, Useless Meeting. Do you allow teams the freedom to really change how they work? Which on the dump list above do you require your teams to do and why?\nHealthy Cultures Heals Broken Process Process breaks left and right but a healthy culture will lead to people fixing those problems. How heavy is your process? Are teams allowed to change process or is the process dictated by a central Agile CoE or standards group?\nBalance between Chaos and Bureaucracy Like the balance between autonomy and alignment, Spotify is striking a balance between chaos and bureaucracy. Of the two, Kniberg believes it is easier to fix chaos than bureaucracy. Similar to Alistair Cockburn’s “barely sufficient” process guidance, Spotify came up with the concept of “minimum viable bureaucracy” or MVB. It is the smallest amount of bureaucracy that an organization can have without chaos. What is the level of bureaucracy in your organization? Do your managers actively work to reduce or eliminate overhead so that teams can focus on being productive?\nTeam Definition of Awesome Spotify encourages teams to talk about and decide what would make them awesome. After all, without a vision for awesomeness, you likely won’t get there. Spotify teams use regular team health checks. They track improvements over time. Do your teams have a definition of awesome? Do you track team health and strive for continuous improvement?\nCulture Beats Process As we have outlined in this post, the obvious and observable processes you have are not nearly as important as the culture which may be nearly invisible. Culture is the behavior that is rewarded or what succeeds. Culture cannot be delegated by managers and leaders. Leaders need to model the behavior they want to see in an organization. What are the behaviors that are rewarded in your organization? What are the behaviors that are modeled?\nEmployee Satisfaction Kniberg tells the story of an email from the head of people operations about the results of a recent employee satisfaction survey. The head claimed that 91% of employees enjoyed working at Spotify, which he said was “of course not satisfactory”. Do your leaders ask if people enjoy working at your company? What % satisfaction do you think your leadership and HR department consider acceptable?\nMistakes are OK How mistakes are treated may be one of the best indicators of your culture. Mistakes are expected when you are pushing for innovation.\nWe aim to make mistakes faster than anyone else.\n— Daniel Ek Founder of Spotify Please do not blindly copy. Apply the above principles in your environment. Learn and adapt. This is the essence of the agile empirical approach.\n","categories":"","description":"","excerpt":" Recently, a client told me that they were adopting the Spotify Model. This statement sounded great for him.\nSpotify has published some great articles and videos about how they have grown and …","ref":"/blog/2021/spotify-cultural-elements/","tags":["agile"],"title":"Spotify Cultural Elements"},{"body":" Gradle Build Tool is my preferred build tool for all Java applications I am developing.\nGoogle chose Gradle as the official build tool for Android.\nNot only because build scripts are code, but because Gradle is modeled in a way that is extensible in the most fundamental ways.\nGradle’s model also allows it to be used for native development with C/C++ and can be expanded to cover any ecosystem.\nFor example, Gradle is designed with embedding in mind using its Tooling API.\nWhat are my preferred goodies with the major version 7?\nJava Module Native Support Java modules were introduced with Java 9 in September 2017. Adoption was slow. Developers needed time to understand the tremendous advantages of language and compiler support of modules. Tooling was also a problem. It was cumbersome and error-prone to create Java modules either using the command line and experimental plugins.\nGradle Build Tool version 7 finally supports Java modules natively. Just use the java-library plugin.\nThe plugin will detect the presence of a module-info.java module declaration file and transparently switch to module compilation.\nDependencies Semantic Declaration The Gradle team has decided to introduce semantic support for the declaration of dependencies.\nAll dependencies of a multi-module Java application are declared in a central file. The libs.versions.toml file under the gradle subdirectory of the root build can contain all plugin and library dependencies. The declarations can be used in all subprojects.\nSupport is provided to group a set of related dependencies and use the alias in the various Gradle modules.\nIntelliJ Support Jetbrains has improved support of Gradle in their new releases of IntelliJ. The 2021 versions offer native support of Gradle. Native support means IntelliJ finally uses Gradle for compilation and unit testing inside the IDE. You just need to take care of one build configuration and no more need to delve in the mysteries of IntelliJ build process.\nThe only glitch is that IntelliJ has its own concept of modules and are not synchronized with the Gradle modules. You have to be careful to align both structures to avoid surprises.\nJacoco Aggregated Test Coverage Reports The support for coverage reports over multiple gradle subprojects is still limited. I use the following configuration to generate aggregated coverage report over all gradle modules.\napply plugin: 'jacoco' (1) jacoco { (2) toolVersion = \"0.8.7\" } jacocoTestReport { (3) dependsOn test reports { xml.enabled true html.enabled true } } tasks.register(\"jacocoRootReport\", JacocoReport) { (4) subprojects { subproject -\u003e subproject.plugins.withType(JacocoPlugin).configureEach { subproject.tasks.matching({ t -\u003e t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask -\u003e sourceSets subproject.sourceSets.main executionData(testTask) } subproject.tasks.matching({ t -\u003e t.extensions.findByType(JacocoTaskExtension) }).forEach { rootProject.tasks.jacocoRootReport.dependsOn(it) } } } reports { xml.enabled true html.enabled true } } tasks.withType(Test) { finalizedBy jacocoTestReport (5) useJUnitPlatform() jvmArgs += ['--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED', '--enable-preview', '-XX:+ShowCodeDetailsInExceptionMessages'] reports.junitXml.mergeReruns = true options { setExcludeTags(['integration'] as Set) } maxParallelForks = 8 failFast = false } 1 Import the Jacoco plugin in the project 2 Allows the selection of the Jacoco version. I found it useful when using the latest JDK version. JaCoCo developers have a slow release rhythm. 3 Configure JaCoCo to generate a html and an XML report. The binary report is no more supported by external tool. 4 - 5 Configure JaCoCo test report to be generated after the running of a test task Gradle has finally new plugins to better generate unit tests and test coverage reports for a multi-module project.\ntest-report-aggregation\njacoco-report-aggregation\nThe new approach to create aggregated reports is described in Multi-module Test Reporting with Gradle 7.\nWishes I would greatly appreciate if the JaCoCo Gradle plugin is improved and align with the features of the Maven plugin. The process to aggregate the coverage reports on a multi-module project is cumbersome and brittle.\nI am waiting for the Gradle 7.3 release to have native support of JDK 17. [1] The tool chain supports the newer JDKs without trouble but Gradle can only run with JDK 16 or older versions.\n1. Gradle 7.3 was released in the first half of November 2021. JDK 17 is now natively supported. As usual the early version of the next JDK - in this case JDK 18 - is only currently supported through the toolchain feature. ","categories":"","description":"","excerpt":" Gradle Build Tool is my preferred build tool for all Java applications I am developing.\nGoogle chose Gradle as the official build tool for Android.\nNot only because build scripts are code, but …","ref":"/blog/2021/gradle-7/","tags":["java","gradle"],"title":"Gradle 7"},{"body":" First and foremost, our primary goal is to develop successful products and delight users. We are always looking for good practices to improve our odds.\nProduct development is a risky business.\nWe want to expand our toolbox with proven approaches. We use these tools to experiment when confronted with new problems. There is No Silver Bullet to solve our specific challenges.\nUsing a goal-driven approach that guides people through process-related options is one powerful approach. We need to take decisions to tailor and scale agile strategies to address the context of the situations we face. Approaches such as Scrum have a minimal set of instructions. You are responsible to add the missing pieces to improve your development organization and remove your specific impediments.\nWhat are the advantages to take a goal-driven approach? How can you tailor your product development process?\nGoals over Prescription The Project Management Institute has acquired the disciplined agile delivery method and heavily promotes the approach. I personally prefer the LeSS approach to scale agile product development. Nevertheless, Scott Ambler is an experienced and talented developer. Learning from his experiences and analyzing his approaches promotes the essence of LeSS. We want to experiment with new approaches and add the successful ones in our toolbox.\nOur philosophy is to look for great ideas regardless of their source and to recognize there ar no best practices. When we learn a new technique, we strive to understand what its strengths and weaknesses are and in what situations to apply it.\nThe diagram shows a potential approach for scope exploration. For each facet of the exploration we have set of methods to work with. The context of the product development and the identified goals should allow us to select the most effective approach.\nSupports process tailoring. I think that figures below make it very clear how people are enabled to make intelligent process decisions. I think that this is a huge improvement over previous process frameworks, particularly Rational Unified Process RUP. RUP provides great process advice regardless of what some agilists may claim but struggled to provide consumable process tailoring advice.\nEnables effective scaling. LeSS is our preferred scaling approach. An important part of scaling agile is to tailor your strategy to reflect the realities of the scaling factors which you face. For example, consider your approach to exploring the initial scope of your effort (the goal captured in Figure 2). A large agile team or a geographically distributed team will make different tailoring decisions than a small co-located team. A team in a regulatory environment will make different decisions, particularly around amount of detail, than teams in non-regulatory environments. These are just three of several scaling factors (more on this in a future blog posting, although you may find my agility at scale blog to be of interest).\nMakes your process options very clea. Figure 4, in combination with the more detailed goals diagrams (such as in Figures 2 and 3) make it very clear what you need to consider when tailoring an agile solution delivery process to meet the unique needs of the situation faced by your team.\nTakes the guesswork out of extending agile methods. Although it makes for wonderful marketing rhetoric, it’s disingenuous for people to claim that simple methods such as Scrum can be tailored to meet your actual needs. Yes, we suppose this claim is true but how do you do so? Shouldn’t you start with a full delivery lifecycle, not just a construction lifecycle? Shouldn’t the toolkit cover a wider range of issues, such as leadership and requirements management as Scrum does, technical issues as XP does, modeling and documentation as Agile Modeling does, and many other issues? In short, shouldn’t it be a hybrid? Finally, shouldn’t you be given some context-sensitive advice for tailoring the details, as we do with the goal-driven approach described here?\nMakes it clear what risks you’re taking on. By making your process decision options clear, and by describing the trade-offs associated with those options, we make it very clear what risks you’re taking on. Want to write a detailed requirement specification up front then the approach is going to make it very clear what risks you’ve just taken on by doing so. It also makes clear when this decision is appropriate, so if you’re not in this situation then it is likely time to rethink your approach. Although we cannot prevent challenges such as a Water-Scrum-Fall approach. Such when a heavy approach is taken to Inception and Transition and an agile approach to Construction. We still can certainly make it very clear what the impact is of the decisions that led you to that approach. We have spoken with several people who have used the decision tables in it to argue against inappropriate process decisions on their projects. In many situations the argument that isn’t agile falls on deaf ears. Whereas that will take longer and here’s why, that will be more expensive and here’s why will be listened to.\nIt hints at an agile maturity model. We suggest that in the case of issues where the options are ordered there is a clearly an indication of agile maturity or sophistication. Having said that I have no desire to wade into the agile maturity model morass, but I think it is an important observation nonetheless.\nChange and Adapt Acknowledge that goals and priorities will shift during the product lifetime.\nThe palette of approaches for a facet of your process was exemplary showed above. You should explore solutions for all your process steps to continuously improve.\n","categories":"","description":"","excerpt":" First and foremost, our primary goal is to develop successful products and delight users. We are always looking for good practices to improve our odds.\nProduct development is a risky business.\nWe …","ref":"/blog/2021/choice-is-good/","tags":["agile","architecture"],"title":"Choice is Good"},{"body":" I truly love the new release rhythm of the Java ecosystem. Every six months a new JDK is delivered. Being able to use new features every six months is awesome.\nThe new release JDK 17 [3] is the next long term support LTS release. The migration overhead is held to a minimum thanks to the incredible backward compatibility. The early-access builds give you more than enough opportunities and time to migrate all your applications on time.\nThe new features greatly simplify existing code and tremendously increase code legibility.\nAlgebraic data types are now complete with the official release of records and sealed types. The advanced pattern matching constructs enhance the functional programming capabilities in Java.\nPolishing of the functional programming approach improved my source code quite stupendously.\nWhy Should You Upgrade? Be honest. It is more a question of when, rather than if you will upgrade.\nWhy should you actually upgrade your application?\nEvery Java version, even minor versions offer performance benefits, but also security fixes,\nOther useful extras that make your application more robust and better maintainable are often part of a new release,\nIt includes cool features. For instance, the recently released Java records, sealed types, or the pattern matching functionality,\nReduce attack surface by updating project dependencies proactively,\nReduce technical debt and most importantly, prepare your project for the new and dynamic modern Java world,\nTake advantage of performance improvements on new JVM version,\nTake advantage from improvements of Java as programming language,\nSleep better by having a more secure, efficient and quality product.\nI have noticed that a lot of applications are still on Java 8. Java 8 was released in March 2014. Businesses often say, we do not have time to invest now. They are saying we prefer to accumulate technical debt.\nNon-experts often estimate that it is a lot of work, maybe even weeks or months of work to upgrade from one LTS version to the next LTS version of Java. It is seen as a challenge difficult to estimate, and is automatically postponed. That is not a good approach.\nIf you are still on Java 8, the licensing situation is may be problematic. Like all JDKs past their end of public updates, you now have to pay for support, or you must use a free OpenJDK 8u build which\nonly contains backport patches that do not cover the entire JDK.\npredates the full open-sourcing, so is not identical to the old Oracle JDK.\nSo not only is the license for versions starting with 11 better than ever in Java’s history, the licensing situation for 8 is not that good. Java 8 is well past its free support period.\nLicensing alone is a reason to update.\nI try to make it more practical. Actually, in the case of the weeks to months' estimation, I often managed to migrate the application in a couple of days. It is often a matter of simply trying it, and if you are lucky, you manage to upgrade it quite easily. Depending on what dependencies you use, or what code bases you use, it might be a bigger challenge.\nThe usual discussion about Oracle Java licensing is the typical FUD regarding Java and Oracle. OpenJDK and Oracle Java are as different as Red Hat Fedora and Red Hat Enterprise Linux.\nIf you do not want to pay for Red Hat Enterprise Linux support, just go with Fedora, or any other Linux distribution.\nIt is exactly the same with Java distributions.\nShould You Migrate Everytime? Should we stick to using LTS versions, or should we use the latest versions of Java [1]? If you have the time available, I would recommend using the latest version of Java because you can use the new features and improvements. It always increases developer productivity and application reliability [2]. You have to do it every six months, because you cannot use the new minor versions.\nIf you do not have that time available to upgrade every six months, you might opt to using only the long term support versions. However, then, each time you need to upgrade your long term support version, that actually might take quite a bit more time as well. In the end, I think staying on long term support versions or using the latest version should not differ much in the investment in upgrading.\nJDK 17 is a LTS version. You must anyway migrate to JDK 17. The only discussion point is when and certainly not if. Decide\nYou are a laggard organization Start to plan your migration and allocate needed resources and budget to the migration. You should hope your competition will not release new features and beat you.\nYou are a modern organization You are already migrating to JDk 17 and will complete it in the next months. The discussion is moot.\nYou are a DevOps organization You have already completed migration. Congratulations, you can focus on business value and beat your competitors.\nHow Big is the Migration Effort? When we start developing against the new Java version, it’s recommended to start with your local machine, get that up and running first. Then upgrade your build environment, so it supports the latest version of Java. Get everything built and tested over there. Then at the end, release it to the other environments, including the production environment.\nWhen upgrading Java, you might upgrade from 8 to 17 at once. If you have encountered any issues, it might be hard to pinpoint what’s caused the exact issue.\nTherefore, it might be better to do the migration, step by step. Maybe you migrate from 8 to 11 first, or maybe from 8 to 9. If you encounter any issues, you can easily see what’s changed in that Java version.\nAnswers can often be found through Google or StackOverflow. That way, it is easier to get the upgrades done instead of in one big bang.\nHowever, even after years of experience, I cannot estimate how long an upgrade will take without having in-depth information about the project. A lot depends on how many dependencies your application has. Often, upgrading your dependencies to the latest version resolves many of the issues that would occur during a Java upgrade.\nHow do we move forward? Now we start by compiling the source code on the new Java version, we run it. If that succeeds, and we make the necessary fixes, we go to running the unit tests. If we fix that as well, we can package the application, and in the end, we can run the application. Based on the nice ingredients, we should get a nice result.\nNew Features The official list of new features is\nJEP 306 - Restore Always-Strict Floating-Point Semantics Very useful if you are a mathematical library developer\nJEP 356 - Enhanced Pseudo-Random Number Generators Simpler usage of random generators in the API\nJEP 382 - New macOS Rendering Pipeline Support of Metal graphics API on macOS\nJEP 391 - macOS/AArch64 Port Support of Apple proprietary processors based on the ARM architecture\nJEP 398 - Deprecate the Applet API for Removal Applets are dead for years, now the associated API is deprecated and will be removed in the future\nJEP 403 - Strongly Encapsulate JDK Internals Stop using unsafe operations in your libraries. Use the JDK tools to identify suitable supported classes with the same functionality\nJEP 406 - Pattern Matching for switch (Preview) Pattern matching is the new kid on the block. We have now nice features for the switch expression.\nJEP 407 - Remove RMI Activation JEP 409 - Sealed Classes Sealed class release completes the implementation of algebraic data types\nJEP 410 - Remove the Experimental AOT and JIT Compiler Nobody uses them.\nJEP 411 - Deprecate the Security Manager for Removal JEP 412 - Foreign Function \u0026 Memory API (Incubator) JEP 414 - Vector API (Second Incubator) Cool feature supporting SIMD hardware.\nJEP 415 - Context-Specific Deserialization Filters Increase security.\nThe new features you should use on a daily basis are described bellow. They will impact the appearance and legibility of your source code.\nAlgebraic Types Records [1] are immutable classes. A record and all associated operations are defined in one statement.\npublic record Person(String lastname, String firstname, LocalDate birthday) {} Sealed classes are a powerful constructs to constrain your inheritance hierarchy.\nPattern Matching for Switch A preview of pattern matching for switch extends the language of patterns in Java. It allows switch expressions and statements to be tested against a number of patterns, each with a specific action. This enables complex data-oriented queries to be expressed concisely and safely.\nAmong the goals of this feature include expanding the expressiveness and application of switch expressions and statements by enabling patterns to appear for labels, relaxing the historical null-hostility of switch when desired, and introducing two kinds of patterns: guarded patterns, which allow pattern matching logic to be refined with arbitrary Boolean expressions, and parenthesized patterns, which resolve some parsing ambiguities.\nIn JDK 16 [2], the instanceof operator was extended to take a type pattern and perform pattern matching. The modest extension proposed allows the familiar instanceof-and-cast idiom to be simplified. The implementation of the boolean equals(Object o) method is reduced to one expression without any conditional statement. Try the new implementation in your code.\nYou should use Streams in all your code fragments. Stream concepts were introduced with Java 8.\nThe majority of your loops and conditional statements shall be replaced with stream pipelines and operations.\nYour methods should not return null values. The specialized stream Optional\u003cT\u003e was added to provide a better approach.\nLinks [1] Java Records Are Here\n[2] Open JDK 16\n[3] Open JDK 17\n1. Beware the Java architects announced with the release of Java 17 that LTS releases will be released every two years. Until now the release cycle was three years 2. Do not underestimate how more motivated developers are if they can use actual techniques and language features. ","categories":"","description":"","excerpt":" I truly love the new release rhythm of the Java ecosystem. Every six months a new JDK is delivered. Being able to use new features every six months is awesome.\nThe new release JDK 17 [3] is the next …","ref":"/blog/2021/jdk-17/","tags":["java"],"title":"JDk 17"},{"body":"Unknown reference: implementing-domain-driven-desing The line between software development and software architecture is a tricky one.\nSome people will tell you that it does not exist and that architecture is simply an extension of the design process undertaken by developers. Others will make out it is a massive gaping chasm that can only be crossed by lofty developers. They believe you must always abstract your abstractions and not get bogged down by those pesky implementation details.\nAs always, there is a pragmatic balance somewhere in the middle, but it does raise the interesting question of how you move from one to the other.\nKey Takeaways Understanding the basics of software architecture is more important than ever before, given the distributed nature of the software systems we are now building, and the distributed nature of the teams building them.\nThe sweet spot of up front design, between too much and none at all, should focus on understanding the significant decisions and trade-offs that influence the shape of a software system.\nGood architects are active members of the development team, from collaborating on code to coaching and providing technical leadership to the team.\nCommunicating about software architecture is challenging. The C4 model can help structure the communication, starting with a context diagram, and working down to more technical aspects of the system.\nContrary to some popular assumptions, putting effort towards good architecture actually enables agility.\nWe could state the definition of software design and architecture is\nManagement of non-functional requirements, see Fitness Functions\nArchitecture definition, see C4 Models\nTechnology selection, see ADR\nArchitecture evaluation\nArchitecture collaboration\nGood Practices Domain-Driven Design I would postulate if your agile design follow domain-driven principles, you are safe for the next five years. Just do it.\nEvolutive Architecture Features and non-functional requirements will change over time. Define an architecture which will evolve with these changes. Domain-driven design approach is highly evolutive Refactoring and Clean Code Fitness Functions Continuous Integration and Delivery Software Craftsmanship\nRefactoring Evolutive architecture means you will regularly refactor your code base. Refactoring implies you have extensive integration and unit tests available.\nIdeas Explore approaches to improve the quality and adequacy of your architecture:\nArchitect products, evolve from projects to products,\nFocus on quality attributes, not on functional requirements,\nDelay design decisions until they are absolutely necessary,\nArchitect for change, leverage the power of small,\nArchitect for build, test, deploy, and operate,\nModel the organization of your teams after the design of the system you are working on.\nAny organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.\n— Melvin E. Conway Agile digital product architects are aware of:\nAllow architecture to emerge,\nSoftware architecture is not about big design up front,\nA picture is worth thousand words,\nYou do not need to use UML See also C4 Model,\nEvery software team needs to consider software architecture,\nEveryone is an architect and everyone owns the architecture,\nThe software architecture role is about coding, coaching and collaboration,\nA good software architecture enables agility.\nReferences N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\nM. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\nA. Scott and P. J. Sadalage, Refactoring Databases. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/B001QAP36E\nE. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\nV. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\nimplementing-domain-driven-desing\nM. C. Feathers, Working Effectively with Legacy Code. Prentice Hall, 2004 [Online]. Available: https://www.amazon.com/dp/0131177052\nJ. Kerievsky, Refactoring to Patterns. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321213351\nE. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns. Addison-Wesley Professional, 1995 [Online]. Available: https://www.amazon.com/dp/B000SEIBB8\nS. Newman, Building Microservices. O’Reilly Media, Incorporated, 2020 [Online]. Available: https://www.amazon.com/dp/B09B5L4NVT\n","categories":"","description":"","excerpt":"Unknown reference: implementing-domain-driven-desing The line between software development and software architecture is a tricky one.\nSome people will tell you that it does not exist and that …","ref":"/blog/2021/agile-design-modeling/","tags":["agile","architecture","series-students"],"title":"Agile Design Modeling"},{"body":" You are working as a developer in a Scrum team.\nCongratulations, working as a professional Scrum developer is a fulfilling and exciting job.\nYou should attend professional training.\nFormal training is often the difference between being a professional instead of just pretending to be one.\nScrum Developer Role Here the official definition of the developer team member role taken from the Scrum Guide.\nDevelopers are the people in the Scrum Team that are committed to creating any aspect of a usable Increment each Sprint.\nThe specific skills needed by the Developers are often broad and will vary with the domain of work. However, the Developers are always accountable for:\nCreating a plan for the Sprint, the Sprint Backlog,\nInstilling quality by adhering to a Definition of Done,\nAdapting their plan each day toward the Sprint Goal,\nHolding each other accountable as professionals.\nCertifications The two big Scrum organizations Scrum Alliance and Scrum.org provide a certification path for Scrum developers. The certification path has three levels:\nCertified Scrum Developer Introduction course for those who are closest to the realization of the project. It is usually a two days training. The Scrum.org allows taking the certification examination without attending a course.\nCertified Advanced Scrum Developer Advanced course for Scrum developers who already have one year of experience on a Scrum team. It is at least two days training. You should read the recommended books to have a greater probability to pass the examination on the first try.\nCertified Scrum Professional Scrum Developer Pinnacle course for experts wishing to master the Scrum developer track. The third level requires more training, experience, and reading books. You often must participate to workshops before being allowed to graduate. Each certification organization has her own rules and conditions. The goals are:\nEnabling a Culture of Technical Excellence\nCatalyzing High-Performing Technology Organizations\nFacilitating Environments for a Shared Understanding\nEvolving Teams to Develop and Grow\nDeveloping Self as an Agile Leader\nBeware if you select the Scrum Alliance, you must renew your certification every two years. The conditions are similar to the renewal of a PMI certification. You must provide proof of training and pay a fee. The Scrum.org certifications never expire.\nThe Scrum Developer learning objectives for the first level are:\nLean, Agile \u0026 Scrum\npractice utilizing a sprint backlog.\ndescribe the responsibility of the Scrum team for turning PBIs in the sprint backlog into increments of value.\norganize and demonstrate the daily Scrum.\nlist at least three attributes of PBIs.\ngive at least three examples of how a Scrum team will inspect and adapt PBIs during product backlog refinement.\ndiscuss at least five elements of a definition of done that ensure the increment provides information that enhances transparency and focus against which progress can be measured.\nCollaboration \u0026 Team Dynamics\nexplain at least three differences between a working group and a team.\ndiscuss at least three attributes of effective teams.\ndemonstrate working together as one team.\ndescribe at least three benefits of developers interacting directly with customers and users.\nrestate at least three ways a Scrum team may collaborate with stakeholders, customers, and/or users during the sprint.\nArchitecture \u0026 Design\noutline at least three benefits of technical excellence.\nexplain at least one design practice on an agile team.\nlist at least three principles of architecture in an agile environment.\nRefactoring\ndefine refactoring.\ndescribe at least three benefits of refactoring to an agile software development effort.\nTest Driven Development (TDD)\nexplain test-first as a design and development approach and list three benefits.\nlist at least three differences between traditional and agile testing.\nexplain the importance of refactoring in the TDD cycle.\ndescribe at least three qualities of a good agile testing approach.\nIntegrating Continuously\ndefine continuous integration and list at least three benefits.\ndescribe using three examples of how Scrum supports CI.\ndescribe at least one advantage of an automated build, test, measure pipeline.\nThe Scrum Developer learning objective examples for the first level are:\nLean, Agile, and Scrum\nThis should include creating a sprint goal, selecting product backlog items (PBIs) with a value orientation in mind and decomposing PBIs into smaller work items.\nThis emphasizes the collaboration between the members of the Scrum team, especially product owner and developers, for understanding the items and turning them into a valuable stepping stone toward the product goal.\nMethods to organize the daily Scrum could be: original three questions, walk the wall, collaborative daily Scrum.\nDescription, order, size, domain-specific attributes.\nThis could include asking for clarification, adding acceptance criteria, sizing or estimating items, breaking them down into smaller items.\nFor software, a definition of done could state that each increment fulfills the acceptance criteria, contains no blocking defects, is integrated into the system, is properly tracked in a version control system, and is documented according to the necessary documentation guidelines. There could be other elements, too. The point of this LO is to raise the awareness of done, especially done for whom?.\nCollaboration \u0026 Team Dynamics\nThis could include stable membership, reaching a shared goal by working together, self-management.\nExample definition of team: small number of people with complementary skills, committed to a common purpose, performance goal and approach, for which they are mutually accountable.Example: T-shaped skill profile.\nPair programming, pair designing, pair working in general. Creating something – code or non-technical – in a Scrum simulation.\nShorter feedback loops, less work-in-progress, less mis-interpretation of needs, direct feedback of the working solution, actually trying the built product\nDuring sprint review while obtaining feedback regarding the latest increment, during sprint review while identifying what kind of changes to the product backlog are a helpful response to changing circumstances, during product backlog refinement, during a story mapping workshop, observing users using the product, interview users how they currently solve their problem, friendly users actively using the new product and giving feedback, invite the sprint review\nArchitecture and Design\nFoster understanding of the work, improve shared ownership and responsibility, improve estimability and reliability, reduce defects, avoid accumulation of technical debt\nThis could include test first, quick design sessions, using spikes to understand a new technology, constant refactoring, metaphor, conversational modelling, CRC cards, pair programming.\nReversibility, KISS; DRY; YAGNI; decide at the last responsible moment; responsive, resilient, elastic, message-driven (Reactive Manifesto), SOLID.\nRefactoring\nRefactoring is the practice of improving a system without changing its observable behavior.\nRefactoring fosters automated testing, improves readability and maintainability; it can support improving system performance, counter technical debt, and improve extensibility.\nTest Driven Development (TDD)\nTest first focuses on the behavior of the system. The system design emerges dynamically through the adjustment to additional tests. Benefits include simplicity, avoidance of bloating, defect reduction, built-in regression checks with automated tests.\nDifferences include frequency, inclusion in the development process, being tied to specification versus being tied to code, amount of automation, responsibility, timing.\nPoint out that it is important to have the simplest possible solution that passes the test in the first place to ensure the test is working, and refactor it to a sensible design that can be verified immediately, refer to the Broken Window metaphor, foster collective stewardship.\nTesters are Scrum team members, aka developers, include testing in the sizing discussion, collaborate on PBI refinement and acceptance criteria definition, pair up doing TDD to embed good tests from the beginning, include considerations of load, exploratory, and other testing approaches, contribute to definition of done.\nIntegrating Continuously\nCI is the practice of reducing the feedback time between code creation and integration. It can be supported using technical means. CI changes habits and behaviors, creates awareness about shared responsibility. It is the base for frequent deliveries, reduces defects, reduces risk from late discovery of integration issues.\nExample 1: The increment is necessarily integrated. Using CI is highly recommendable for getting to at least one increment per sprint or more.\nExample 2: The daily Scrum can provide better transparency about progress if there is a better measure for progress. CI helps to get this transparency about what is working and what isn’t. Without CI, the Scrum team might probably not know the actual status of the system for days.\nExample 3: In the sprint review, only done PBIs are inspected. CI improves the probability of having done PBIs at the end of the sprint.\nAutomation tools reduce manual repetition, single repository acts as document of record, configuration as code for repeatable error-free process and support continuous delivery\nYou can self-study the Scrum developer objectives [1] and [3]. Examples for the objectives are provided in [2] and [4].\nI published a list of seminal works for interested Scrum developers under Books.\nAgile Software Development Trainings An interesting development is the addition of tailored trainings emphasizing agile approaches. The biggest organization PMI has a whole agile based on Disciplined Agile Design DAD.\nI expect the emphasis on agile approaches to significantly increase in the next years.\nUniversity Formal Trainings Technical universities in Switzerland provide formal training in project leadership, project management and related fields. The formation provides a certificate of advanced study CAS in the field. Current available certificates of advanced study offering are for example:\nHSLU CAS DevOps Leadership and Agile Methods\nZHAW CAS Software Engineering\nBFH CAS Agile Software Engineering\nOst FH MAS Software Engineering\nLinks [1] Scrum Alliance Certified Scrum Developer Learning Objectives. Scrum Alliance. 2021\n[2] Scrum Alliance Certified Scrum Developer Learning Objectives Examples. Scrum Alliance. 2021\n[3] Scrum Alliance Certified Scrum Advanced Developer Learning Objectives. Scrum Alliance. 2021\n[4] Scrum Alliance Certified Scrum Advanced Developer Learning Objectives Examples. Scrum Alliance. 2017-2021\n[5] Scrum Alliance Certified Scrum Professional Developer Learning Objectives. Scrum Alliance. 2021\n[6] Agile Software Architecture is Mainstream. Marcel Baumann. 2021\n[7] The professional Scrum team: Growing and Empowering Cross-Functionality and Resiliency in a Complex World. Peter Götz, Uwe Schirmer, Kurt Bittner. Addison-Wesley. 2021\n[8] The Pragmatic Programmer: Your Journey to Mastery (20th Anniversary Edition). Andrew Hunt \u0026 David Thomas. 2019\n[9] The Software Craftsman: Professionalism, Pragmatism, Pride. Sandro Mancuso. 2015\n[10] Extreme Programming Explained: Embrace Change. Ken Beck. 2005\n[11] Scrum Master Formation. Marcel Baumann. 2021\n[12] Product Owner Formation. Marcel Baumann. 2021\n[13] Scrum Developer Formation. Marcel Baumann. 2021\n[14] Detecting Agile Bullshit. Marcel Baumann. 2019\n[15] Scrum Guide Jeff Sutherland, Ken Schwaber. 2020\n","categories":"","description":"","excerpt":" You are working as a developer in a Scrum team.\nCongratulations, working as a professional Scrum developer is a fulfilling and exciting job.\nYou should attend professional training.\nFormal training …","ref":"/blog/2021/scrum-developer-formation/","tags":["agile"],"title":"Scrum Developer Formation"},{"body":" I am teaching agile software architecture and techniques SWAT as advanced bachelor level lecture weighted with 3 ECTS.\nI gave this training the last three years at Lucerne University of Applied Sciences and Arts HSLU in Switzerland.\nAll materials are released under the Creative Commons copyright.\nThe course contents are aligned with the big software architecture programs.\nThe Open Group organization is the steward of TOGAF standard. TOGAF is the worldwide industrial standard for enterprise software architecture.\nThe group has realized that software and enterprise architecture must incorporate the agile principles [1], [2].\nAll students had formal training in Java, object-oriented programming and design, and agile software project approaches.\nThe school is still teaching waterfall and hybrid methods as a main approach for digital product development. One consequence is that students have a shallow understanding of more modern frameworks such as Scrum or DevOps.\nThe official proficiencies for the Scrum roles Scrum Master[4], Product Owner[5], and Developer[6] are not achieved with the current curriculum.\nSWAT Lecture Content The lecture description is:\nTeaches the basics of systematic agile design of an adequate software architecture for a selected application.\nMethods of agile quality assurance and software craftsmanship are explored using predefined or self-selected projects of students.\nThe fourteen lecture themes are:\nTraditional and Agile Approaches for software product architecture\nWhy Agile Architecture and Design?\nEvolution of Software Architecture over the last Decades\nWhat is Agile Architecture?\nAgile Approaches with Scrum, XP, LeSS\nAgile Components and Subsystem Design and Continuous Improvements\nRefactoring\nErrors, Vulnerabilities, Smells in Source Code\nArchitecture of Components and Subsystems\nVerify Functional Features\nValidate Quality Attributes of a Software Architecture\nAgile Application Architecture and Domain Driven Design\nArchitecture Documentation\nArchitecture Trends I\nArchitecture Trends II\nDomain Driven Design Workshop\nTeam and Technical Excellence for Architects\nThe slides of the SWAT course are available for all interested parties.\nThe course provides mandatory and optional literature for studying.\nThe reference texts are [1, 2, 3, 4].\nThe following books are recommended for interested students [5, 6, 7, 8, 9]. Each book is quite compact and can read over a weekend.\nThe lecturer can also use [10, 11] for the workshop parts.\narc42 Architecture Approach The course discusses the key points defined in approaches such as arc42. The same concepts can naturally be found in TOGAF with a slight different terminology. The main sections in the arc42 documentation:\nIntroduction and Goals Short description of the requirements, driving forces, extract (or abstract) of requirements. Top three (max five) quality goals for the architecture which have the highest priority for the major stakeholders. A table of important stakeholders with their expectation regarding architecture. Agile defines the product vision, goals, and roadmap. Stakeholder management has a strong emphasis and is the responsibility of the product owner.\nSee Why Agile Architecture and Design, Evolution of Software Architecture, Agile Approaches\nConstraints Anything that constrains teams in design and implementation decisions or decision about related processes. It can sometimes go beyond individual systems and are valid for whole organizations and companies. Define, track and verify through fitness functions.\nSee Non-functional Features\nContext and Scope Delimit your system from its (external) communication partners (neighboring systems and users). Specify the external interfaces. Shown from a business/domain perspective (always) or a technical perspective (optional) Define and document using the UML or C4 approach.\nSee Architecture Documentation\nSolution Strategy Summary of the fundamental decisions and solution strategies that shape the architecture. Can include technology, top-level decomposition, approaches to achieve top quality goals and relevant organizational decisions. Document through an architecture document, architecture workshops and diagrams.\nSee Architecture Documentation, Trends I, Trends II\nBuilding Block View Static decomposition of the system, abstractions of source-code, shown as hierarchy of white boxes (containing black boxes), up to the appropriate level of detail. Document through an architecture document, architecture workshops and diagrams. Complex UML models are useless and not maintainable.\nSee Component Architecture, Architecture Documentation\nRuntime View Behavior of building blocks as scenarios, covering important use cases or features, interactions at critical external interfaces, operation and administration plus error and exception behavior.+ Documented through automated tests and if necessary diagrams. Complex UML models are useless and not maintainable.\nSee Component Architecture, Architecture Documentation\nDeployment View Technical infrastructure with environments, computers, processors, topologies. Mapping of (software) building blocks to infrastructure elements. Infrastructure as code document the infrastructure and the solution deployment. Usually deployment diagrams are useless.\nSee Component Architecture, Architecture Documentation\nCross Cutting Concepts Overall, principal regulations and solution approaches relevant in multiple parts (→ cross-cutting) of the system. Concepts are often related to multiple building blocks. Include different topics like domain models, architecture patterns and styles, rules for using specific technology and implementation rules. Should be documented as architecture decisions.\nSee Non-functional Features, Architecture Documentation\nArchitecture Decisions Important, expensive, critical, large scale or risky architecture decisions including rationales. It is an important aspect of any software architecture.\nSee Architecture Documentation\nQuality Requirements Quality requirements as scenarios, with quality tree to provide a high-level overview. The most important quality goals should have been described in section 1.2 (quality goals). Should be documented as fitness functions and realized as automated tests.\nSee Non-functional Features, Architecture Documentation\nRisk and Technical Debt Known technical risks or technical debt. What potential problems exist within or around the system? What does the development team feel miserable about? Risk management is part of any professional product development and shall be documented. Ideally, a good product developed with professionals has a very low technical debt.\nSee What is Agile Architecture, Refactoring, Non-functional Features, Excellence for Architects.\nGlossary Important domain and technical terms that stakeholders use when discussing the system. Also: translation reference if you work in a multi-language environment. Static web page generator approaches create more legible, searchable and usable documentation. Paper-based documentation or wikis are a suboptimal way of describing a software product.\nSee Architecture Documentation\nThe arc42 approach is heavily influenced by their UML and RUP roots. This heritage is one major reason why this approach is not extensively taught in the course.\nBachelor students have attended formal training in UML and scientific diagramming notations such as C4 or BPMN. They can produce these artifacts before attending the SWAT course.\nISAQB Architecture Program The SWAT lecture has similar theme weights as the ISAQB International Software Architecture Qualification Board foundation level training and certification [1].\nThe ISAQB foundation is kind of a laggard. Most of their trainings are for classical software and enterprise architecture. They have finally understood lately that agile is won the war how to develop digital products.\nTHe ISAQB programs teach skills in three areas: technological competence, methodical competence, and communicative competence.\nThe key points are:\nThe concept and meaning of software architecture\nTasks and responsibility for you as a software architect\nYour role as a software architect in projects\nState-of-the-art methods and techniques for the development of software architectures\nThe taught skills are:\nHow can you coordinate essential software architecture decisions with other project participants from the fields of requirements management, project management, testing and development?\nHow can you document and communicate software architectures based on architecture patterns and technical concepts?\nHow can you independently carry out the essential steps in designing software architectures for small and medium-sized systems?\nThey have a specific module for agile software architecture:\nBasics\nAgile approach to architecture\nArchitecture requirements in agile projects\nDesigning architectures in a team\nReflection and feedback\nExamples of agile architecture work\nIn this module, the participants learn how to design, develop and further develop software systems and architectures in accordance with agile principles. On the one hand, the module covers the application of agile principles and concepts to architecture work. On the other hand, expedient anchoring of architecture practices in an agile approach.\nThe development of architectures in projects with self-sufficient teams or shared responsibilities demands new skills and capabilities on the part of developers and architects. These in turn cover technical as well as methodical and communicative aspects, which are addressed here all theoretically and in practical exercises.\nThe learning goals for the ISAQB agile certification are:\nIntroduction to agile software architecture Knowing and being able to explain the significance of agile ideas for architecture work.\nKnowing the tasks involved in architecture development and how they are modified in the agile environment.\nBeing able to appropriately align architecture work to the specific problem and project.\nKnowledge of agile tools for architecture work.\nKnowledge of the capabilities for anchoring architecture as a cross-cutting aspect in agile organisations.\nSee What is Agile Architecture, Agile Approaches\nThe agile architecture approach Being able to iteratively and agilely structure architecture work.\nKnowledge of role models for architects in agile projects.\nKnowledge of ways involving stakeholders in architecture work.\nSee Agile Approaches, Excellence for Architects\nArchitecture requirements in agile projects Being able to formulate quality requirements appropriately for specific target groups.\nBeing able to use agile concepts for architecture requirements.\nBeing able to use iterative approaches for continuous definition of architecture requirements.\nBeing able to effectively organise joint management, evaluation and prioritisation of requirements.\nKnowing and being able to explain urgency as a driving factor for architecture work.\nSee Agile Approaches, Functional Features\nDesigning and developing architectures in a team Being able to use methods for making decisions in groups.\nBeing able to support groups and teams in reaching decisions.\nBeing able to create the necessary prerequisites for team decisions.\nBeing familiar with architecture concepts for promoting local decision-making capabilities.\nBeing familiar with methods for just-in-time architecture decisions.\nBeing familiar with ways of communicating architecture decisions in agile projects.\nSee Agile Approaches, Excellence for Architects\nReflection and feedback on architecture work in the agile context Being familiar with techniques for joint reflection on architecture decisions.\nBeing able to find the reasons for specific architecture problems.\nBeing familiar with feedback capabilities from the implementation and able to attribute results to architecture objectives.\nSee Errors and Smells, Component Architecture\nExamples of agile architecture work Being familiar with and understanding examples of decision-making procedures in agile projects.\nBeing familiar with and understanding examples for agile architecture requirements.\nBeing familiar with physical characteristics of agile communication concepts.\nBeing able to understand the postponement of architecture decisions.\nBeing familiar with and understanding examples of agilely organised architecture groups.\nSee Excellence for Architects\nCare was taken that all the above aspects are handled over the SWAT course. The main difference is the SWAT course has a more technical approach to agile architecture. Communication, team findings techniques and documentation are discussed in Agile Approaches, Architecture Documentation and Excellence for Architects.\nBachelor students have attended formal training in Scrum and had extensive team workshop to foster communication techniques.\nLessons Learnt Foundations Principles need to be taught at the beginning. The students already know concepts such as KISS, SOLID, YAGNI from previous lectures.\nThey can seldom apply these principles in their own code or semester projects. Understanding why certain anti-patterns are often wrong is seldom observable.\nYou can only become a professional software architect if you are proficient in a technology stack. You shall be a craftsman about how to write industrial grade source code.\nYou know how to test it, deploy it, run it and maintain it. You shall have knowledge of the idioms for your programming language and software design patterns at the component level.\nThe students are motivated and eager to learn. It takes time to establish the capabilities of a professional programmer and component designer.\nThis time is missing in our SWAT lecture for the discussion of product software architecture themes.\nWe are now defining an overall path for all students to achieve craftsmanship over their bachelor curriculum. Students must write professional source code, master design at the component level, and understand agile techniques. Approaches such as clean code, test-driven development, refactoring and infrastructure as code shall be studied material.\nDesign and Architecture Design concepts must be refined. The students understand concepts such as patterns, micro-architecture, layered architecture. They seldom formulate the technical and financial tradeoffs associated with a specific concept application [2].\nAlmost no student has experience with open source libraries. They used them on a daily basis and never looked at the source code, provided an improvement, or read the documentation.\nWe are trying to formulate an approach to improve achieved goals. We shall either build these concepts into project management lectures or in the semester theses.\nLinks [1] Agile Architecture in the Digital Age. Open Group. 2018\n[2] Open Agile Architecture. Open Group. 2019. (ISBN: 1-947754-62-1)\n[3] Why Enterprise Architecture?. Marcel Baumann. 20221\n[4] Scrum Master Formation. Marcel Baumann. 2021\n[5] Product Owner Formation. Marcel Baumann. 2021\n[6] Scrum Developer Formation. Marcel Baumann. 2021\n[7] Agile Architecture Principles. Marcel Baumann. 2019\n[8] Agile Software Architecture is Mainstream Marcel Baumann, 2021\nReferences [1] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[2] M. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\n[3] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\n[4] M. C. Feathers, Working Effectively with Legacy Code. Prentice Hall, 2004 [Online]. Available: https://www.amazon.com/dp/0131177052\n[5] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[6] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[7] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[8] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[9] R. C. Martin, Clean Craftsmanship. Addison-Wesley Professional, 2021 [Online]. Available: https://www.amazon.com/dp/B095C16LSW\n[10] V. Vernon, Domain-Driven Design Distilled. Addison-Wesley Professional, 2016 [Online]. Available: https://www.amazon.com/dp/B01JJSGE5S/\n[11] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n1. The main difference is the course has weighted more heavily on examples and exercises. Students learn better when they practice the theory 2. Choosing a technical and financial tradeoff is the essence of engineer’s work. These tradeoffs are often formulated in architecture design records ADR. ","categories":"","description":"","excerpt":" I am teaching agile software architecture and techniques SWAT as advanced bachelor level lecture weighted with 3 ECTS.\nI gave this training the last three years at Lucerne University of Applied …","ref":"/blog/2021/what-i-learnt-teaching-agile-software-architecture/","tags":["agile","architecture","series-students"],"title":"What I Learnt Teaching Agile Software Architecture"},{"body":" The static website build tool Hugo is awesome. With the extensive built-in feature set of Hugo and the feature-rich text formatting options that Asciidoc offers, it creates a blogging experience composed of easy content management and fun writing experience.\nIn most static site generators including Hugo, Markdown is the one and only first-class citizen when it comes to creating posts.\nHowever, in recent Hugo versions, external helpers are an official feature. It calls appropriate external programs to a certain type of files. Fortunately, Asciidoc based files are automatically compiled with Asciidoctor, so we do not need to do anything. Just have it installed and you are ready to go.\nThe Hugo theme Docsy is ideal to create a good-looking software documentation site. This theme is currently the best match I found to combine product documentation with blogging.\nI love to write my documentation and blogs using Asciidoc notation [1]. The official site is Asciidoc. A major tool chain can be found under Asciidoctor.].\nHugo supports Asciidoctor through external helpers. External helpers are relatively new and more like an experimental feature. There is a proposal on improving it by adding user configurations, so at least there is hope for this particular feature to expand.\nThe features of Asciidoc are equivalent to DocBook. The readers with grey hair probably remember SGML, the ancestor of DocBook. The librarians could remember LaTeX created by Leslie Lamport. He created it to describe temporal logic aspects of cluster communication for the Digital Equipment Corporation DEC solution. These highly qualified experts and their solutions paved the way to legible documentation and professional typography.\nSource Code Highlight Asciidoctor supports rouge source code highlighting per default [2]. You do need to add any extension to Hugo. Just select the style you prefer, such as:\nrouge-style = \"github\" Search Function for the Website The theme has multiple search solutions to index your static website. I chose the Lunr approach for our site. The solution has no strings attached and does not require an external search server.\nThe website and the search functionality are self-contained as a static website should be.\nComment Function for Blog Article The comment feature is somewhat at odds with the concept of static website. The theme has multiple comment solutions to allow readers to publish a question or a test to our site. I decided to provide comments only to the blog part of the website. I chose the Utterances approach for our site. The solution has no strings attached and uses the well-known platform GitHub. No tracking, no ads and no locking are great.\nThe comment author must first log in GitHub before adding her comment therefore spamming or flaming are minimized.\nYou have to create a partial in docsy to use Utterances.\n\u003cdiv class=\"page-blank\"\u003e \u003cdiv id=\"utterancers_thread\"\u003e\u003c/div\u003e \u003cscript src=\"https://utteranc.es/client.js\" repo= {{ .Site.Params.comments_utterances_repo }} issue-term= {{ .Site.Params.comments_utterances_issue_term }} theme= {{ .Site.Params.comments_utterances_theme }} crossorigin=\"anonymous\" async\u003e \u003c/script\u003e Tag Function for Blog Article Docsy has finally merged the change request for taxonomies during the first semester of 2021. Tags for articles are now natively supported without tinkering with the code of the plugin.\nOur blog displays the tags on the right side of the window. Give it a try.\nDiagrams in articles Diagrams in blog articles are currently a more complex issue. Hugo seems to be quite restrictive which extensions can be loaded when generating a static site [3]. No reasonable reasons exit for the above-mentioned restrictions. Ongoing pull requests try to improve the situation.\nI had success with:\nplantUML diagrams See, for example, following blogs GitLab for Students\nmermaid diagrams See for example following blogs Agile Trend 2021 or Agile Trend 2020.\nplantUML supports hyperlinks in diagrams. To use relative links in your site declare a PlantUML variable for the root of your and define links relative to this root. The declarations for such a diagram could be:\n[plantuml,target=dependencies,format=svg, width=\"100%\",,opts=\"inline\",svg-type=\"inline\"] (1) .... @startuml !$root = \"https:/blog.tangly.net\" (2) package net.tangly.bdd [[$root/docs/bdd/]] { (3) } @enduml .... 1 Links work only for SVG digrams with the opion inline or interactive. The value is stated once in opts and once in svg-type because plantUML and kroki generators use different options for the same information. 2 Define a plantUML variable for the root URL of your site. I could not use asciidoc variable in plantUML links because the characters {} are interpreted as caption items. 3 Use the variable to define links [[]] relative to your root. plantUML will expand the link to expected value. The generated HTML code does not respect all AsciiDoc parameters. Text flow configurations are not enforced.\nLayout and Appearance The docsy theme is regularly improving. The provided features are good and very stable.\nThe Hugo integration of Asciidoc is subpar. The CSS styling files of Asciidoc are not integrated with Hugo and themes. Often the appearance of the generated HTML could be improved. I am currently exploring venues to improve the integration of nice looking asciidoc styling sheets with the docsy universe.\nFuture Features I have integrated an extension to provide access to static files through a Hugo/Docsy site. For example the presentation of a speech is made available directly in the static website.\nThis feature is currently experimental and queued as a pull request in the Docsy GitHub repository [4].\nLinks [1] Static Website Improvements Marcel Baumann. 2023.\n[2] Improving a Static Website Build With Hugo and Docsy Marcel Baumann. 2021.\n[3] Support Comments for Static Hugo Website Marcel Baumann. 2020.\n[4] Creating a technical Website with Hugo and Asciidoc Marcel Baumann. 2020.\n1. If you are new to asciidoc, you can experiment online. 2. Beware the Hugo documentation stating you have to import an extension for syntax highlighting is plain wrong if you are using rouge. 3. The situation was improved with newer releases of hugo. It is now possible to specify the desired options under markup.asciidocExt.extensions. 4. This feature removed my dependency to Google drive to host downloadable artifacts. ","categories":"","description":"","excerpt":" The static website build tool Hugo is awesome. With the extensive built-in feature set of Hugo and the feature-rich text formatting options that Asciidoc offers, it creates a blogging experience …","ref":"/blog/2021/improving-a-static-web-site-build-with-hugo-and-docsy/","tags":["design","hugo","series-students"],"title":"Improving a Static Web Site Build With Hugo and Docsy"},{"body":" You work as a Scrum master.\nCongratulations, working as a professional Scrum master is a fulfilling and exciting job.\nYou should attend professional training.\nNot only attend the two-day training to receive a shiny diploma.\nBeing a Scrum master and coach is a profession, not a fancy title!\nPlease reflect on your goals and ethics.\nScrum Master Role Here the official definition of the product owner role taken from the Scrum Guide.\nThe Scrum Master is accountable for establishing Scrum as defined in the Scrum Guide. They do this by helping everyone understand Scrum theory and practice, both within the Scrum Team and the organization.\nThe Scrum Master is accountable for the Scrum Team’s effectiveness. They do this by enabling the Scrum Team to improve its practices within the Scrum framework.\nScrum Masters are true leaders who serve the Scrum Team and the larger organization.\nThe Scrum Master serves the Scrum Team in several ways, including:\nCoaching the team members in self-management and cross-functionality;\nHelping the Scrum Team focus on creating high-value Increments that meet the Definition of Done;\nCausing the removal of impediments to the Scrum Team’s progress; and,\nEnsuring that all Scrum events take place and are positive, productive, and kept within the time box.\nThe Scrum Master serves the Product Owner in several ways, including:\nHelping find techniques for effective Product Goal definition and Product Backlog management;\nHelping the Scrum Team understand the need for clear and concise Product Backlog items;\nHelping establish empirical product planning for a complex environment; and,\nFacilitating stakeholder collaboration as requested or needed.\nThe Scrum Master serves the organization in several ways, including:\nLeading, training, and coaching the organization in its Scrum adoption;\nPlanning and advising Scrum implementations within the organization;\nHelping employees and stakeholders understand and enact an empirical approach for complex work; and,\nRemoving barriers between stakeholders and Scrum Teams.\nCertifications The two big Scrum organizations Scrum Alliance and Scrum.org provide a certification path for Scrum masters. The certification path has three levels:\nCertified Scrum Master Introduction course for those who are closest to the organization of the project. It is usually two days of training. The Scrum.org allows taking the certification examination without attending a course [1].\nCertified Advanced Scrum Master Advanced course for Scrum Masters who already have one year of experience on a Scrum team. It is at least two days training. You should read the recommended books to have a greater probability to pass the examination on the first try.\nCertified Scrum Professional Scrum Master Pinnacle course for experts wishing to master the Scrum Master track. The third level requires more training, experience, and reading books. You often must participate in workshops before being allowed to graduate. Each certification organization has her own rules and conditions.\nBeware if you select the Scrum Alliance, you must renew your certification every two years. The conditions are similar to the renewal of a PMI certification. You must provide proof of training and pay a fee. The Scrum.org certifications never expire.\nThe Scrum Master learning objectives for the first level are:\nLean, Agile, and Scrum\nlist at least three rights and five responsibilities of the Product Owner, Development Team and Scrum Master.\ndiscuss at least two reasons why the Product Owner is a single person and not a group or a committee.\ndiscuss how and why the Product Owner maintains authority over the product while working collaboratively with the Development Team and stakeholders.\nlist at least five characteristics of the Development Team.\ngive one example of how a Scrum Team will inspect and adapt and increase transparency at each of the Scrum events.\ndescribe at least three responsibilities for the Development Team, Product Owner, and Scrum Master during Sprint Planning, Daily Scrum, Sprint Review, and Sprint Retrospective.\ndescribe why the Sprint Goal does not change during a Sprint.\ndefine the outcome of every Sprint.\ndiscuss at least three reasons why the increment must be brought to the current definition of Done regardless of whether the Product Owner chooses to release the increment.\ndiscuss the focus of the activities for the Product Owner and Development Team during the two topics of Sprint Planning: the What and the How.\npractice writing a Sprint Goal.\ndiscuss at least three ways the Daily Scrum differs from a status meeting and why the various constraints exist to support the Development Team.\ndescribe at least three activities that occur during the Sprint Review other than a demonstration of the increment.\nidentify at least three potential outcomes for a Sprint Review.\ndescribe at least two approaches to conduct a Sprint Retrospective.\nidentify at least three essential characteristics of the Product Backlog.\nlist at least four attributes of a Product Backlog item.\nidentify at least three essential characteristics of the Sprint Backlog.\ndemonstrate how the Sprint Backlog can be changed without endangering the Sprint Goal.\nexplain the importance of a strong definition for Done and describe at least two risks associated with a weaker definition of Done.\noutline at least one way to create a definition of Done.\nidentify at least two reasons why multiple teams working on the same Product Backlog have a shared and consistent definition of Done.\nScrum Master Core Competencies\ndescribe at least three situations in which the Scrum Master could serve the needs of the Scrum Team or organization through facilitation.\ndemonstrate at least three techniques for facilitating group decision-making.\nCoaching\nrestate how facilitating, teaching, mentoring, and coaching are different.\napply at least one technique that could help resolve a challenge faced by a Scrum Team.\nScrum Master as Servant-Leader\ndefine servant-leadership.\ndescribe three scenarios where the Scrum Master acts as the servant-leader for the Development Team.\nidentify possible violations of Scrum by a Product Owner or stakeholder who is applying excessive time pressure and illustrate how to address them.\ndefine technical debt and explain the impact of accumulating technical debt.\nlist at least three development practices that will help Scrum Teams deliver a high-quality\nProduct Increment and reduce technical debt each Sprint\nexplain at least three ways the Scrum Master could support the Product Owner.\nlist at least two benefits that arise if a Product Owner participates in the Sprint Retrospective.\nService to the Organization\ndiscuss at least two ways that the Scrum Master assists the Scrum Team with impediments.\ndescribe at least three organizational impediments that can affect Scrum Teams.\ndescribe at least one example of an organizational design change caused by adopting Scrum.\ndiscuss why Scrum does not have a project manager and what happens to traditional project management activities\nYou can self-study the Scrum Master objectives [1], [2] with the official scrum team book [4]. The book is well-written and covers all required topics. Be a professional knowledge worker and support your organization on the agile path [8].\nA reading list can be found under Suggested Reading Professional Scrum Master. Seminal cited books are [1, 2].\nI published a list of seminal works for interested Scrum masters under Books.\nProject Leadership Trainings An interesting development is the addition of tailored project management training emphasizing agile approaches. The biggest organization PMI has a whole set of agile certifications based on Disciplined Agile Design DAD.\nI expect the emphasis on agile approaches to markedly increase in the next years.\nUniversity Formal Trainings Technical universities in Switzerland provide formal training in project leadership, project management and related fields. The formation provides a certificate of advanced study CAS in the field. Current available certificates of advanced study offering are, for example:\nFHNW CAS Agile Leadership\nFHNW CAS Agile Organization\nFFHS CAS Agile Organization\nZHAW CAS Agile Leadership\nZHAW CAS Agile Project Management\nIKF CAS Agile Leadership of Digital Transformation\nLinks [1] Scrum Alliance Certified Scrum Master Learning Objectives. Scrum Alliance. 2021.\n[2] Scrum Alliance Advanced Certified Scrum Master Learning Objectives. Scrum Alliance. 2017.\n[3] Agile Software Architecture is Mainstream. Marcel Baumann. 2021.\n[4] The professional Scrum team: Growing and Empowering Cross-Functionality and Resiliency in a Complex World. Peter Götz, Uwe Schirmer, Kurt Bittner. Addison-Wesley. 2021.\n[5] Scrum Master Formation. Marcel Baumann. 2021.\n[6] Product Owner Formation. Marcel Baumann. 2021.\n[7] Scrum Developer Formation. Marcel Baumann. 2021.\n[8] Detecting Agile Bullshit. Marcel Baumann. 2019.\n[9] Scrum Guide Jeff Sutherland, Ken Schwaber. 2020.\nReferences [1] H. Doshi, Scrum Insights for Practitioners : The Scrum Guide Companion. Practiceagile.com. [2] G. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\n1. The examination is only available in English. ","categories":"","description":"","excerpt":" You work as a Scrum master.\nCongratulations, working as a professional Scrum master is a fulfilling and exciting job.\nYou should attend professional training.\nNot only attend the two-day training to …","ref":"/blog/2021/scrum-master-formation/","tags":["agile"],"title":"Scrum Master Formation"},{"body":" DevOps is the combination of cultural philosophies, practices and tools that increase an organization’s ability to deliver at high velocity.\nIt evolves and improves products at a faster pace than organizations using traditional software development and infrastructure management processes.\nThis speed enables organizations to better serve their customers [1, 2].\nA surprising side effect of this speed-up is a documented improvement of the delivered quality.\nHow It Works Under a DevOps model, development and operations teams are no longer siloed. Sometimes, these two teams are merged into a single team where the engineers work across the entire application lifecycle. The work is from development through test, deployment to operations. The range of skills is not limited to a single function.\nIn some DevOps models, quality assurance and security teams may also become more tightly integrated with development and operations. When security is the focus of everyone on a DevOps team, this is sometimes referred to as DevSecOps.\nThese teams practice automating processes that historically have been manual and slow. They use a technology stack and tooling, which helps them operate and evolve applications quickly and reliably. These tools also help engineers independently carry out tasks that normally would have required help from other teams. This increases a team’s velocity.\nYou will automate every workflow in the long term to achieve speed and reliability.\nYou will merge your Scrum software development teams, quality assurance groups, operations teams and testing groups into single product teams.\nYou will define cross-functional teams as documented in the Scrum Guide.\nBenefits Speed Move at high velocity, so you can innovate for customers faster, adapt to changing markets better, and grow more efficient at driving business results. The DevOps model enables your developers and operations teams to achieve these results. For example, microservices and continuous delivery let teams take ownership of services and then release updates to them quicker.\nRapid Delivery Increase the frequency and pace of releases, so you can innovate and improve your product faster. The quicker you can release new features and fix bugs, the faster you can respond to your customers’ needs and build a competitive advantage. Continuous integration and continuous delivery are practices that automate the software release process, from build to deploy.\nReliability Ensure the quality of application updates and infrastructure changes, so you can reliably deliver at a more rapid pace while maintaining a positive experience. Use practices like continuous integration and continuous delivery to test that each change is functional and safe. Monitoring and logging practices help you stay informed of performance in real-time.\nScale Operate and manage your infrastructure and development processes at scale. Automation and consistency help you manage complex or changing systems efficiently and with reduced risk. For example, infrastructure as code helps you manage your development, testing and production environments in a repeatable and more efficient manner.\nImproved Collaboration Build more effective teams under a DevOps cultural model, which emphasizes values such as ownership and accountability. Developers and operations teams collaborate closely, share many responsibilities, and combine their workflows. This reduces handover inefficiencies and diminishes cycle-time. It reduces, for example, handover periods between developers and operations, writing code that takes into account the environment in which it is run.\nSecurity Move quickly while retaining control and preserving compliance. You can adopt a DevOps model without sacrificing security by using automated compliance policies. For example, using infrastructure as code and policy as code, you can define and then track compliance at scale.\nDevOps Adoption Transitioning to DevOps requires a change in culture and mindset. At its simplest, DevOps is about removing the barriers between two traditionally siloed teams, development and operations. In some organizations, there may not even be separate development and operations teams; engineers may do both.\nWith DevOps, the two teams work together to optimize both the productivity of developers and the reliability of operations. They strive to communicate frequently, increase efficiencies, and improve the quality of services they provide to customers. They take full ownership of their services, often beyond where their stated roles or titles have traditionally been scoped.\nQuality assurance and security teams may also become tightly integrated with these teams. Organizations using a DevOps model have teams that view the entire development and infrastructure lifecycle as part of their responsibilities.\nDevOps Practices Continuous Integration Continuous integration is a software development practice where developers regularly merge their code changes into a central repository. Automated builds and tests are run upon changes in the repository. The key goals of continuous integration are to find and address bugs quicker, improve software quality, and reduce the time it takes to validate software updates.\nContinuous Delivery Continuous delivery is a software development practice where code changes are automatically built, tested, and prepared for a release to production. It expands upon continuous integration by deploying all code changes to a testing environment or a production environment after the build stage. When continuous delivery is implemented properly, developers will always have a deployment-ready build artifact.\nModular Systems and Microservices The microservice’s architecture is a design approach to build a single application as a set of small services. Each service runs in its own process and communicates with other services through a well-defined interface using a lightweight mechanism. Microservices are built around business capabilities; each service is scoped to a single purpose. You can use different frameworks or programming languages to write microservices and deploy them independently, as a single service, or as a group of services.\nInfrastructure as Code Infrastructure as code is a practice in which infrastructure is provisioned and managed to use code and software development techniques. Examples are version control and continuous integration. The cloud’s API-driven model enables developers and system administrators to interact with infrastructure programmatically. They do need to interact manually set up and configure resources. Engineers can interface with infrastructure using code-based tools and treat infrastructure in a manner similar to how they treat application code. Because they are defined by code, infrastructure and servers can quickly be deployed using standardized patterns, updated with the latest patches and versions.\nMonitoring and Logging Organizations monitor metrics and logs to see how application and infrastructure performance impacts the experience of their product’s end user. By capturing, categorizing, and then analyzing data and logs generated by applications and infrastructure, organizations understand how changes or updates impact users, shedding insights into the root causes of problems or unexpected changes. Active monitoring becomes increasingly important as services must be available 24/7 and as application and infrastructure update frequency increases. Creating alerts or performing real-time analysis of these data also helps organizations more proactively monitor their services.\nCommunication and Collaboration Increased communication and collaboration in an organization is one of the key cultural aspects of DevOps. The use of DevOps tooling and automation for the software delivery process establishes collaboration. They physically bring together the workflows and responsibilities of development and operations. Building on top of that, these teams set strong cultural norms around information sharing and facilitating communication through the use of chat applications, issue or project tracking systems, and wikis. This helps speed up communication across developers, operations, and even other teams like marketing or sales, allowing all parts of the organization to align more closely on goals and projects.\nDevOps Tools A DevOps toolchain is a set or combination of tools that aid in the delivery, development, and management of software applications throughout the system development life cycle, as coordinated by an organisation that uses DevOps practices.\nGenerally, DevOps tools fit into one or more activities, which support specific DevOps initiatives: Plan, Create, Verify, Package, Release, Configure, Monitor, and Version Control.\nWhat is Java DevOps? Java DevOps is simply applying DevOps practices and philosophies to Java app development. That means that compartmentalized teams are no longer needed when creating Java applications.\nYou should understand these principles:\nContinuous integration This practice requires developers to periodically merge the code that they have written into a central repository. After the merge, tests and automated builds are executed. This allows a team to find issues and quickly quash out bugs, improve the application’s quality and then cut the time needed to validate your apps. Often the step of Continuous Delivery is added to the pipeline. Use a platform such as gitLab, gitHub, BitBucket, or Azure DevOps. Use Gradle as your build tool.\nContinuous delivery This practice requires your team to release into production all code changes after it is written and then automatically built, and tested. If continuous integration puts your code changes onto a testing environment, continuous delivery puts it into a production environment. What does this mean? You will always have a production-ready Java application! Use Gradle to create your application. Use Docker, Ansible to deploy.\nMicroservices DevOps makes use of microservices. Instead of having one big monolithic Java application, your application is made up of smaller and independent applications. Use domain driven design DDD as your architecture method. Prefer standalone applications embedding your application server.\nInfrastructure as a code This practice means that infrastructure is allocated and then managed by using code and development techniques. Cloud services can help your development and operations teams interact with infrastructure at a scale they are comfortable with. With infrastructure as a code, servers and infrastructure are deployed fast, automatically patched and can easily be duplicated. Use Docker and Ansible to automate your deployment.\nLessons Learnt The motivations for what has become modern DevOps and several standard DevOps practices, such as automated build and test, continuous integration, and continuous delivery originated in the Agile world, which dates to the 1990s. Agile development teams using methods such as eXtreme Programming could not satisfy the customer through early and continuous delivery of valuable software unless they subsumed the operation responsibilities associated with their applications, many of which they automated.\nBecause Scrum emerged as the dominant Agile framework in the early 2000s, and it omitted the engineering practices that were part of many Agile teams, the movement to automate operations functions splintered from Agile and expanded into what has become modern DevOps cite[accelerate]. Today, DevOps focuses on the deployment of developed software, whether it is developed via Agile or other methodologies.\nTo practice DevOps effectively, software applications have to meet a set of architecturally significant requirements such as: deployability, modifiability, testability, and monitorability. You must continuously monitor your infrastructure, network and application.\nYou need a cultural change to successfully implement DevOps workflows.\nBigger companies often have trouble with the changes. Command and control cultures always fail. It boils down if your culture trusts your collaborators - often called Theory X and Theory Y beliefs.\nInterestingly, the DevOps transformation is similar to an agile transformation. The approaches, recipes and failures are similar.\nSmaller organizations are often more affine with trust.\nAlthough it is possible to practice DevOps with any architectural style, the microservices architectural style is becoming the standard for building continuously deployed systems. Small size service allows the architecture of an individual service to emerge through continuous refactoring [3, 4, 5] hence reducing the need for a big upfront design, allows for releasing the software early[citation needed] and continuously.\nReferences [1] T. Owens, The lean enterprise how corporations can innovate like startups. 2014 [Online]. Available: https://www.amazon.com/dp/1118852176\n[2] G. Kim, The Phoenix Project a novel about IT, DevOps, and helping your business win. IT Revolution Press [Online]. Available: https://www.amazon.com/dp/0988262592\n[3] J. Humble and D. Farley, Continuous Delivery. Addison-Wesley Professional, 2010 [Online]. Available: https://www.amazon.com/dp/0321601912\n[4] D. Farley, Continuous Delivery Pipelines. 2021 [Online]. Available: https://www.amazon.com/dp/B096YGZVZ9\n[5] G. Kim and N. Forsgren, DevOps Handbook, Second. IT Revolution Press, 2021 [Online]. Available: https://www.amazon.com//dp/B09G2GS39R\n","categories":"","description":"","excerpt":" DevOps is the combination of cultural philosophies, practices and tools that increase an organization’s ability to deliver at high velocity.\nIt evolves and improves products at a faster pace than …","ref":"/blog/2021/devops-for-small-applications/","tags":["agile","devops"],"title":"DevOps for Small Applications"},{"body":" Everybody is talking about being agile.\nCompanies institutionalize agile change programs and send all their collaborators in training to learn the agile way.\nWhat does that mean?\nHow should I as a manager work the agile way?\nDoes this agile way exist, or is it simply a fad created by the consulting industry?\nThis article provides some pointers and hypotheses what agile leadership could be.\nFeel free to experiment and refine your successful approach to be agile as an organization. You must experiment, learn and train to become a successful agile leader [1, 2]. It is a job, not a hobby.\nOrganizational agility cannot exceed the level of personal leadership agility of those with the most influence in an organization.\nBecause agile leadership involves ongoing personal development, it is not something that can be mastered in a single training course.\nAgile Leaders engage, and serve the team at the place of work Serving the team is all the rage these days. You hear or read about Servant Leadership at every turn. But serving the team is too often interpreted as waiting for the team to ask for help.\nRather than wait for the team, go to the Gemba — the actual place of work.\nGet out of your office and engage with the team.\nHelp them as they deliver.\nSee their problems first hand.\nYou will know exactly what they are working on.\nIt will become obvious how you can help.\nYou start helping and playing the part only you as a leader can fill. This is a true service to the team by being a contributing member of the team.\nGrowing your team is critical By engaging shoulder to shoulder with your teams, you can help them grow. As a leader, you can teach them how to navigate complexity.\nYou must engender an ability in your team members to think using the scientific method. It is impossible to teach every possible scenario your teams will encounter. Teach them how to probe, sense, and respond. This will give them critical abilities to solve complex problems on their own.\nIt builds self-organizing skills in your teams. Scrum framework provides hints what the minimal expected behaviors you should expect. There are several references to self-management in the Scrum Guide as in the current version of 2020.\nAdaptation becomes more difficult when the people involved are not empowered or self-managing.\nScrum Teams are also self-managing, meaning they internally decide who does what, when, and how.\nThey are structured and empowered by the organization to manage their own work.\nThe Scrum Master serves the Scrum Team in several ways, including coaching the team members in self-management and cross-functionality.\nSprint Planning: How will the chosen work get done? How this is done is at the sole discretion of the Developers. No one else tells them how to turn Product Backlog items into Increments of value.\nThe Developers can select whatever structure and techniques they want, as long as their Daily Scrum focuses on progress toward the Sprint Goal and produces an actionable plan for the next day of work. This creates focus and improves self-management.\nThe Sprint Backlog is a plan by and for the Developers.\n— https://www.scrumguides.org/[Scrum Guide] You can use various indicators to detect the self-management requirement at the Scrum team level is no more than lip service:\nYou assign specific tasks directly to Developers, thus bypassing the Product Owner.\nAlternatively, you remove a Developer from the Scrum team (temporarily) to work on such a task.\nDevelopers are assigned to support other organization members while ignoring their commitment to achieving the Sprint Goal. Examples are supporting sales in a pitch, or being an expert in management meetings.\nScrum is rolled back in a moment of crisis to a traditional form of command \u0026 control, exercised, for example, by dispatching jobs directly to individual Developers.\nIgnoring self-management does not only violate Scrum’s first principles. It also indicates that a manager cannot let go of command and control practices. They continue to micromanage subordinates, although a Scrum team could accomplish the task themselves. This behavior demonstrates a level of ignorance that may require support from a higher management level to address.\nLeading by Example to nurture resilient change Co-select with the teams proficient and experienced agile coaches and Scrum masters\nPromote purpose, autonomy, mastery, accountability, strong social connection, small wins\nPut emphasis on Information Radiators\nThink about\nCollocation,\nRadical transparency,\nJob rotations,\nTeam liaisons,\nCommunity of practices,\nServant leader.\nManagement is doing things right; leadership is doing the right things.\n— Peter Drucker You should\nBe knowledgeable about agile values, approaches and practices Understand and apply the Scrum, Kanban and lean, Spotify model frameworks.\nDevelop people and teams with self-organizing teams Leadership styles, coaching and mentoring, and facilitation.\nManage products with agility.\nForecast and perform release planing based on product value and business strategy.\nDevelop and deliver products professionally.\nEvolve the agile organization through organizational design and structure, and evidence based management.\nTake a collaborative continuous improvement approach to organizational effectiveness.\nYou should avoid hindering value stream organizations and cross-functional teams by\nDefining component teams.\nGive tasks to individual collaborators instead of going through the product owner.\nAsk progress or control questions during daily Scrum.\nAsk control questions or systematically participate to.\nPromote the mindset that people are exchangeable - see mythical man month [3].\nState anybody can be a good Scrum master.\nCriticize craftsmanship approaches such as TDD, DDD, pair programming, continuous integration and delivery.\nExceptional agile leaders\nAre trained in agile values and approaches.\nThey hold certifications.\nAdvocate technical excellence.\nTrust their teams.\nWork actively to remove impediments by supporting the process and structural changes in value streams.\nRemember\nFirst Rule of Leadership Put your mission above your ego.\nSecond Rule of Leadership If you do not care about your people, they will not care about your mission.\nThird Rule of Leadership If someone has to tell you the first two rules, you are not ready to lead yet.\n— Adam Grant Please look at the agile leadership program from Scrum Alliance and Scrum.org.\nRead the Agile Manifesto text and the Twelve Principles behind the Agile Manifesto.\nBeware of the Agile Fluency Model. Be patient. Change takes time, a lot of time.\nLinks [1] Calibrate Your Agile Approach: Bill of Rights. Marcel Baumann. 2020\n[2] Agile Fluency Model. Marcel Baumann. 2020\n[3] Pragmatic Craftsmanship - Professional Software Developer. Marcel Baumann. 2018\nReferences [1] Z. Sochova, The Great ScrumMaster. Addison Wesley, 2016 [Online]. Available: https://www.amazon.com/dp/013465711X\n[2] G. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\n[3] F. P. Brooks, The Mythical Man-Month. Addison-Wesley Professional, 1995 [Online]. Available: https://www.amazon.com/dp/0201835959\n","categories":"","description":"","excerpt":" Everybody is talking about being agile.\nCompanies institutionalize agile change programs and send all their collaborators in training to learn the agile way.\nWhat does that mean?\nHow should I as a …","ref":"/blog/2021/agile-leadership/","tags":["agile"],"title":"Agile Leadership"},{"body":" I lately had to explain to customers what are the responsibilities of a technical team lead. Managers often grasp the people aspects embedded in the words team lead. The understanding of the word technical is strangely often missing.\nA technical team leads coaches and teaches the subtleties of the used technology stack to his team and organization. This person should be able to create or review a software architecture. He has a deep understanding of technological concepts.\nMore importantly, he can write productive source code. Ideally, she should Pair Program with team members or Mob Program with her whole team.\nA technical team lead must be technically savvy.\nJob Description Here is a standard Job Description for a Java technical team lead as often published on job platforms.\nWe are looking for an experienced Java technical lead to be responsible for providing solutions for technical issues which may affect product delivery. The Java technical lead will facilitate requirement analyzes, conduct peer reviews and provide feedback, and enhance frameworks.\nTo be successful as a Java technical lead, you should demonstrate sound knowledge of industry best practices, good organizational and leadership skills, and proficiency in Java technologies. A top-notch Java technical lead should have good analytical skills, the ability to anticipate issues and frame remedial actions, and excellent teamwork skills.\nJava Technical Lead Responsibilities Performing requirement analyzes.\nDeveloping high-quality and detailed designs.\nConducting unit testing using automated unit test frameworks.\nIdentifying risk and conducting mitigation action planning.\nConducting configuration of your own work.\nReviewing the work of other developers and providing feedback.\nUsing coding standards and best practices ensuring quality.\nJava Technical Lead Requirements The candidate has a bachelor or master degree in engineering, information systems or related.\nExtensive experience in the IT industry.\nSound knowledge of estimation techniques.\nExcellent knowledge of Java and web services.\nSound knowledge of Java technologies.\nGood understanding of unit testing methodologies and agile approaches.\nExcellent analytical skills.\nExceptional communication skills.\nAs an Internet example, please see Java Technical Lead Job Description. You can also find job descriptions under Indeed and Glassdoor. Similar examples can also be found under LinkedIn.\nResponsibilities Below a description of the responsibilities for a technical lead. A technical lead is responsible for the following tasks:\nHiring and training technical personnel\nDelegating work to team members\nCollaborating with their team to identify and fix technical problems\nAnalyzing users' needs and then finding applications to serve them\nCreating end goals for their team\nChecking that software and applications are updated\nSupervising system modifications\nConducting security and governance audits to identify areas of improvement\nGuiding their team through technical issues and challenges\nA technical lead is responsible for helping their team members with the technical aspects of their jobs, such as coding and programming. They may also explain new projects to their team and troubleshoot any problems that occur. In comparison, an engineering manager is more focused on managing their employees. They are responsible for business growth and team deadlines, and they typically serve as their team’s representative to the rest of the company.\nAs an engineering manager, you need to have excellent people management skills and be able to assess your team’s long-term goals. While you are more likely to work hands-on and focus on day-to-day tasks as a technical lead.\n","categories":"","description":"","excerpt":" I lately had to explain to customers what are the responsibilities of a technical team lead. Managers often grasp the people aspects embedded in the words team lead. The understanding of the word …","ref":"/blog/2021/technical-team-lead/","tags":["agile","java","organization"],"title":"Technical Team Lead"},{"body":" Architecture principles hold true in agile environments. The major difference between older traditional approaches and modern agile ones is the way of performing enterprise architecture.\nThe last years have shown a promising evolution of plan-based, centralist enterprise architecture approaches to more agile, decentralized, meritocracy driven processes.\nThese new approaches are way more compatible with modern and agile software product development framework such as Scrum, eXtreme Programming, and LeSS\nTraditional processes use dedicated persons or departments to define architecture principles in a top-down approach. Thick standards such as Enterprise Architecture Body of Knowledge codifies wisdom.\nThe Guide to the Enterprise Architecture Body of Knowledge (EABOK) organizes and characterizes the knowledge content of the Enterprise Architecture (EA) discipline. This organization and characterization promotes a consistent view of EA, establishes the scope and bounds of the EA discipline, and places the discipline in the context of related disciplines. The EABOK subdivides EA into knowledge areas and topics within each area, presents an overview of the topic, and provides the reader references for further information. The EABOK is a guide to EA, not the body of knowledge itself.\n— EABOK The enterprise architects community has realized over the years that the centralist approach is too slow and cumbersome for the digital age. The Open Group promotes the official enterprise architecture method TOGAF.\nThe Open Group published a series of white papers [1], [2] to bridge the gap between classical enterprise architecture and agile digital product development.\nAgile frameworks tend to define and promote agile receipts through collaborative structures. Examples are Community of Practice, design workshop, event storming, pair designing.\nConcepts Enterprise Architecture EA , when performed in an agile manner, is an important enabler of agile software delivery.\nThis is true for several reasons:\nCommon architecture enables agile teams to focus on value creation A common enterprise architecture enables reuse across delivery teams. When agile teams have high-quality assets – such as microservices, legacy data sources, and frameworks – they are able to focus on creating new value. They should not waste money on reinventing new versions of existing infrastructure.\nCommon technical guidance enables greater consistency When teams follow effective, common conventions, it results in greater quality. This makes it easier to learn about assets that are new to them, in particular existing source code, and to evolve those assets as needed. Greater consistency also makes it easier for people to move between teams. It will be easier for them to come up to speed on what the new team is doing and to share their skills with those team members.\nAgile architectures enable disaggregation When your solutions are built from loosely coupled, highly cohesive components, it is easier to spread development work across smaller teams. This reduces overall risk and organizational complexity, which in turn reduces time-to-delivery.\nCommon infrastructure enables continuous delivery A common technical infrastructure empowers delivery teams to deploy into it. The easier it is to deploy, the more often it makes sense to deploy.\nEnterprise architecture scales agile An agile approach to enterprise architecture enables organizations to scale agile strategies “horizontally” across their entire IT department.\nThe EA Process Some methods will choose to prescribe a single approach. Such as capturing architectural requirements in the form of epics or pre-building architectural runways. The agile toolkit promotes an adaptive, context-sensitive strategy. A goal-driven approach that indicates the process decision points you need to consider. Have a range of techniques or strategies for you to address each decision point, and the advantages and disadvantages of each technique.\nThe following diagram overviews the potential activities associated with Agile Enterprise Architecture. image::2021-07-02-enterprise-architecture-process.png[width=800,height=800,role=center] The process decision points that you need to consider for enterprise architecture are:\nSupport stakeholders Enterprise architects will work with business and IT stakeholders on a regular basis to understand their needs and to help them develop a vision for the organization.\nSupport delivery teams Enterprise architects will work with IT delivery teams, and ideally be active members of IT delivery teams, on a regular basis. They may guide the teams in the business and technical roadmaps, help them to identify potentially reusable assets, to identify technical debt. They should transfer their skills and knowledge to team members.\nNegotiate technical dependencies Like it or not, there are dependencies between the solutions that we create. For example, if your system invokes a web service, or calls an API, provided by another system, then you have a dependency on that system. Enterprise architects will often find that they need to negotiate these dependencies with other teams, either at a high-level in their role of Enterprise Architect or sometimes at a detailed level in their role of Architecture Owner on a delivery team.\nExplore architectural views Organizations are complex and as a result, they must be understood from a variety of view points. It is not just a matter of writing “architectural epics” on a collection of index cards. The enterprise architecture team may choose to adopt, and likely tailor, an existing enterprise architecture framework.\nTailor the chosen architecture framework These frameworks typically suggest a multi-view collection of artifacts to create and techniques for doing so.\nEvolve enterprise architecture Enterprise architects will collaborate with one another, and with their stakeholders, in a variety of ways. They may choose to hold architecture envisioning/modeling sessions or regular meetings where they share their learning with one another. They will often work together, or with IT delivery teams, to investigate new technologies or identify candidate architecture strategies.\nEvolve roadmap(s) An important output of your enterprise architecture effort will be one or more roadmaps. They describe your technology strategies and your architectural strategies. The roadmaps are updated in a rolling wave approach where the roadmap(s) are updated regularly.\nCapture enterprise architecture There are two broad categories for how enterprise architects can capture their work: as documents or as working/executable examples. High-level models work well for the documentation. Executable artifacts, such as executable reference architectures or architectural runways, are usually preferred over documentation by delivery teams.\nGovern architecture Architectural activities within your organization should be governed in a lightweight, collaborative manner. This is an important activity for enterprise architects as well as for your IT governance team.\nTeam Workflow The workflow within an agile enterprise architecture team is depicted in the following diagram.\nThere are four major activities:\nEnvision initial architecture The enterprise architects will spend several days developing initial, high-level models of the enterprise architecture. This will be a face-to-face, initial architecture envisioning session where the scope is the entire organization, not just a single IT solution. Ideally, this is done in an agile modeling room to streamline the communication and collaborative modeling efforts. Such a room is large with lots of whiteboard space, enabling the team to work on several models in parallel. each of which has its own section of wall space. The primary purpose of this session is for the EA team to develop a common understanding, at least a high level, for the current state of the enterprise architecture and a vision for how the team would like to see it evolve. Secondary outcomes include creating some initial artifacts. The enterprise architects will evolve these artifacts over time, meeting one another for the first time, and building bonds between the team members. Potential challenges to this activity include getting an agile modeling room, and the logistics of getting the right people together at the same time.\nCollaborate with business stakeholders On a regular basis, enterprise architects work with business stakeholders to understand their needs. They work with them to envision the future, and help educate them on the possibilities and constraints of technology. This collaboration may be in the form of working sessions, presentations, or one-on-one conversations. These sessions occur as needed, and at times it can be difficult to gain access to stakeholders as they are often very busy people.\nCollaborate with IT stakeholders Disciplined agile EAs will spend the majority of their time, 80 to 90% of it typically, working as members of IT delivery teams. By doing this, they bring their knowledge, vision, and skills to the team in a pragmatic, hands-on manner. The teams will often take on the role of architecture owners. Enterprise architects will also work with other IT stakeholders, including operations engineers, support staff, and the data management team. They need to understand their needs.\nEvolve architecture assets The enterprise architecture team, or at least the portion of the team who is currently available, will meet on a regular basis. They evolve the enterprise architecture assets based on their learning. A common pattern we have seen it for the team to meet every Friday afternoon for two hours. They discuss what they have learned that week from working on delivery teams and working with their various stakeholders. The result of the meeting often is that the enterprise architects may take on action items to update existing artifacts. These artifacts may include EA models, reference architectures, development guidelines, and white papers. When a new major topic arises, such as the potential adoption of a new platform or a merger with another organization, they schedule agile modeling sessions. They explore the newly discovered topics during these sessions.\nLessons Learnt Various organizations are trying to redefine enterprise architecture in the context of agile approaches. Such an example would be the Agile Enterprise Architecture Framework.\nOften you see the tension between more agility and the drag of traditional complex enterprise architecture frameworks.\nThe regular enterprise architecture frameworks are too complicated to be applied in nimble product development. The approach is cumbersome and slow. The processes are based on the assumption documents are written and later a group of experts review them. Agile approaches are too nimble and fast to mesh with such workflows.\nThe techniques used in these frameworks are powerful ones. Software designers should master and use them accordingly.\nI strongly prefer the architecture work techniques described in LeSS. The LeSS framework uses good practices to improve architecture and design. Their approach is highly compatible with agile practices and speed of development.\nI do not use the bloated TOGAF architecture standard. I also avoid bloated agile methodologies such as SAFe.\nI recommend using all these proven architecture techniques and tools. Apply them on your software product development using agile approaches like Scrum and LeSS.\nStudy the rules of Lean Software Development to optimize the value of your product.\nLinks [1] Agile Architecture in the Digital Age. Open Group. 2018\n[2] Open Agile Architecture. Open Group. 2019. (ISBN: 1-947754-62-1)\n","categories":"","description":"","excerpt":" Architecture principles hold true in agile environments. The major difference between older traditional approaches and modern agile ones is the way of performing enterprise architecture.\nThe last …","ref":"/blog/2021/why-enterprise-architecture/","tags":["agile","architecture"],"title":"Why Enterprise Architecture?"},{"body":" You are acting as a product owner in your organization.\nCongratulations, working as a professional product owner is a fulfilling and exciting job.\nYou should attend professional training.\nBeing a product owner and requirements engineer is a profession, not a hobby!\nFormal training is often the difference between being a professional instead of just pretending to be one.\nProduct Owner Role Here the official definition of the product owner role taken from the Scrum Guide.\nThe Product Owner is accountable for maximizing the value of the product resulting from the work of the Scrum Team. How this is done may vary widely across organizations, Scrum Teams, and individuals.\nThe Product Owner is also accountable for effective Product Backlog management, which includes:\nDeveloping and explicitly communicating the Product Goal;\nCreating and clearly communicating Product Backlog items;\nOrdering Product Backlog Items; and,\nEnsuring that the Product Backlog is transparent, visible and understood.\nThe Product Owner may do the above work or may delegate the responsibility to others. Regardless, the Product Owner remains accountable.\nFor Product Owners to succeed, the entire organization must respect their decisions. These decisions are visible in the content and ordering of the Product Backlog, and through the inspectable Increment at the Sprint Review.\nThe Product Owner is one person, not a committee. The Product Owner may represent the needs of many stakeholders in the Product Backlog. Those wanting to change the Product Backlog can do so by trying to convince the Product Owner.\nHow can you become a better product owner? The first steps to become a great product owner are described in this article.\nCertifications The two big Scrum organizations Scrum Alliance and Scrum.org provide a certification path for product owners. The certification path has three levels:\nCertified Scrum Product Owner Introduction course for those who are closest to the business side of the project. It is usually two-day training. The Scrum.org allows taking the certification examination without attending a course. They also published a reference book [1].\nCertified Advanced Scrum Product Owner Advanced course for Product Owners who already have one year of experience on a Scrum team. It is at least two days training. You should read the recommended books to have a greater probability to pass the examination on the first try.\nCertified Scrum Professional Product Owner Pinnacle course for experts wishing to master the Product Owner track. The third level requires more training, experience, and reading books. You often must participate in workshops before being allowed to graduate. Each certification organization has her own rules and conditions.\nBeware if you select the Scrum Alliance, you must renew your certification every two years. The conditions are similar to the renewal of a PMI certification. You must provide proof of training and pay a fee. The Scrum.org certifications never expire.\nThe Product Owner learning objectives for the first level are:\nProduct Owner Core Competencies\ndiscuss at least three types of organizational contexts that affect the approach to the Product Owner role.\nidentify the impact of at least three anti-patterns that might exist for Product Owners.\nuse at least one technique to provide transparency to stakeholders on progress toward goals.\nlist at least three techniques to engage stakeholders to gather information or insights.\nidentify at least two ways of overcoming the challenges of being a Product Owner for multiple teams.\nDescribing Purpose and Strategy\npractice the creation of a product vision.\nlist the components of a product plan or forecast with stakeholders.\ndescribe how to plan a product release.\nexplain at least two approaches to identify small, valuable, and releasable Product Increments.\nUnderstanding Customers and Users describe why a Product Owner performs discovery and validation work\nillustrate at least one approach for segmenting customers and users.\npractice at least one technique to prioritize between conflicting customer (or user) needs.\ndescribe at least three aspects of product discovery and identify how each contributes to successful product outcomes.\nuse one technique to describe users and customers: their jobs, activities, pains, and gains.\nlist at least three approaches to connect the Development Team directly to customers and users\ndescribe at least three benefits of Development Team direct interactions.\nValidating Product Assumptions\ndescribe how Scrum supports validating product assumptions.\ndescribe at least one approach to validate product assumptions by their cost and quality of learning\nWorking with the Product Backlog\ndescribe the relationship between outcome and output\ndescribe at least three attributes of a Product Backlog item that help assess maximizing outcome\ndefine value and list at least two techniques to measure value.\ndescribe value from the perspective of at least three different stakeholder groups.\nlist at least three terms related to product economics\ncreate at least one Product Backlog item that includes description of desired outcome and value.\ndescribe at least one approach to Product Backlog Refinement.\ndescribe at least three criteria for ordering the Product Backlog.\nYou can self-study the Scrum Product Owner objectives [1], [2] with the official product owner book [product-owner]. The book is well-written and covers all required topics. Be a professional knowledge worker and support your organization on the agile path [6].\nA reading list can be found under Suggested Reading for Professional Scrum Product Owner.\nI published a list of seminal works for interested product owners under Books.\nRequirement Engineering Trainings The most relevant organization is Europe is the International Requirements Engineering Board IREB. Professional requirements engineers should be IREB certified.\nThe requirements engineering community is well on the path to deeper agility.\nThe certification is often a prerequisite to be hired for a requirement engineer job.\nThe organization offers two certifications for Certified Professional Requirements Engineering with emphasis on agile approaches:\nRE@Agile Primer - Bridging the gap between RE and Agile\nAdvanced Level RE@Agile - is part of the advanced CPRE AL\nUniversity Formal Trainings Technical universities in Switzerland provide formal training in requirements engineering and related fields [3]. The formation provides a certificate of advanced study CAS in the field. Current available certificates of advanced study offering are, for example:\nOST CAS Requirements Engineering\nHSLU CAS Requirement Engineering\nBFH CAS Requirements Engineering\nZHAW CAS Agile Requirements Engineering\nAn interesting development is the addition of tailored requirement training emphasizing agile approaches. I expect the emphasis on agile approaches to increase in the next years.\nSimilar technical university formations are provided for User Interface Design and Usability Engineering. See, for example, Master Human Computer Interaction Design.\nLInks [1] Scrum Alliance Certified Scrum Product Owner Learning Objectives. Scrum Alliance. 2021\n[2] Scrum Alliance Advanced Certified Scrum Product Owner Learning Objectives. Scrum Alliance. 2017\n[3] Agile Requirements Engineering. Marcel Baumann. 2020\n[4] Agile Software Architecture is Mainstream. Marcel Baumann. 2021\n[6] Detecting Agile Bullshit. Marcel Baumann. 2019\n[7] Scrum Master Formation. Marcel Baumann. 2021\n[8] Product Owner Formation. Marcel Baumann. 2021\n[9] Scrum Developer Formation. Marcel Baumann. 2021\n[10] Scrum Guide Jeff Sutherland, Ken Schwaber. 2020\nReferences [1] D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\n","categories":"","description":"","excerpt":" You are acting as a product owner in your organization.\nCongratulations, working as a professional product owner is a fulfilling and exciting job.\nYou should attend professional training.\nBeing a …","ref":"/blog/2021/product-owner-formation/","tags":["agile"],"title":"Product Owner Formation"},{"body":" Agile approaches advocate dynamic planning and adaptation to new inputs and priority changes. The Beyond Budgeting Round Table movement promotes rolling planning, budgeting and reporting.\nThe beyond budgeting techniques recommend the complete abolition of traditional budgeting processes. They require the implementation of new techniques that will replace them. The BB framework does not specify the exact techniques that are applicable to all companies.\nHowever, there are some techniques that have proven to be effective in real cases in the past. These techniques include the following:\nRolling forecasts are created monthly or quarterly rather than on an annual interval.\nCompany’s targets are based on key performance indicators KPI.\nThe performance of the company’s managers is evaluated based on external benchmarks rather than their past performance.\nOperational managers are empowered to react to the changes in the business environment and can dynamically coordinate their actions.\nWhat are the consequences of rolling approaches to any CRM or ERP system?\nAccounting Rolling accounting is quite easy.\nYou shall display only transactions bocked during the selected time interval. You shall be able to generate the balance sheet for the date defining the start of the time interval.\nThe data are usable only if your accounting department does not tune the accounts at the end of the quarter or at the end of the year. For example, Swiss companies shall separate the rolling accounting from their legal accounting used for VAT or earnings tax purposes. A better approach is to define rules avoiding most of the tuning actions.\nCustomers, Activities and Offers No special effort is necessary. Customer relationship activities just need to be timely registered.\nContracts and Projects Only the contracts and projects active in the selected time interval shall be displayed. Efforts booked during the time interval are relevant for the analytics.\nInvoices The invoices sent to the customers or the effectively paid invoices during the selected item interval shall be considered and displayed. These invoices are relevant for the computation of the cash flow and the financial success of the associated projects and contracts.\nImplementation The tangly ERP was extended to support rolling analytics based on a user-defined time interval. The system shall have all raw data available for the chosen time interval. The approach is similar to an event store. Designs based on a yearly reporting structure make the concept of rolling time periods almost impossible to realize.\nThe system supports the definition of a time interval to display only currently relevant entities.\nThe analytics time interval is independent of the system overall interval.\nLessons Learnt Event sourcing concepts are very powerful to implement an ERP providing time-interval based visualization and analysis. The concept works well with the Domain Driven Design concepts.\nThe responsiveness of the application is impressive for data volume compatible with small and medium enterprises. We do not have empirical data for international companies. The approach works well if all data are based on true and fair booking.\nLegal aspects in countries like Switzerland often imply that accounting reflects tax view instead of a true and fair view of the finances. Such systems are not compatible with the beyond budget concepts and will display skewed information. The whole financial system must be true and fair to enable rolling planning and reporting.\n","categories":"","description":"","excerpt":" Agile approaches advocate dynamic planning and adaptation to new inputs and priority changes. The Beyond Budgeting Round Table movement promotes rolling planning, budgeting and reporting.\nThe beyond …","ref":"/blog/2021/temporal-aspects-of-rolling-erp-planning/","tags":["agile"],"title":"Temporal Aspects of Rolling ERP Planning"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/series-swiss-agile-trends/","tags":"","title":"series-swiss-agile-trends"},{"body":" As a modern leader, you are aware of the importance of transforming your organization to become more agile. Indeed, you have successfully implemented first steps.\nTrouble is brewing. Things are not moving forward as quickly as they should, especially in the current challenging situation. The leadership behaviour of your colleagues is only changing slowly. Your key developers are grumbling you are faking it.\nMany companies around the world discover their agile transformation is stalling.\nHERMES is still the official Swiss government method. They clearly acknowledged that this Water-Scrum-Fall is only needed because administration is strongly hierarchical and unable to adapt to the changes over the development of the solution.\nBachelors in Swiss technical universities are still trained with obsolete methodologies such as SoDa, a variation of the dead RUP method.\nThe SwissQ report provides empirical data where Swiss companies stand in 2021.\nMain Success Factors The main success factors for an agile transformation are:\nSoft skills such as transparency, collaboration, and trust. These values are part of the Scrum and of eXtreme Programming approaches.\nProduct instead of project focus The word project is not part of Scrum guide.\nStable teams Stable long-lived teams are the core of all agile approaches.\nA clear majority of 75% of the participants state that agile approaches are more motivating and fulfilling.\nThe report just states obvious knowledge. The participants of the study confirmed these documented facts.\nWhy You Should Not Use Hybrid Methods It seems that hybrid methods are way less successful than agile based on SwissQ data.\nHybrid Methods Success 202135%63%1%Hybrid Methods Success 2021SuccessfulChallengedStopped Agile Methods Success 202155%45%0%Agile Methods Success 2021SuccessfulChallengedStopped The agile approach continues to spread rapidly around the world: 89.8% of all teams have already adopted or are in the process of adopting agile methodology, a considerable number. On the other hand, organizations are still struggling to build greater company-wide agility. Only a few have already adopted agility on a portfolio level (15.3%) or strategic level (8.2%). The good news is that many companies have started transformation initiatives or are planning to do so in the near future.\nUsed Methods in Switzerland Findings The major finding of the agile community during 2020 and 2021 is co-location is not mandatory for a successful agile approach.\nRemote working and distributed teams can work very successfully on a product. You need high-quality tools such as videoconferencing, chat, collaborative tools and pair working approaches.\nThe huge gain of 2020 and 2021 was the tremendous improvements of these tools due to the Corona lockdown. Companies still need to invest in high-quality headsets, cameras and 4K displays for their collaborators.\nDo not be penny wise and pound foolish. Invest in professional hardware and buy the adequate number of licenses. I always wonder why companies implement communication infrastructure with the free version of Slack or GitHub.\nInsights Agile approaches are steadily making progress in Switzerland. Empirical data indicate agile approaches are more successful than hybrid ones. I hope we can get rid of hybrid agile in the next years. The Swiss Hermes method is a dreadful obligation in Switzerland.\nDon’t scale agile…​ descale your organization.\n— Henrik Kniberg A drawback is that SAFe is the de-facto standard for agile scaling in Switzerland. Thoughtworks just stated in Spring 2021 technology radar you should avoid using SAFe. These learnings have not reached our country.\nTeam accountability is lagging; but decentralization of decisions is too hard for the majority.\nWe have reached the level where late majority and laggards are slowly looking into the agile way of working. Change is slow and hybrid solutions are preferred. Progress is sedate and resistance is very high.\nWe still advocate and promote\nTo be agile, not to do agile\nI assume it will take another five years until agile is well-established in product development organizations. Below the staying sane advices of LeSS community.\nStaying Sane During an agile, the organization needs to be changed. You are involved and probably have no ‘official’ authority to affect the needed changes. This is a good thing! It requires you to convince people to change because they believe it is the Right Thing to do. But influencing change in organizations is far from trivial. Frequently, no matter how hard you have tried, it changes in the opposite direction. The question then becomes, how do you survive? Staying alive and sane in organizations requires:\nPatience and low expectations Most organizations change slowly. You should better set your expectations low (not your goal!), and remind yourself that you will be working on this for years. Do celebrate small changes.\nPersistence Do not expect your change suggestions to be adopted immediately but do expect to explain them a gazillion times (often to the same people).\nCourage Nothing will change without courage. Do not be afraid to speak up to higher management or make proposals that are way out of your comfort zone.\nSense of humor You have worked for a year to convince people to change something. They did, and they made it worse. What do you do? Take it seriously and do not take it seriously. Laugh. It is the only way to survive.\nOpen and humble You must courageously, persistently, and patiently propose change. Laugh it off when stupid decisions ruin your work. All of this must be done in an open and humble way, as otherwise there is no new learning for you. Maybe you are wrong and they were right?\nDid we mention patience? I wish a fruitful and successful transformation to better way of working and of creating awesome products.\nYou can download the Trends Benchmark Report 2021 from SwissQ Reports.\n","categories":"","description":"","excerpt":" As a modern leader, you are aware of the importance of transforming your organization to become more agile. Indeed, you have successfully implemented first steps.\nTrouble is brewing. Things are not …","ref":"/blog/2021/agile-trends-switzerland-2021/","tags":["agile","series-swiss-agile-trends"],"title":"Agile Trends Switzerland 2021"},{"body":" Agile fluency model is a powerful abstraction to better understand your agile transition. It does not matter which flavor of agile you are deploying in your organization; the agile fluency model can be applied in all cases.\nThe agile fluency model has a powerful message about agile and technical excellence. The second zone of the model is all about software craftsmanship and eXtreme Programming.\nOne key lesson of the fluency model is it takes time until you are professional at your chosen level.\nTime measured in years not in days. Your organization needs years to transition to more agile ways of working. Do not rush it.\nZones The model defines four zones in which your company could thrive. You are free to choose the zone best suited for your organization. Remember the zones are additive. If you target the third zone, your teams shall also be fluent in all practices of the first and second zones.\nShift Team Culture: Focusing teams produce business value (6 months) The team generates their own day-to-day tasks and plan based on their business representative’s needs. Team members consider their plan to be the team’s work, not individuals’ work. Team members share accountability for getting their plan done. Management considers the plan to be the team’s work rather than assigning accountability to individuals.\nSelect team members with appropriate skills, background, and willingness to work together. Allocate them 100% to their single team.\nCreate a productivity-focused shared workspace, strongly preferring a physical team room. If a physical team room is infeasible, provide a rich interactive virtual workspace [1] instead, and accept that this will be less effective.\nEnsure that someone with expertise on business priorities and customer value is available to act as the team’s business representative.\nRemove impediments to effective teamwork such as competitive ranking, individual rewards, and part-time membership to teams.\nCoach and train team members in focusing proficiencies.\nTrain managers to create an environment that supports teamwork and how to manage the work system rather than individual contributions.\nThe Scrum Guide defines roles and events enabling a team to achieve the goals of the first zone.\nThe organization focuses on agile values and fosters the nurturing of agile teams.\nShift Team Skills: Delivering teams deliver on the market cadence (24 months) Increase External Quality Productivity The team has low defect rates, so less time is wasted fixing bugs and more time is invested in making improvements.\nIncrease Internal Quality Productivity The team’s codebase has low technical debt, which makes changes cheaper and faster.\nIncrease ROI The team ships on the market cadence, capturing value as often as the market will bear.\nWhen working with code and similar artifacts, team members leave its technical quality at least slightly better than they found it. Production releases are automated and take no more than ten minutes of manual effort. The team produces production-grade code without requiring a manual testing phase. All team members are aware of how their professional and technical skills affect their ability to accomplish the team’s goals. They understand these skills decrease their maintenance costs. They proactively seek to improve those skills.\nThe LeSS people have documented a huge set of experiments helping teams to improve their delivery skills and technical excellence.\nThe organization focuses on technical agility and improves timely delivering quality applications.\nShift Organizational Structure: Optimizing teams lead their market (5 years) Fluent optimizing teams understand what their market wants, what your business needs, and how to meet those needs. Or, as in a startup environment, they know what they need to learn and how to go about learning it. In contrast to delivering teams, Optimizing teams not only have the ability to deliver to the market. They also know what to deliver to the market.\nThe organization focuses on value and improves the delivery of highly successful applications.\nShift Organizational Culture: Strengthening teams make their organizations stronger (unknown) Where Optimizing teams have the ability to understand and fulfill the needs of their market. Strengthening teams also play a larger role in their organization.\nStrengthening teams contribute to their organization in three ways. First, they understand how they are part of a larger system. They understand how their purpose aligns with other teams’ to achieve a greater strategy. They actively work to make that strategy more successful.\nThe organization is a key player and has no real concurrency. Employees, customers and stakeholders satisfaction is high.\nChoose Your Zone Table 1. Table Zones Zone Benefit Investment Learn From Time to Fluency Focusing\nGreater visibility into teams’ works; ability to redirect.\nTeam development and work process design.\nScrum, Kanban, non-technical XP\n2-6 months\nDelivering\nLow defects and high productivity.\nLowered productivity during technical skill development.\nExtreme Programming, DevOps movement\n+3-24 months\nOptimizing\nHigher-value deliveries and better product decisions.\nSocial capital expended on moving business decisions and expertise into the team.\nLean Software Development, Lean Startup, Beyond Budgeting\n+1-5 years\nStrengthening\nCross-team learning and better organizational decisions.\nTime and risk in developing new approaches to managing the organization.\nOrganization design and complexity theories\nunknown\nLearnings When Introducing Agile One of the biggest factors affecting team fluency is an organizational support. To continue the bus metaphor, the team has to ride the bus to their fluency zone. No one can do it for them. The organization has to buy the bus tickets. An organization that expects fluency without providing appropriate support is bound to be disappointed. Even worse, insufficient support can cause turnover and create a cynical corporate culture that hinders improvements. Before embarking on your fluency journey, be sure your organization is prepared to offer the support the journey needs.\nWhen Sustaining Agile It is rare for stable teams to lose fluency on their own. In our experience, external disruptions cause fluency loss. The most common cause of fluency loss is when new management decides that agile approaches do not fit their vision. Without organizational support and the ability to continue practicing what they have learned, team fluency erodes quickly. This is often accompanied by loss of expertise as dissatisfied team members seek new positions. Turnover is a related cause of fluency loss. A team that gains or loses too many members may have trouble sustaining what it is learned. This is a particular problem for organizations that assemble new teams for every project.\nAgile Fluency and Scrum Agile and Scrum requires long-living and stable teams. A team should work over years on one product development and improvements. Agile at organizational level can only work if the upper and middle management transitioned to agile thinking and handling. The LeSS community is vocal how destructive wrong management decision can be. Agile development is a team sport, so fluency is a trait of the team, not individual team members. Fluency is more a matter of habits than skills. Discipline is king.\nYou find a detailed description of the model under Agile Fluency.\n1. Each team member has a high-resolution camera, a professional headset, and a 4K display. Chat and collaboration tools are mandatory for effective working performance. Buy enough licenses for all team members for tools such as GitHub, Slack, Mural, collaborative IDE, etc. ","categories":"","description":"","excerpt":" Agile fluency model is a powerful abstraction to better understand your agile transition. It does not matter which flavor of agile you are deploying in your organization; the agile fluency model can …","ref":"/blog/2021/reflections-on-agile-fluency-model/","tags":["agile"],"title":"Reflections on Agile Fluency Model"},{"body":" Java is celebrating 25 years of existence.\nI discovered the anniversary offer to certify for Java SE 11 Developer.\nThis special certification has a cool logo with the remainder of the Java 25-year anniversary.\nOracle offers this certification for only 25 dollars [1] and provides free access to their learning platform.\nThe offer and logo availability are time limited.\nThe free learning subscription includes:\nThe Java Explorer learning path for basic Java skills.\nThe Java SE 11 Developer OCP – Java 25 Years learning path for advanced programming skills.\nPractice questions for customers to review as they prepare for the exam.\nI could not resist and decided to get the cool logo and the associated certification.\nCertification goals The official goals of the certification cover:\nWorking with Java data types Use primitives and wrapper classes. This includes operators, parentheses, type promotion and casting.\nHandle text using String and StringBuilder classes.\nUse local variable type inference, including lambda parameters.\nControlling Program Flow Create and use loops, if/else, and switch statements.\nJava Object-Oriented Approach Declare and instantiate Java objects including nested class objects. Explain the lifecycle of an object (including creation, dereferencing by a reassignment and garbage collection).\nDefine and use fields and methods, including instance, static and overloaded methods.\nInitialize objects and their members using instance and static initializer statements and constructors.\nUnderstand variable scopes, apply encapsulation and make objects immutable.\nCreate and use subclasses and superclasses, including abstract classes.\nUtilize polymorphism and casting to call methods, differentiate an object type versus a reference type.\nCreate and use interfaces, identify functional interfaces, and utilize private, static and default methods.\nCreate and use enumerations.\nException Handling Handle exceptions using try/catch/finally clauses, try-with-resource, and multi-catch statements.\nCreate and use custom exceptions.\nWorking with Arrays and Collections Use generics, including wildcards.\nUse a Java array and List, Set, Map and Deque collections, including convenience methods.\nSort collections and arrays using Comparator and Comparable interfaces.\nWorking with Streams and Lambda expressions Implement functional interfaces using lambda expressions, including interfaces from the java.util.function package.\nUse Java Streams to filter, transform and process data.\nPerform decomposition and reduction, including grouping and partitioning on sequential and parallel streams.\nJava Platform Module System Deploy and execute modular applications, including automatic modules.\nDeclare, use, and expose modules, including the use of services.\nConcurrency Create worker threads using Runnable and Callable, and manage concurrency using an ExecutorService and java.util.concurrent API.\nDevelop thread-safe code, using different locking mechanisms and java.util.concurrent API.\nJava I/O API Read from and write to the console and file data using I/O Streams.\nImplement serialization and deserialization techniques on Java objects.\nHandle file system objects using java.nio.file API.\nSecure Coding in Java SE Application Develop code that mitigates security threats such as denial of service, code injection, input validation and ensure data integrity.\nSecure resource access including filesystems, manage policies and execute privileged code.\nDatabase Applications with JDBC Connect to and perform database SQL operations, process query results using JDBC API.\nLocalization Implement localization using Locale class, resource bundles, and Java APIs to parse and format messages, dates, and numbers.\nAnnotations Create, apply and process annotations.\nE-learning Platform I gave a try to the Oracle online training platform.\nThe provided material is basic and does not always reflect the current state of the Java ecosystem. The questionnaire at the end of each lecture is fun to test your understanding.\nAt the end, I skipped most of the recordings and just answered the questions.\nI would not recommend the learning platform as an efficient learning approach.\nBook I used the book OCP Oracle Certified Professional Java SE 11 Programming Study Guide written by Scott Selikoff and Jeanne Boyarsky.\nThe book contains questions at the end of each chapter. The authors also offer a practice examination of their platform.\nI found all needed the information, and the practice questions were a good drill. The material is terse to read. This should be expected from such material but makes concentration more challenging.\nInvest time for lambdas, streams, annotations and the module system. I was surprised how many questions about these themes I needed to answer during the examination. The questions sometimes asked details you are not aware when writing regular Java code in regular products [2].\nPractice Examinations Udemy provides practice tests. The set contains 250 questions and costs between 15 and 90 dollars. Just look for rebates.\nYou can find a set of links to free sample questions in an Oracle blog.\nA lot of resources are available online. Here is an example.\nI only used free offering in addition to the practice questions of the bought book.\nExamination The examination was acceptable.\nI decided to pass the examination at an accredited partner site. I read quite a few posts how challenging it is to use the online examination mode and did not want to be stressed with trivialities.\nDo not forget to bring two identification documents. Regulations are tailored for the USA and do not consider that any European citizen has a legal identification document.\nYour second document can be a driver’s license or a credit card.\nI passed the examination in April during Corona restrictions. I had to wear a mask during the whole time. It did not really improve my concentration.\nCheck if writing material is available in your seat. Otherwise, request a pen and something to write on. Regulations officially allow it.\nWriting down ideas or which options are plausible as an answer helps me a lot.\nThe rules I use are:\nManage and track time The examination is time limited.\nYou need to steadily progress and answer the questions in 90 minutes.\nThe number of questions is 50. You have less than 2 minutes for each question.\nDo not get stuck in one question Each question has the same weight for the result.\nThe provided program has a function to identify unanswered questions or questions you would like to look at again.\nIf you do not know an answer, mark the question and go to the next one.\nAnswer all questions No penalty exists if you answer a question wrong.\nThe passing rate for the examination is 68%.\nI hope you interesting learning and successful certification.\n1. The regular price is around 250 dollars. 2. Regular developers seldom define their own annotations. I need to know the details of how to declare annotations to answer examination questions. ","categories":"","description":"","excerpt":" Java is celebrating 25 years of existence.\nI discovered the anniversary offer to certify for Java SE 11 Developer.\nThis special certification has a cool logo with the remainder of the Java 25-year …","ref":"/blog/2021/certified-java-developer/","tags":["agile","java"],"title":"Certified Java Developer"},{"body":" As a modern leader, you are aware of the importance of transforming your organization to become more agile. Indeed, you have successfully implemented first steps.\nTrouble is brewing. Things are not moving forward as quickly as they should, especially in the current challenging situation. The leadership behaviour of your colleagues is only changing slowly. Your key developers are grumbling you are faking it.\nMany companies around the world discover their agile transformation is stalling.\nThe SwissQ report provides empirical data where Swiss companies stand in 2020. Download is available under from SwissQ Reports.\nWhere We Stand The agile approach continues to spread rapidly around the world. A stunning 89.8% of all teams have already adopted or are in the process of adopting an agile methodology. It is an impressive and considerable number. It also shows when you look at the number of people who have a Scrum Master certification. Around a million of them are Certified Scrum Master. Quite a smaller number of people are Certified Product Owners.\nOn the other hand, organizations are still struggling to build greater company-wide agility. Only a few have already adopted agility on their product portfolio (15.3%) or on the strategic level (8.2%).\nThe good news is that many companies have started whole transformation initiatives or are planning to do so in the near future.\nCreating products with agile approaches is now mainstream. Only laggards are clutching on obsolete methods. Competitive advantage is now to implement an agile product value stream through the whole organization. Fast delivery to customers and pivot to disruptive changes are the new key for extraordinary growth and success. The raise of digital and Internet affine banking solutions is such a transformative example.\nWaterfall vs Agile The collected data clearly show agile approaches are tremendously more successful by more than 10%. The agile approach seems to eliminate catastrophic development failures. It means an agile team has 25% higher relative probability to be victorious than classical teams (50.5% versus 39.5%).\nWaterfall Methods Success 202039%60%1%Waterfall Methods Success 2020SuccessfulChallengedStopped Agile Methods Success 202051%49%0%Agile Methods Success 2020SuccessfulChallengedStopped It is time to embrace agile product development. Drop waterfall approaches. Stop being a laggard.\nTransformation Drivers The IT department is still the main driver for agile transformation. Going fully agile is challenging and sticking with waterfall is no more an option. Leaving many companies stuck in a hybrid approach.\nSwiss companies are often embracing Hermes [1] or SAFe. Both approaches are quite a poor choice to achieve a successful agile transformation. Read the technology radar of Thoughtworks for a detailed discussion why SAFe is a poor choice.\nSatisfaction with the agile way of working is high; satisfaction with the transformation process is low. The focus is still on processes over people. The JIRA tool is omnipresent and workflows are documented in acribic details.\nThis has left many, about 40% to be exact, stuck in a hybrid approach, i.e., a combination of waterfall and agile. This is not necessarily a catastrophic thing if you manage to get the best of both worlds.\nKanban offers an easy start with agile and unlike Scrum is applicable to any process. As our numbers show, it is becoming more and more popular. Remember, it is not Kanban if it doesn’t have WIP limits.\nThere is also a trend towards stable product teams that extend their responsibilities beyond those of just the development for a solution or service.\nFindings The conclusion of the main article is enlightening.\nAgile transformation has stalled during the second wave in many companies. Only individual elements of the third wave, such as portfolio management, have been tackled. At the same time, transformation has often only occurred on the surface; the company’s DNA and culture have not (yet) adapted to the new era.\nExecutives must now take on the hard topics, such as new organizational forms, management behavior, and dedicated agile executives. They must make difficult and painful decisions regarding new leadership teams.\n— SwissQ Insights It isn’t about changing agile to fit your company. It is changing your organization to achieve business agility.\n— Anthony Mersino Agile approaches are steadily making progress in Switzerland. We have reached the level where late majority and laggards are slowly looking at the approach. Low-hanging fruits were collected. The next gains require deeper changes. Progress is slow and resistance is very high.\nCollaborators are happy with the change and do not want to go back to the old world. However, the change often does not go beyond a first application of the methodology. The biggest obstacle for employees is at the same time, the biggest challenge for leaders. A culture that promotes a learning and adaptable organization and its own agile way through the organization.\nBe positive and patient\nI am currently focusing on Software Craftsmanship and key agile values and approaches. The more people know about key principles, the better the adoption and the implementation will be. One decision was to teach and train bachelor students of technical universities in these principles to implement a grassroot approach. The hope is to foster a deeper adoption of agile key values and related practices.\nWe still advocate and promote\nTo be agile, not to do agile\nYou can download Trends Benchmark Report 2020 from SwissQ Reports.\n1. Hermes is a typical Water-Scrum-Fall approach and most often fails spectacularly. ","categories":"","description":"","excerpt":" As a modern leader, you are aware of the importance of transforming your organization to become more agile. Indeed, you have successfully implemented first steps.\nTrouble is brewing. Things are not …","ref":"/blog/2021/agile-trends-switzerland-2020/","tags":["agile","series-swiss-agile-trends"],"title":"Agile Trends Switzerland 2020"},{"body":" Lately, I was asked which new approaches should be used for agile requirements engineering. Did we find a new silver bullet to write software specifications the agile way?\nThe answer is easy. We do not need new approaches or complicated processes. Start with proven principles and learn.\nImpact Mapping and Story Mapping are successful approaches to identify and prioritize your functions. Specification by Example and User Stories as a discussion allow you to refine your understanding of what your customers need.\nAcceptance Testing verifies the implementation fulfills the expected behavior. You get the mechanism to avoid regression problems when releasing your application for free.\nThe associated theory was published in seminal books more than a decade ago. Start applying the principles. You can later still improve your approach based on your learning.\nA nice overview was published in the Professional Product Owner [1] written by the stewards of the product owner certification path of Scrum.org.\nIf you prefer videos, search for Gojko Adzic, Roman Pichler, Mike Cohn or Christian Hassa. These experts are often speakers at conferences. You will find recordings of their speech on various platforms such as YouTube or Vimeo.\nOur job is NOT to develop software. Our job is to change the world.\n— Jeff Patton Give 2% of users 100% of what they need, not 100% of people get only 2% of their needs.\n— Gojko Adzic Approach Specification Use Impact mapping and story mapping to classify and order your functionality. Story mapping works hand in hand with the release plan artifact I cited in a previous post. You have not only the key functionality you want to deliver, but also a tentative plan when you will deliver them.\nVision, roadmap, and release plan are needed artefacts for any product development using Scrum as a development approach. The mapping identifies the stories to realize in a release to satisfy the customer’s needs. A nice discussion of these concepts can be found in Strategize [2].\nThe nice think is that impact mapping and story mapping are quite compatible with design thinking. We can nicely connect the different directions used in agile product development and marketing departments.\nEach specification story has acceptance criteria. These criteria are the specifications of your product.\nThe Scrum community clearly states that product backlog items are not specifications. They are work items for the Scrum team. If you want to use stories to describe your needs instead of the specification by example approach, it is OK, but please not in the backlog.\nValidation Acceptance criteria is a form of specification by example. Acceptance tests - see ATDD and BDD - are the automatic check for specification by example.\nThe gain of implementing the acceptance criteria as ATDD is guaranteed elimination of regression issues. You also get automatic generation of test plans, test results and requirement documents. Your documents are always in sync with the source code of your product. An additional advantage is all these artifacts are under source code management and fully auditable.\nI had success with Fitness Functions to describe and validate non-functional requirements. We recommend taking this approach. You can extend your automatic validation to non-functional requirements with the same mechanisms as for functional requirements.\nBackground You could use the following reference books to bootstrap and strengthen your agile specification process:\nSpecification by example was published in 2009, twelve years ago [3].\nImpact Mapping was published in 2012, ten years ago [4],\nUser Story Mapping was published in 2014 eight years ago [5]. Mike Cohn did also write about user stories [6].\nBuilding Evolutionary Architectures Fitness functions are described in this seminal book [7]. It is also a recommended reference to my SWAT Software Architecture and Techniques bachelor lecture taught at technical universities. The book was published in 2017, five years ago.\nI currently teach the SWAT course at the department of computer science of the technical university of Luzerne. [1]\nAgile requirements engineers can find valuable information in seminal books [8, 9, 2, 10, 7].\nEvolution The most effective software architecture approach is Domain Driven Design.\nThe requirement analysis approach predating DDD is Event Storming.\nEvent Storming is a collaborative analysis practice that brings together domain experts and developers for a common understanding of the needs to be realized. Conducted in the form of a workshop, its purpose is to quickly discover what is happening in the software domain. Compared to other methods, it is extremely light and intentionally does not require any computer support. The result is expressed in sticky notes on a wall.\nThe SWAT course naturally also discusses DDD and event storming. This blog also contains an architecture series digging into agile architecture approaches. The first article describes Agile Architecture Principles.\nReferences [1] D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\n[2] R. Pichler, Strategize. Pichler Consulting, 2016 [Online]. Available: https://www.amazon.com/dp/0993499201\n[3] G. Adzic, Bridging the Communication Gap. Neuri Limited, 2009 [Online]. Available: https://www.amazon.com/dp/B008YZ993W/\n[4] G. Adzic, M. Bisset, and T. Poppendieck, Impact Mapping. Provoking Thoughts, 2012 [Online]. Available: https://www.amazon.com/dp/0955683645\n[5] J. Patton, User Story Mapping. O’Reilly and Associates, 2014 [Online]. Available: https://www.amazon.com/dp/1491904909\n[6] M. Cohn, User Stories Applied. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321205685\n[7] N. Ford, R. Parsons, and P. Kua, Building Evolutionary Architectures: Support Constant Change, First. O’Reilly Media, 2017 [Online]. Available: https://www.amazon.com/dp/1491986360\n[8] A. Osterwalder, Value proposition design. 2014 [Online]. Available: https://www.amazon.com/dp/1118968050\n[9] R. Pichler, Agile product management with Scrum. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321605780\n[10] R. Pichler, How to Lead in Product Management. 978-1-9163030-0-3, 2020 [Online]. Available: https://www.amazon.com/dp/B085L8Z4YS\n1. Lecture videos in German for Spring Semester 2021 are available under Switch Tube ","categories":"","description":"","excerpt":" Lately, I was asked which new approaches should be used for agile requirements engineering. Did we find a new silver bullet to write software specifications the agile way?\nThe answer is easy. We do …","ref":"/blog/2021/agile-requirements-engineering/","tags":["agile","series-students"],"title":"Agile Requirements Engineering"},{"body":" Often, I hear complain that the IT department is not reacting to developer’s needs. They are slow, clumsy and too administrative. Harsher words state they are incompetent.\nI have observed a clear trend in Switzerland since around 2015 to solve these tensions.\nStandard IT services such as docker images, database instances or internal domain names are provided through self-service kiosks.\nWhat are the advantages of this approach?\nAdvantages The advantages to providing a self-service kiosk for users in an academical or industrial environment are:\nImproving data quality and strongly reducing the error rate. Kiosk services must be standardized before being offered.\nImproving response time and access to resources outside regular office hours without additional human resources,\nSaving of costs,\nRelieving the personnel of the IT department of repetitive and mundane tasks,\nIncreased capacity for working on strategic tasks,\nInvolvement of employees in human resource management processes. The kiosk solution must be connected to the on-boarding and off-boarding processes.\nIncreased personal responsibility and independence of employees,\nTransparency and traceability of the approval channels,\nAccess to the system independent of time and place,\nContribution to employer branding,\nReduction of printing costs as processes are handled digitally.\nSimilar gains are achievable for employees working for smaller or bigger commercial companies. The real gains are less animosity and more respect for the IT professionals.\nChallenges The provided self-service products shall cover at least 80% of customer’s needs. The products must be standardized and do not require manual actions for setup and deployment. This quality of service is achieved through tracking of requests through a ticketing system and application of the Pareto distribution.\nYou must track and document all requests for services. Avoid fulfilling all requests and concentrate on optimizing the most often requested services. You still need to provide a workable approach for special requests. The simplest solution is to advocate using a commercial offering.\nApproaches I am working with teams developing software products in academic and small-company environments. The needs boil down to\nProvide docker images to developers. The images shall be accessible from the company Intranet and often from the Internet.\nProvide virtual images only exceptionally.\nProvide git repositories.\nProvide development tools such as GitHub, GitLab or Bitbucket solutions including Pages for documentation.\nMost often, virtual images are only needed when the user needs a Microsoft or macOS environment. All Unix related requests are serviced through docker images.\nA need trend is the need to provide GPU capabilities for machine learning, artificial intelligence and visualization products. The image approach is still working. The current major challenge is the immaturity of the software solutions to share efficiently physical GPU. I expect viable standard solutions will be available in the next two years.\nNext Steps Implement a kiosk self-service solution for all regular requests of collaborators and students.\nImplement a prototype for self-service access to GPU capabilities.\nTrack acceptance of provided approaches and implement improvements.\n","categories":"","description":"","excerpt":" Often, I hear complain that the IT department is not reacting to developer’s needs. They are slow, clumsy and too administrative. Harsher words state they are incompetent.\nI have observed a clear …","ref":"/blog/2021/self-service-for-developer-game-changer/","tags":["java","series-students"],"title":"Self-Service for Developer Game Changer"},{"body":" I truly love the new release rhythm of the Java ecosystem. It is awesome to be able to use new features every six months.\nThe migration overhead is held to a minimum thanks to incredible backward compatibility.\nThe new features greatly simplify the existing code and tremendously increase legibility.\nFeatures like records, sealed types, or switch expressions are wonderful. The promise of advanced pattern matching constructs is sweet.\nPolishing of functional programming approach improved my source code quite stupendously.\nNew Features Java 16 fully supports Algebraic Data Types with the record and sealed types features.\nAn immutable data class including a constructor, getters, equals(Object o), hashCode(), and toString() can be declared in one line:\npublic record Person(int id, String firstname, String lastname) {} The first step with modern pattern matching constructs was provided with Pattern Matching for Instanceof.\nAs a small but nice gain of pattern matching, you can now implement the boolean equals(Object o) method in Java in one statement and without if clause. An example would be:\npublic boolean equals(Object o) { return (o instanceof Key that) \u0026\u0026 name == that.name \u0026\u0026 Arrays.equals(ptypes, that.ptypes); } The other new features are more of internal nature.\nNotice that Alpine Unix is now officially supported. This port is great new to shrink the size of docker images containing a Java runtime.\nTroubles With Some Packages MicroStream MicroStream persistence library crashes if you are using records.\nArchUnit ArchUnit crashes if you are using records. [1]\nJacoco Jacoco has trouble handling records and generating spurious error messages.\nGradle Gradle still does not work natively with JDK 16. They at least provide a well-documented and workable approach. You can run the tool with JDK 15 and compile your components with JDK 16. Use the instruction toolchain { languageVersion = JavaLanguageVersion.of(16) }. One of the cool stable features of the Gradle release 7.0 is the full support for the Java module system. You can now build, test, and run Java modules via Gradle with the java library plugin. The mere presence of module-info.java will let Gradle infer that your jar is a module and has to be put on the module path. [2]\nThe huge drawback of the Gradle workaround is that you need two installed JDKs in your CI image. Standard images do not support this configuration. You have to create your own images if you are running gradle with a Java version and compiling your application with another one.\nRecords were announced more than a year ago. It is a wake-up call to maintainers of Java libraries such as ArchUnit, SonarLint or Jacoco.\nPlease do not be laggards. Do not force us to work with legacy Java programming paradigms. Support modules, auto-closeable resources, records, sealed classes.\nAs a maintainer of a successful component or application, you should represent modern Java approaches. Did you realize that since Java 8, a new version is released every six months?\nThe Next Changes I am Dreaming Of Concise Method Body Syntactic sugar to write compact delegation classes. It provides the same mechanisms for method overwriting as for lambda declarations [3].\nSwitch Type Selection We can already chain if else if statements with instanceof operator and variable declarations. I want to do the same in a switch statement. I have good news. The JEP for pattern matching for switch statements (JEP 406) and for record and array patterns (JEP 405) have candidate status in April 2021 [4].\nMore Packages Support Modules Java modules were introduced with Java 8. I really, really, really want to use modules in Java 16. Therefore, I need a module version for all mainstream Java libraries. Until now, the Java developers' community has failed us; support for modules is abysmal.\nImportant Remainder The next long term supported Java shall be published in September 2021. The evolution between LTS 11 and LTS 17 is huge. Quite a lot of companies are still stocked with LTS 8. Modern Java code written with the current Java version is very different to older coding paradigms.\nCompanies must now implement modernization approaches if they want to survive in the business world. A security flaw with an older Java version moves on thin ice if your customers sue your company.\nEspecially if you do not have one of these expensive support and security packages sold by Oracle for legacy Java versions.\nIt should be a strategic goal for every company to have a clear migration concept for all Java applications to be ported to the LTS Java version 17. This LTS version should be removed in September 2021. Early releases are already available to support migration initiatives. This migration shall be implemented through teams until the end of year 2021.\n1. ArchUnit 0.18.0 was released on 14 April 2021. Records are now supported. They are still working on supporting sealed types. 2. Gradle 7.0 was released 09 April 2021. JDK 16 is now supported as runtime for Gradle. You can have a regular build for your application with JDK 16 and Gradle in your CI pipeline. Gradle engine has been upgraded to using Groovy 3 in Groovy based DSL build scripts to fully support JDK 16. 3. I had to accept that this feature will not be part of the LTS release Java 17. 4. First extensions for pattern matching will be part as preview functionality of the LTS release Java 17. ","categories":"","description":"","excerpt":" I truly love the new release rhythm of the Java ecosystem. It is awesome to be able to use new features every six months.\nThe migration overhead is held to a minimum thanks to incredible backward …","ref":"/blog/2021/jdk-16/","tags":["java"],"title":"JDk 16"},{"body":" Slowly, slowly major actors in the software architecture landscape acknowledge agile development is state of the industry approach to building software products.\nThey are still struggling to integrate their older views in a faster, iterative, incremental development approach. The duration of a regular Scrum sprint is usually two weeks.\nMore important, they have discovered we build products because no customers buy projects. They buy solutions and products.\nI am relieved I need less fight to convince enterprise architects that agile is the way. The big names Project Management Institute, Open Group, and iSAQB have at last an agile architecture offering.\nIf pushed, they acknowledge agile development is mainstream and used in the overwhelming majority of complex product development.\nWe have learnt it is difficult to concede and congratulate the winning party.\nLook at the president of the United States of America Donald Trump to have a well-documented case of a loser trying all lies and tricks to avoid reality. Not long ago, the tobacco industry did the same as professional liars. And we still have climate change deniers.\nWe show mercy to all the software architecture and designer traditionalists who needed almost twenty years to acknowledge the supremacy of agile approaches.\nLaggards, please bow and embrace modern software development approaches.\nPMI and Disciplined Agile Delivery PMI realized a few years ago, their standard approach to project management was losing ground in the software industry.\nThe first step was the PMI Agile Certified Practitioner certification to test what agile is. They never really integrated it with their other certifications.\nThe coup was their acquisition of Disciplined Agile Delivery in the second half of 2019. The DAD approach has been around since 2015 and had some success.\nThe framework has a complexity sympathetic to PMI. The roots of a lot of DaD concepts can be found in Rational Unified Process RUP. It is an Iterative and Incremental Development methodology. RUP is certainly not agile.\nThe founder of DAD Scott W. Ambler has a long history with the Unified Modeling Language and CMM.\nAnyway, it is a huge step for PMI to move away from traditional heavy project development methods and embrace somehow agile product development.\nOpen Group and The Open Agile Architecture Initiative TOGAF The open group has stewardship for the TOGAF enterprise architecture standard and training.\nThe open group has started to discuss the future of software architecture and agile approaches with a white paper second half of 2019. They published a first potential approach to agile software architecture the end of 2020.\nThe approach is quite rough. It is more a collection of ideas available in various approaches and ideas picked from the Internet. The fact they recognized the necessity to have an agile solution is encouraging.\nThe Open Group Architecture Framework TOGAF is the industrial standard for enterprise software and digital architecture. TOGAF provides techniques to model and analyze the various aspects such as enterprise architect, business architect, data architect, application architect, and technology architect.\nThe Open Group has started to integrate agile paradigms into their approach.\nThe open agile architecture shows they are at the very beginning of their journey.\nThey will have to compromise and find a way to integrate TOGAF ideas with agile concepts. I am not sure the result will be pretty.\nThe concepts and techniques defined in TOGAF are reasonable. The official process how to implement them is flawed. You cannot work with short iterations and incrementally improve your solution upon discovering new facts in a timely and efficient manner.\niSAQB Agile Software Architecture The German software architecture bastion has finally fallen. iSAQB provides an advanced level module for agile software architecture. Their proposal of the module is described below.\nThe participants learn how to design, develop and further develop software systems and architectures in accordance with agile principles.\nOn one hand, the module covers the application of agile principles and concepts to architecture work. On the other hand, expedient anchoring of architecture practices in an agile approach.\nThe development of architectures in projects with self-sufficient teams or shared responsibilities demands new skills and capabilities on the part of developers and architects.\nWe cover technical as well as methodical and also communicative aspects, which are addressed here all theoretically and in practical exercises.\nThe above statements are quite shallow. I hope they will add more material in the future.\nAgile Requirements Engineering Interestingly, the requirement community is further on the path to agility. The most relevant organization is Europe is the International Requirements Engineering Board IREB. The organization offers two certifications with emphasis on agile approaches:\nRE@Agile Primer to Bridge the gap between RE and Agile\nAdvanced Level RE@Agile is part of the advanced CPRE AL\nAgile Testing Engineering Interestingly, the quality insurance and testing community are further on the path to agility. The most relevant organization is Europe is the International Software Testing Qualifications Board ISTQB. The organization offers a whole set of certifications with emphasis on agile approaches:\nFoundation Level Agile Tester\nAdvanced Level Agile Test Leadership at Scale\nAdvanced Level Agile Technical Tester\nA nice bonus is that IREB and ISTQB work together to align their terminology and approaches.\n","categories":"","description":"","excerpt":" Slowly, slowly major actors in the software architecture landscape acknowledge agile development is state of the industry approach to building software products.\nThey are still struggling to …","ref":"/blog/2021/agile-software-architecture-is-mainstream/","tags":["java","architecture","series-students"],"title":"Agile Software Architecture is Mainstream"},{"body":" MicroStream approach empowers Java developers. The library provides a cool and compact approach to persist complex data models. You can persist your whole data model with less than a hundred lines of code. The library is efficient and works reliably.\nModern architectures based on bounded domains and Domain Driven Design are supported.\nThe company behind the product has promised to open source their product beginning of 2021.\nI use the library to prototype bounded domain implementations requiring persistent data. The implementation speed and ease are awesome. I hope the current flaws of the product will be removed and allow productive use.\nConstraints Saving a Java Object The library made some strange design decisions. If you want to persist an instance having fields based on collections, you must use the eager mode. Beware that you must explicitly commit the transaction if using the eager mode. The normal mode automatically commits the transaction. I hope that the API improves, and the behavior is coherent for similar functions.\nDebugging problems The source code is currently obfuscated. Debugging is difficult and cumbersome because variable names are synthetic and all comments are missing. The source code documentation is shallow and insufficient to understand the behavior of the library.\nSaving a collection If you have access to the collection, just call store on the collection. If the collection is hidden inside an object, you are forced to use an eager store. If you use standard object-oriented practices, you will have to use the less efficient approach of eager write operations.\nDesign Our provider persists instances for all our bounded domains in need of persistence.\npackage net.tangly.core.providers; import java.util.Collections; import java.util.List; import one.microstream.storage.types.EmbeddedStorageManager; import org.jetbrains.annotations.NotNull; /** * Provider with instances cached in memory and persisted onto the file system or a database. * \u003cp\u003eThe update method uses an eager storage strategy to insure that all instance variables of a Java object are persisted. This approach is necessary due * to the implementation restrictions of MicroStream.\u003c/p\u003e * * @param \u003cT\u003e type of the instances handled in the provider */ public record ProviderPersistence\u003cT\u003e(@NotNull EmbeddedStorageManager storageManager, @NotNull List\u003cT\u003e items) implements Provider\u003cT\u003e { @Override public List\u003cT\u003e items() { return Collections.unmodifiableList(items); } @Override public void update(@NotNull T entity) { if (!items.contains(entity)) { items.add(entity); storageManager.store(items); } else { var storage = storageManager.createEagerStorer(); storage.store(entity); storage.commit(); } } @Override public void updateAll(@NotNull Iterable\u003c? extends T\u003e entities) { entities.forEach(entity -\u003e { if (!items.contains(entity)) { items.add(entity); } else { storageManager.store(entity); } }); storageManager.store(items); } @Override public void delete(@NotNull T entity) { items.remove(entity); } } Current Flaws In Memory File System In-memory file systems are a must for unit and integration testing. A continuous integration pipeline does not always have access to a regular file system. Disk-based file systems are too slow for automatic testing [1].\nWe migrate with full success all our unit tests to use in-memory file systems in January 2021. We use the Jimfs library. When creating a Jimfs file system, you can specify whether it should imitate a UNIX- or Windows-style file system. They differ in the naming conventions and attribute usage, so choose the one you prefer. The Windows file system implements some Windows’ quirks, such as not permitting the creation of a file in the root directory.\nThe execution speed rocks. Thanks to the MicroStream developers. See their file systems example in their GitHub example repository\nJava Records A field cannot be manipulated anymore in record since Java JDK 1.5.1. The MicroStream 4.x releases crash when using record in JDK 15 and JDK 16. It only works with JDK 14. You are forced to use an obsolete JDK no more supported. For example, the IntelliJ IDEA stops to provide support for obsolete JDKs as soon as the new official JDK release is available. It hinders you to use the associated preview features [2] [3].\nI have to verify if the library can cope with sealed declarations.\nNext Steps Wait for the release scheduled for April 2021 and pray they will support the record feature. Records are an official feature in JDK 16 released in March 2021 and no more a preview feature. See our Modern Java Development discussion how organizations cope with the Java release cycle or are just laggards.\nCodify a performant approach to save whole instances using eager store operations.\nExplore the migration features when the data schema is changing.\nWait and see if the promised licensing under an open source copyright will be published.\n1. I have reported the bug how they used path instances. The developers were very supportive. Version 4.01 supports in-memory file systems such as Jimfs. 2. I have reported the bug in the microstream forum and informed them that their claim they support these JDK is plain wrong. The project sadly does not currently have a bug reporting system. I hope the version promised for April 2021 will finally solve these showstoppers. 3. Version 5.0 was released in July 2021 and finally provides support for records. You need to increase access to internal components with the option --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED to have a working approach. ","categories":"","description":"","excerpt":" MicroStream approach empowers Java developers. The library provides a cool and compact approach to persist complex data models. You can persist your whole data model with less than a hundred lines of …","ref":"/blog/2021/microstream-4.x/","tags":["java","design"],"title":"MicroStream 4.x"},{"body":" Java development activities won traction since the decision to release a new version to the community every six months. Preview and incubator features promote feedback from the community and users.\nSome tool builders, such as JetBrains are working proactively and provide support for JDK in developments.\nOther tool maintainers such as JaCoCo are dreadfully behind the release cycle.\nWe learnt to deal with the new speed and how to tackle the laggards. Some experiences were quite painful. Below our findings and our current focus on developing software products.\nLegibility Matters Programmers learnt the last decade that legibility and brevity of programming languages matter. The Java Coin and Amber projects were initiated to reduce the verbosity of the Java language mainly through syntactic sugar. A programmer should not be forced to write statements the compiler could infer.\nExamples of improvements are\nDiamond operators to avoid writing two times the same generic parameter declarations,\nTry with resources to avoid complicated finally blocks to close resources,\nMultiple catch of exceptions to avoid writing multiple times the same error handling block,\nvar local variables to avoid complex declarations of local variables,\ndefault methods in interfaces to avoid declaring the same method in multiple classes,\nStrings as switch selector to write readable code instead of huge if statements,\nUnderscore in numerical constants to increase legibility.\nDeeper changes are\nThe new date API is simplifying the handling of date and time logic. The solution is based on the learning of the Joda time library.\nSupport of Lambda constructs greatly eliminates the need for verbose anonymous classes.\nUseful Constructs Modern Java has introduced powerful constructs to write legible and maintainable code. Modern Java code is quite different from Java 5 code.\nJava Modules Dependencies management supported at language level. The Ada programming language has support for module since 1985.\nStreams and Lambda Support for functional programming approaches. Streams are declarative and support internal iterators. The Booch Ada component library supported internal iterators since 1985.\nRecord Very compact notation to define a data class and transparent handling of properties. Records are immutable objects and finally use modern naming for getters [1].\nSealed Types Interesting way to restrict inheritance to a set of selected classes. Very helpful for library designers. You can publish an interface in the public API and limit the classes implementing this interface[1].\nReflection versus Lambda References to methods and constructors are part of the lambda extension. The LambdaMetafactory class allows you to create a reference at runtime. The reflection operations can be replaced by lambda expressions. The code is more performant and has security issues.\nText Blocks We can finally write legible multi-lines strings.\nCumbersome Aspects We still have open wounds in the legibility and elegance of the Java programming languages.\nUnsolved legibility problems through annotations polluting your domain model.\nNull values (and the missing of an Elvis Operator or a Null Coalescing Operator).\nFluent interface when setting multiple properties in an instance.\nMissing support for modifiable properties (read-only properties have initial support in the record construct).\nMissing logging interface similar to slf4j.\nReified generics to have access to generic types during runtime.\nNext Improvements? We have the first signs of possible improvements.\nA more concise notation for getters and setters The record extension finally provides a more concise and legible convention for getter and setters. I hope the convention will be used in all new library classes.\nType property(); void property(Type property); Stop using checked exceptions and replace them with runtime exception Lambda expressions cannot handle checked exceptions. Only runtime exceptions can be thrown in a lambda expression. Experience with other programming languages shows that checked exceptions do not provide gains in the quality of delivered code.\nPattern matching with deconstruction First pattern matching constructs are available in switch and if statements. Discussions are underway to extend pattern matching with object deconstruction.\nValue Types Value types would be a huge improvement in performance and support of modern processor architecture if the Valhalla product delivers.\nThe only drawback we have with modern Java development is the sluggish catch-up of open-source tools and libraries. For example Gradle Build Tool needed five years to provide module support in the Java plugin. Gradle 6.4 was the first version really supporting Java modules.\n1. Records and Sealed Types are the Java implementation for Algebraic Data Types. ","categories":"","description":"","excerpt":" Java development activities won traction since the decision to release a new version to the community every six months. Preview and incubator features promote feedback from the community and users. …","ref":"/blog/2021/modern-java-development/","tags":["java"],"title":"Modern Java Development"},{"body":" Home office is the new way of working. A lot of friends and business partners are working from home. Our meetings are mostly online. We share documents and results through digital platforms.\nI truly hope we continue to work online in the future. I would like to mix home office, local coworking space, and regular office attendance. I am convinced less commute time and a greener approach to work are certainly great improvements.\nI would also state an obvious fact. My infrastructure at home is better. I have a better Internet connection. My display is a high-end 4K screen instead of a cheap HD version. Coffee is also really better.\nMy life would be more productive and fun if more people did better understand how to work in a digital world.\nHere are a few advices to improve our work experience.\nSchedule an Appointment If you are responsible for the meeting preparation, please:\nSend me a calendar invitation in the icalendar format. The file extension should be ics or ical. Never email me asking for an appointment, please provide directly the invitation. Do not send invitations in the Outlook proprietary format. I use macOS and Linux, not Microsoft and Office.\nSend me a meaningful invitation. Provide\nPurpose and goals of the meeting.\nAn agenda, ideally each item has a tentative duration.\nAn attendee list, normally visible in the ICS invitation.\nAttach the documents I shall read before the meeting in the invitation. You can also provide links to the documents. Please do not require a login to access the document.\nAdd the link and password for the online conference such as Zoom, Google Hangouts, Webex, Slack, or Microsoft Teams. For a physical meeting, please provide room identification and some information about how to get to the location. I do not know where the meeting room Dijkstra-R1-8.815 is.\nYou are responsible that all mandatory invitees will attend the meeting. If key persons cannot attend the meeting, you have to reschedule or cancel it.\nTest your connection before initiating your call. Mute your microphone to avoid disturbing the call attendees. Please buy a professional headset.\nUse tools such as Trello and Miro to have more collegial meetings.\nThe newer versions of major tools from Microsoft, Google, Cisco now include workable versions of whiteboard and voting tools.\nWrite a Meeting Protocol If you are responsible for the meeting event, please:\nCheck at the beginning of the meeting that all attendees have studied the provided documentation. You should politely ask unprepared attendees to leave the meeting [1].\nWrite a protocol describing the activities during the meeting. A well-written protocol has the following sections:\nA copy of the agenda you sent to all attendees,\nA short description of the discussion,\nA list of decisions,\nA list of tasks to implement. Each task has a description, a due date and one responsible.\nPlease send the link to the protocol for review to all attendees. Define the deadline when the protocol will be released.\nTrack the implementation of all tasks defined during the meeting and documented in the protocol [2].\nAny meeting without such a protocol was in fact just a gathering to eat donuts and drink coffee.\nModern organizations have coffee breaks for such gatherings. With some luck, the organization provides high-grade coffee or tee, and perhaps a barista.\nThe Amazon meeting rules are:\nStart with silence We read those memos, silently, during the meeting. It is like a study hall. Everybody sits around the table, and we read silently, for usually about half an hour, or however long it takes us to read the document. And then we discuss it.\nNo PowerPoint presentation No PowerPoints are used inside Amazon. Somebody for the meeting has prepared a six-page narrative structured memo. It has real sentences, and topic sentences, and verbs, and nouns. It is not just bullet points.\nTwo pizza sized teams We try to create teams that are no larger than can be fed by two pizzas.\nShare a Document The rules to share a document are:\nAvoid sending me a document per email. Send me the link to the document in a shared repository I have access to. I mean everybody is using Google Drive, DropBox, or Microsoft One Drive [3].\nThe rules to edit a document are:\nDo not assume I am using Microsoft Office. I use and strongly prefer LibreOffice. I support open-source software and formats. The Microsoft Office formal ISO/IEC 29500 definition is not even implemented in Office.\nWhen modifying a shared document, consider using the review mode as being polite to your team members.\nPDF is the de facto standard to exchange documents in the wide world. Acrobat Reader is free to use on all major platforms. Acrobat Reader supports a review mode.\nCommunicate Please use a chat application like Slack to communicate. Do not email me and call 20 minutes later to ask me if I read your email.\nPlease call me to discuss a complicated topic or schedule a telco. Do not start an email trail to identify potential solutions to something complicated. We need to discuss such themes.\nRemember the core rule over sane communication and a healthier work environment:\nPraise in emails. Blame on the phone.\nWork on a Project Use Git and set all source code and project artifacts under source code management.\nWork with text formats. Avoid Microsoft Office or LibreOffice formats for your documents. You cannot compute differences on such documents.\nConsider AsciiDoc as your preferred format. AsciiDoc is semantically equivalent to DocBook. You can write whole books with AsciiDoc.\nLessons Learnt Adapt your analog processes to the digital world. Do not just copy them. Improve your processes and remove spurious activities. Introduce search capabilities for all produced artifacts. There are various tool solutions for Google, Microsoft, or old Lotus Notes to create, track, and archive meeting minutes. Similar offerings for web-hosted solutions are also available. These tools support the whole meeting planning, scheduling, and execution workflows.\nEnjoy your online interactions. Go regularly drink a coffee or a beer with your peers. We are flesh and blood living beings.\n1. If meeting preparation is difficult in your organization, implement the Amazon meeting rules. Amazon adds a silent half an hour block at the beginning of the meeting to allow attendees to read the documentation. It is silent time, everybody reads; nobody talks. 2. In a digital world, please use a task tracking tool for this activity. 3. Beware you cannot search for such repositories, especially if you are using proprietary document formats such as Microsoft Office. The sole exception is Google Drive from the search engine company. ","categories":"","description":"","excerpt":" Home office is the new way of working. A lot of friends and business partners are working from home. Our meetings are mostly online. We share documents and results through digital platforms.\nI truly …","ref":"/blog/2021/effective-working-in-digital-age/","tags":["agile"],"title":"Effective Working in Digital Age"},{"body":" Java NIO New Input Output is an alternative IO API for Java, meaning alternative to the standard Java IO and Java Networking APIs.\nJava NIO offers a different IO programming model than the traditional IO APIs.\nOne major feature of interest is the support of alternate file systems. An in-memory file system is ideal for test file related operations in unit and integration tests.\nSometimes NIO is claimed to mean Non-blocking IO. However, this is not what NIO meant originally. Also, parts of the NIO APIs are actually blocking - e.g. the file APIs - so the label \"Non-blocking\" would be slightly misleading.\nUnit Tests The Jimfs library implements an in-memory file system. You can find other implementations of in-memory file systems if you want to use another library.\nThe approach is ideal to write unit tests working with files. You cannot assume to have access to a well-defined file system in a generic continuous integration pipeline. Unit tests using an in-memory file system can be deployed in a continuous integration pipeline.\nWhen you look at the implementation of Path.of or Paths.get, you will see:\npublic static Path of(String first, String... more) { return FileSystems.getDefault().getPath(first, more); } So, while this method and similar ones are very convenient, using them will imply you want to access your default file system. The one your JVM is running on, not your in-memory file system.\nHence, when wanting to make sure your code works against in-memory file systems, you must make sure to never call these helper methods. Instead, you should always use the FileSystem or a Path instance as an anchor.\nDepending on your project and your libraries, this is quite a challenge to pull off [1].\nPaths Alternative file system operations require all methods to use path objects instead of file objects. File objects contain the name of the accessed file but lose all references to the underlying file system. All operations using file objects implicitly use the default file system.\nPath objects encapsulate the file and the file system. Operations are aware of the underlying file system and behave as expected.\nFileSystem fs; (1) Files.createDirectory(fs.getPath(ORGANIZATION, \"crm/\")); (2) Files.copy(\"myFile\", fs.getPath(ORGANIZATION, \"crm/\")), StandardCopyOption.REPLACE_EXISTING); 1 Define a file system 2 Work with the file system to create paths and avoid using helper methods using the default file system Consider Java java.io.File class as a legacy abstraction. Avoid using it and moving over to the Java path abstraction.\nRemember java.nio.Path class has a reference to a file system, the java.io.File class only uses the default file system.\nThe javadoc definition states that a file is\nAn abstract representation of file and directory path names.\nUser interfaces and operating systems use system-dependent pathname strings to name files and directories. The javadoc definition states that * The java.nio.file package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.\nThis API may be used to overcome the limitations of the java.io.File class.\nUse file instances to manipulate abstract file path names. Use path instances to manipulate files.\nBeware that\nFile file = new File(\"/tmp/myfile.txt\"); Path path = file.toPath(); // is implemented as FileSystems.getDefault().getPath(this.getPath()); If you need to convert a file instance to a path instance hosed in the desired file system, please write\nFile file = new File(\"/tmp/myfile.txt\"); Path path = fileSytem.getPath(file.getPath()); Learnt Lessons Legacy libraries heavily use File objects in their algorithms and their public interface. Such libraries do not work with in-memory file systems.\nThe simplest approach is to always provide an API returning streams in addition to file system methods. It is always possible to map a stream to a file system specific streams for read and write operations.\nThe more complex approach is to replace all File objects with Path objects. Ideally, the Java community should declare the File class as a deprecated one. Another solution would be to extend File with an internal path instance. This approach could break backward compatibility.\n1. I regularly open issues in various open-source libraries to request an API extension to support Path. The maintainer of the library is often not aware you need Path to unit test with in-memory file systems. ","categories":"","description":"","excerpt":" Java NIO New Input Output is an alternative IO API for Java, meaning alternative to the standard Java IO and Java Networking APIs.\nJava NIO offers a different IO programming model than the …","ref":"/blog/2021/why-is-java-path-class-better/","tags":["agile","java"],"title":"Why Is Java Path Class Better?"},{"body":" Scaling Agile, Lean and Scrum to the whole product development department is hard work.\nYou start a change journey in murky waters. Best to communicate a lot, strengthen your teams and have total support of upper management.\nTechnical agile coaching usefully describes the work I do. Agile coaching helps your business to become more successful, often improve the way you plan and deliver software.\nTechnical agile coaching focuses on how people design products, write code and deliver high-quality products.\nMy aim is the same as other agile coaches. I improve the agility of the organizations I work with. I use coaching, mentoring, teaching and facilitation techniques just as other coaches do.\nMy main focus is how the source code is written, the design defined, and the architecture formulated.\nOur goal is to deliver a highly successful product.\nAgile Approach My own interpretation of agile as doctrine is:\nReduce the distance between problems and problem-solvers.\nPractice Gemba.\nTake small steps, collect data, validate every step, update your approach. Apply the Plan-Do-Check-Act PDCA loop. Clean up as you go.\nLead and cycle-time are measures of organizational agility. Track them.\nDo not ask for permission when you want to continuously improve. A professional is supposed to improve. This is a core responsibility of your teams and team members.\nYou have the retrospectives to identify and plan your improvements. You must allocate time for implementing the improvement in every sprint. Scrum is clear, at least one improvement measure is a high-priority backlog item in the next sprint [1].\nIf you can choose, do not use SAFe. I observe organizations struggling with SAFe’s over-standardized, phase-gated processes. The top-down control generates waste in the value stream and discourages engineering talent creativity. It seriously limits autonomy and experimentation in the teams. It can promote silos in the organization, preventing platforms from becoming real business capabilities enablers.\nThoughtworks put SAFe on hold in their Technology Radar Volume 24 released in April 2021. On hols means proceeding with caution. Said bluntly, just do not use it if you can choose.\nWays of working The following three levels of coaching are commonly needed:\nOrganizational LeSS Coaching A coach works with multiple teams and the management to improve the organization and its structure. A clear vision of how LeSS organization could be:\nOrganizational structure and design,\nLeSS,\nRole of management,\nAdoption and goals setting,\nManaging an organizational improvement backlog,\nChanging management practices from controlling day-to-day work to building capability,\nManaging work: product backlogs and how the organization manages them,\nDealing with interruptions,\nHuman Resource practices such as appraisals and career paths,\nFacilitating organizational release/roadmap planning and retrospectives.\nTeam LeSS Coaching A coach works with at most a few teams to improve their team-working and LeSS practices. It is common for a coach to take on the Scrum Master role. A team coach typically focuses on:\nTeam responsibilities with self-managing teams.\nFacilitation.\nImproving the team’s decision-making and conflict resolution.\nTransparency in the team.\nMaking organizational impediments visible.\nImproving the relationship between the Development Team and the Product Owner.\nProduct Ownership (of both the team, the PO, and other stakeholders).\nRole and contribution of the team’s management.\nImprove Scrum practices (and technical practices).\nEducate and coach the team’s (future) Scrum Master.\nTechnical Practices Coaching A coach works with (or on) a team on their actual codebase to improve the technical practices and adopt agile development techniques.\nA technical coach is an expert on software development techniques\nLeSS strongly emphasizes technical agility and promotes associated good practices. High-quality products require well-trained professional developers and mastery.\nExamples are simple design, refactoring, unit testing, test-driven development and acceptance test-driven development.\nA coach typically focuses on:\nDiscovering “code/design smells”.\nPlaces where code/design could be improved.\nExplaining modern, “clean” code that is legible and easier to change and maintain.\nRefactoring “smells” into clean code.\nWriting unit tests.\nTest-driven development.\nTest automation with continuous integration and continuous delivery.\nSpecification by Example (Acceptance Test-Driven Development).\nEfficient and effective working practices (IDE, automation).\nApplying design patterns.\nIn all our mandates, one major activity is improving the legacy code.\nLegacy code is Code without tests\nLegacy code is Profitable code that we feel afraid to change.\nHow Much Coaching? The most successful LeSS adoptions we have seen had the following structure:\nOne internal and one external coach\nThis pair provides the overview of the LeSS adoption. They together coach management. They are also involved with team and technical coaching.\nExternal team coaches who help the teams become better and focus on training the Scrum Masters.\nExternal technical coaches who focus on training internal technical coaches\nHave some technical coaches work with the teams, but let them focus on training internal coaches. After that, reduce, not eliminate! the external technical coaching or let the external coach move to a new area.\nBe Patient, The Time Horizon is Years Trust your people.\nCreate opportunities.\nEstablish a learning culture.\nThrive for craftsmanship.\nLet the team use internal social pressure.\nEliminate specialization, push mastery.\nIn the beginning, follow the LeSS rules.\nExtended responsibility, rounded products provide room and freedom for better decisions.\nRemember LeSS is Scrum, it is Large Scaled Scrum Feature teams are economical. Cross-functional Technical excellence is the essence of a quality solution. One product owner for the whole product provides focus.\nThe product owner is where the money is. Depending on your organization, put him where the budget comes from.\nMove from a component owner to become a component mentor. He is responsible for teaching others how to adapt and evolve the component.\nReferences Agile Introduction Success Criteria Through The LeSS Lens\nFans of LeSS\nScrum Teams Survey\n1. Sadly, the Scrum Guide revision of 2020 removed this rule. They deleted this PDCA mechanism. ","categories":"","description":"","excerpt":" Scaling Agile, Lean and Scrum to the whole product development department is hard work.\nYou start a change journey in murky waters. Best to communicate a lot, strengthen your teams and have total …","ref":"/blog/2021/less-lessons-learnt/","tags":["agile"],"title":"LeSS Lessons Learnt"},{"body":" Computer science students shall achieve technical excellence when reaching bachelor level. They should be proficient with industry good practices.\nStudents understand the theory and principles behind these practices. Experience with one of the best of breed tools enforces learning and automatism.\nThe focus of a technical university is to teach the concepts and methods. The tools are used to practice and to increase student learning.\nSource Code Version Management with Git Git is the standard tool for the distributed source code management system. It is supported by all major development IDE and continuous integration environments.\nFirst-year undergraduates shall master the basic git commands to write their semester projects.\nSecond-year sophomores shall master the Git commands used to work in teams. Pull requests are a standard approach to review team colleague works and to consolidate new functions into the application.\nModern Java Software Development Java is the preferred programming language for the majority of teaching institutions around the world. The programming language has evolved the last ten years. Students should learn the current way of writing code in Java.\nThe actual Java approach is to use streams and renounce in most cases to use instructions such as for or while loops or conditional if statements. Delegation and lambda constructs often replace inheritance design.\nSince JDK 16, Java provides Algebraic Data Types with records and sealed classes. Records implement Product Types. Sealed classes implement Tagged Unions, also called sum types.\nThe IntelliJ IDEA IDE is now the industrial standard for the Java and often Python world. The IDEA environment promotes the use of modern Java constructs. Currently, constructs such as records, sealed classes, closeable resources, switch instructions as expressions are new approaches to write legible Java code. Concepts such as Optional, Streams, immutable objects, and unchecked expressions promote more functional programming styles.\nGradle is our preferred build tool for Java projects. The approach is straight forward.\nTechnical Excellence The DevOps and software craftsmanship movement strongly promotes technical excellence and intrinsic quality in software development.\nStudents shall be fluent with\nStatic code analysis. IntelliJ IDEA provides an analysis function for static code analysis. The IDE environment is free for students.\nUnit tests and integration tests Use the seminal libraries JUnit5, Mockito, and AssertJ\nContinuous integration pipeline uses the CI pipeline of your product management tool; either GitLab, GitHub, Bitbucket, or Azure DevOps.\nDocumentation You should only check text artifacts into a Git repository. Modern approaches with Markdown and Asciidoc syntax promote this axiom.\nPlantUML is a text-based diagramming approach. Major diagram types are supported. ALl UML diagram types can be described with the tool. Asciidoc has native support for diagrams in general and PlantUML in particular. Asciidoc supports additional diagrams and diagramming tools such as Mermaid.\nAgile and Scrum Agile and Scrum are the standard methods to develop software products in the industry. All students shall excel in agile development approaches. Scrum is the most used approach and should be taught to all computer science students.\nStudents shall understand the agile concepts and main constructs. When working in a Scrum environment, they have used the backlog, issues, stories, definition of done. They have planned their projects with a vision, a roadmap, epics, and sprints.\nGitlab as a Student’s Tool Gitlab is an integrated solution for software development in teams and DevOps approaches. It is the official tool provided in our Computer Science Department.\nStudents learn computer science principles and hands-on how to develop software applications. They will use their learning to develop commercial software components when working after the completion of their studies.\nGitlab as a Lecturer’s Tool All the source code and artifacts of a student class are available in Gitlab. The development history over a project or a semester is visible in Git. The lecturers can access the artifacts or use scripts to extract the data necessary to set the grades for the students. The grading process can be standardized. The decision process is part of the Gitlab data and is auditable.\nLinks The student series is a set of blogs showing how to use central tools for modern software development.\nSoftware Development for Students\nPragmatic Craftsmanship\nCurrent Software Components\nGit Branches for the Impatient\nGit Local Repositories For the Impatient\nGitlab for Bachelor Students\nZero Bug Policy\nCreating a Technical Website with Hugo and AsciiDoc\nGitLab for Bachelor Students\n","categories":"","description":"","excerpt":" Computer science students shall achieve technical excellence when reaching bachelor level. They should be proficient with industry good practices.\nStudents understand the theory and principles behind …","ref":"/blog/2021/software-development-for-students/","tags":["java","git","series-students"],"title":"Software Development for Students"},{"body":" Computer science students shall be proficient with a basic set of software development techniques.\nTechnical excellence is a mandatory skill for all software developers.\nAgile development approaches are state of the industry and used in almost all software development initiatives.\nDevOps approaches are used in modern organizations. They predate agile development approaches.\nTechnical schools should provide an in-depth experience in these areas to prepare their students for their future activities after completing their bachelor.\nThe below mind map consolidates concepts, tools and approaches based on the GitLab tooling established in some universities. The approach emphasizes agile and DevOps concepts and approaches.\nItalic terms identify concrete tools. Green font marks Gitlab features. Light blue background concepts map to technical university guidelines.\nYou should develop software applications using agile and DevOps techniques. You shall put your source code under a version management system. The actual industrial standard is git, a distributed version control system - DVCS -.\nMore sophisticated source code management systems based on Git with additional agile and DevOps functionalities are:\nGitHub is a closed-source solution and most well-known solution. Microsoft acquired them in 2020. Some Swiss technical universities - ZHAW, University of Bern - use the academic GitHub campus program. CI and CD pipelines are not part of the GitHub product and must be installed separately. The academic program means you receive GitHub licenses. Your organization is responsible for running the software on the premises.\nGitlab is an open-source solution and a strong contender for GitHub. CI and CD pipelines are part of the product.\nBitbucket is a closed-source solution of Atlassian. CI and CD pipelines are part of the product. Atlassian also owns JIRA, Confluence and Trello.\nAzure Devops is a closed-source solution and Microsoft answers to .NET development. CI and CD pipelines access is under definition by Microsoft. They slowly open their product to additional development stacks such as Java, Python.\nGitea is a community-managed lightweight code hosting solution written in Go. The project is hosed on GitHub. It is published under the MIT license.\nGogs is a painless self-hosted Git service. The project is hosed on GitHub.\nGitolite allows you to set up git hosting on a central server. It has fine-grained access control, and many more powerful features.\nSchools often select GitLab due to his open source license and the tremendous DevOps functionality. The gitlab solution supports source code versioning, DevOps pipelines, agile development approaches, and quality insurance for the produced artifacts.\nThe technical university of Lucerne HSLU has selected the GitLab platform as the standard DevOps environment.\nWell-known companies in Switzerland such as Roche Diagnostics, UBS[1], Siemens[2] have also standardized on this platform.\nOur students can more easily bridge between academical teachings and industrial practices and acquire deeper understanding of DevOps and agile practices. Semester and bachelor theses are easier to realize through the use of known software development tool chains. Students can concentrate on the content of their thesis.\nBasic Git Knowledge for Students Studying the history of software development practices shows the raise and fall of SCCS, CVS, ClearCase, Visual Source Safe, or Subversion. The current most popular and used tool is Git.\nAny software developer or web designer can create a Git hosted project with a few commands in the shell.\nLinux distributions often include the git application. If not use the package manager to download and install the Git tools.\nMacOS users should use homebrew as a package manager. Homebrew can download and install a huge set of Unix packages. To install git, you just have to execute brew install git.\nThe huge advantage of package managers is the update function to install new versions of your applications without any configuration activities.\nYou are a Windows user you can find a Windows package on the git home page.\nGit has three different areas for your code:\nWorking directory The area that you will be doing all of your work in (creating, editing, deleting, and organizing files).\nStaging area The area where you will list the changes that you have made to the working directory.\nRepository Where Git permanently stores the changes you have made as different versions of the project.\ngit init (1) git clone https://gitlab.enterpriselab.ch/tangly/tangly-os.git (2) git add README.md (3) git add * (4) git commit -m \"commit message, should be clear and legible\" (5) git push (6) git pull (7) git status (8) git remote (9) git --version (10) 1 Create a new repository for the root folder of your project, the folder .git is created and contains all the git tracking information. 2 Clone the repository tangly-os and copy all files into the current folder. 3 Add the README file to git. 4 Add all files to git. 5 Commit files. 6 Push files to the remote repository you cloned in step 2. Your changes are now public and available to other developers. 7 Pull files from the remote repository you cloned in step 2. Your local repository contains the last public changes of other developers. 8 Returns status information about your local project. 9 Returns the list of remote repositories your project is connected to. Often you have just one remote to synchronize with. 10 Displays the version of your git installation. See our blog Git Local Repositories For the Impatient.\nSee our blog Git Branches for the Impatient for more advanced commands.\nCI Pipelines for Students The minimal Gradle build file of a Java project is elementary and compact.\napply plugin: 'java' Multi-module Gradle build file requires an additional gradle.settings file identifying your modules.\ninclude 'net.tangly.bdd' include 'net.tangly.bus' include 'net.tangly.commons' The initial build file for each module is the same as for a minimal Gradle project. You can now compile, test and check your application.\ngradle build (1) gradle test (2) gradle check (3) gradle clean (4) 1 Compile the simple or multi-module Java project. 2 Execute the unit tests of the project. 3 Perform static analysis checks if you define them. 4 Clean the output folders and delete all generated files. You are now ready to create a complete continuous integration pipeline of your project in gitlab. A complete .gitlab-ci.yml configuration for a gradle project would be:\nimage: openjdk:15 variables: before_script: - export GRADLE_USER_HOME=`pwd`/.grade stages: - build - test build: stage: build script: ./gradlew --build-cache assemble cache: key: \"$CI_COMMIT_REF_NAME\" policy: push paths: - build - .gradle test: stage: test script: ./gradlew check cache: key: \"$CI_COMMIT_REF_NAME\" policy: pull paths: - build - .gradle Java Development Environment Please prefer workstation powered with Linux or macOS if you are developing in Java, Groovy or Python.\nYou will be more efficient and avoid all the problems related to virus scanners, missing packages or arcane path length problems.\nInstall the latest LTS JDK and the latest JDK on your workstation.\nInstall IntelliJ IDEA IDE. Students can request a student license and work with the Ultimate edition. The community edition is free for everybody.\nUse the static analysis function of the IntelliJ IDEA has a static analysis feature.\nSelect the file or package to inspect in the project view.\nClick the right mouse button to display the context menu and select the menu item Analyze/Inspect Code…​. The findings will teach you how to write better Java code and eliminate common errors.\nInstall Gradle to build your application\nIntelliJ IDEA environment provides all the tools to work efficiently locally. All the tools identified in the above mindmap are supported in IDE and associated plugins. Students can work offline and learn the tools in a gentle manner.\nThe students can use the IDEA Static Code Analyzer without any additional configuration. The quality is good enough, and the feature empowers junior developers to learn modern and correct Java code.\nMore advanced scenarios use SpotBugs and the associated IDEA plugin.\nHow to Write Unit Tests for a Java Application You should write unit and integration tests for your Java application using:\nJUnit 5\nMockito\nAssertJ\nHow to Document Your Project Static code generators are becoming the standard approach for the technical documentation. One huge advantage is you can check the whole documentation into your git repository. You have a synchronization between a released version of your application and the corresponding documentation. Both are stored in the same repository and can be marked with a version label You can use:\nMarkdown\nAsciiDoc\nHugo\nIntelliJ has native support for markdown and an excellent plugin for Asciidoc.\nGitlab provides the Pages concept to create and publish complete documentation of a product.\nDiagrams PlantUML is a simple and powerful tool for diagramming. The tool is compatible with git philosophy and static website generators.\nThe IntelliJ Asciidoc is used to write technical documentation and to display embedded PlantUML diagrams. Asciidoc format has native support for PlantUML diagrams.\nStudents have training in technical notation such as UML, BPNM, C4 and others. They can now apply these notations to their projects using plantUML.\nAgile and Scrum Students have training in agile development and the Scrum framework. Gitlab allows them to apply these Agile Delivery Concepts to their semester and bachelor projects. Lecturers have access to the agile and Scrum artifacts and can qualify the quality of the work.\nAdvanced Git for Complex Team Development Once you master the basic commands, consider learning advanced commands like:\nMerge Merge your branch my-branch back into trunk\ngit commit –m \"Some commit message\" (1) git checkout trunk (2) $ git merge my-branch (3) 1 Develop some code and commit it in the currently selected my-branch. 2 Switched to branch trunk. 3 Merge the branch my-branch into trunk. Rebase Rebase trunk into your branch my-branch. Note that after a rebase, the commit ids of the rebased branch are new. A rebase is not simply a moving of commits around in history. Git actually creates brand-new commits with new commit ids and permanently deletes the old commits.\nYou should prefer to rebase only with local branches. Avoid rebasing shared branches. If you rebase a branch that was pulled from GitHub or GitLab, and then push it back, the server will reject it.\ngit rebase my-branch trunk Squash Git squash is a technique that helps you to take a series of commits and condense it to a few commits.\nSo let’s see how to squash the last three commits to a single commit.\ngit rebase -i HEAD~3 The following content will be shown:\npick 474bfdc2 3rd last commit pick 1bffc15c 2nd last commit pick 474bf0c2 last commit For the commits that you want to squash, replace the pick instruction with fixup, so it becomes:\nfixup 474bfdc2 3rd last commit fixup 1bffc15c 2nd last commit pick 474bf0c2 last commit Cherry Picking Cherry-picking in Git means choosing a commit from one branch and applying it onto another. This is in contrast with other ways, such as merge and rebase, which normally apply many commits onto another branch.\nYou can display the hashes of your commits in the trunk with the command:\ngit log --oneline trunk Now you can cherry-pick the commit you are interested in and apply it into your branch.\ngit checkout my-branch git cherry-pick \u003ccommit-hash\u003e Local and Remote Branch Read the post Git Branches for the Impatient.\nPull Request Read the documentation of GitLab, BitBucket or GitHub. You will use pull requests if you are working in a team for a project. Sadly, students rarely work teams during their studies.\nLinks Git Local Repositories for the Impatient\nGit Branches for the Impatient\nCreating a Technical Website with Hugo and AsciiDoc\nSupport Comments For Static Hugo Website\n[1] UBS schliesst Umzug auf GitLab. inside-it. 2021-08-13.\n[2] Siemens GitLab\n","categories":"","description":"","excerpt":" Computer science students shall be proficient with a basic set of software development techniques.\nTechnical excellence is a mandatory skill for all software developers.\nAgile development approaches …","ref":"/blog/2021/gitlab-for-bachelor-students/","tags":["java","git","devops","series-students"],"title":"Gitlab for Bachelor Students"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/crm/","tags":"","title":"crm"},{"body":" Identifiers are a key concept to successfully model complex business domains. They permeate how our modern civilization functions.\nCould you imagine a country without a car registration number of vehicles, internet addresses, postal addresses or social security numbers?\nIdentifiers are identifiers.\nIdentifiers cannot be changed at any time.\nUpdating identifiers means introducing mapping relations between the old and the new values.\nIn computer science, identifiers IDs are lexical tokens that name entities.\nIdentifiers are used extensively in virtually all information processing systems.\nIdentifying entities makes it possible to refer to them, which is essential for any kind of symbolic processing.\nExternal Well-Defined Identifiers The best identifiers are externally well-defined identifiers.\nA unique and well-defined authority is responsible for defining and publishing them. Ideally, the authorities should only create new identifiers and never delete existing ones. The published information is available to all interested parties.\nExamples are\nCurrency names as defined in ISO standard 4217.\nCountry abbreviations as defined in ISO standard 3166.\nSocial security numbers are well documented in the country they are used.\nCar numbers are well-known and documented.\nTry to use global externally defined identifiers as much as possible. Always document the authority in charge to create these identifiers.\nExamples you are using are\nIBAN account numbers are defined worldwide through ISO 13616.\nBank connections are defined as Business Identifier Codes through BIC ISO 9362. The registration authority is SWIFT.\nCar numbers and country acronyms are defined worldwide.\nPassport numbers are defined worldwide. Each country has its own structure and conventions.\nSocial security numbers are a counter-example. There are currently only defined locally.\nExternal Managed Identifiers You shall document the source of truth for all externally defined and managed identifiers.\nThe source of truth shall work as a benevolent responsible. It should support all interested parties and guaranty their identifiers can be trusted.\nInternal Managed Identifiers One possible approach is to define a naming convention such as\nYear - Acronym - Counter\nAn example of such an identifier would be\n2021-CNT-0001 (Contract number 1 in year 2021) 2020-EVT-0101 (Event number 101 in year 2020) Variations are\nA full date as prefix, our system uses this convention to name invoices.\nA more readable acronym, our ERP system uses the word invoice to name invoices.\nBeware if you export internal managed identifiers, you become a source of truth. You are responsible for documenting these identifiers and the process to create new ones. You shall also guaranty that existing identifiers are never recycled. If your identifiers are strings, you shall clearly define the supported languages and character sets.\nDomain-Driven Design Domain Driven Design DDD is a powerful and modern approach to define agile software architecture [1, 2]. Some key rules are related to identity.\nEntity has a well-defined identity An entity is an object that is not defined by its attributes, but rather by a thread of continuity and its identity. Any instance of an entity abstraction must have a unique identifier.\nIdentify aggregate through identity An aggregate is a group of objects that are bound together by a root entity, called the aggregate root. Objects outside the aggregate are allowed to hold references to the root but not to any other object of the aggregate. The aggregate root is responsible for checking the consistency of changes in the aggregate. An aggregate is found and referenced through the identifier of the aggregate root entity.\nReference over aggregate through identity An aggregate shall reference another aggregate through the identity of their root entity instance.\nThe concept of identity is therefore central to the domain-driven design approach.\nLessons Learnt Always try to find an external, well-defined identifier for your entities. Beware of legal aspects when you are using government defined identifiers such as social security numbers, passport numbers or car numbers.\nAvoid by all means to using an internal privately defined identifier as a public one. You will bear the burden of documenting, manage and evolve the scheme as soon as you do this.\nRelated concepts are discussed in our blog series\nEntities, Identifiers, External identifiers and Names Marcel Baumann. 2020.\nThe power of Tags and Comments Marcel Baumann. 2020.\nReference Codes Marcel Baumann. 2020.\nValue Objects as Embedded Entities Marcel Baumann. 2021.\nMeaningful Identifiers Marcel Baumann. 2021.\n","categories":"","description":"","excerpt":" Identifiers are a key concept to successfully model complex business domains. They permeate how our modern civilization functions.\nCould you imagine a country without a car registration number of …","ref":"/blog/2021/meaningful-identifiers/","tags":["design","crm","domain-driven-design","series-identifiers"],"title":"Meaningful Identifiers"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/series-identifiers/","tags":"","title":"series-identifiers"},{"body":" This post discusses the value object pattern, and the factory pattern, which are tactical patterns in the domain-driven design Domain-Driven Design approach.\nValue objects represent typed values that have no conceptual identity in your domain. They can help you write better codes that are less error-prone, more performant and more expressive.\nValue objects define the second kind of domain objects besides entities. Their main characteristic is immutability:\nAttributes of a value object never change.\nA second characteristic is that they do not have external identifiers. Unlike an entity, two value objects with the exact same properties are considered equal.\nA third one is they should be self-validating. A value object shall verify the validity of its attributes when being created. If any of its attributes are invalid, the object should not be created and an error or exception should be raised.\nImmutable value objects are defined as record in Java. Use the constructor to validate your objects. Throw an IllegalArgumentException if a validation error occurs.\nValue Objects do have attributes and methods as entities. Attributes of value objects are immutable. Methods of value objects can only be queries without side effects. Operations never command a change to the internal state of a value object. We can pass value objects to clients without worrying they change them.\nMany objects can be modeled as value objects instead of entities because they are defined through their attributes. These objects measure, quantify or describe things in the domain model. Because they are so easy to handle, we should model domain abstractions as value objects as often as possible.\nAddresses, Phone Numbers, Email Addresses Some value objects are part of any commercial application domain. Postal addresses, phone numbers and email addresses are canonical value objects. Other candidates are bank account IBAN numbers, job titles, job descriptions, company legal status.\nThis means that these objects do not have an object identifier and should not be stored in a separate table if stored in an SQL database. Value objects shall be embedded objects and be part of an object such as a person.\nA person is an entity. It should have an external identifier and has a postal address, multiple phone numbers, and one or more email addresses.\nCheck your domain model and validate these assumptions.\nPostal address, phone numbers, email addresses are value objects and have no external or internal identifiers.\nThey are always owned by other value objects or more often by entities such as people, companies, delivery forms.\nThey are immutable objects.\nBusiness processes can replace such an object with a new instance without impeding other domain instances.\nProgrammed in modern Java, these value objects should be records to guaranty immutability at the language level. As a bonus, you get the hashCode and equals methods for free.\nA Java record class declaration is very compact. Often it is a one-liner.\nInvoice Lines Invoice lines are lines containing details in an invoice. Invoice lines are always value objects belonging to exactly one invoice.\nTo complicate matter, invoice lines have different types, such as a regular line with a specific article, quantity, unit price and computed price. Often VAT aspects must be considered and computed for the overall invoice. An invoice line can also be a subtotal for a set of regular invoice lines.\nVAT definition and computation is often a murky domain. The VAT value can be dependent on the article, the company selling it and the client buying it. When public administration defines a domain and associated business rules, the world often becomes quite complicated and ambiguous. The VAT administrative laws in Switzerland are more than 2000 pages of an illegible text.\nThe complete definition of this business domain is not part of this article.\nThe following design challenges exist\nSerialization libraries such as JSON Jackson library cannot handle invoice lines with multiple Java class types. A workable approach is described and implemented with the open source component Gleam. The solution is to define selectors to instantiate the correct Java class.\nInvoices are complex objects and ideal candidates for a document-oriented persistent approach. Invoices should not be stored in a relation-based persistence store, meaning an SQL database. To store them in a table, you have to model the various types of lines and add a technical identifier to each invoice line instance.\nFactories The factory pattern in Domain Driven Design DDD can be seen as a super pattern for the Gang of Four (GoF) creation patterns. Factories are concerned with creating new entities and value objects. They also validate the invariants for the newly created objects. We can place a factory on the entity or value object itself or on an independent object.\nJava record constructs support validation of properties as part of the constructor. Invalid objects cannot be constructed if the constructor validation detects a violation. This mechanism ensures only valid instances exist in the domain.\nFactories that are declared on the same object they create are either factory methods or prototype methods. The factory method creates a completely new object from the method parameters. The prototype method uses an existing instance to derive a new object.\nThe prototype method is supported with the keyword with in C#. The JEPs for deconstruction and construction of objects in a switch statement could provide a similar approach in the future for Java. The current version of Java JDK 16 does not support this feature.\nWhen the creation logic is complex or has dependencies that are not needed by the created object. It is best to create a separate factory. This factory could provide multiple ways to create new instances.\nValue Objects in Persistent Store We encourage experimenting with the MicroStream approach for small projects footnote:[The Eclipse foundation took over the MicroStream library in 2023 under the new name Eclipse Store. The effort to persist a Java object graph is very small.\nYou can always move to a no SQL solution when your application is successful and time comes to harden it. Another standard but cumbersome approach is to move to JPA.\nRelated concepts are discussed in our blog series\nEntities, Identifiers, External identifiers and Names Marcel Baumann. 2020.\nThe power of Tags and Comments Marcel Baumann. 2020.\nReference Codes Marcel Baumann. 2020.\nValue Objects as Embedded Entities Marcel Baumann. 2021.\nMeaningful Identifiers Marcel Baumann. 2021.\n","categories":"","description":"","excerpt":" This post discusses the value object pattern, and the factory pattern, which are tactical patterns in the domain-driven design Domain-Driven Design approach.\nValue objects represent typed values that …","ref":"/blog/2021/value-objects-as-embedded-entities/","tags":["design","domain-driven-design","crm","series-identifiers"],"title":"Value Objects as Embedded Entities"},{"body":" There are times in software when you are facing a problem, you find an off-the-shelf solution, and a few lines of code later it just works.\nToday I lived one of those moments.\nThe whole configuration of comments and modification of the Docsy theme took around one hour.\nMotivation I wanted to add a comment section to this blog for a while. I was reluctant to implement one myself the classical way, using an external service such as disqus. This blog is a static website created with Hugo and does not use a database. All pages are written with Asciidoc, stored in a Git repository and rendered using Hugo. I wanted to store comments in a personally owned repository and protect my readers from an advertisement and personal information collection.\nMeeting Utterances Some information on the Internet about utteranc.es is wrong. Facts are:\nThe Utterances library uses a GitHub repository to store comments associated with your website articles and pages.\nYour website can be hosted anywhere. You do not need to host your static website repository on GitHub, but you can.\nReaders wanting to comment must login once with their GitHub account to authorize the utteranc.es application. Anonymous commenting is not supported. This restriction is reasonable for a technical website whose readers are technically affine and already have a GitHub account.\nUtterance products are free. It claims to have no tracking, no advertisement, and no lock-in. The comments are stored in your repository as GitHub issues.\nUtterances layout looks nice and can be styled.\nUtterances is an open source app built and maintained by Jeremy Danyow. He announced the project in 2018. It provides a lightweight web widget \u003ciframe\u003e to add a comment section to a website.\nWhen someone posts a comment, the Utterances bot literally leaves a corresponding comment on the issue. In other words, each page gets its own issue with a comment feed, and so you benefit from the entire feature set of issues out-of-the-box.\nComments are stored as issues inside a GitHub repository of your choosing.\nYou can edit, report and delete comments. These functions are great for moderation.\nIf you are watching the repository, you will get email notifications when comments are posted to your site.\nThe other wonderful aspect of Utterances is how simple the entire setup really is.\nSetting Up Utterances The process is described in details on utteranc.es. The steps are:\nCreate a public GitHub repository.\nInstall the utteranc.es app on the repo you would like to host comments on. You can use the repository of your blog, or set up a dedicated repository. This option means your blog or website does not need to be hosted on GitHub.\nConfigure the code snippet on the utteranc.es website and copy it.\nYou can skip the code snippet step if you are using Docsy and follow the below instructions to configure your theme.\n\u003cscript async src=\"https://utteranc.es/client.js\" repo=\"\u003cOWNER\u003e/\u003cNAME\u003e\" (1) issue-term=\"title\" theme=\"github-light\" crossorigin=\"anonymous\" \u003c/script\u003e 1 \u003cOWNER\u003e/\u003cNAME\u003e is the name of your repository. In my case, it would be marcelbaumann/tangly-team-comments. Configure Docsy Theme I use the Hugo theme Docsy to style the Open Source Components. I put some effort to have a configurable extension through site parameters.\nCreate the comments partial for utterances The partial file contains the code to display for commenting using utterances. It is a modified version of the snippet you can generate on the utteranc.es website.\nCreate a partial in docsy/layout/partial. I named my partial comments-utterances.html and add the following snippet.\n\u003cdiv class=\"page-blank\"\u003e \u003cdiv id=\"utterancers_thread\"\u003e\u003c/div\u003e \u003cscript src=\"https://utteranc.es/client.js\" repo= {{ .Site.Params.comments_utterances_repo }} (1) issue-term= {{ .Site.Params.comments_utterances_issue_term }} (2) theme= {{ .Site.Params.comments_utterances_theme }} (3) crossorigin=\"anonymous\" async\u003e \u003c/script\u003e \u003c/div\u003e 1 GitHub repository where the issues are stored 2 See utteranc.es documentation how the reference to a page, or an article can be tailored 3 See utteranc.es documentation about supported themes Edit the blog content file The template docsy/layouts/blog/content.html is edited to include the above defined partial file. The original file supports connecting to disqus. I replaced the disqus specific code with the inclusion of the partial defined above for utterances comment support. Perhaps Docsy will introduce a more generic mechanism in the future to integrate commenting systems. I assume they are waiting on Hugo to first provide such a mechanism. Currently, Hugo and Docsy only provide out of the box support for Disqus.\n\u003cdiv class=\"td-content\"\u003e \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ with .Params.description }}\u003cdiv class=\"lead\"\u003e{{ . | markdownify }}\u003c/div\u003e{{ end }} \u003cdiv class=\"td-byline mb-4\"\u003e {{ with .Params.author }}{{ T \"post_byline_by\" }} \u003cb\u003e{{ . | markdownify }}\u003c/b\u003e |{{ end}} \u003ctime datetime=\"{{ $.Date.Format \"2006-01-02\" }}\" class=\"text-muted\"\u003e{{ $.Date.Format $.Site.Params.time_format_blog }}\u003c/time\u003e \u003c/div\u003e {{ if (and (not .Params.hide_readingtime) (.Site.Params.ui.readingtime.enable)) }} {{ partial \"reading-time.html\" . }} {{ end }} {{ .Content }} {{ if (.Site.Params.comments_utterances) }} \u003cbr /\u003e {{ partial \"comments-utterances.html\" . }} \u003cbr /\u003e {{ end }} {{ partial \"pager.html\" . }} \u003c/div\u003e Add four site variables to config.toml The above changes try to be generic and are configured through site variables in the site configuration file under the [params] block. You do not need to edit partial files to tailor them.\n# flag indicating if the utterances (https://utteranc.es/) should be displayed comments_utterances = true # GitHub repository name where all comments are stored. The repository can be the same as the website repository or a different one. comments_utterances_repo = \"marcelbaumann/tangly-team-comments\" # Encoding used to map a site page to a GitHub issue. See utterances (https://utteranc.es/) documentation. comments_utterances_issue_term = \"pathname\" # Theme used by utterance on the website. See utterances (https://utteranc.es/) documentation. comments_utterances_theme = \"github-light\" Links [1] Static Website Improvements Marcel Baumann. 2023.\n[2] Improving a Static Website Build With Hugo and Docsy Marcel Baumann. 2021.\n[3] Support Comments for Static Hugo Website Marcel Baumann. 2020.\n[4] Creating a technical Website with Hugo and Asciidoc Marcel Baumann. 2020.\n","categories":"","description":"","excerpt":" There are times in software when you are facing a problem, you find an off-the-shelf solution, and a few lines of code later it just works.\nToday I lived one of those moments.\nThe whole configuration …","ref":"/blog/2020/support-comments-for-static-hugo-website/","tags":["design","hugo","series-students"],"title":"Support Comments for Static Hugo Website"},{"body":" At many customer sites I visit, I see a lot of effort being put into classifying and managing bugs.\nTheir bug list may contain more than a thousand items. All are neatly documented with screenshots, ways to reproduce the problem and a severity and impact classification. In the worst case, a specialist has worked hard and estimated the effort to correct each of these bugs.\nA change management board meets every few weeks to decide which bugs have a higher priority and should urgently be fixed. It means an angry customer called someone at C level. Now his request must be handled. Some of these bugs were discovered years ago. The discussion can take hours and involve up to ten people. Clearly, many expensive hours have been invested in properly administering these bugs.\nCreating a list of errors provides an organized inventory of technical debt. Spending time on evaluating and administering bugs with the goal of tracking them is just wasteful. Please stop doing such activities.\nThe solution is elegant and simple: Implement the Zero Bug Policy.\nStop Managing Bugs, Start Focusing on Quality!\nHow to transition? Zero-Bug policy does not mean bug-free code in production; it means striving to eradicate all known bugs.\nWhen a bug is found, tests are created before the bug is addressed. A bug is not an error in logic; it is a test that was not written.\n— Ken Auer eXtreme Programming The rigorous Zero-baseline approach will force us to clean our code.\nLet us categorize the bugs you have and deal with them accordingly.\nYou have a few critical bugs that crash the system or don’t have a workaround. Prioritize and fix those. Your customers will be very thankful. Fix at least a handful of these critical problems in each sprint.\nYou own a big set of bugs that are already in production. They have been in your bug tracking system for quite a while. Delete those. If it is a costly problem, your customers will fill a new report. Treat such bugs as critical bugs.\nEstablish a software craftsmanship culture. Stop delivering products with known errors. Correct them before delivery. Your product owner should reject any feature with known errors.\nBugs have a tendency to become obsolete pretty quickly in applications that are updated frequently. The steps to reproduce them become irrelevant, the functionality changes, the impact of the bug often gets lower.\nPlease, do not waste your time trying to update the documentation related to these bugs. You may lose a few valid ones, but trust me, someone will report it again if it is still happening.\nClean Code and Happy Customers Bugs are like water leaks.\nIf you leave them for too long, they can spoil your merchandise and slow down your business.\nFollow these steps to ensure this system works.\nThe bugs that the team decide to fix must be prioritized over regular work and must get fixed now. In Scrum, the product backlog item containing the bug has the highest priority.\nIn the beginning, there will be more bugs to work through, as some bugs that were deleted will be reported again.\nAs the team shifts its focus to improved quality, there will be fewer of them. This is truly a binary system with no wiggle room.\nBugs are either fixed now or deleted, there is no severity and no haggling about the classification of a bug! Good practice is before fixing the glitch to write a unit test to reproduce the problem. You guarantee your users will never see the same error. It is called non-regression testing and makes your customers very happy.\nAre you ready to shift your focus from managing bugs to ensuring quality? And if not, why should I buy your product?\nLinks See the excellent articles from Yassal Sundman working for the crisp company.\nThe Story of How to Implement a Zero Bug Policy\nStop Managing Bugs, Start Focusing on Quality\n","categories":"","description":"","excerpt":" At many customer sites I visit, I see a lot of effort being put into classifying and managing bugs.\nTheir bug list may contain more than a thousand items. All are neatly documented with screenshots, …","ref":"/blog/2020/advocate-zero-bug-policy-in-your-projects/","tags":["agile"],"title":"Advocate Zero Bug Policy in Your Projects!"},{"body":" An agile company is a business with the ability to quickly adapt to market changes [1].\ntangly is an agile and digital development boutique. We must swiftly react to market changes to survive.\nAgility is woven into our culture and processes.\nAgile organizations must be fast-moving and flexible, have rapid response to unexpected obstacles, lead change, be in touch with customers.\nThey have a continuous competitive advantage, and a flat organizational structure for quick communication [2].\nLife isn’t about finding yourself. Life is about creating yourself.\n— George Bernard Shaw In other words, an agile organization is optimized for a VUCA - Volatile, Uncertain, Complex, Ambiguous - environment. The organization should provide vision, understanding, courage and adaptability.\nThere is simply no way to build tomorrow’s essential organizational capabilities – resilience, innovation and employee engagement – atop the scaffolding of 20th century management principles.\n— Gary Hamel 2007 Agile Culture The LeSS movement states the main approach clearly:\nCulture follows Structure.\n— Craig Larman The successful steps are always:\nChange the structure One approach is value streams organization and product development with cross-functional teams advocated in LeSS.\nChange the processes Work using agile approaches such as Scrum, Kanban, eXtreme Programming. Study the advices of the LeSS guys.\nCulture will follow The organization must nurture the change process and eliminate barriers. The servant-leader approach is ideal.\nTo Waisfisz, an organization’s culture is defined by how its parts relate to each other. Moreover, it refutes the way we do things here model by reinforcing that your internal culture is defined by its differences from other organizations. This model lends to group dynamics where groups are not only defined by their internal identity but also by their differences to other groups.\nRecognize clearly that not changing the structure and just renaming roles and processes will not trigger any change. See the Larman laws:\nOrganizations are implicitly optimized to avoid changing the status quo middle- and first-level manager and specialist positions and power structures.\nAs a corollary to (1), any change initiative will be reduced to redefining or overloading the new terminology to mean basically the same as status quo.\nAs a corollary to (1), any change initiative will be derided as purist, theoretical, revolutionary, religion, and needing pragmatic customization for local concerns — which deflects from addressing weaknesses and manager/specialist status quo.\nAs a corollary to (1), if after changing the change, some managers and single-specialists are still displaced, they become coaches/trainers for the change, frequently reinforcing (2) and (3).\nCulture follows structure.\n— Craig Larman In the language of social psychology [1] we can state:\nIt turns out that if we engage in a behavior, and particularly one we had not expected that we would have, our thoughts and feelings toward that behavior are likely to change.\nThis might not seem intuitive, but it represents another example of how the principles of social psychology, in this case the principle of attitude consistently lead us to make predictions that would not otherwise be that obvious.\n— Principles of Social Psychology 1st Internation Edition Agile Anti-Patterns You have to acknowledge you must change the structure of your company. The current approach is to remove functional silos and reorganize along value streams. A stream is in charge of a set of related products and directly communicates with the users of these products.\nAttempting to change an organization’s culture is a folly. It always fails. Peoples’ behavior the culture is a product of the system; when you change the system, peoples’ behavior changes.\"\n— John Seddon The major anti-pattern is the refusal to change the structure of your organization. Without changing structure, you will fail.\nYour organization is unique but not esoteric. The actual approaches will work. You need to tailor them.\nAgile is around for a quarter of a century. Accept that if you are changing now, you are late. You will find thousands of experience reports.\nAccept it will take time. The Agile Fluency Model provides a potential roadmap.\nAgile transformation works only if your organization thrives to satisfy the customer’s needs and achieve technical excellence.\nPlease compare your change process against these anti-patterns. Correct if needed.\nLessons Learnt Agile is now mainstream. More than 80% of all software development initiatives claim to be agile. A digital and agile enterprise is two sides of the same coin. Almost all research and development departments are implementing agile processes to achieve faster and better results. The organizations moving now to agile approaches are laggards.\nBeware that laggards will fight against any change. I still hear upper management statements such as:\nI do not like and do not want to hear the word agile.\nWe are a different industry. Agile cannot work in our environment.\nWe have our processes, we cannot change them. And, agile is anyway chaos.\nFind a champion and get rid of the most vocal laggards. If no champion can be found, either move to another company or renounce agile approaches. Be realistic, you will fail to have any lasting success in such an environment.\nEmbrace reality. At least eighty percent of all software and research activities claim to follow agile approaches. This war is won. We are moping the last islands of resistance.\nFor me, it is similar to the introduction of object-oriented approaches in analysis, design, and realisation of software projects. In the late nineties of the last century, the object-oriented movement won. It took more than ten years to take care of the last luddites.\nOur company tangly llc works steadily and continuously to advance agile and lean values. Our structure and processes actively support agile values. We are very happy with the current results.\nLinks Why Professional Coaching Matters to an Agile Coach. Mikael Brodd. Crisp. 2021.\n[1] An Organizational Cultural Perspective. Waisfisz Bob. 2015. Hofstede Culture Center Strategy, ITIM International.\nReferences [1] F. Laloux, Reinventing Organizations. Nelson Parker, 2014 [Online]. Available: https://www.amazon.com/dp/2960133501\n[2] H. Hamel and B. Breen, The Future of Management. Harvard Business Review Press, 2007 [Online]. Available: https://www.amazon.com/dp/1422102505\n","categories":"","description":"","excerpt":" An agile company is a business with the ability to quickly adapt to market changes [1].\ntangly is an agile and digital development boutique. We must swiftly react to market changes to survive. …","ref":"/blog/2020/the-quest-for-an-agile-company-five-years-tangly-llc/","tags":["agile","tangly"],"title":"The Quest for an Agile Company: Five Years tangly llc"},{"body":" Reference codes are an old concept. They are often used in the relational database schema definition as enumeration values. The database specialists often call them lookup tables.\nReference codes are dynamic enumeration values. By dynamic, we mean you can add values without recompiling the source code.\nIn modern DevOps environments where deployment of a new version is performed in minutes, this advantage is somewhat shallow. We view reference codes more as strongly typed and efficient tags.\nHow can you easily add the concept of reference codes in your application? We provide an initial setup approach requiring mere minutes to add codes to your application.\nEnumerations as Codes As a professional designer, you have declared sets of fixed values as enumeration in your source code. Now you can extend your enumeration classes with the code interface.\nAdditional information is available under link:../../../docs/bus/businessmodels/ Below the source code in modern Java is\npublic interface Code { int id(); String code(); boolean isEnabled(); } public enum EnumCode implements Code { CODE_TEST_1, CODE_TEST_2, CODE_TEST_3, CODE_TEST_4, CODE_TEST_5(false); private final boolean enabled; EnumCode() { this(true); } EnumCode(boolean enabled) { this.enabled = enabled; } @Override public int id() { return this.ordinal(); } @Override public String code() { return this.toString(); } @Override public boolean isEnabled() { return this.enabled; } } The above approach is a low impact transformation of your application. Once your enumeration types implement the code interface, you are free to migrate selected types to external persistent and extensible solutions.\nPersistent Codes Codes can be defined and stored as JSON sets or in SQL table.\nThe Java code for the JSON approach is\n/** * Utility method to read all code values from a JSON file using the org.json library. * * @param clazz class of the reference code * @param factory placeholder to pass the class constructor as lambda expression * @param path path to the JSON file containing the code values * @param \u003cT\u003e class of the reference code * @return code type and all its values * @throws IOException if a file access error occurred */ public static \u003cT extends Code\u003e CodeType\u003cT\u003e build(Class\u003cT\u003e clazz, CodeFactory\u003cT\u003e factory, Path path) throws IOException { try (Reader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) { Iterator\u003cObject\u003e iter = new JSONArray(new JSONTokener(reader)).iterator(); List\u003cT\u003e codes = new ArrayList\u003c\u003e(); while (iter.hasNext()) { JSONObject value = (JSONObject) iter.next(); T code = factory.create(value.getInt(\"id\"), value.getString(\"code\"), value.getBoolean(\"enabled\")); codes.add(code); } return CodeType.of(clazz, codes); } } The JSON files containing the code values can be stored as resource files and delivered either with application or in a separate jar file.\nThe Java code for the SQL table is quite similar:\n/** * Utility method to read all code values from a relational database table using Java regular API. * * @param clazz class of the reference code * @param factory placeholder to pass the class constructor as lambda expression * @param dataSource data source to the database to read from * @param tableName name of the table containing the code values * @param \u003cT\u003e class of the reference code * @return code type and all its values * @throws SQLException if a database access error occurred */ public static \u003cT extends Code\u003e CodeType\u003cT\u003e build(Class\u003cT\u003e clazz, CodeFactory\u003cT\u003e factory, DataSource dataSource, String tableName) throws SQLException { final String SQL_QUERY = \"SELECT id, code, enabled FROM \" + tableName; try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(SQL_QUERY)) { List\u003cT\u003e codes = new ArrayList\u003c\u003e(); while (resultSet.next()) { T code = factory.create(resultSet.getInt(\"id\"), resultSet.getString(\"code\"), resultSet.getBoolean(\"enabled\")); codes.add(code); } return CodeType.of(clazz, codes); } } At the database level, you can define integrity rules in the schema to increase data quality.\nDesign You have the freedom to model set of values as enumeration, reference codes or tags. Each approach has specific advantages and tradeoffs. The costs of moving from one approach to another are quite small. Just choose one solution, implement it and track its adequacy and user acceptance.\nWe provide a Java library BUS implementing these constructs. More information is available under Open Source Components.\nThe unit tests contain examples for enumeration codes, JSON codes and SQL database stored codes.\nRelated concepts are discussed in our blog series\nEntities, Identifiers, External identifiers and Names Marcel Baumann. 2020.\nThe power of Tags and Comments Marcel Baumann. 2020.\nReference Codes Marcel Baumann. 2020.\nValue Objects as Embedded Entities Marcel Baumann. 2021.\nMeaningful Identifiers Marcel Baumann. 2021.\n","categories":"","description":"","excerpt":" Reference codes are an old concept. They are often used in the relational database schema definition as enumeration values. The database specialists often call them lookup tables.\nReference codes are …","ref":"/blog/2020/reference-codes/","tags":["java","design","crm","series-identifiers"],"title":"Reference Codes"},{"body":" I hosted my technical blogs on blogger for years.\nIf I correctly remember, I started to use blogger ten years ago It was a good choice at that time.\nI could easily write blogs and publish them.\nIt is a great tool with some drawbacks. Over the years, the deficiencies sting more and more\nThe major drawbacks are:\nTheir editor is brittle, with limited functionality and unreliable. The generated HTML is not legible and does not support concepts such as micro fragments, meta information or simple functions such as source code highlighting.\nThe last quarter, they started to tinker with their editor and output format. My older posts are now a mess and can only be open in the HTML mode. If I switch to their WYSIWYG editor, the layout is destroyed and random fonts family and sizes are displayed. Worse, the blogs are also displayed mangled to the readers even if I do not edit them. This destruction of all older blogs and the missing migration path were killer criteria.\nBlogger does not support modern markup language such Markdown or Asciidoc. Blogger uses a proprietary and not easy to port format.\nIt is time to find an alternative, and I have to confess I am a huge fan of Asciidoc.\nOK, so why not go with Markdown? Don’t get me wrong, there is nothing bad with Markdown; except that no one should probably use it when Asciidoc and Asciidoctor are available. I’m writing all my documents with Asciidoc [1].\nThe following needs are identified:\nI shall write blogs with the selected solution. The blogs shall be written in Asciidoc. The blog platform should support multiple years of publishing and referencing between blogs. Our projects and our collaborators put effort to regularly publish articles.\nI shall be able to write technical articles and publish them on the same site. The articles are naturally written in Asciidoc. We want professional looking documentation to encourage new users to try our open source components.\nI shall publish the technical documentation of the open source components I develop on the same site.\nHugo was selected as static site generator because its support for Asciidoc is tremendously improving.\nStatic website generators have strong advantages for technical savvy people:\nHosting is cheap. GitHub, GitLab or Bitbucket pages even host static websites for free.\nThe source files go into Git for backup and history.\nThe source files are in plain text:\nChanges come in as a Pull Request for proper review and CI pipeline validation.\nThe sources are open in our IDEs, which encourages refactoring them alongside the code. This results in less stale content.\nFirst I used the hugo-theme-techdoc to customize Hugo. It worked great for the technical documentation and technical articles but fell short of my wishes for the blog part. When I discover the theme Docsy. It supports the technical documentation, technical articles, and blogging.\nThe best part is that Hugo now supports Asciidoctor natively. No more strange manipulation to load gem modules you need. And diagrams through asciidoc-diagram and plantUml are generated in the expected folders. The documentation is still on the light side, but you find the need information on the various pull requests.\nThe bonus is that Asciidoctor newer versions have native support for rouge syntax highlighter. It is no more necessary to load pygment highlighter and configure CSS files. Another huge gain is that plantuml and other diagrams are generated at the right location.\nInstall the Tools My development platform is a MacBookPro and macOS. I use Homebrew as a package manager.\nThe instructions to install hugo and asciidoctor are:\nbrew install hugo (1) brew install asciidoctor (2) gem install asciidoctor-diagram gem install asciidoctor-rouge gem install asciidoctor-bibtex gem install asciimath brew install plantuml (3) brew install graphviz sudo npm install -D --save autoprefixer (4) sudo npm install -D --save postcss-cli sudo npm install -D --save postcss 1 Install hugo application 2 Install asciidoctor and additional asciidoctor packages 3 Install plantuml and graphviz for diagrams, in particular UML sketches 4 Install PostCSS and additional packages used by docsy to generate deployment site. See also docsy documentation. Asciidoctor Configuration Below the configuration of asciidoctor in the config.toml file.\n[markup.asciidocext] extensions = [\"asciidoctor-html5s\", \"asciidoctor-diagram\"] workingFolderCurrent = true [markup.asciidocext.attributes] imagesdir = \"../pics\" source-highlighter = \"rouge\" (1) rouge-style = \"github\" (2) rouge-css = \"style\" (3) icons = \"font\" (4) ref-less = \"https://less.works/[LeSS]\" (5) 1 Select rouge as source highlighter. You should not add it to the extensions because since Asciidoctor version 2.0 rouge is included. 2 Define the style used to highlight source code. 3 Configure rouge to generate all formatting data into the generated HTML file, avoiding any CSS file configuration. 4 Icons provide better looking icons for various Asciidoc} constructs. 5 Define document attributes which are accessible to all processed documents (DRY concepts for the whole site). CAUTION\nNewer versions of hugo have stricter security restrictions. You must explicitly enable asciidoctor support by adding the following statements in your configuration file\n[security] [security.exec] allow = ['^dart-sass-embedded$', '^go$', '^npx$', '^postcss$', '^asciidoctor$'] Docsy Configuration Add First Level Folders Each time you add your own first level folder – meaning at the same level as docs, blog, about, or community, you need to extend the layout to support it. For example, I store technical articles in the folder ideas and use the standard template. So I need to add (if not, no items are visible in the sidebar).\ncp -R ./layouts/docs ./layouts/ideas Change layouts We had to change the partial footer.html to display a better looking copyright clause. The original version has hard coded text not really compatible with the creative commons license we are using. The layout is updated by overwriting the involved partial file.\ncp $prjDir/src/site/website/docsy/layouts/partials/footer.html $siteDir/themes/docsy/layouts/partials Enable Local Search Engine One cool feature of Docsy is local search support through lunrjs engine.\nalgolia_docsearch = false offlineSearch = true offlineSearchSummaryLength = 200 offlineSearchMaxResults = 25 Learning The static website is published under Open Source Components.\nThe source of the whole website is available under Website Source Code.\nPrinting of a single article is supported through your browser. You can configure printing a whole section with or without a table of contents through configuration options. For advanced cases, you can define the layout of the printed document.\nYou can use relative links in your Asciidoc documents. Beware where the files are located by Hugo engine and the naming conventions shall follow Hugo rules.\nAvoid the specialized but uncompleted html5s backend and use instead the html5 backend. I was not able to find good examples of stylesheets for the semantic backend. The html5s backend uses new names for classification and sometimes different HTML structures. The regular available stylesheets will not style correctly the generated website.\nThe Docsy theme does not explicitly support asciidoc documents and the associated stylesheets. I had to extend the Docsy stylesheets with styling for admonition blocks, quote blocks, and embedded images to improve the quality of the texts.\nThe Hugo theme community is slow to better support asciidoc documents. The Hugo developers clearly stated that styling for asciidoc documents is the responsibility of theme authors. All Hugo users shall be aware that asciidoc is an officially supported input format. Funny is that the blogger software and the docsy theme are from the same company as Google.\nThis blog article is naturally written in Asciidoc syntax.\nLinks [1] Static Website Improvements Marcel Baumann. 2023.\n[2] Improving a Static Website Build With Hugo and Docsy Marcel Baumann. 2021.\n[3] Support Comments for Static Hugo Website Marcel Baumann. 2020.\n[4] Creating a technical Website with Hugo and Asciidoc Marcel Baumann. 2020.\n1. You find tutorials how to write asciidoc documentation and how to use the toolchain on YouTube and Udemy. ","categories":"","description":"","excerpt":" I hosted my technical blogs on blogger for years.\nIf I correctly remember, I started to use blogger ten years ago It was a good choice at that time.\nI could easily write blogs and publish them.\nIt is …","ref":"/blog/2020/creating-a-technical-website-with-hugo-and-asciidoc/","tags":["design","hugo","series-students"],"title":"Creating a technical Website with Hugo and Asciidoc"},{"body":" A software architect models customer domains and maps them to excellent software constructs. The solution shall support future customer groups and expand to store additional information.\nTags, also called labels, provide an informal ontology to classify customer data.\nTags are extensible and are machine-readable.\nComments empower users to store relevant unstructured information.\nComments are only for human beings.\nWhat are good approaches to provide searchable tags and labels and avoid wild growth of useless records?\nCan you as a designer govern the ontology defined through labels?\nTags Tags add semantic information to business entities. Tags are often defined as a crowd ontology without enforced schemas.\nInvest in domain modeling to define and maintain tags, and you will move tags to full-fledged ontology into your domain models. This ontology supports meaningful search, segmentation and reporting over historical and geographical raw data.\nTags with associated values are also used to decorate unrelated entities with orthogonal information. For example, you can associate geographical coordinates – GIS – to pictures, meetings, or addresses.\nA tag has three parts:\nAn optional namespace to classify the tag in the overall ontology.\nA mandatory name to uniquely identify the tag in the context of its optional namespace.\nAn optional value providing details to the tag.\nFor example, we could define a tag such as geo:longitude=50.167958 to provide the meta-information of longitude to an entity. This tag has a namespace geo, a name longitude and a double value 50.167958.\nAdditional information is available under link:../../../docs/core/models/ Below the source code in modern Java is\npublic record Tag(String namespace, @NotNull String name, String value) {} You should strongly consider the introduction of tag types to constrain the possible values of a specific tag. For example, you can define that the namespace geo contains only the longitude and latitude tags. Both these tags have mandatory values of type double. Once your design supports tag types, you can add generic validation rules in the user interface and in business logic for all existing tags.\nThe ontology enforcement allows consistent reporting and data drilling over departments in your company and over time.\nComments Comments provide human-readable information and hints for entities.\nAn author writes a comment at a specific time. Comments shall usually be immutable. To respect human fallibility, a correction mode can be supported. If changed, the new comment replaces the older one and is marked as edited. The edition feature is part of the workflow and not part of the domain model.\nAn author can be another computer system. It can provide information about its actions through comments. If the deletion of comments is disabled, the comment history is an audit trail documenting what happened over time with an entity instance.\nBeware that the authors define an external identifier space. If your application requires a user account, you can connect the author with the user account. The consequence is that you should only disable these accounts and never delete them.\nPolicy should be defined to handle the fact that collaborators quit the company over time and are no more active users; but they are still referenced as authors.\nThe code in Java is\npublic class Comment implements HasOid, HasTags { private long oid; private LocalDateTime created; private String author; private String text; private Set\u003cTag\u003e tags; // getters and setters } Design Our architecture follows the principles of domain-driven design. Comments are always associated with a specific bounded domain of the overall application. For example, we often model the persistence view of a domain through a database schema. Each bounded domain has an own independent scheme and could have a persistence store for comments.\nTags are classification information associated with an instance and should be stored within the entity. The set of tags is often transformed to a textual representation and stored in a column. The search features of the underlying database can be applied for selecting instances of interest.\nTag types are a medium to define an ontology and create valid tag instances. A set of tag types shall always be associated with a specific domain of the application.\nWe provide a Java library CRM implementing these constructs. More information is available under tangly open source components.\nRelated concepts are discussed in our blog series\nEntities, Identifiers, External identifiers and Names Marcel Baumann. 2020.\nThe power of Tags and Comments Marcel Baumann. 2020.\nReference Codes Marcel Baumann. 2020.\nValue Objects as Embedded Entities Marcel Baumann. 2021.\nMeaningful Identifiers Marcel Baumann. 2021.\n","categories":"","description":"","excerpt":" A software architect models customer domains and maps them to excellent software constructs. The solution shall support future customer groups and expand to store additional information.\nTags, also …","ref":"/blog/2020/the-power-of-tags-and-comments/","tags":["java","design","crm","series-identifiers"],"title":"The power of Tags and Comments"},{"body":" A software architect models customer domains and maps them to powerful software abstractions [1]. Soon you correlate internal efficient identifiers, meaningful external identifiers, and domain entities.\nYou enjoy long conversations with the enterprise data architect and identify the system owning a specific external identifier.\nHow do you relate to external systems and communicate with other companies?\nHow do you define internal identifiers, which grow with application success?\nHow can you bridge the customer world with your software solution?\nWhat are the good practices to create a maintainable, legible and efficient model of your domain model?\nEntity Concept We need an approach to model customer domain entities and map them to a legible and maintainable software construct [2, 3].\nAn entity is a user domain model abstraction and is mapped to a software type. The entity has:\nA unique mandatory internal object identifier oid, we recommend the use of numeric values to improve performance.\nA public and external identifier id, we recommend the use of text to adequately support various external identification schemes. An example is the European enterprise identifier EUID identifying a company or a certified natural person in Europe.\nA human-readable name. A name does not need to be unique in the system.\nA more sophisticated variant provides additional features.\nA set of tags to classify the instance through a crowd based ontology. Tags are often called labels.\nA list of comments to add human-readable information to the instance. Comments have a timeline and can be sorted by creation date. The comments can be extended to add audit information such as functional change information or activities related to the instance.\nThese entity features should be defined as a set of mixin interfaces.\nInternal Object Identifiers oid The object identifier oid uniquely identifies an instance of a specific type or belonging to a specific type hierarchy.\nThis identifier shall be a numerical value to increase the performance of persistent solutions. It is used as an internal identifier in the application.\nIt should never be visible outside the system or published through an API.\nIdeally, the identifier is universally valid and uniquely identifies an instance in all contexts. For example, the concept of UUID tries to provide such an identifier. The drawback is that the UUID is not a numerical value and cumbersome for a developer or a user to memorize.\nAn interesting approach is to support unique identifiers in the context of a bounded domain. All entities of the domain will have unique object identifier.\nThe implementation can use a sequence from the domain database or schema. A programmatic identity generator can also be established in the domain.\nBecause the oid is never exported, the solution is powerful and simple to realize.\nHistory has taught developers not to spare on the size of identifiers. Please use a long value meaning 64 bits.\nAvoid using the internal identifier to communicate with external systems.\nIf you respect this rule, you are free to migrate your objects to another identification scheme in the future. New schemes are often helpful when the application grows, or you have later to import and take over a lot of legacy data.\nExternal Object Identifiers id The external unique identifier id shall uniquely identify an entity instance. It is used as an external identifier to communicate with other systems. It should always be visible outside the system and is used in any public API.\nTry to have exactly one external identifier per object to communicate with external systems. This restriction is a corollary of the rule stating an instance is owned by exactly one system. This system is the one defining and managing the external unique identifiers for the related instances.\nYou should clearly define the owning system for the external identification scheme. This information shall be documented and accessible to all involved parties. This process is part of the enterprise architecture activities of your ecosystem.\nExternal identifier ownership is often a murky situation when working with legacy systems. You often have multiple sources of external identifiers, sometimes overlapping and sometimes not covering all instances. You have to formulate a long-term strategy to clean up your landscape and handle the problems until these clean-up activities are completed. By handling, we mean administrative and import rules matching the various external identifiers to the same object.\nOne possible solution is to use tags. Store externally defined identifiers as tags. Document these tags as specific for the external system. This approach scales to multiple external identifiers, and multiple systems managing the same external identifier. So you have a scalable approach and do not pollute your domain model with spurious information defined in external systems. Upon completion of the refactoring activities, these tags document historical information and could safely be removed.\nMultiple external object identifiers imply the existence of mapping functions to identify the object referenced. Because the ownership of external identifiers is outside your system, you are dependent on these systems and have to hope they are good citizens. The key rule of good systems is that they never change external identifiers. As soon as you modify identifiers, they are per definition no more real identifiers.\nNames name The entity name is a human-readable name to distinguish between entity instances. Ideally, it should be almost unique. The fallback is to use the external unique identifier id known to all external systems. The drawback is that we have no guarantee it is legible for users. Names are essential for well-designed user interfaces. Never require from your users memorizing external identifiers, please provide names.\nFor example, the first and last names of a person is the name for a natural entity. Social security number is a possible external identifier An internal identifier is used as a primary key in the persistence storage.\nAdvices Internal object identifiers are identifiers. An identifier is immutable and should be numerical for performance reasons.\nExternal object identifiers have exactly one application in charge to create them.\nNames are human-readable and improve the legibility and usability of the user interface and reports.\nExternal identifiers can be tricky. In Switzerland, we had an old social security number, which is still referenced in a lot of legal systems. For example, it is still part of your tax salary yearly form. This is the reason I strongly advocate internal identifiers. You have no control over external systems providing accepted external identifiers.\nIdentifiers are a key element to model entities using the domain driven design DDD approach.\nWe have a new social security number, which is used in social insurance workflows. The same number is also used in medical insurance workflows.\nWe also have a federal identity card number, a federal passport number, a federal driver’s license number. Additional used identifiers are medical card insurance numbers, a state tax personal identification number.\nAll these external identifiers shall reference the same natural person.\nMore interesting is that a tourist living in the European zone has none of these numbers.\nPlease implement the internal identifier feature as an interface marker. The external identifier and name features can be grouped into one interface.\nAdditional information is available under models. Below the source code in modern Java is:\npublic interface HasOid { long oid(); } public interface HasId extends HasOid { String id(); void id(String id); String name(); void name(String name); } We provide a Java library core implementing these constructs. More information is available under tangly open source components.\nExtensions See our blog how to extend the entity concept with the powerful and flexible concepts of tags and comment approaches.\nAnother blog shows a constrained form of tags using the concept of reference codes also called reference tables or lookup tables.\nRelated concepts are discussed in our blog series\nEntities, Identifiers, External identifiers and Names Marcel Baumann. 2020.\nThe power of Tags and Comments Marcel Baumann. 2020.\nReference Codes Marcel Baumann. 2020.\nValue Objects as Embedded Entities Marcel Baumann. 2021.\nMeaningful Identifiers Marcel Baumann. 2021.\nReferences [1] S. Hofer and H. Schwentner, Domain Storytelling. Pearson Education, Limited, 2021 [Online]. Available: https://www.amazon.com/dp/B099ZNXCJT\n[2] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[3] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n","categories":"","description":"","excerpt":" A software architect models customer domains and maps them to powerful software abstractions [1]. Soon you correlate internal efficient identifiers, meaningful external identifiers, and domain …","ref":"/blog/2020/entities-identifiers-external-identifiers-and-names/","tags":["java","design","domain-driven-design","crm","series-identifiers"],"title":"Entities, Identifiers, External identifiers and Names"},{"body":" Our company has the ambition to digitize all our workflows since our inception. We proudly state we never bought a printer or a fax machine. Analog machines should become obsolete in the digital age.\nCompanies should be more environment-aware and save some trees. See our blog A Journey to Be a Digital Company.\nSwitzerland finally introduced a digital payment slip. It uses a QR code and still assume you need to print it.\nThe European Union is more innovative and mandates that invoices to government parties must be digital. Our company exchanges contracts and invoices with partners and customers using the standardized and well-known PDF format.\nIt is time to explore extensions to support the new legal requirements in Switzerland and in Europe.\nWe show open source based solutions, and the tradeoffs we had to accept. Beware our solutions are based on the Java stack.\nSwiss QR Code The Swiss QR-bill standard is based on a 2D barcode and associated human-readable text mirroring the data encoded in the barcode. The barcode approach assumes the invoice will be printed by the buyer. The interested parties have to scan the barcode to digitize the invoice information. This approach clearly breaks digitalization efforts.\nOur approach is to add the barcode to the PDF invoice document. The workflow can open the digitally received document and parse programmatically the image of the barcode. The generation of the invoice and associated barcode is fully digital.\nThis approach works well only if the issuer fills the so-called SWICO field of the QR code with needed information. For example, the due date of the invoice and the enumeration of different VAT tax percentages and corresponding VAT taxes are only stored in this field. In other words, the standard does not foresee that the due date of the invoice should be a mandatory field. Stated bluntly, the committee in charge of the standard realized they missed and stuck all missing elements in the so-called SWICO field. It is clear that it is impossible to define a digital payment workflow without information on such a due date, and the VAT percentages and amounts.\nThe library Swiss QR Bill is a mature and easy to use solution to read and to write legal Swiss QR codes. The library is under MIT license and is available for Java and .NET stacks. The code is under active development. The main developer is responsive to suggestions and trouble reports.\nZUGFeRD The ZUGFeRD is a German initiative to promote digital invoices in Germany and in Europe. The ZUGFeRD approach is to store the invoice data as an XML part in the PDF document of the invoice. The standard is also called Factur-X in France. It is compatible to the European B2G invoices standard, namely EN16931. It can also be used for B2B invoices.\nXML is not really a human-readable format. A JSON-based approach would have been more friendly. The advantage is that the standard contains all relevant information for an invoice and streamline the digital processing of invoices. You can easily define a workflow extracting and parsing the XML payload from all received invoices, and feeding the information to your ERP system for further processing.\nThe library Mustang ZUGFerD is a mature and usable solution to read and write digital ZUGFeRD invoices. The library is under Apache 2.0 license. The current version 2.1 of the standard is fully supported. ZUGFeRD additionally can transform a PDF/A-1 into a PDF/A-3 format.\nOther similar libraries are also available, but the ones we found have quite restrictive licenses.\nPDF Aspects The PDF format is universal known. Special variants such as PDF/A1 and PDF/A3 are defined for archiving purposes.\nThe Apache foundation hosts the library PDFBox. It provides all low-level functions to create, read and edit PDF documents. The library is naturally under Apache 2.0 license.\nBut no open source products are available for high-level functions. In particular, support for the creation of archive formats is non-existent. The famous iText library provides all these features, but sadly is no more open source.\nGhostscript provides command line support to transform a PDF document in a PDF/A version.\nThe online service pdftron provides free PDF translation to the archive format. The Scribus application support archive format export. The drawback is that these approaches are they require manual steps [1].\nThe Mustang library supports the transformation of a PDF/A1 to a PDF/A3 document. [2]\nApproach We decided to extend our open source library to create digital invoices. The extensions support the Swiss QR Code and the ZUGFeRD 2.1 standards. All the information is stored in one PDF document. This document is sent electronically to the customer.\nOur current approach is\n*Generate* AsciiDoc Invoice from our invoice model (Java source code) *Generate* PDF version of Invoice using AsciiDocPDF *Add* Swiss QR code as last page in the PDF invoice document *Add* ZUGFeRD XML payload in the PDF invoice document Currently, we do not generate PDF/A1 documents as required in the ZUGFeRD standard. PDFBox could provide the tool box to generate in this format, but it would be quite an endeavor. An extension to PDFBox with similar functionality to iText would ideally become available in the future. Otherwise, we have to write the missing code; in particular the embedding of fonts, pictures and files into the PDF document.\nWe selected the AsciiDoc format to provide a simple approach to custom templates for invoices. We avoided proprietary solutions based on Microsoft Office templates.\nFeel free to use our library and examples. They are released under Apache 2.0 license.\nLearnings The source code for the invoice component is available as a Java package. More information is available under tangly open source components.\nThe generator code for the Swiss QR bill and ZUGFeRD data is available as Java package. The developer was very supportive to improve the component. For example, it is now possible to write unit tests using in-memory file systems.\nThe Facture-X component also supports unit tests using in-memory file systems.\nNot all Java developers have realized that the Java class File should be deprecated. java.io.File instances always access the default file system.\njava.nio.Path instances contain the file system it should use and support in-memory file systems. Use java.nio.Files to create input streams, output streams, buffered readers, or buffered writers using path instances.\nThe investment to create the generators and test them against regular invoices of tangly llc was around four man-days.\nYou can find more information about how to digitize your company in a blog describing our journey to a digital company. We are quite proud no having any Microsoft Office our Outlook tools. Our whole toolchain is based on open source solutions and performs flawlessly since the foundation of our company.\n1. OnlyOffice also support PDF/A creation. They provide a free local installation package for Linux, macOS, and Windows 2. LibreOffice can open and manipulate PDF files. You can easily open a PDF file and export it as PDF from LibreOffice. The application supports exporting to PDF/A version 1b, 2b and 3b. It also supports PDF/UA. ","categories":"","description":"","excerpt":" Our company has the ambition to digitize all our workflows since our inception. We proudly state we never bought a printer or a fax machine. Analog machines should become obsolete in the digital age. …","ref":"/blog/2020/a-journey-implementing-digital-invoices/","tags":["java","design","crm"],"title":"A Journey Implementing Digital Invoices"},{"body":" In computer programming and software design, code refactoring is the process of restructuring existing computer code without changing its external behavior.\nRefactoring is intended to improve the design, structure, or implementation of the software (its non-functional attributes), while preserving its functionality.\nUsing refactoring, you can take bad design, even chaos software and rework it into well-designed code. Most often, it is cheaper to refactoring a legacy application instead of rewriting it from scratch.\nSimply put, refactoring is a way of decreasing Technical Debt.\nThere are two general categories of benefits to the activity of refactoring.\nMaintainability It is easier to fix bugs because the source code is easy to read and the intent of its author is easy to grasp. This might be achieved by reducing large monolithic routines into a set of individually concise, well-named, single-purpose methods. It might be achieved by moving a method to a more appropriate class, or by removing misleading comments.\nExtensibility It is easier to extend the capabilities of the application if it uses recognizable design patterns. It provides flexibility where none before May have existed.\nRefactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code. Yet the internal structure improves. It is a disciplined way to clean up code that minimizes the chances of introducing bugs. In essence, when you refactor, you are improving the design of the code after it has been written.\n— Martin Fowler Introduction For a developer, new to a legacy software solution, it is often hard to understand the existing application. He must determine the extent of source code and architectural decay, and identify smells and metric violations.\nLegacy applications are often critical to business and have been in use for years, sometimes decades. Since business is evolving, there is constant pressure to support additional requirements. However, changing these applications is difficult and you end up spending an increasing number of resources maintaining the software.\nThere are many reasons why maintaining legacy software is a difficult problem. Often, most, if not all, of the original developers are gone, and no one understands how the application is implemented. The technologies used in the application are no longer current, having been replaced by newer and more exciting technologies. Also, software complexity increases as it evolves over time as you add new requirements.\nThe key to managing the lifecycle of software is to continuously work as a professional and skilled developer. A professional engineer opportunistically refactor each time he modifies source code.\nUnderstand Your Product Understand how it is used. These scenarios define the acceptance tests you need to start creating a set of automated validation criteria. And you will better understand how your users are working with your product.\nUnderstand how it is deployed. You need a reproducible and in the long-run automated process to deploy a new version of your application. We are talking about continuous delivery and even continuous deployment.\nUnderstand how it is build. You need a reproducible and automated build process. This process must be integrated into your continuous integration and delivery pipeline.\nUnderstand how it is structured. You need a tentative architecture description to start refactoring and to untangle this big ball of mud into a more modular solution.\nRefactor Your Product Refactoring is always a successful activity. You cannot fail. But you need discipline, continuous involvement, and measurement.\nEach refactoring step is simple, even simplistic. Yet the cumulative effect of these small changes can radically improve the design.\n— Martin Fowler If you are new to refactoring, it is worth having a coach to smooth the learning curve.\nExtract one big service, refactor, test, and deploy. Iterate. If you are not successful, discard your failure and check out the current working version of git. You should have learnt enough so that the next try will be successful.\nRefactor code. Use static analysis tools to detect the flaws in your source code. You should only improve live code, meaning code you must correct or extend. See Agile Code is Clean Code. Use a modern IDE to automate the smaller refactoring steps, and avoid spurious errors.\nResolve design issues. Your senior design specialists already know the flaws. Now it is time to correct them.\nIncrease code coverage. Code coverage is the security net when you are refactoring code.\nSlowly add fitness functions to continuously validate your non-functional requirements.\nBeware of good practices how to write good software products and refactor successfully applications.\nMove to Domain Driven Design as an architecture approach. It works either for micro architecture or for modular monolith approaches.\nMaster long live domain driven design and event storming\nMaster your technical stack and use current tools and libraries.\nModularize one big service extraction one after the other Avoid using dead architectural techniques. TOGAF, UML, PMI, CMMI are obsolete - various activities they recommend are good, do them in your sprints. Avoid a lengthy, slow and expensive review approach.\nATAM is dead The quality tree technique is wonderful, use fitness functions to implement your quality tree.\nThe Architecture Tradeoff Analysis Method ATAM is hosted under the Carnage Mellon University CMU Software Engineering Institute SEI. The latest revision of the method was published in August 2000, almost a quarter of a century.\nThe approach relies heavily on human review activities. The execution of these tasks is expensive and slow. The time horizon of an ATAM review is between one and two weeks. The results are heavily document centric. No formal or programmatic validation of the findings is usually provided.\nThis process is too slow in the context of a DevOps or Scrum development approach. Agile product development wants to deliver updates with an hourly or daily rhythm.\nIf you are running legacy technology, this not only becomes a threat to your business but also to your hiring and employer branding efforts. As fewer and fewer programmers and operation managers will have the knowledge of those systems, you will face a dwindling talent pool.\nAmeliorate Your Process Applications do not degrade to legacy or geriatric systems overnight. The organization and development group failed to work professionally over years before the product was ultimately doomed.\nBy continuously improving the design of code, we make it easier and easier to work with. This is in sharp contrast to what typically happens: little refactoring and a great deal of attention paid to expediently adding new features. If you get into the hygienic habit of refactoring continuously, you will find that it is easier to extend and maintain code.\n— Joshua Kerievsky Refactoring to Patterns You must establish a culture of professional software development. Professional software developers write code which is maintainable and legible. Only unprofessional organizations create legacy applications.\nEmbrace software craftsmanship. All your developers should have formal software development training and frequent training in new approaches and techniques. They consistently read books. Is it not that you expect from your physician or the pilot of the plane you are taking?\nAgile Architecture Series The agile architecture track contains the following blogs\nAgile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nWe also published our agile architecture course (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.\n","categories":"","description":"","excerpt":" In computer programming and software design, code refactoring is the process of restructuring existing computer code without changing its external behavior.\nRefactoring is intended to improve the …","ref":"/blog/2020/legacy-systems-refactoring/","tags":["design","series-agile-design"],"title":"Legacy Systems Refactoring"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/series-agile-design/","tags":"","title":"series-agile-design"},{"body":" Java 9 release introduced the concept of modules within the Java language. Java 9 was released in September 2017.\nUntil now, creating Java modules was quite cumbersome and Gradle did only offer limited support through external plugins.\nWith the release of Gradle 6.4 in May 2020, software developers can finally easily generate well-behaved Java modules. We had to wait almost three years for native support!\nSupport for modules is native in the Java plugin.\nYou only need to add one configuration line.\nStart using Java modules and have language support to enforce modularity in your product.\nJava Modules in Gradle 6.4 Gradle supports the Java module system with everything you need to compile, test and execute tests for Java modules. You can also build Javadoc.\nWhile there is some overlap with Gradle’s dependency management features, Java modules offer module boundaries that are enforced by the Java runtime. Modularity is enforced at the language level instead of coding conventions or using external tools such as ArchUnit.\nThe only thing you need to configure is module path inference for the Java plugins. [1]\njava { modularity.inferModulePath.set(true) } Then you just need to make sure you write a proper Java module by providing a module information file. An example of a module information file is\nmodule net.tangly.fsm { exports net.tangly.fsm; exports net.tangly.fsm.dsl; exports net.tangly.fsm.utilities; requires org.apache.logging.log4j; requires static org.jetbrains.annotations; } Java 14 in Gradle Java 14 was also released in Spring 2020. It is worth experimenting with the new preview features. The following configuration is needed in Gradle to compile, test, execute and generate JavaDoc when using Java 14 preview features.\ntasks.withType(JavaCompile) { options.encoding = 'UTF-8' options.fork = true options.incremental = true options.warnings = true options.deprecation = true options.compilerArgs += [\"-parameters\", \"--enable-preview\", \"-Xlint:unchecked\"] } tasks.withType(Test) { useJUnitPlatform() options { setExcludeTags(['integration', 'localTest'] as Set) } jvmArgs += \"--enable-preview\" maxParallelForks = 8 failFast = false } tasks.withType(Javadoc) { enabled = true javadoc.options { encoding(\"UTF-8\") addBooleanOption('-enable-preview', true) addStringOption('-release', '14') } } tasks.withType(JavaExec) { jvmArgs += '--enable-preview' } Beware that JaCoCo shall only release a version supporting code coverage for JDK 14 and, in particular record not before June 2020.\n1. Gradle 7.0 released in Spring 2021 transparently supports Java modules. If you use the java-library plugin, the support of Java modules is transparent. ","categories":"","description":"","excerpt":" Java 9 release introduced the concept of modules within the Java language. Java 9 was released in September 2017.\nUntil now, creating Java modules was quite cumbersome and Gradle did only offer …","ref":"/blog/2020/gradle-6.4-finally-supports-java-modules/","tags":["java","gradle"],"title":"Gradle 6.4 Finally Supports Java Modules"},{"body":" You are an experienced programmer. You master your primary technology stack and systematically write clean code.\nYour team recognized your merits and asked you to take ownership of whole packages in the application.\nYou are now responsible for creating or modifying a software component in your current application.\nThis is a design activity.\nHow can you create a good, legible, maintainable component architecture?\nHow can you validate your functional and non-functional requirements?\nYes, you are right. You are responsible for architecture decisions at component or subsystem level.\nBelow a set of tools to improve the quality of your design.\nDesign Approaches Patterns and Idioms The pattern movement was started last millennium. Very talented and experienced developers have documented how to solve common problems elegantly and effectively. Depending on the programming language, you are using different idioms are preferred.\nThe way to solve the same problem is different in Java, Scala, C++, Python or C#.\nYou should know all regular structural, behavioral and creational patterns [1]. Explore your programming language and discover how idioms and patterns have evolved between major releases. For example, lambda expressions and streams introduced in Java 8 - released Spring 2014 - completely transform the solution for regular business logic.\nRecords introduced in Java 14 - released Spring 2020 - have a huge impact on how your architecture deals with data transfer objects – DTO – and immutability [1].\nRead Open Source Code Stop inventing the wheel again and again. Avoid Not Invented Here syndrome. Your current problem was already solved multiple times. Explore open source solutions, read posts, study books. Select the most adequate solution and fill free to adapt and improve it.\nInstead of searching for a solution for days, post your question on an adequate forum or on Stack Overflow. Fill free to improve the suggested solutions.\nBecome more efficient and use the wisdom of all these developers accessible through the Internet. Always verify the quality and adequacy of their proposed solutions.\nJava Standard API Know your programming language and the huge associated standard libraries part of your technology stack. Wisdom is coded in this code. Standard patterns are implemented in almost all packages. Idioms are encoded everywhere.\nSee how Java deals with human and machine time with java.time package. Decades of trials and errors were needed to finally create a balanced and simple to use time abstractions. The author of Joda Time experimented years before he wrote the java time package – JSR 310 – introduced in Java 8. All these decisions and learning are encoded in this code.\nClean Architecture Clean Code You want to create a clean architecture [2] you are proud of. You must first write a clean code [3]. Clean architecture build up on clean code. Promote clean code in your agile team. Agile code is clean code.\nModern integrated development environments IDE provide static code analysis tools to detect smells in your source code. SonarLint is available for all major integrated development environments.\nUse these tools to steadily improve the quality of your code and remove well-known smells.\nDo not fall to the fallacy to draw beautiful and useless UML diagram and write thick Software Architecture Design documents.\nThe real architecture is hidden in the source code of your product. You still document all major Architectural Decisions.\nKnow Your Programming Language If you are developing in Java, you should use the current features of the programming language. For example, with Java 14, you have access to:\nTry with resources and closeable resources. This construct is an implementation of automatic resource management.\nImmutable collections.\nStreams, optionals, filters, and collectors.\nPredicates and functions to define lambda expressions.\nRecords and immutability for objects.\nPattern matching syntactic sugar as for instanceof operator.\nSwitch expressions and not only switch statements.\nText blocks to write legible multi-line text expression.\nAggressive Refactoring The entropy of the source code increases over time. Only continuous and aggressive refactoring mitigates the degenerescence of your application [4, 5, 6, 7]. Each time you correct an error or add a new functionality refactor your code. Remove smells, compiler warnings and migrate older code to use newer and better features of your programming language.\nAcceptance Test Driven Development Your users want a working application. Write acceptance tests insuring all relevant functions are tested through your continuous integration pipeline. You guarantee your users the application behaves as specified.\nTest Driven Development Testability and changeability of your application are architectural aspects. You must have a way to verify these non-functional requirements. Test driven development is a proven approach to fulfill these requirements and validate them continuously.\nContinuous Integration Continuous integration and delivery are the mechanisms to continuously validate and verify all functional and non-functional requirements are correctly implemented [8]. You guarantee your users and customers that any software delivery they get is compliant and correct.\nEach time you find a discrepancy, add a test validating the requirement behind this fault. The same error will never happen again.\nGood Practices Publish your components on a central repository such as Maven Central. Your users have easy and standardized access to your components and their latest version.\nBuild tools such as Gradle Build Tool and Maven or IDE such as IntelliJ IDEA allows potential users to fetch the component without having to install out-of-the-box mechanisms.\nJavadoc is the standard and hugely helpful approach to document classes and component public interfaces in Java. Similar tools exist for other programming languages.\nArchitecture design records provide hints why specific design decisions were chosen. Your users can better understand the path you follow and the selected tradeoffs of your design. They do not have to agree, but they can understand the arguments why you choose so.\nStatic code generator is an actual good practice to provide the current documentation and tutorials for your components. We write all our documentation in the Asciidoc format - including plantUML and highlighted source code - and generate our website using Hugo tool suite.\nStart small and improve your approach every day.\nAgile Architecture Series The agile architecture track contains the following blogs\nAgile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nWe also published our agile architecture course (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.\nLinks Is Domain Driven Design Overrated?. Stefan Tilkov.2021.\nDDD is overrated. Stefan Tilkov. 2021.\nAgile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nReferences [1] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns. Addison-Wesley Professional, 1995 [Online]. Available: https://www.amazon.com/dp/B000SEIBB8\n[2] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[3] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[4] M. Fowler, Refactoring, First. Addision-Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B004PQQRK2\n[5] M. Fowler, Refactoring, Second. Addision-Wesley, 2018 [Online]. Available: https://www.amazon.com/dp/0134757599\n[6] J. Kerievsky, Refactoring to Patterns. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321213351\n[7] M. C. Feathers, Working Effectively with Legacy Code. Prentice Hall, 2004 [Online]. Available: https://www.amazon.com/dp/0131177052\n[8] D. Farley, Continuous Delivery Pipelines. 2021 [Online]. Available: https://www.amazon.com/dp/B096YGZVZ9\n1. Java 17 LTS added full support for algebraic data types. with the record and sealed concepts. ","categories":"","description":"","excerpt":" You are an experienced programmer. You master your primary technology stack and systematically write clean code.\nYour team recognized your merits and asked you to take ownership of whole packages in …","ref":"/blog/2020/agile-component-design/","tags":["agile","design","java","series-agile-design"],"title":"Agile Component Design"},{"body":" We need justification not to use immutable objects in our solutions, rather than an affirmative reason to use them. Records provide a first-class means for modeling data-only aggregates. They have been available in Java since the release of JDK 14.\nRecords are often seen as syntactic sugar to easily create immutable objects without having to write too much boilerplate code. Records as a clean definition of immutable objects can have a tremendous impact on your component design.\nYou as a designer have to reflect why your abstractions are not immutable and what is the rationale behind. From my experience, it improves the quality of your design.\nRecords guarantee:\nAn immutable class concept which is the strongest argument for the use of record.\nCannot change their state after construction.\nDon’t change the state of the whole system in any way.\nDo not do side effects, like inputs and outputs.\nRecords provide\nA set of boilerplate methods generated by the Java ecosystem. These methods are always semantically correct and efficient.\nA public constructor initializing all instance variables Getters for all instance variables. The name of the getters is PropertyType property(). We get rid of the cumbersome and outdated convention PropertyType getProperty() propagated by Java Beans.\nA semantic correct implementation of hashCode() and equals(). Your objects can be used in standard API collections without difficult to find bugs.\nA human-readable implementation toString().\nThe huge advantage of the approach against IDE code generation is the guaranty that these methods are semantically always correct.\nAdvantages The key benefits of immutable objects are:\nThread safety\nAtomicity of failure\nAbsence of hidden side effects\nProtection against null reference errors\nEase of caching\nPrevention of identity mutation - see contract for API standard collections -\nAvoidance of temporal coupling between methods\nSupport for referential transparency\nProtection from instantiating logically-invalid objects Protection from inadvertent corruption of existing objects.\nDesign Impact I updated my open source projects to use the record abstraction. What a surprise! I found regularly undocumented trade-offs why a class was not implemented as an immutable type. Quite often, I was just lazy and took a shortcut.\nRecords motivate you as a clean coder and designer to decide why a class should be mutable or not. This pressure had a tremendous impact on the quality of my subsystem design. The Java language guarantees that all record classes must be immutable.\nImmutable value objects are a cornerstone in the Domain Driven Design DDD approach.\nWhen you are using Data Transfer Objects, DTO they should probably always be records. In the long run, you should eliminate your DTO, they are just waste and break all the rules of abstraction and information hiding.\nTricks and Tips You can define a constructor extension to validate the passed arguments. This validation block is automatically inserted at the beginning of the generated constructor.\npublic record Range(int lo, int hi) { public Range { if (lo \u003e hi) { // referring here to the implicit constructor parameters throw new IllegalArgumentException(String.format(\"(%d,%d)\", lo, hi)); } } } if the record has more than a few instance variables, calling the constructor with various sets of default values can become cumbersome.\nTwo approaches easily mitigate this problem.\nCreate static factory methods taking care of default parameter values for simple situations. Look at the standard API List class and the set of static methods of.\nImplement the builder pattern to provide full flexibility to the consumers of your class.\nStart using the new concept of record in your source code and implicitly improve the quality of your design. At the same time, write less boilerplate code and enjoy coding.\n","categories":"","description":"","excerpt":" We need justification not to use immutable objects in our solutions, rather than an affirmative reason to use them. Records provide a first-class means for modeling data-only aggregates. They have …","ref":"/blog/2020/java-records-are-here-available-in-jdk-14/","tags":["java"],"title":"Java Records Are Here - Available in JDK 14"},{"body":" Most products are developed by a team, and these achievements are the fruit of teamwork.\nSoftware product development is now agile, and most often uses the Scrum approach.\nJust putting a bunch of people together in the same open office will not produce a high performance agile team. Quite a few companies find that out the hard way.\nHow can you increase the odds to create an environment where agile teams bloom and perform?\nAttitude versus Aptitudes Your business is nothing more than the collective energy and efforts of the people working with and for you.\nIf you want to make your business better, invest in your people. They’ll get the job done.\nLearn and pass on good development practices through pair programming, mob programming and coding dojos. Promote Communities of Practice CoP.\nIt is not enough management to commit themselves to quality and productivity. They must know what it is they must do.\nSuch a responsibility cannot be delegated.\n— W. Edwards Deming You have hired good people. Train them to improve and perform better.\nContinuous Learning and Improvement CFO to CEO: “What happens if we invest in developing our people, and they leave us?”\nCEO to CFO: “What happens if we don’t, and they stay?”\n— Peter Baeklund Secure collective knowledge of the code through code reviews, pair collaboration or collective work. Avoid any developer working solely on his own on a specific piece of code. Crafting successful software applications is teamwork. Encourage your collaborators to write blogs and ask questions in forums such as Stack Overflow.\nEstablish together development standards and keep them up to date. Nurture these good practices through Communities of Practice CoP.\nRely on tools such as continuous integration, static metrics and architecture fitness functions to shorten the feedback loop. See our post about pragmatic software craftsmanship.\nEstablish a culture to use current versions of programming languages, tools and libraries.\nOn a previous project, we had planned a coding dojo ritual once every two weeks, during which we shared our practices with some perspective over the product. It was an occasion to experiment with new technologies, assess their match for the project needs, share new coding techniques, and update our standards together.\nFormal Training Professional software developers should have formal training in software development. You should expect from a person working forty hours a week for the next forty years to pursue a bachelor or a master degree in computer science.\nYou should expect regular certifications in the used technology stack or development approaches. A Scrum master two days training does not make somebody an expert. A specialist refusing to invest in a two-day training is probably not a member you want in a high-performing team.\nA professional engineer should read multiple technical books each year.\nLeadership Responsibilities Create psychological safety in the workplace.\nThe major responsibility of senior management is hire the best collaborators, retain and develop top collaborators, and respectfully off-board departing collaborators.\nHiring and on-boarding collaborators,\nNurturing and development of collaborators,\nOff-boarding of collaborators,\nMove collaborators to the learning zone and let them thrive.\nNurture a culture of learning through training on the job, learning from external sources – such as reading high-quality blogs – and formal education – such as bachelor or master courses, for example, agile architecture -.\nPlease reflect how you encourage continuous learning in your organization.\nTraining is always an investment and never a cost point. Look how you budget and account training activities. Are they really investment positions?\nAgile Architecture Series The agile architecture track contains the following blogs\nAgile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nWe also published our [agile-architecture] credited with 3 ECTS used for teaching computer science students at bachelor level at Swiss technical universities.\nLinks [1] https:/blog.tangly.net/ideas/learnings/lectures/[Agile Architecture Course]\n","categories":"","description":"","excerpt":" Most products are developed by a team, and these achievements are the fruit of teamwork.\nSoftware product development is now agile, and most often uses the Scrum approach.\nJust putting a bunch of …","ref":"/blog/2020/how-agile-collaborators-learn/","tags":["agile","series-agile-design"],"title":"How Agile Collaborators Learn"},{"body":" When eXtreme Programming first came out, one expectation it worked hard to set is who gets to make what calls on software projects.\nFor example, business has the right to know how long something is going to take and when it can expect things to be done.\nConversely, developers have the right to know what the priorities are, and to be able to do good work.\nTo that end, eXtreme Programming created the Customer and Development Team Bill of Rights.\nCustomer Bill of Rights You have the right\nTo an overall plan, to know what can be accomplished when and at what cost.\nTo get the most possible value out of every programming week.\nTo see progress in a running system, proven to work by passing repeatable tests that you specify.\nTo change your mind, to substitute functionality, and to change priorities without paying exorbitant costs.\nTo be informed of schedule changes, in time to choose how to reduce the scope to restore the original date.\nTo cancel at any time and be left with a useful working system reflecting investment to date.\nDeveloper Bill of Rights You have the right\nTo know what is needed, with clear declarations of priority.\nTo produce quality work at all times.\nTo ask for and receive help from peers, managers, and customers.\nTo make and update your own estimates.\nTo accept your responsibilities instead of having them assigned to you.\nCalibration You shall use the above bill of rights to evolve the cooperation between the development teams and the customers and improve the product value. See if:\nYour customer has an overall plan with scheduled functionalities and costs. Your development team can schedule changes and update the estimates.\nYour customer has at any time a running and tested application. Your development team always produces quality work.\nYour customer can cancel at any time the development initiative. Your development team receives help from peers, managers and customers.\nYour customer and the development team accept responsibilities.\nDysfunctions are easy to detect\nCustomers are not involved in the development initiative on a daily basis.\nThe development team does not pursue craftsmanship and quality.\nCustomers cannot cancel an initiative at any time, The development team cannot update their estimates.\nManagement force responsibilities upon collaborators.\nObserve your organization and start to improve. The above rules are here to detect and truly improve your organization toward building products, which delight the customers [1].\nLinks [1] Agile Bullshit\n","categories":"","description":"","excerpt":" When eXtreme Programming first came out, one expectation it worked hard to set is who gets to make what calls on software projects.\nFor example, business has the right to know how long something is …","ref":"/blog/2020/calibrate-your-agile-approach-bill-of-rights/","tags":["agile"],"title":"Calibrate Your Agile Approach: Bill of Rights"},{"body":" I long dreamed of working in a digital environment. I shall no longer print out a form, sign it by hand and use snake mail to deliver it to the receiving party. All company documents are stored electronically. I can search any artifacts by content and get a list of all interesting items in seconds.\nOur software service company is an ideal candidate to validate if this assumption is realistic.\nProfit is like the air we breathe. We need air to live, but we do not live to breathe.\n— Frederic Laloux What is Digital Working? You shall use digital tools and workflows to perform all your work related tasks. We want to increase interactions with our coworkers and remove any tedious activities.\nFax is dead. You do not need faxes in Europe. No more waiting at the fax machine,\nYou send your contracts electronically. You can sign them electronically. No more printing or paper archiving,\nYou send invoices electronically. No more printing,\nYou perform your accounting electronically and avoid any paper archive.\nYou coordinate with your team members with chat tools; not over the phone or with emails. No more answering long emails with a huge cc list and less business travel.\nAny document can collaboratively be edited online by multiple collaborators working distributively. No more calls to find the latest version of a document or to remind somebody to unlock the document. Or worse, finding out why your changes just disappeared,\nAny collaborator has access to all our assets. You monitor all software continuous integration and delivery pipelines from anywhere if authorized. The information is available with a regular notebook or on any mobile device.\nAnd you have a positive impact on the environment. Less traveling, less paper and less shipping. Embrace the digital age and be environment-aware.\nAll Activities and Processes are Digitized Internal Tools At tangly we use internally\nGoogle Business Apps and LibreOffice for office work, email, calendar, video conference and document sharing. All documents are stored in our product or company online drives.\nGoogle Business Apps administration console to manage our technical infrastructure such as workstations, mobile devices, DNS record.\nBitbucket and continuous integration, delivery and deployment pipelines for software development.\nTrello for activities management and our electronic Scrum or Kanban board. We use analog boards if the team members are collocated. We are trying to avoid JIRA. It would be just overkill for us.\nSlack is our preferred chat platform,\nBanana is our accounting solution.\nWe never had to buy or rent a printer, a landline or a fax machine since founding the company.\nExternal Tools We use an impressive set of tools to collaborate with our customers and partners\nGoogle email, calendar and meetup for communication,\nBitbucket and continuous integration, delivery and deployment pipelines for software development,\nMaven Central to distribute public binary software artifacts,\nSlack is our preferred chat platform,\nGoogle Groups for technical discussion,\nBlogger to publish articles to our community,\nLinkedIn for marketing,\nGPG and S/MIME to securely exchange confidential documentation or protect sensitive emails.\nAn impressive set of processes with governmental organizations can now be performed electronically in Switzerland\nVAT authority support declaration and payment electronically.\nCompany register in Switzerland gives access to all registered companies.\nSalary declarations and forms are generated electronically through government online tools.\nSwiss post office supports package tracking and delivery rescheduling online.\nSwiss social insurances such as pension fund, children’s allowance, military service, and unemployment insurance declaration and mutation are available online.\nTaxes declaration can be performed with a downloadable government application.\nPublic transportation company tickets can be bought online and delivered electronically on a collaborator’s mobile device.\nWhat is Working? We perform marketing and sales through online platforms and avoid any physical ads platform.\nWe communicate through our company’s online platform. We never use physical documents and minimize email usage.\nWe deliver all contractual documents electronically.\nWe deliver all invoices electronically.\nWe have our library and technical documentation as static websites, wikis, and electronic documents. We do not possess any paper books.\nOur archive is online. We do not possess a physical archive of documents or contractual documents and never bought or rented physical space for this purpose.\nWe never did own or rent any printer, land phone line or fax machine. The quality and speed of our Internet connect improve yearly. It is already above our keenest expectations.\nWhat is NOT Working? Surprisingly, most of the processes with private companies providing mandatory services cannot be done electronically due to obsolete information systems and cumbersome processes.\nAccident insurance (BU and NBU) still request declaration of incidents and communication over paper mail.\nPension fund insurance company provides a web portal but still sends some forms over paper mail.\nTax declaration must still be printed out and sent to the tax office of the state government.\nNone of the government solutions provide modern API. We still must manually input our data in their portals. The old interfaces they provide are only partially available through expensive commercial solutions. By old interfaces, we mean proprietary formats and proprietary file transfer solutions.\nFindings The last four years were a game changer. A lot of manual activities are now fully digitized and often automatized. We never had to buy a printer. The last year we seldom had to scan a paper document.\nThe partners still requesting paper interactions are some government agencies and some insurances. We observe a decrease of such physical interactions. Our partners are steady, if sometimes slowly, digitizing their workflows.\nSlowly, digital versions for invoices are emerging. This approach should allow automated payment workflows. Interestingly, private customers already have billing and e-payment solutions. Similar solutions for corporate customers are either not available or incredibly limited, cumbersome and expensive.\nThe next big step will be the emergence of API to integrate the steps in a workflow specific to the involved companies. For example, the technical part of the onboarding process for a new employee could be fully automated.\n","categories":"","description":"","excerpt":" I long dreamed of working in a digital environment. I shall no longer print out a form, sign it by hand and use snake mail to deliver it to the receiving party. All company documents are stored …","ref":"/blog/2019/a-journey-to-be-a-digital-company-tangly-llc/","tags":["organization","tangly"],"title":"A Journey to be a Digital Company - tangly llc"},{"body":" Your organization has decided to introduce agile at scale in all development departments or better in the whole company.\nYour Chief of Agility COA, Chief of Digitalization COD or Chief of Change COC was in an expensive training. After a few drinks, he has selected the appropriate framework for your company.\nWelcome to the club of companies introducing agile approaches and having no clues why they do it and how they could be successful.\nHere some hardly learnt truths worth knowing when starting such an endeavor.\nImposing Agile methods introduces a conflict with the values and principles that underlie Agile methods.\n— Martin Fowler Know Popular Scaling Approaches The scaling approaches I encounter at customer sites in Switzerland and Europe are\nSpotify Model was popularized by Henrik Kniberg. His YouTube videos are worth watching. The banking group ING adopted the approach and made it fashionable.\nScrum@Scale defined by Jeff Sutherland and Scrum Alliance. Henrik Kniberg has written an interesting article stating Spotify Model is a kind of Scrum@Scale.\nNexus defined by Ken Schwaber and Scrum.org [1].\nLeSS defined by Craig Larman and Bas Vodde. It is also supported by Scrum Alliance [2, 3, 4].\nSAFe 5.0 defined by the RUP aficionados and often trashed by Kniberg, Sutherland, Schwaber, Larmann and Vodde. It is also the most popular approach in quite a few countries. And I would never state it is the most successful.\nAdditional approaches exist, but I did not encounter them lately.\nDelay Scaling The key learning is\nDelay your Scaling. First Lean the ropes. Try to descale your processes.\nLearn the ropes with small agile teams applying Scrum, Kanban, eXtreme Programming or our own approach. Learn as much as you can through experiments before considering scaling. The invested capital in small experiments with small teams is tremendously cheaper than experimenting with company-wide approaches.\nBe gentle and kind to your professional teams. Scale once your agile teams are seasoned.\nIt takes time to learn and master Scrum and Kanban approaches.\nRecognize that technical agility constrains the organizational agility. Focus the first years on technical excellence, software craftsmanship and clean development.\nAll the above-mentioned methods emphasize the importance of technical excellence for durable success.\nSimplify your processes, roles, and structures. Reflect if you really need scaling.\nNow you are ready to experiment with scaling.\nUnderstand the Principles of Scaling Create a learning organization. It is the building block for agile approaches\nTrain your collaborators.\nExperiment with new approaches and measure success.\nOrganize around up to eight teams, one backlog for one product.\nAvoid team backlogs.\nHave one product owner in charge of the whole product.\nPull, do not push.\nCollaborators and teams select workload.\nAll information is available to all collaborators.\nDevOps is king.\nAutomate aggressively.\nPut all artifacts under version control.\nFocus on outcomes and impact, not on outputs.\nCustomer features are product only when used by users.\nVelocity and burn-down charts are output.\nAvoid Common Errors Study the history and evolution of the various scaling approaches. In particular the changes in SAFe are an archaeological treasury what they wrongly stated and how they corrected some identified flaws.\nContinuous delivery is the new approach. Eliminate hardening iterations, integration phases, milestones when software should be integrated. Your teams shall deliver workable software on demand, multiple times a week or a day.\nOrganize around products. Customers buy products. Eliminate product based organizations. *Have one backlog for the whole product. Multiple backlogs must be otherwise synchronized and local optimization is de facto applied. This approach is against all lean principles.\nCustomer and users talk directly with the development team. Product owners, product managers and enterprise architects should never be filtering the information flow between customers and engineers.\nEliminate step by step all coordination roles. Emphasize communication between developers in the team and between teams. Scrum of Scrums where only Scrum masters attend, Release Train Engineer, System teams, corporate Solution Engineers are just a waste of resources.\nRealize technical excellence is the only approach to delivering quality products to the customer. Raise the importance of technical excellence, and never forget that when writing software, the technology side is really vital.\nFinal Words Establish agile teams. Thin your process. Choose your scaling approach. Try it and measure the impact. Iterate and improve continuously. Therefore, it could be necessary to change your initial scaling approach and adapt it to your company needs.\nI wish you successful scaling of agile approaches. And I have to warn you the path to success is long and risky. Personally I had some successes with Large Scale Scrum - LeSS.\nReferences [1] K. Bittner, The Nexus framework for scaling scrum. 2018 [Online]. Available: https://www.amazon.com/dp/0134682661\n[2] C. Larman, Scaling lean \u0026 agile development. Addison-Wesley, 2008 [Online]. Available: https://www.amazon.com/dp/0321480961\n[3] C. Larman, Large-scale scrum. 2017 [Online]. Available: https://www.amazon.com/dp/0321985710\n[4] C. Larman, Practices for scaling lean \u0026 agile development. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321636406\n","categories":"","description":"","excerpt":" Your organization has decided to introduce agile at scale in all development departments or better in the whole company.\nYour Chief of Agility COA, Chief of Digitalization COD or Chief of Change COC …","ref":"/blog/2019/agile-@-scale/","tags":["agile"],"title":"Agile @ Scale"},{"body":" Are you still using Java 8 to run your mission-critical systems?\nAre you truly using daily a six years old technology stack?\nAre you already applying for a Java laggard club membership?\nIf you are still using Java 8, you are using technologies released in Spring 2014. You are missing all the improvements in the garbage collector, runtime engine, and various APIs.\nJava 11 LTS was released in September 2018. The current LTS release is one year old. You had one year to migrate to this long-term solution version.\nIt is time to modernize the fundament of your application and invest a small amount of effort in it. The payback is fantastic.\nAdvantages You have economic gains through\nMajor performance improvements make your application faster. You have either higher customer satisfaction or need less processing resources.\nMajor garbage collector updates make your application more predictable. The maximum amount of memory is often lower.\nBetter behavior in container environment translates to less resource usage.\nYou have more legible and maintainable source code.\nSince Java 8, useful new language features have been introduced, along with new tooling.\nVarious standard APIs were extended with convenience methods.\nOne important change was that internal APIs - largely those classes in packages that started with sun.misc.* - were hidden from use.\nAPIs that are not core to the JDK have also been removed in Java 11 or later. These changes may impact your application, but there is a clear path to avoid these problems.\nYou have to select either the long term support path or upgrade every six months the Java runtime.\nWhen upgrading the choice you face is whether to use the latest version of Java, currently 13 and be prepared to upgrade every six months. Or upgrade to the latest LTS 11 to give yourself up to three years to think about your next upgrade,\nDon’t be tempted to ignore compiler warnings. Deprecation is being taken much more seriously in this modern Java world, and both Java 10 and Java 11 removed APIs.\nIn less than two years, the next LTS will be released with Java 17. It is scheduled for September 2021.\nBecome more agile\nOnce over this first upgrade, it is worth at least testing the application on the latest version of Java every 6 months, for example in CI.\nIn all cases, openJDK is now the new default. Various companies - Oracle, Redhat, Amazon, Azul, IBM - provide commercial support for openJDK for different timelines. You are more flexible with your migration timeline.\nHow to Migrate? You do not need to implement Java modules to migrate to Java 9 or beyond. It is worth the effort to slowly support the module approach. Your architecture will become more modular and the interfaces are more clearly defined.\nThere are basically four incremental phases to fully migrate to Java 11 or later:\nRun an existing Java application with the JDK.\nCompile the application with the JDK.\nUse the new features of the current JDK.\nModularize the application to use the module system.\nYou could recompile and run your solution with the new Java version without code changes.\nChanges are necessary if you use deprecated packages or access Sun internal packages. All deprecated packages have a compatible alternate implementation. Often you just need to update the import statements. Sun packages have a documented migration path to alternate approaches providing similar functionality. By the way, the Sun company already stated years ago, you should not use these internal packages. So it is time to clean up your code.\nCall for Action Start now your migration to a modern JDK and leave Java 8 behind you.\nAnyway, you can only tinker with the date, you will have to migrate at some point.\n","categories":"","description":"","excerpt":" Are you still using Java 8 to run your mission-critical systems?\nAre you truly using daily a six years old technology stack?\nAre you already applying for a Java laggard club membership?\nIf you are …","ref":"/blog/2019/time-to-migrate-to-a-modern-jdk-laggards/","tags":["java"],"title":"Time to Migrate to a Modern JDK, Laggards!"},{"body":" Agile approaches encourage common ownership of artifacts during product development. Historically, the commons is the term used for shared resources. Can we apply the commons learnings to agile and Scrum approaches?\nInterestingly, economists were kind to state common ownership is doomed to fail through the theory published at the end of the sixties [1].\nThirty years later, Elinor Ostrom showed that commons can indeed work well if you follow a small set of rules. She found century-old examples scattered around the world. She was awarded the Nobel Prize in economics for her findings in 2009 and dissipated the previous fake news.\nThe picture shows a Suone in Wallis, Switzerland. The constructions bring water to arid regions and are built and maintained by communities. It is an example of commons in place for hundreds of years and is one of the concrete implementations studied by Elinor. Mountain pastures are also managed as commons in Switzerland. You will find a drawing of Suone on the hundred Swiss Francs note.\nA resource arrangement that works in practice can work in theory. Elinor Ostrom identified eight design principles of stable local common pool resource management through the world. These principles have a wider range of applications than common resource pool groups. They are relevant to nearly any situation where people - such as Scrum teams - must cooperate and coordinate to achieve shared goals.\nBelow the eight principles are presented with a mapping to Scrum aspects.\nA clear definition of the contents of the common pool resource and effective exclusion of external unentitled parties The Scrum teams define the artifacts and processes exclusively owned by the team. Teams take ownership of items such as source code, Scrum board, pull process. Other items, such as a refactoring process, incident tickets produce more infighting. You can measure the maturity of your team accordingly to the clarity, which resources they own exclusively. The first step shall often be collective ownership of source code and common coding style.\nThe appropriation and provision of common resources that are adapted to local conditions Agile teams own commons resources such as * Collective ownership of source code, * Definition of Done DoD, * Sprint Backlog, * Coding Guidelines, * Team rules and work techniques.\nThe work techniques often limit common resources in inexperienced teams. They ask the product owner if they could refactor a class or invest a few minutes in clean code techniques. They do not own the internal quality of the product. More mature teams are able to make the transition with the support of their Scrum master and the organization. They truly own the source code and its quality.\nCollective-choice arrangements that allow most resource appropriators to participate in the decision-making process Scrum or LeSS have quite a few platforms to support the decision-making process\nDaily Scrum,\nRetrospective,\nReview,\nBacklog refinement,\nPlanning.\nThe decision-making process works only if the organization grants psychological security to their teams. In my experience, it takes years until an organization discards command and control reflexes and delegates responsibility and accountability to the Scrum team members.\nDaily Scrum events are often reporting meetings. The developers report either to the Scrum master, or the product owner, or a manager. The events are seldom a platform to collaborate, discuss options and experiment with variants.\nConsensus or consent approaches are widely more successful than majority decisions is one of the findings of Elinor.\nEffective monitoring by monitors who are part of or accountable to the appropriators You have to monitor your commons to know if they are healthy. You can\nPair program or review commits with pull requests.\nAutomate static metrics and test coverage.\nImplement continuous integration, delivery and deployment processes.\nTry zero bug policy.\nI regularly state monitoring is the first commitment of team members to be publicly accountable. Often it is painful to realize how difficult transparency is.\nA scale of graduated sanctions for resource appropriators who violate community rules Rules are only respected if sanctions are implemented upon violations of the agreement. Scrum teams can rule that\nYou must repair the broken build.\nYou must immediately correct your coding violations.\nYou lose your source code management system check-in rights.\nYou are excluded from the team.\nMost teams need counseling before they can tackle the concept of sanctions. As a Scrum master, you must gently empower them to sanction. If this rule is not implemented, you will always land in the tragedy of the commons and utterly fail in your agile journey. Worse, your product will probably also fail.\nMechanisms of conflict resolution that are cheap and of easy access Conflict resolution shall be fast, cheap, and timely. Scrum provides excellent approaches:\nAutomated checks on the source code and executable application,\nDaily Scrum,\nReview and retrospective.\nRegardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.\n— Project Retrospectives: A Handbook for Team Review Norm Kerth The automatic checks are worth the effort as an effective, neutral, and cost-effective to detect violations and automatically block the offender. The Scrum events are platforms to discuss and resolve the discovered violations. The Scrum master must facilitate the discussion until the team members have developed their own conflict resolution instruments.\nSelf-determination of the community recognized by higher-level authorities Self-determination works only if recognized by the overall authorities and organization. Here we leave the team level and need department recognition - for a LeSS approach - or company level recognition - for example to have ownership to remove a team member -.\nSelf-organizing of the Scrum team,\nOwnership of internal quality,\nOwnership of estimations.\nScrum master shall coach and counsel the organization and the team. It takes time until management understands the dependencies between delegation, accountability, ownership, and autonomy. You shall remember Larman’s Laws\nCulture follows structure.\n— Craig Larman You will as a change agent change together with leaders the structure of your organization. Please be gentle and patient.\nIn the case of larger common-pool resources, organization isin the form of multiple layers of nested enterprises. Small local CPRs at the base level.\nScaling agile practices at the organization level requires multiple levels.\nTransparency through Scrum board,\nDefinition of Dome as a contract between a team and their organization,\nVisibility of source code, continuous integration, delivery and deployment of artifacts,\nScale to product level using LeSS.\nIf you are ready to scale up to the company you could consider Beyond Budgeting Round Table. BBRT and Sociocracy approaches and tailor them to your specific needs.\nI rediscovered the commons rules through a presentation of Craig Larmann at the LeSS conference 2019 in Munich. He inspired us to look at agile approaches through the commons' lens.\nLinks [1] Tragedy of Commons or Self-Management. Ran Nyman. 2020\n","categories":"","description":"","excerpt":" Agile approaches encourage common ownership of artifacts during product development. Historically, the commons is the term used for shared resources. Can we apply the commons learnings to agile and …","ref":"/blog/2019/a-commons-view-on-scrum/","tags":["agile"],"title":"A Commons View on Scrum"},{"body":" You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks.\nAgile architecture is a key element to improve the quality of your solution and reduce the overall cycle-time of your product delivery.\nYour journey toward greater business agility starts by identifying what outcomes are most important to your company’s success. Outcomes are codified in functional and non-functional requirements your product shall fulfill. A key component is to find out how to create a great resilient architecture within the Scrum framework.\nWhat Is Agile Architecture? An agile architecture shall have four characteristics.\nAllow change quickly because we cannot foresee the future.\nAlways verifiable because we want changes without impeding integrity.\nSupport rapid development because we want effective and efficient implementation of new features.\nAlways working because we want continuous deployment to have customers' feedback -.\nThese characteristics are essential for successful agile development of great software products.\nWhat Is The Scrum Approach? Scrum and the Scrum Guide are silent on how architecture activities are performed during sprints. We can use the Scrum values, the Scrum Guide and the Agile Manifesto Principles to infer approaches.\nThe architect shall be part of the Scrum development team. This is the most embedded way that an architect would fit into a Scrum team. It may not even be an individual who has the title of an architect. The big idea behind Scrum teams is that team members have different skills. Their roles may change to deliver what is required for a particular sprint.\nSo it could be that senior developers within the team got architecture skills. They are in the best position, or have the best knowledge, to make those architectural decisions. Those team members with architectural skills are involved in the sprint on a day-to-day basis. They attend the daily Scrum meetings, take items off the backlog, and work on them.\nInterestingly LeSS is more opinionated and describe Successful Approaches for agile architecture and design.\nHow Do You Perform Agile Design? Scrum is quite silent about technical practices. The Scrum fathers and community strongly emphasize adopting eXtreme Programming practices. For bigger systems use the good practices described in LeSS.\nAn actual exceptional practice is to use Event Storming and Domain Driven Design DDD to model the application domain and partition the system.\nUse fitness functions to monitor and validate all non-functional requirements.\nThe well-established practices from the object-oriented and DevOps communities are:\nDevelop very early a working skeleton.\nClean architecture implies clean code and requires clean coders in your team. See our post Clean Code,\nAggressive refactoring and understand technical debt, Continuous integration, continuous delivery, and continuous deployment.\nFor a detailed discussion, consult the post Pragmatic Craftsmanship.\nWhat is the Architect’s Role? The architect shall\nBe part of the team, work daily with team members and attend all team events.\nMaintain the pace of development.\nOften Communicate and early as a coach and mentor - meaning pair programming and design sessions -.\nBe fluent in domain-driven development, hexagonal architecture, refactoring, and clean code.\nUse architecture design record ADR and light documentation to describe architecture decisions - meaning no lengthy Software Architecture Document SAD or overwhelming UML models -.\nBe a master programmer and write code in the application technological stack. He writes actual source code as current good practices are.\nHave rich knowledge of architecture and design.\nWe have mentioned refactoring, which is how we evolve an ever-improving design and architecture while building the product incrementally. To do that, we need to know the difference between good architecture and design and not-so-good. We need a rich pool of architecture and design options in our bag of tricks, ranging from elementary options to the more complex and rich options that we may need as the system grows. One never knows too much about the quality of architecture, code, and design. One does, of course, need to apply that knowledge smoothly, incrementally, little by little.\nAgile Architecture Series The agile architecture track contains the following blogs\nAgile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nWe also published our agile architecture course (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.\n","categories":"","description":"","excerpt":" You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks.\nAgile architecture is a key element to …","ref":"/blog/2019/agile-architecture-within-scrum/","tags":["agile","architecture","series-agile-design"],"title":"Agile Architecture within Scrum"},{"body":" The world has really improved in a lot of areas.\n_Stop whining we are doomed.\nAnd yes, we must act strong and fast to tackle the climate change disaster._\nDo not forget how much the world bettered the last centuries.\nWe are not doomed, we must solve the next challenges instead of just complaining and doing nothing.\nAsk yourself if you need a car.\nTravel by train instead of flying.\nSchedule a video conference instead of a business trip.\nReduce your plastic and paper usage.\nEach step reduces your carbon footprint.\nMillions of people taking similar steps will be a huge improvement. Just do it!\nThe late Swedish academic Hans Rosling has identified a worrying trend. Not only do many people across advanced economies have no idea that the world is becoming a much better place, but they actually even think the opposite. This is no wonder when the news focuses on reporting catastrophes, terrorist attacks, wars and famines.\nWho wants to hear about the fact that every day some 200'000 people around the world are lifted above the $2-a-day poverty line?\nOr that more than 300'000 people a day get access to electricity and clean water for the first time every day?\nThese stories of people in low-income countries simply do not make for exciting news coverage.\nI am proud to be an engineer. Engineering is about models. How objects and energy are acting in the universe. Engineers are well-aware that facts and empiricism validate our assumptions about the world.\nIt is strange and disturbing to meet people who have opinions and do not want to talk about facts. Often they grind out sentences to avoid talking about facts.\nExamples are flat-earther believers, vaccination opponents, or wireless opponents.\nBy the way do you know that Edward Jenner is considered the founder of vaccinology in the West in 1796. After he inoculated a 13 year-old-boy with vaccinia virus cowpox, and demonstrated immunity to smallpox. In 1798, the first smallpox vaccine was developed.\nWhat is better? Extreme poverty is plumping down https://ourworldindata.org/extreme-poverty\nLiteracy and education is exploding https://ourworldindata.org/literacy\nHealth is improving and child mortality is crashing https://ourworldindata.org/life-expectancy\nPlease stop the doomsday trashing and start to act to improve your social environment and diminish your solution footprint. I am tired of hearing we cannot improve our world. Stop lying and simply look at the facts. Feel free to argument based on facts.\nI recognize that we have difficult problems to solve and success is not guaranteed. I am just tired of negative thinking and persons claiming we cannot improve our world.\nStart learning and explore the data on Our World In Data. They have a lot of interactive charts.\nLinks Why the World Is Getting Better And Why Hardly Anyone Knows It\nSeven Reasons the World is Improving\n23 charts and maps that show the world is getting much, much better\nResearch and interactive data visualizations to understand the world’s largest problems\nWhat do the people of the world die from?\nThe beautiful book from Hans Rosling is worth studying.\nFactfulness: Ten Reasons We are Wrong about the World - and Why Things Are Better Than You Think, Hans Rosling\n","categories":"","description":"","excerpt":" The world has really improved in a lot of areas.\n_Stop whining we are doomed.\nAnd yes, we must act strong and fast to tackle the climate change disaster._\nDo not forget how much the world bettered …","ref":"/blog/2019/the-world-is-a-better-place-and-we-must-tackle-climate-change/","tags":["organization"],"title":"The World is a Better Place and We Must Tackle Climate Change"},{"body":" You are applying the agile, lean approach to your software product development.\nYour teams use Scrum or Kanban to deliver running software every two weeks.\nTo create an agile architecture, you must write agile worthy code. Agile code is always clean code.\nStart early, do it continuously and soon your code will be clean, legible and free of defects.\nArchitecture versus Code Be honest. Having a huge class with thousands of lines of code plainly demonstrates that your organization worked unprofessionally over months in the past. Such monsters are not born over one-night coding session. It takes time and incompetence to create such maintenance nightmares.\nAs long as your product contains such code monsters, it is worthless to pretend to have a nice and thought through architecture.\nTeam discipline and early warning systems are the keys to avoid such blunders and kill the monster in the egg.\nClean Code and Refactoring The clean code test-driven development TDD approach to write code was defined last millennium. Professional developers adopted this approach to deliver high quality, legible and maintainable code artifacts.\nRed Write a test and run it, validating the test harness.\nGreen Write the minimum amount of code to implement the functionality validated in the previously developed test. Update the code and run the tests until the test suite shows successful execution.\nRefactor The code to reach a clean code level. Continuously run the tests for guaranteed compliant changes.\nIf you are a Java developer, you will\nUse JUnit 5 and Mockito 2 to implement the first step.\nUse a powerful IDE such an IntelliJ IDEA to write and enhance the functional code.\nUse tools such as SonarLint, Jacoco, Spotbugs, ArchUnit to refactor your functional code and test cases. Clean code applies to productive and test code.\nThe described approach is a good practice since the beginning of this millennium. All above-mentioned tools are open source and free to use. Your organization has no excuse to write crap code.\nJust write well engineered, legible and maintainable source code. It is a matter of discipline. It is also a prerequisite to agile architecture.\nAcceptance Test Driven Development How do you know what are the requirements of a specific feature? Either write a huge amount of outdated documentation or find a better way. The better way is acceptance test driven development ATDD.\nFor each feature, you need acceptance criteria; this approach is also called specification by example [1]. For each acceptance criteria, write an acceptance test which is executed each time the application is updated in the continuous delivery pipeline. The acceptance tests are the living documentation describing the behavior of your product.\nTo implement this approach you need\nAcceptance criteria which imply using specifications by example techniques. You need to train your business analysts and product owners.\nCucumber for Java (or equivalent tools) - to write acceptance tests, Mock all external systems including the database. You want to have a fast build and test time and avoid external dependencies.\nA continuous build and delivery pipeline to automatically run your acceptance validation tests upon each application change,\nAvoid user interface tests; they are slow and brittle.\nUse an in-memory database only if you have to. They are a fast solution to write acceptance tests but are intrinsically slower than mocks.\nCode Sociology The most simple engineering practices are the most powerful. Practice consolidates changes in the behavior of your development organization.\nPair Programming - is a training on the job and crowd wisdom approach to steadily improving knowledge and quality -.\nTDD and ATDD - are a safety net to guaranty quality attributes in your source code.\nDevOps starting with git, docker, continuous integration, delivery and deployment - to speed up development and eliminate tedious manual errors.\nLack of accountability equates to lack of trust - your teams are accountable for the quality of your product. You should trust them.\nOnce good practices are established, you can move to more sophisticated tools - such as git history code analysis - to uncover weaknesses in your development department.\nTeams ready to learn from the like of Google could evaluate Trunk-Based Development and consider long-lived branches as waste.\nCode Review A code review can be done in different ways. Many teams use GitHub, Bitbucket or refhttps://gitlab.com/[GitLab]. A very common approach for our code reviews is using merge requests. However, there are situations where pull requests are not necessary. For example, if a feature is implemented in pair programming or mob programming, then the code is already reviewed while it is written.\nWe decided that it does not have to be reviewed again, but everybody may look at the commits later on in GitHub and add comments. A rule of thumb we agreed upon is that every line of code has to be approved by at least one other developer before it is pushed into our master branch.\nPull Requests in Trunk-Based Development The approach is different when using trunk-based development. Since we want to merge our commits into the master branch as quickly as possible, we cannot wait until the complete feature is finished. Unlike in the original trunk-based development approach, we still use feature branches, but we have much less divergence from the master branch than in Git Flow. We create a pull request as soon as the first commit is pushed into the feature branch. Of course, that requires that no commit breaks anything or causes tests to fail. Remember that unfinished features can always be disabled with feature toggles.\nNow, with part of the new feature committed and the pull request created, another developer from the team can review it. In most cases, that does not happen immediately because the developers do not want to interrupt their work every time a team member pushes a commit. Instead, the code reviews are done when another developer is open for it. Meanwhile, the pull request might grow by a few commits.\nThe code is not always reviewed immediately after the commit. In most cases, it reaches the master branch much quicker than in Git Flow.\nAgile Architecture Series The agile architecture track contains the following blogs\nAgile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nWe also published our agile architecture course (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.\nReferences [1] G. Adzic, Bridging the Communication Gap. Neuri Limited, 2009 [Online]. Available: https://www.amazon.com/dp/B008YZ993W/\n","categories":"","description":"","excerpt":" You are applying the agile, lean approach to your software product development.\nYour teams use Scrum or Kanban to deliver running software every two weeks.\nTo create an agile architecture, you must …","ref":"/blog/2019/agile-code-is-clean-code/","tags":["agile","series-agile-design"],"title":"Agile Code is Clean Code!"},{"body":" You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks. The product market introduction is a success. You will successfully sell the solution for the next ten years.\nHow shall you define the software architecture of your product and ensure a long living and high-quality solution?\nThe experts tell you the design is emergent.\nWhat does it mean?\nLeSS Architecture Observations The following observations are true for any software product. It is irrelevant if developed using agile approaches or traditional older ones.\nThe sum of all source code artifacts is the true design blueprint or software architecture.\nThe real software architecture evolves (better or worse) every day of the product, as people do programming.\nThe real living architecture needs to be grown every day through acts of programming by master programmers.\nA software architect not being in touch with the evolving source code of the product is out of touch with reality.\nEvery programmer is some kind of architect — whether wanted or not. Every act of programming is some kind of architectural act — good or bad, small or large, intended or not.\nAgile architecture comes from the behavior of agile architecting\nHands-on master-programmer architects, a culture of excellence in code,\nVan emphasis on pair-programming coaching for high-quality code/design,\nAgile modeling design workshops,\nTest-driven development and refactoring,\nAnd other hands-on-the-code behaviors.\nQuality of Your Architecture You shall measure the quality of your design and produced software artifacts.\nStatic analysis tools to validate your source code,\nTest driven development to validate your design,\nAcceptance test driven development to validate your functional requirements,\nFitness functions to validate your non-functional requirements,\nPair programming to improve the produced artifacts through wisdom of the crowd,\nPair review and pull requests to validate your developers' work.\nThe above validation activities are backed through tools. But these tools can only detect non-quality and never provide a proof you achieved quality. Qualified and experienced engineers are your best guaranty to achieve and sustain high quality in architecture and software products.\nImplement the above measures to gather data and publish the actual state of your source code. You find further information in Code Scene as Crime Scene, SonarLint for the Impatient, and Pragmatic Craftsmanship articles.\nRead the LeSS architecture page for a comprehensive discussion of agile architecting.\nGood versus bad architecture A good architecture fulfills the specifications and is easy to change.\nIt shall emerge during the development and intentionally implement the known requirements.\nYour architects are talented developers and are full members of your Scrum teams.\nYour development teams\nare experts in the used programming language and stack.\nunderstand object-oriented, functional and rule-based programming.\nknow all major patterns and idioms of the used development stack.\npractice TDD, ATDD, clean code, refactoring, embrace CI/CD and DevOps,\nread source code from open source projects to learn better ways.\nknow SMART, INVEST, SOLID, KISS, YAGNI.\nhold weekly design workshops with huge whiteboards.\nuse domain driven design and event storming.\navoid BDUF.\nYou shall keep it simple, make it valuable, and build it piece by piece.\nThe above hints and practices shall empower your teams to practice successfully agile architecture and timely deliver delightful software solutions. Your organization shall train your collaborators, see also the Shu Ha Ri model. Smart money goes in training your collaborators.\nAgile Architecture Series The agile architecture track contains the following blogs\nAgile Architecture Principles Marcel Baumann. 2019.\nAgile Code is Clean Code! Marcel Baumann. 2019.\nAgile Architecture within Scrum Marcel Baumann. 2019.\nAgile Component Design Marcel Baumann. 2020.\nLegacy Systems Refactoring Marcel Baumann. 2020.\nHow Agile Collaborators Learn Marcel Baumann. 2020.\nWe also published our agile architecture course (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.\n","categories":"","description":"","excerpt":" You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks. The product market introduction is a …","ref":"/blog/2019/agile-architecture-principles/","tags":["agile","design","architecture","series-agile-design"],"title":"Agile Architecture Principles"},{"body":"The list of all architectural design record defined for the gleam component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the gleam component.\n","ref":"/docs/bdd/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the commons component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the commons component.\n","ref":"/docs/commons/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the core component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the core component.\n","ref":"/docs/core/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/agile/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/collaborators/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/crm/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/invoices/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/ledger/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/products/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/shared/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/domains/ui/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the finite state machine FSM component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the finite state machine FSM component.\n","ref":"/docs/fsm/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"The list of all architectural design record defined for the business component.\n","categories":"","description":"","excerpt":"The list of all architectural design record defined for the business component.\n","ref":"/docs/gleam/adr/","tags":"","title":"Architecture Design Record (ADR)"},{"body":"Examples of finite state machine generated documentation with different diagramming tools and with tabular description.\n","categories":"","description":"","excerpt":"Examples of finite state machine generated documentation with different diagramming tools and with tabular description.\n","ref":"/docs/fsm/examples/","tags":"","title":"FSM Documentation Examples"},{"body":" As a young developer, I loved Linux, compiled new kernels during evening sessions and struggled days to have the correct drivers for the graphic card and communication components of my notebook.\nI grew older and decided to enjoy my weekends, family and outdoor activities.\nAnd surely I shall have no virus, trojan and other evils in my workstation. So I went to macOS and Apple notebooks without regrets.\nGains The major gains using macOS are\nStill, no virus scanner is necessary, the speed-up during complex programming and development activities is tremendous.\nNo trouble when updating OS, updates are automatic, and often no new start is required, Unix command line and tools are available in the console. Homebrew provides all known and less-known utilities and programs available under Linux.\nMy previous MacBook is now six years old and still used as a development backup platform. The performance is still very good.\nMy preferred IDE IntelliJ IDEA works flawlessly on macOS.\nMy new MacBookPro is perfect for Java development, database integration and running multiple Docker images locally. The 32 GB RAM goes a long way to run multiple docker images and databases.\nNo virus scanner is still important. I was lately at a customer site. The whole deployment just crashed because IT department decided to update the virus scanner and associated options. Suddenly, the generated artifacts were considered harmful. This decision just broke the CI/CD pipeline for hours.\nHomebrew easily downloads and installs newer versions of favorite applications and utilities. It solved the dread of macOS slow or missing application updates. Pre-installed Unix utilities are seldom kept up to date by Apple. Just use Homebrew and forget about Apple slow updates.\nDaily Development The tools I really enjoy and use on a daily basis for software development - mainly Java - are\nIntelliJ IDEA IDE is still a dream. It could sometimes be slightly snappier but still the best Java IDE under the sky.\nUML diagrams are created with plantUML and the provided plugin.\nDocuments are written in Asciidoc with the existing plugin.\nGit is kept up to date with homebrew.\nGradle Build Tool is kept up to date either with homebrew or gradlew.\nAtlassian Cloud applications - BitBucket, Trello and CI pipeline - and SourceTree for some git operations.\nHomebrew as package manager for utilities.\nDocker as container manager - for complex product you can run locally kubernetes.\nChrome is my default browser. I almost never use _Safari or Firefox.\nI retired VirtualBox because I do not need any virtual machines. They were replaced with Docker images, I stopped using MacPorts. Homebrew is more than enough for my needs.\nDaily Work The tools I used to perform administrative work are\nLibreOffice is going stronger and better every year.\nGoogle Business for teamwork in the cloud using collaborative tools.\nApple Mail Client with GPG plugin for PGP and S/MIME secure email.\nA local Swiss article Banana for accounting and VAT reports for the federal government. I bought it as soon as the company stopped requesting higher prices for macOS than for the other platforms.\nI still have no need to use any Microsoft applications. My findings are inline with the ones in my older blog in March 2016. I hope Apple will still produce high-quality hardware and software in the future.\nThe only big macOS improvement I am waiting for from Apple is that Apple delegates the installation and update of Unix applications and utilities to Homebrew. Apple is sadly always behind the release cycle of regular Unix programs. Homebrew does a way better job to support software developers.\n","categories":"","description":"","excerpt":" As a young developer, I loved Linux, compiled new kernels during evening sessions and struggled days to have the correct drivers for the graphic card and communication components of my notebook.\nI …","ref":"/blog/2019/why-i-still-love-to-use-a-macbookpro-and-macos-in-2019/","tags":["organization"],"title":"Why I still love to use a MacBookPro and MacOS in 2019"},{"body":" You have a successful product and happy users. Slowly, the cost of adding new features is creeping up and product margins are shrinking. Which crimes did put us in this dreaded situation?\nHow can you analyze the history of your product’s source code?\nHow can you explore the social dimension of your product development? How can you find good approaches to increase time to market and improve development costs?\nThis article presents a set of tools you can use to better understand the alternatives and select the best approach for your product.\nOur approach is based on the de facto standard for source code version management git. If your development department is using another tool, you should consider moving to another company.\nFirst Steps We want to investigate various contexts in our source code history and identify suspects. A context can be a single file, a class, a package or a module.\nGather overall information concerning your repository . Use the optionals --before and --after to restrict the time range you are interested in.\ngit log --numstat --pretty=format:'[%h] %an %ad %s' --date=short --before='YYY-MM-DD' --after='YYYY-MM-DD' Find out which contexts are most often modified\ngit log --pretty=format: --name-only | sort | uniq -c | sort -rg | head -100 or find out which contexts with a specific extension are most often modified\ngit log --pretty=format: --name-only | sort | uniq -c | sort -rg | grep -I extension | head -100 Find out how many times a specific context was modified\ngit log -- contextPath --pretty=format:'%an' | grep 'Author' | sed -e 's/Author: \\(.*\\) \u003c\\(.*\\)/\\1/' | sort -rg | uniq -c | sort -rg Find out how many errors were fixed in a specific context – e.g., identified through close #TicketId -\ngit log -- contextPath | grep 'close #' | wc -l Deeper Insights Analysis of various products found out that 5% to 10% of the source code is under active development. It is where your money is spent to make your customers happy. Just put all your refactoring efforts to improve these 10% of your product currently impacting your customer satisfaction.\nTechnical debt reduction should always be prioritized to only these hotspots. Simply use the above-described approach to identify the most often changed files during a specific time interval.\nIdentify team and social metrics To understand team dynamics, you should group individual developers to their team. Simply replace the name of the team member with the team name at the command line using grep or sed. Now you can analyze the set of files the team mainly modifies and maintains. If none can be found, you have diffuse code ownership and will have quality issues.\nUsing the domain-driven design DDD terminology, bounded domains are developed and maintained through one team. This approach encourages architectural purity, continuous refactoring, and accountability.\nManage Off-boarding Risks Each time you find a set of source code artifacts only modified by a single individual, you have identified a major off-boarding risk. When this developer will leave the department or the company, all knowledge associated with the development and the maintenance of these components will immediately be lost.\nVisualize The above scripts provide information in textual forms. Over time, you will become more sophisticated with your inquiries and need better tools. Either visualize your findings with d3js or plotly.js or buy a commercial tool such as the code scene.\nAnother approach is to write a small framework to analyze the data and to implement more complex queries in your preferred environment.\nNext Steps The above techniques are part of the toolbox of professional development departments. Establish a software craftsmanship culture in your company. It helps you to avoid the invasion of gangs and eradicate crime in your neighborhood.\nFind similar ideas in our blogs Pragmatic Craftsmanship, SonarLint for the impatient, and You need an Engineering Culture.\nTwo books published in the pragmatic programmer’s series are a wonderful deep analysis of source code as a crime scene [1] and scanning your application source code [2].\nReferences [1] A. Tornhill, Your Code as a Crime Scene. O’Reilly Media [Online]. Available: https://www.amazon.com/dp/B00ZB5XWBI\n[2] A. Tornhill, Software Design X-Rays. Pragmatic Bookshelf [Online]. Available: https://www.amazon.com/dp/B07BVRLZ87\n","categories":"","description":"","excerpt":" You have a successful product and happy users. Slowly, the cost of adding new features is creeping up and product margins are shrinking. Which crimes did put us in this dreaded situation?\nHow can you …","ref":"/blog/2019/code-scene-as-crime-scene/","tags":["design"],"title":"Code Scene as Crime Scene"},{"body":" Agile approaches are not enough. You need a strong engineering culture to achieve quality and lasting success.\nOften, coaches and Scrum masters tinker with the processes and invest effort and blood to improve the ceremonies and the company structure.\nBut at the end of the day, the success of your application is defined by its adequacy to customer needs and its overall quality. You need a solid and professional engineering culture to produce high-quality products and release them at a high rate.\nIf not, you just release a new set of defects to your paying customers.\nHow do you establish and nurture a professional and effective engineering culture?\nLive and breathe Your Values Values drive your culture and the daily behavior of all your collaborators. But even if you have invested time and blood to identify the right values and put all the mechanisms in place, it might still not have the desired results. Culture is something that happens daily through personal interactions. Putting the right values and mechanisms in place will help move your company in the right direction, but it’s not a guaranty for success.\nTo increase your odds for success, you need to live and breathe your values. You need to truly believe at all levels in the organization and not compromise on them.\nAdvocate for build-in quality.\nSupport employees first.\nPromote technical excellence.\nDo not be penny wise and pound foolish.\nCommunicating Make sure that people know the values. It should be part of every on-boarding. It is one of the first things that new people need to learn. But also make sure to remind people as often as possible, e.g., in employee guidelines, during appraisals and town hall meetings.\nEat Your Own Dog Food People look up to you. They will imitate your behavior. So make sure that you and all members of the leadership team are the evangelists and provide at all times the right example.\nRead our blog post Pragmatic Craftsmanship for hints what a technical excellence culture should be.\nLearn from the LeSS] community.\nYou can find an initial list of questions in our blog post Company Culture Check.\nValidating Validate that all teams are living up to their values. Find a way to measure it. Identify and put actions in place in case you need to improve. If a value does not make sense, e.g., the value was defined early on, but in hindsight it doesn’t fit with your company, then get rid of it.\nLast Thoughts Building a great engineering culture is not something that you easily do. You cannot cheat. It will not automatically happen by copying the values and organization structure from another company such as Spotify. You need to really invest in creating a culture that works for your company.\nYou can look at organizational structures, values and principles from other companies to get inspired. Sit down with your people and decide together what is important for your company. Put mechanisms in place that will support the concepts, allow them to grow. Then live and breathe it within all levels of your company.\n","categories":"","description":"","excerpt":" Agile approaches are not enough. You need a strong engineering culture to achieve quality and lasting success.\nOften, coaches and Scrum masters tinker with the processes and invest effort and blood …","ref":"/blog/2019/you-need-an-engineering-culture/","tags":["agile","design"],"title":"You Need an Engineering Culture"},{"body":" You are developing your application using agile and lean approaches.\nHow can you check your approach and distill improvements?\nHealth check of your product and your development approach are certainly a good solution.\nThis post is the fourth and last of a set of articles identifying health checks with different focus.\nWe will identify strengths, potential weaknesses and hopefully find room for improvement.\nWhat is your company culture?\nHow are collaborators focused on delighting your customers?\nRules The patient solely decides if a health check shall be performed. The effort and depth of a health check are defined together with the patient. The findings are considered confidential.\nMany attempts at achieving business agility are misguided and fake. But I consider the glass half full, not half empty.\nFake Agile is a signal to do better. Fake agile is a treatable disorder.\n— Jurgen Appelo A short check with a feedback workshop presenting the insights requires around two work days. A deeper and more intensive check requests more effort, between one and four weeks.\nUpon completion, you can also hire a coach to implement selected findings and improve durably the health of your application. The findings are often clear and the measures are straightforward.\nThe real work is to implement consistently the measures.\nUnderstand how powerful daily small improvements can be. Small improvements accumulate earnings over time.\nI have the same personal challenge when trying to lose weight or improve my running form. The long term implementation is the crux.\nThe biggest flag to identifying a learning and improvement focused culture is perhaps this statement\nI get better and lasting improvements with organizations who invest in training their collaborators.\nNot only training on the job, but they send them to courses, exhibitions and buy them books.\nCompany Culture Checks A set of questions to detect cultural flaws for a lean and agile focused company are\nDo you still have individual bonuses?\nDoes the organization provide feedback to each employee at least on a monthly basis?\nHow complex is your travel expenses regulation?\nAre all C-level managers trained and certified in lean agile leadership and agile approaches?\nAre the human resources department collaborators trained in agile approaches and agile HR?\nAre all collaborators and managers working in the development organization trained in agile and lean approaches?\nAre all collaborators and managers working in the development organization trained in software development techniques?\nIs there a product charter that lays out the mission and strategic goals?\nDo all members of the team understand both, and are they able to see how their work contributes to both?\nDo you release your products at least once a month?\nDo software developers have local administrator rights on their workstation?\nCan software developers install tools and libraries on their workstation?\nHow is the working environment of your talented developers?\nDo they have a team area with a dedicated desk for each team member?\nDo they have multiple high-resolution displays to work with - high-resolution means 4K or higher -?\nDo they have root access - admin rights - to their development workstation?\nDo they have access to technical books and articles?\nDo they have a height-adjustable desk?\nDo they have big whiteboard and flip charts to work on in the team area?\nDo they have rooms to meet and work as a team in the vicinity and available?\nDo they use the best development tools of trade - and not only the basic and cheap version -?\nDo they have access to fast and stable continuous integration and deployment pipelines?\nDo they develop and document in English?\nCan you work on refactoring and clean code without a product backlog item or task?\nSimple Look-See A very powerful check is to reflect on the behavior of your managers. Ask yourself:\nDo your managers know the four most important sentences and practice them daily?\nSorry\nThank you\nI am sorry, or I am wrong\nCan I help you?\nPosts in the Health Check Series Source Code Check Marcel Baumann. 2018.\nDelivery Pipeline Check Marcel Baumann. 2018.\nProduct Strategy Check Marcel Baumann. 2018.\nCompany Culture Check Marcel Baumann. 2019.\n","categories":"","description":"","excerpt":" You are developing your application using agile and lean approaches.\nHow can you check your approach and distill improvements?\nHealth check of your product and your development approach are certainly …","ref":"/blog/2019/how-healthy-is-your-product-company-culture-check/","tags":["agile","series-how-healthy"],"title":"How Healthy is Your Product? - Company Culture Check"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/series-how-healthy/","tags":"","title":"series-how-healthy"},{"body":" The Defense Innovation Board DIB advises the secretary of defense of the United States of America.\nMembers of the board are recognizable names like Eric Schmidt who was CEO of Google and Alphabet, or Instagram COO Marne Levine.\nSo I was quite surprised that a government committee was so straightforward to publish a document called Detecting Agile Bullshit [1].\nSimple questions are used as a bullshit detector to identify organizations faking agile. Worth your time, if the government has this problem, you probably also encounter it in the private sector.\nLearn from yesterday, live for today, hope for tomorrow. The important thing is not to stop questioning.\n— Albert Einstein Identifying Fake Agile Organizations Agile development has become such a holy grail that some organizations or product teams wave the agile flag whether they are true believers or not.\nMany attempts at achieving business agility are misguided and fake. But I consider the glass half full, not half empty.\nFake Agile is a signal to do better. Fake agile is a treatable disorder.\n— Jurgen Appelo They throw around talk of sprints, stories and Scrum without meaning it. Signs of this behavior are\nIgnoring users Nobody in the software development team is talking with and observing the users of the software in action. We mean the actual users of the actual code.\nContinuous feedback from users to the development team such as bug reports or user assessments is not available. Talking once at the beginning of a program to verify requirements does not count!\nNot deploying early an initial product release Meeting requirements is treated as more important than getting something useful into the field as quickly as possible.\nDevelopment teams are silos instead of feature teams Participants act like it is not my job\nTechnical Excellence\nDevOps or DevSecOps culture is lacking if manual processes are tolerated. Such processes can and should be automated using e.g., automated testing, continuous integration, continuous delivery.\nDistributed version control management systems - Git - are not used.\nContinuous integration and delivery - Jenkins - are not used.\nModern deployment platforms - Docker, Kubernetes - are not used.\nQuestions to Ask Programming Teams How do you test your code? Wrong answer: “we have a testing organization responsible for testing”.\nWhat tool suite are you using for unit tests, regression testing, functional tests, security scans, and deployment certification?\nHow automated are your development, testing, security, and deployment pipelines?\nWhat tool suite are you using for continuous integration CI, continuous deployment CD, regression testing, program documentation?\nIs your infrastructure defined by code?\nWho are your users and how are you interacting with them?\nWhat mechanisms are you using to get direct feedback from your users?\nWhat tool suite are you using for issue reporting and tracking?\nHow do you allocate issues to programming teams?\nHow to you inform users that their issues are being addressed and/or have been resolved?\nWhat is your (current and future) cycle time for releases to your users?\nWhat software platforms do you support? Are you using containers? What configuration management tools do you use?\nFor a team working on agile, the answer to all of these questions should be a form of “yes”.\nQuestions for Program Management How many programmers are part of the organizations that own the budget and milestones for the program? Wrong answers: “we don’t know,” “zero,” “it depends on how you define a programmer”,\nWhat are your management metrics for development and operations; how are they used to inform priorities, detect problems?\nHow often are they accessed and used by leadership?\nWhat have you learned in your past three sprint cycles and what did you do about it? Wrong answers: “what’s a sprint cycle?,” “we are waiting to get approval from management”,\nWho are the users that you deliver value to each sprint cycle? Can we talk to them? Wrong answers: “we don’t directly deploy our code to users”.\nFor a team working on agile, the answer to all of these questions should be a form of “yes.”\nQuestions for Customers and Users How do you communicate with the developers?\nDid they observe your relevant teams working and ask questions that indicated a deep understanding of your needs?\nWhen is the last time they sat with you and talked about features you would like to see implemented?\nHow do you send in suggestions for new features or report issues or bugs in the code?\nWhat type of feedback do you get to your requests/reports?\nAre you ever asked to try prototypes of new software features and observed using them?\nWhat is the time it takes for a requested feature to show up in the application?\nFor a team working on agile, the answer to all of these questions should be a form of “yes”.\nQuestions for Program Leadership Are teams delivering working software to at least some subset of real users every iteration and gathering feedback?\nIs there a product charter that lays out the mission and strategic goals? Do all members of the team understand both, and are they able to see how their work contributes to both?\nIs feedback from users turned into concrete work items for sprint teams on timelines shorter than one month?\nAre teams empowered to change the requirements based on user feedback?\nAre teams empowered to change their process based on what they learn?\nIs the full ecosystem of your product agile? Agile programming teams followed by linear, bureaucratic deployment is a failure.\nFor a team to truly work the agile way, the answer to these questions should be a form of yes.\nConclusion The above questions are taken directly from the document Detecting Agile Bullshit. Evaluate organization to find out if they or you are agile.\nRead my related set of blogs How Healthy is Your Product?\nAdditional blogs for an in-depth check of your agile framework, values, and current work processes are:\nCode Scene As a Crime Scene\nDelivery Pipeline Check\nNow government procurement acknowledges that some companies are just cheating with their agile claims, improve yours before getting caught. Luckily, the check will find out you are really being agile instead of pretending.\nI wish good luck and success with your agile transformation.\nLinks [1] https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF\n","categories":"","description":"","excerpt":" The Defense Innovation Board DIB advises the secretary of defense of the United States of America.\nMembers of the board are recognizable names like Eric Schmidt who was CEO of Google and Alphabet, or …","ref":"/blog/2019/detecting-agile-bullshit/","tags":["agile"],"title":"Detecting Agile Bullshit"},{"body":" You are developing your product using agile and lean approaches.\nHow can you check your approach and distill improvements?\nHealth check of your product and your development approach are certainly a good solution.\nThis post is the third of a set of articles identifying health checks with different focus. We will identify strengths, potential weaknesses and hopefully find room for improvement.\nWhat is your product strategy? How do you involve your customers and stakeholders?\nRules The patient solely decides if a health check shall be performed. The effort and depth of a health check is defined together with the patient. The findings are considered confidential.\nA short check with a feedback workshop presenting the insights requires around two work days.\nA deeper and more intensive check requests more effort, between one and four weeks. Upon completion, you can also hire a coach to implement selected findings and improve durably the health of your application. The findings are often clear and the measures are straightforward. The real work is to implement consistently the measures.\nI have the same personal challenge when trying to lose weight or improve my running form. The long term implementation is the crux.\nProduct Strategy Checks Vision of the product You can communicate the vision on your product in an elevator pitch and have it hanging in the team workplace.\nRoadmap of the product You have a visible roadmap describing the major releases for the next 12 to 18 months. Define the right planning horizon for your article.\nRelease plan of the product You have a release plan for the next 6 to 9 months.\nStory map You have a story map grouping the stories and epics to reflect your release plan.\nCustomer involvement You have customer interaction in every sprint. Not only during the review event, but also during the planning meeting and architecture discussion.\nReview with customer involvement Realized stories are discussed during the review and demonstration meeting and timely feedback is provided to allow backlog refinement before the next planning meeting. A mature organization has acceptance criteria for each story and automated verification of the criteria at any time.\nEarly and regular delivery of a product increment You get feedback on the delivered and installed product increment. This goal is only achievable if your organization has implemented a delivery pipeline.\nRisk List You have a documented risk lists with description of risks, probability of occurrence and cost per event, and mitigation measures,\nSolution architecture You have an emergent solution architecture with a prototype and support the team to refine the architecture proposal and to implement it in the solution. Do not forget an agile product needs an agile architecture. See also the LeSS approach for creating an agile architecture.\nNon-functional requirements You have identified your non-functional requirements and constraints and have fitness measures in place. The measures guarantee the continuous achievement of the constraints - often defined as -ility requirements -.\nSee the Delivery Pipeline Check to enable your organization to provide realtime feedback on how well the above constraints are correctly implemented in the product.\nPosts in the Health Check Series Source Code Check Marcel Baumann. 2018.\nDelivery Pipeline Check Marcel Baumann. 2018.\nProduct Strategy Check Marcel Baumann. 2018.\nCompany Culture Check Marcel Baumann. 2019.\n","categories":"","description":"","excerpt":" You are developing your product using agile and lean approaches.\nHow can you check your approach and distill improvements?\nHealth check of your product and your development approach are certainly a …","ref":"/blog/2018/how-healthy-is-your-product-product-strategy-check/","tags":["agile","series-how-healthy"],"title":"How Healthy is Your Product? - Product Strategy Check"},{"body":" It is official.\nThe power engine of the SAFe 4.6 vehicle is the team and technical agility. View the SAFe for more information [1].\nIt is one of their five Lean Enterprise competencies and one of their four core values. SAFe finally recognizes the tremendous importance of technical proficiency and craftsmanship.\nThey advocate two findings. First, you need team agility, how you apply Scrum or Kanban.\nIn other words, being agile instead of doing agile. Second, you need technical agility, how you develop a quality product.\nI challenge you. If you are following SAFe, talk with your teams and checks how many of their official good practices are you using on a daily basis.\nI have seen SAFe introductions in Swiss, German and Czech companies. Attention was set on the structure of the release train. A lot of effort was spent on the various ceremonies, meetings and artifacts. But how to produce quality software and apply technical excellence was sadly always an afterthought. And more than once a senior SAFe coach just publicly stated that the SAFe core value x is not so important for a successful introduction. Quite a denial approach of his own methodology, I think!\nBe honest with yourself and your teams, either you implement the techniques described in Technical Agility and https:scaledagileframework.com/built-In-quality/[Build-In Quality] chapters of SAFe or you are not agile and have no SAFe power engine. It is called cargo cult.\nA good starting point is the five dimensions of build-in quality described in SAFe 4.6. And yes now SAFe acknowledged the tremendous importance of a https:scaledagileframework.com/continuous-delivery-pipeline/[continuous delivery pipeline]. Experts agree you can apply DevOps only if you have continuous integration, delivery, and deployment.\nOnce you realize where your organization stands remember that build-in quality is one of tour core values of SAFe. That I mean is walk the talk.\nAnd please read some Internet blogs and books about LeSS, Software Craftsmanship, Extreme Programming, TDD, ATTD, clean code. Most of these concepts were defined and published in the last millennium. It is time your teams finally adopt them and produce high quality, maintainable and cost-effective products. This is the whole concept of the lean movement. And I welcome the fact that SAFe now explicitly mention https:scaledagileframework.com/built-in-quality/[Cost of Delay].\nOne of the strengths of SAFe is their clear statement that an agile organization transformation is only successful with lean-agile leadership. All C-level managers are trained in lean and agile, they advocate these approaches and are visible champions. Therefore, all managers shall advocate technical excellence on a daily basis.\nIf not, the seminal work of John Kotter clearly states the transformation will fail. You will have a bunch of Scrum teams in your development department, but have none of the expected synergies at the product or company level.\nPersonally I prefer the LeSS approach, but I respect your choice - SAFe, Nexus, or Scrum@Scale - as long as technical excellence is a key aspect of your agile strategy. Embrace technical agility and do not let your train of teams produce mediocre software every two weeks.\nEmploy professional software craftsmen and deliver quality products. Follow your SAFe approach, respect one of the https:scaledagileframework.com/safe-core-values/[four core values] and one of the five core competencies of your method.\nSee also my blogs Pragmatic Craftsmanship, Software Quality Graal, and How healthy is your Product? article series for information about technical excellence.\nSource Code Check\nDelivery Pipeline Check\nProduct Strategy Check\nCompany Culture Check\nThe other big improvement is that the PI horizon is now limited to 8 or 12 weeks. No more semester or hopefully quarter cadence.\nIt still does not make sense to plan for three months and at the same time advocate DevOps and design thinking.\nDevOps has a time horizon of days. It is waste to have huge quarterly PI gatherings and plans just to discard them after the next DevOps finding. You should probably just update your PI roadmap.\nCall for Action My call for action is fewer meetings and paper artifacts and more technical excellence. You want to sell excellent and well-designed products, not mediocre software.\n1. scaled agile framework site has discarded the information for older versions of the framework. Try to find the news and the slides for version 4.6. ","categories":"","description":"","excerpt":" It is official.\nThe power engine of the SAFe 4.6 vehicle is the team and technical agility. View the SAFe for more information [1].\nIt is one of their five Lean Enterprise competencies and one of …","ref":"/blog/2018/safe-4.6-improvements-direly-needed/","tags":["agile"],"title":"SAFE 4.6: Improvements Direly Needed"},{"body":" You are developing your product using agile and lean approaches.\nHow can you check your approach and distill improvements? A health check of your product and your development approach is certainly a good solution.\nThis post is the second of a series identifying health checks with different focus. We will identify strengths, potential weaknesses and hopefully find room for improvement.\nHow you build and deliver your software product has direct implications on your liquidity and cash flow. Improvements in your delivery pipeline have a direct impact on your finances.\nRules The patient solely decides if a health check shall be performed. The effort and depth of a health check are defined together with the patient. The findings are considered confidential.\nA short check with a feedback workshop presenting the insights requires around two work days.\nA deeper and more intensive check requests more effort, between one and four weeks. Upon completion, you can also hire a coach to implement selected findings and improve durably the health of your application. The findings are often clear and the measures are straightforward. The real work is to implement consistently the measures.\nI have the same personal challenge when trying to lose weight or improve my running form. The long term implementation is the crux.\nDelivery Pipeline Checks How reproducible, fast and economic is your product deliver pipeline? At the end of the day, you deliver regularly a reproducible and trackable product version to your customers.\nOne nice aspect about delivery pipeline checks is that a whole set of tools and methods emerged with the DevOps movement. You still need an expert to tune the diagnostic to your company’s specific needs, but the approach is well-documented.\nBelow a list of capabilities we have build-up over time for delivery pipeline checks. Use common sense and strategic goals to identify the objectives you want to measure. Expertise is needed to define values to measure if the source code of your product reaches the selected objectives.\nContinuous integration pipeline with quality checks and automatic tests.\nContinuous delivery pipeline packaging the same binary to all your environments.\nContinuous deployment if adequate for your solution, certainly it is adequate for the test and integration stages.\nAutomatic source code quality checks and mandatory quality gates.\nAutomatic unit tests, integration tests, and end-to-end tests.\nGolden Trunk in Git.\nNo branches or only short-lived branches shall be the policy.\nZero bugs policy eliminates the change management processes and board for errors.\nTraceability of specifications to delivered features and product versions\nSemantic versioning and API documentation\nConfiguration and infrastructure as managed artifacts\nGeneration of documentation part of the delivery pipeline\nMonitoring and alarming\nDevOps pipeline analysis provides another look at your processes\nCode development and Review, Continuous integration and build status\nContinuous testing and business risks feedback\nArtifact repository and pre-deployment staging\nRelease automation including change management and release approvals\nInfrastructure configuration and management and infrastructure as code\nApplications performance monitoring and end-user experience.\nYou should know how often you can deliver your product without failures and track your lead time between fixes. The overall goal is faster time to market and improved delivery frequency.\nThe overall features and processes can be implemented through your development organization is less than a year. Stop evaluating, start implementing!\nContinuous Integration Practices Check your process to see which continuous practices you are really mastering\nMaintain a single source repository - no long-lived branches.\nAutomate the build - no manual inputs, no manual configuration, automatically triggered.\nMake your build self testing - TDD, ATDD, static metrics, semantic checks.\nEveryone commits to trunk every day.\nEvery commit should build trunk on an integration machine.\nFix broken build immediately - lean red button stopping production, everybody helps fix the broken build. Keep the build fast - We are talking of minutes, not hours.\nTest within an integration staging area which is a clone of the production environment. The goal is to have docker images, virtual network, and in-memory database to be fast.\nMake it easy for anyone to get the latest-packaged release.\nEveryone can see the build status - transparency, information radiator.\nAutomate deployment.\nPosts in the Health Check Series Source Code Check Marcel Baumann. 2018.\nDelivery Pipeline Check Marcel Baumann. 2018.\nProduct Strategy Check Marcel Baumann. 2018.\nCompany Culture Check Marcel Baumann. 2019.\n","categories":"","description":"","excerpt":" You are developing your product using agile and lean approaches.\nHow can you check your approach and distill improvements? A health check of your product and your development approach is certainly a …","ref":"/blog/2018/how-healthy-is-your-product-delivery-pipeline-check/","tags":["agile","series-how-healthy"],"title":"How Healthy is Your Product? - Delivery Pipeline Check"},{"body":" An agile team is the sole responsible for the internal quality of the product they build and maintain.\nThe developers shall be accountable for producing the expected quality and optimizing long term goals of the organization.\nYou as a developer have an ethical, professional and legal responsibility to ensure adequate quality for your products.\nLaws protect the confidentiality of their personal and financial data.\nIt is a potential crime to leak credit card information, geolocation data or the worst personal documents.\nScrum as a clear concept to answer to the seminal question:\nDid we build it right?\nDefinition of Done DoD is a major building block to answer this question with a sounding yes.\nDefinition of Done Scrum and LeSS have a stringent discussion concerning Definition of Done. The key question is\nConsidering our current context and capability, what activities can be completed in each sprint?\nThis subset is the initial Definition of Done.\nA Definition of Done is weak when it is a small subset and strong when it almost equals Potentially Shippable.\nIn huge organizations, the development teams discuss their context and select the subset of the activities that all teams think they realistically can do during the sprint. This is their initial Definition of Done. The teams that can do more will expand this product Definition of Done within their members.\nThe difference between the Definition of Done and Potentially Shippable is referred to as Undone Work.\nPotentially Shippable - Definition of Done = Undone Work\nThe Sprint is planned according to the Definition of Done and thus the Undone Work is excluded. It is planned to be left undone.\nThe terms Potentially Shippable and Definition of Done are often not used consistently. To clarify the terms:\nPotentially Shippable All activities that must be performed before the product can be shipped.\nDefinition of Done An agreement between the teams and their Product Owner on which activities are performed inside the Sprint. A Definition of Done is perfect when it equals Potentially Shippable. Teams strive to improve towards an ideal Definition of Done.\nUndone Work The difference between the Definition of Done and Potentially Shippable. When the Definition of Done is perfect, then there is no Undone Work. If this is not the case, the organization has to decide. First, how we deal with the Undone Work. Second, how we improve so that there is less Undone Work in the future.\nUnfinished, or not done—work that was planned in a sprint but was not completed. This is often confused with Undone Work.\nUnfinished is work that the team planned for but did not finish, whereas Undone Work was never even planned for. When a team has work that was not finished, then they ought to feel anxious and discuss improvement actions during their retrospective.\nTeams should never leave work-in-progress at the end of the sprint and carry over to the next one. This causes a lack of transparency and reduces flexibility. The product owner has more trouble to change the scope of the application. If they forecast too much work, they need to remove completed items, which they have not started yet.\nScrum Guide Definition The Scrum guide characterizes the Definition of Done as follows:\nThe Definition of Done is a formal description of the state of the Increment when it meets the quality measures required for the product.\nThe moment a Product Backlog Item meets the Definition of Done, an Increment is born.\nThe Definition of Done creates transparency by providing everyone a shared understanding of what work was completed as part of the Increment. If a Product Backlog Item does not meet the Definition of Done, it cannot be released or even presented at the Sprint Review. Instead, it returns to the Product Backlog for future consideration.\nIf the Definition of Done for an increment is part of the standards of the organization, all Scrum Teams must follow it as a minimum. If it is not an organizational standard, the Scrum Team must create a Definition of Done appropriate for the product.\nThe Developers are required to conform to the Definition of Done. If there are multiple Scrum Teams working together on a product, they must mutually define and comply with the same Definition of Done.\nItems of a Definition of Done A delivery standard as defined by the team.\nIt contains all requirements to get a user story into production.\nThe fitness for use is evident (enough value was built to justify releasing?).\nThe external quality is verified (we have built the right thing?).\nThe internal quality is verified, you wrote unit tests – and all tests are green.\nThe code is checked in. The branch was merged and deleted.\nCoding standards are enforced through static check tools and integrated in the continuous delivery pipeline.\nThe code review was completed.\nAll improvements from the code review were implemented.\nAll existing unit tests remain green.\nThe acceptance tests were verified by the development team.\nAll integration tests were passed.\nAnd the Status of done was confirmed by the product owner.\nThe following criteria are often overlooked and also need to be checked:\nWas the technical documentation updated?\nWas the user documentation updated?\nWas the user documentation localized?\nThe localization for the application is done.\nThe localization testing is done.\nThe marketing input is done.\nThe legal documents are done.\nThe deployment and migration scripts are available.\nThe extension of the definition of done DoD to deliver a potentially shippable product has often significant and profound impact on the structure of the organization and its processes. Experienced agile coaches use the definition of done as an instrument for organizational changes.\nWhen the undone work is slowly removed from the delivery process, it triggers structural and process changes. For example, the separate quality department responsible for the final tests is dissolved and their expertise is integrated in the development teams.\nSee also the blog Pragmatic Craftsmanship for a discussion of build-in quality.\n","categories":"","description":"","excerpt":" An agile team is the sole responsible for the internal quality of the product they build and maintain.\nThe developers shall be accountable for producing the expected quality and optimizing long term …","ref":"/blog/2018/how-should-you-handle-definition-of-done/","tags":["agile"],"title":"How Should You handle Definition of Done?"},{"body":" You are developing your product using agile and lean approaches.\nHow can you check your approach and distill improvements? Health check of your product and your development approach are certainly a good solution.\nThis post is the first of a series identifying health checks with different focus. We will identify strengths, potential weaknesses and hopefully find room for improvement.\nThe initial examination shall always be the source code. Your code base is a key asset of your company.\nRules The patient solely decides if a health check shall be performed. The effort and depth of a health check are defined together with the patient. The findings are considered confidential.\nA short check with a feedback workshop presenting the insights requires around two work days.\nA deeper and more intensive check requests more effort, between one and four weeks. Upon completion, you can also hire a coach to implement selected findings and improve durably the health of your application. The findings are often clear and the measures are straightforward. The real work is to implement consistently the measures.\nI have the same personal challenge when trying to lose weight or improve my running form. The long term implementation is the crux.\nSource Code Checks How clean, legible and maintainable is your source code? Often it is best to start your health evaluation with your product source code. At the end of the day, it is compiled source code you deliver to all your customers to work with.\nOne nice aspect of source code checks is that a whole set of tools is available on the market. You still need an expert to provide the diagnostic, but the gathering of data can be automated and quite inexpensive to gather.\nBelow a list of capabilities we have build-up over time for source code checks. Use common sense and strategic goals to identify the objectives you want to measure. Expertise is needed to define values to measure if the source code of your product reaches the selected objectives.\nJava 11/10/9/8/7/6 code and how to migrate to the current version and use the new Java features,\nMultithreaded, parallel programming and reactive systems,\nFunctional and object-oriented detailed design approaches,\nTest driven development TDD and build-in quality - gradle or maven -,\nAcceptance test driven development ATDD and user acceptance,\nClean code approach and detection of code smells,\nStatic analysis tools to measure the quality attributes of source code,\nCompilation and test automation,\nSoftware craftsmanship approach, values and techniques,\nDomain driven development and micro services,\nDatabase models and open data,\nSoftware architecture and Enterprise architecture,\nCI and CD - continuous integration, continuous delivery, continuous deployment,\nStatic quality assurance approaches for quick diagnostics,\nDevelopment tools to improve quality and productivity,\nUser Experience and UI design.\nMy blogs Pragmatic Craftsmanship and How to Reach the Software Quality Graal provide insights on why source code quality is of tremendous importance for any company.\nThe blog SonarLint for the Impatient would be a pragmatic first measure to measure and improve your source code health.\nAny product should have a battery of measures deployed to continuously monitor the source code and detect trends over time.\nPosts in the Health Check Series Source Code Check Marcel Baumann. 2018.\nDelivery Pipeline Check Marcel Baumann. 2018.\nProduct Strategy Check Marcel Baumann. 2018.\nCompany Culture Check Marcel Baumann. 2019.\n","categories":"","description":"","excerpt":" You are developing your product using agile and lean approaches.\nHow can you check your approach and distill improvements? Health check of your product and your development approach are certainly a …","ref":"/blog/2018/how-healthy-is-your-product-source-code-check/","tags":["agile","series-how-healthy"],"title":"How Healthy is Your Product? - Source Code Check"},{"body":" First teams have successfully used Scrum to develop applications. The news spread out and everybody wants to apply Scrum. It is time to introduce Enterprise wide Agile with Scrum or Kanban or XP.\nYour Company wants to introduce Enterprise Agility in their product development, quality assurance and sales departments. The company as a whole shall transition to an agile organization and all teams shall adopt Scrum.\nTry the Shu Ha Ri approach for such a change process.\nBased on our exhaustive experience, we recommend starting with a set of workshops with the goal of defining a tailored approach to adapt the structure and processes of the company and introduce enterprise agile.\nThese workshops provide the platform to identify the company’s needs and strategic goals, and gather support from all participants. Try the open space format to involve all collaborators and identify their needs.\nBelow, we provide an approach which must be later tailored to the specific needs of the Company during the above-mentioned workshops. The organizational needs for feature oriented planning and development of an application portfolio should be considered.\nApproach We work with the Shu Ha Ri agile approach when introducing enterprise agile in the Company. All collaborators will progress from the novice level through the proficient level before reaching the expert level. You can also use the agile fluency model if you prefer.\nThis model also maps very well to the “Awareness – Desire – Knowledge – Ability – Reinforcement “or ADFAR model. The Company has already reached awareness and desire level because they want to introduce enterprise agile. We describe below the activities for the development organization consisting of software development, product management and quality insurance departments, and the activities at company level.\nDevelopment Organization Shu - Novice Level - „Learn the Rules“ The duration of the novice level is at least six months. The major activities are to align the collaborators and provide the needed knowledge through training and hands-on exercises. Extensive training is aligned with experiences and industrial best practices.\nAll collaborators shall attend an introduction to agile and Scrum approaches. All technical collaborators shall attend the Scrum - Master or Developer - training. Each group of technical collaborators will learn specific techniques and skills necessary to work effectively in an agile product environment.\nThe agile coaches have two roles. First, they facilitate and support the teams to implement all meetings, artifacts, and rules of the Scrum approach. Second, they train the team members how to use learnt techniques such as clean code, pair programming, pair check-in, agile architecture, requirements elicitation, test driven development, agile quality assurance, acceptance test driven development, continuous integration, deployment and delivery.\nAfter the initial training, the coaches ensure that this knowledge and ground rules are applied in daily activities.\nDeveloper Business Analyst / PO SM / PL / Line Manager Quality Manager / Tester Others Agile and Scrum Introduction(1 day)\nScrum Master (2 days)\nProduct Owner (2 days)\nagile and clean developer\nTDD\nATTD\nAgile Development Game\nDVCS – Git –\nLegacy code refactoring\nClean Code\nAgile architecture and patterns such as an inversion of Control\nAgile Requirement Management\nLean Startup\nLean UX\nDesign Thinking\nATDD\nAgile Leadership\nAdvanced Lean\nAgile Quality\nSoft skills – coaching, mentoring -\nAgile Quality Management\nATDD\nMove them to a Scrum team\n?\n~ 20 days\n~ 10 days\n8 days\n8 days\n1 day\nWe recommend\nAn Agile (eXtreme Programming techniques) and Scrum coach responsible for two to three Scrum teams.\nCoach of coaches for the growth of internal agile and Scrum coaches for the company.\nHa – Proficient Level - “Bend the Rules” The duration of the “proficient level” will be up to two years. The goal is to reinforce the learning techniques and become proficient in using them. The motto is\nMost difficulties in Scrum do not arise from learning the Scrum framework. Rather, they arise in applying the framework on an existing organizational structure and culture.\nThis requires hands-on experienced guidance, and not just at the team level, but at the leadership and organizational level. See below the discussion about enterprise transformation.\nWe recommend\nAn Agile (eXtreme Programming techniques) and Scrum coach responsible for four to five Scrum teams.\nTwo coaches of coaches for the growth of internal Scrum coaches for the company.\nStart to blend team coaching with company-wide changes. See below the chapter “Organization Transformation”.\nWorkshops could be organized for selected products or teams to solve identified major impediments.\nRi – Expert Level - “Break the Rules” The “expert level” will be reached earliest after two years. It is reasonable to state that not all collaborators will reach this level of expertise. The goal is to transfer ownership of the agile approaches to Company collaborators. The company will take over the responsibility to reinforce agile and Scrum activities and resolve newly identified impediments in products or at company level. The motto is\n*Doing* agile is easy. Being agile is hard.\nWe recommend\nAn Agile and Scrum coach responsible for six to eight Scrum teams. The internal coaches should start taking responsibilities\nA center of competence for the growth of internal Scrum coaches for the company.\nCompany Transformation While teams implement Scrum, managers and leaders enable them. We work on cultural, organization, and process level to enable agility in the company.\nWorkshops with key managers will\nDiscuss the fact that the standard competencies of agile leadership and coaching – mentoring, facilitating, problem-solving, and conflict navigating – are essential to agile adoption, but simply not enough to sustain and grow agility within an organization. We find that the unique blend of combining senior internal leaders with experienced agile coaches provides an unprecedented learning environment for all.\nUnderstand that most organizations adopt agile Outside-In - that means they start with a process change and expose organizational impediments. The problem is that most of the organizational impediments are driven from cultural values deep within the organization. The process changes rarely stick.\nIdentify an \"Inside-Out\" approach - that means we will start with the company culture. Just as understanding the personality of a person is a key to working effectively with that person, understanding the culture of an organization is critical to its success in adopting, and more importantly sustaining, agility.\nExplore a number of organizational systems and structures which enable (or impede) agility at an organizational level. This approach sets the priority first to the culture, second to the structure and third to the processes of the company\nWe recommend\nWorkshop with key managers as described above,\nOne Coach at C-level,\nTransform the company one product line after the other, delay the broad deployment to have time to learn and improve.\nStudy LeSS as a valuable approach. We strongly support LeSS as an ideal candidate for company-wide agile approach,\nImplement selected company-wide measures during the second phase of the change management process when the development department moves to a proficient level. Top managers must realize that cultural elements must first be modified before the structure and the processes of the company can be adapted.\nBe patient and do not lose your mojo.\nChecklist Here a checklist example to reflect why and how to transform into an agile organization\nAnswer the question, “Why move to Agile?” This is important, as the reasons for attempting such a fundamental change should be well understood from both a quantitative and qualitative standpoint.\nUnderstand the current business culture. Change is hard and there will be champions as well as potential saboteurs of the changes to come.\nSpend time on the organization structure to understand how it helps or hinders the move to agile and lean.\nInvolve all levels of the business, including top level ‘C’ executives. Their sponsorship and support will be important.\nDon’t neglect mid-level management as their support is vital to the success of the transformation.\nCreate a roadmap with the explicit understanding that it will change over time.\nDon’t attempt to change everything. Pick an area where a win will be evident and beneficial.\nPrefer narrow and deep change to broad and shallow approach.\n","categories":"","description":"","excerpt":" First teams have successfully used Scrum to develop applications. The news spread out and everybody wants to apply Scrum. It is time to introduce Enterprise wide Agile with Scrum or Kanban or XP. …","ref":"/blog/2018/introduce-agile-in-a-company/","tags":["agile"],"title":"Introduce Agile in A Company"},{"body":" An agile coach has three main areas of activity:\nFoster Autonomy Teach and support the team and individuals to be autonomous within the given boundaries of the organization and its processes.\nCreate Ground for Motivation Help teams to maximize their autonomy, individual mastery and make sure the team has a purpose.\nProvide Coaching Support teams and individuals to identify potential with their roles and within the agile organization and improve.\nHow Can You Do It? Lateral Leadership Mediating the team through conflicts and help them with making decisions and foster the team’s self-organization. After a few months, a team shall have jelled.\nFacilitation Facilitate meetings for the team, including preparing, moderation and post-processing for the agile process as well as the supporting agile organization. After a year of working with a team, the team members shall be empowered to run regularly all events without you attending.\nTeaching Teach teams agile practices and lateral leadership. A central area is technical excellence and software craftsmanship. Long-lasting teaching shall concentrate on values: Scrum values and principles, LeSS principles, Agile manifesto and the associated 12 principles.\nImpediments Actively identify impediments and foster their removal. Consult the Scrum guide: You must select one impediment after each retrospective and add it as a high-priority item in the next Sprint backlog. This mechanism insures continuous improvement.\nTo ensure continuous improvement, it includes at least one high priority way in which the team works, identified in the previous Retrospective meeting.\nCulture Establish a culture of inspecting and adapting for teams. Create structure to establish a continuous improvement process - also meaning establish a tolerance to failure -, advocate transparency, enlighten the organization of the relation between autonomy and accountability.\nAsk yourself how your organisation handles meritocracy.\nOne Approach to Coaching Agile teams thrive with purpose, autonomy and mastery. One approach to coaching is to set your focus on\nUnderstand the domain: Talk with customers and users and understand their needs. Your teams should have business expertise.\nMaster Technical Excellence: CI, CD, TDD, ATDD, pair programming, refactoring, lean UX, usability.\nUse Process Excellence and apply Scrum, XP, LeSS by the book:\nDiscuss the core values of commitment, focus, openness, respect, and courage.\nPresent again the agile manifesto and the twelve principles.\nShow the organization why commitment in the planning was replaced by forecast in the official Scrum guide [1].\nRequire a vision, a roadmap, a release plan with a story map and a refined backlog for each product and team.\nTell why an impediment resolution backlog item shall be part of each iteration.\nTeach the importance of the definition of done DoD for the internal quality of the product. And explain why the definition of ready is often an anti-pattern.\nShow why velocity is not a productivity metric.\nShow the difference between product and output.\nExtend the agile toolbox with Design Thinking, Lean Factory, Lean UX, DevOps.\nPair Scrum master and technical master to implement a craftsmanship path and achieve product quality.\nExplore Center of Competencies to nurture your product development group.\nOnce you are a master fell free to break the rules, experiment with new rules, approaches [2, 3]. Define hypotheses and verify them empirically.\nIf you are coaching software development groups, acknowledge you shall possess a profound understanding of technical excellence and software development practices. I have never heard of a soccer coach not intimately knowing how the game is played.\nHow to Evaluate Yourself? Skill in a competency area is not a simple binary. Skill mastery is a progression from no knowledge to unconscious mastery. Try to define if you are a beginner, practitioner, guide, or catalyst for each relevant dimension.\nSelf Mastery At the heart of great agile coaching is the need to invest in yourself through learning and reflection and take care of your well-being. Self-mastery starts with a focus on yourself, having the emotional, social, and relationship intelligence to choose how you show up in any given context.\nAgile/Lean Practitioner an agile/lean practitioner has a deep and tacit understanding of the principles behind agile and lean and has experience in working with frameworks and practices of agile and lean.\nServing serving is about being concerned with the needs of the team or business over your own agenda. They do this from the stance of servant leadership which focuses primarily on the growth and well-being of the team or business and the communities to which they belong.\nCoaching coaching is partnering with a person, team, or organization (client) in a creative process to help the client to reach their goals by unlocking their own potential and understanding. A coach is able to accept the client as a whole and capable, and serve their agenda ethically.\nFacilitating facilitating increases the effectiveness of groups to align in a collaborative way, to interpret their context, and mutually identify the most valuable outcomes desired. A facilitator has the skills to create a neutral environment of openness, safety, and innovation in a group setting.\nGuide to Learning guide learning is about effectively growing an individual, a group, or a team skills and enabling them to be competent and resourceful. With this competency, you choose the most effective learning method to help the learners achieve their learning objectives and inspire future learning.\nAdvising advising is the ability to bring your experience, insights, and observations to guide the client towards a shared understanding of the value that can help them to achieve sustainable success, even after you have moved on. As a trusted adviser, you are invested in the success of the client, creating a long-term and sustaining relationship with the client.\nLeading leading is about being the change you want to see to make the world a better place. As a leader, you are capable of catalyzing growth and inspiring others to realize the shared vision.\nTransforming transforming is guiding sustainable change that will allow the individual teams and the organization to be more effective and learn how to change for themselves through leading, facilitation, coaching, facilitating learning, and advising.\nLinks [1] Why Professional Coaching Matters to an Agile Coach. Mikael Brodd. Crisp. 2021\nReferences [1] G. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\n[2] Z. Sochova, The Great ScrumMaster. Addison Wesley, 2016 [Online]. Available: https://www.amazon.com/dp/013465711X\n[3] M. Cohn, Succeeding with agile. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321579364\n","categories":"","description":"","excerpt":" An agile coach has three main areas of activity:\nFoster Autonomy Teach and support the team and individuals to be autonomous within the given boundaries of the organization and its processes.\nCreate …","ref":"/blog/2018/what-does-an-agile-coach/","tags":["agile"],"title":"What does an Agile Coach?"},{"body":" Architecture Decision Record ADR is compact and traceable documents of all important decisions taken during the realization of a product. Use Asciidoc or Markdown and Git to have agile and lean documentation of your major decisions.\nThe huge advantage of Architecture Design Record ADR is the timeline of the decisions. It tremendously helps to understand the technical changes during the product lifecycle.\nPlease try architecture design records to document your key decisions when developing your software product. Feel free to identify better approaches\nDefinition An Architectural Decision (AD) is a software design choice that addresses a functional or non-functional requirement that is architecturally significant. A decision can be documented in an architecture design record (ADR).\nIn each ADR file, write these sections:\nTitle short present tense imperative phrase, less than 50 characters, like a git commit message.\nStatus proposed, accepted, rejected, deprecated, superseded\nContext what is the issue that we’re seeing that is motivating this decision or change.\nDecision what is the change that we’re actually proposing or doing.\nConsequences what becomes easier or more difficult to do because of this change.\nI use Asciidoc format to write all our architecture design records. You can add to the same git repository as the product, visualize differences and if desired, generate a nice looking document. And my IDE IntelliJ IDEA has a nice plugin for this format.\nBefore using ADR, I documented the decision changes as footnote in a Microsoft Word document. The ADR approach is way more legible and easier to trace with the help of git repositories.\nTitle These documents have names that are short noun phrases. For example, \"ADR 1: Deployment on Ruby on Rails 3.0.10\" or \"ADR 9: LDAP for Multiple tenant Integration\"\nContext This section describes the forces at play, including technological, political, social, and product local. These forces are probably in tension, and should be called out as such. The language in this section is value-neutral. It is simply describing facts.\nDecision This section describes our response to these forces. It is stated in full sentences, with active voice. \"We will …​\"\nStatus A decision may be \"proposed\" if the product stakeholders haven’t agreed with it yet, or \"accepted\" once it is agreed. If a later ADR changes or reverses a decision, it may be marked as \"deprecated\" or \"superseded\" with a reference to its replacement(s).\nThe status and the graph of related decisions can be tracked and visualized using tools. You can also track your decisions without any tools, a regular product has often less than a hundred decisions. And you can always write a small parse utility to extract your dependency graph.\nConsequences This section describes the resulting context, after applying the decision. All consequences should be listed here, not just the \"positive\" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and product in the future.\nTips and Tricks The whole document describing an ADR should be one or two pages long. We will write each ADR as if it is a conversation with a future developer. This requires good writing style, with full sentences organized into paragraphs. Bullets are acceptable only for visual style, not as an excuse for writing sentence fragments (Bullets kill people, even PowerPoint bullets).\nThe cost of undocumented decisions is hard to measure, but the effects usually include duplicated efforts. Other engineers try to solve the same problems or competing solutions (two third-party libraries that do the same thing).\nThe approach is very similar to how you would document a software pattern.\nBelieve and respect is the prime directive.\nRegardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.\n— Norman Kerth ","categories":"","description":"","excerpt":" Architecture Decision Record ADR is compact and traceable documents of all important decisions taken during the realization of a product. Use Asciidoc or Markdown and Git to have agile and lean …","ref":"/blog/2018/architectural-decision-records-adr/","tags":["design","architecture"],"title":"Architectural Decision Records ADR"},{"body":" Lately I was asked how many bugs and smells detected through SonarQube were acceptable for a software product. And a Scrum master inquired which organizational changes are necessary to empower software developers to write good code. Speechless and dumbfounded, I was unable to answer these questions.\nAfter some time, I realized these people believe tools can measure the quality of software. But tools can only measure non-quality.\nThey tell you when you are doing it wrong, only your heart can tell you when you are doing it right.\nBut first that does it mean to have a quality software product?\nA high-quality software product has no catastrophic failures, and seldom bad behavior.\nIt is maintainable and extendable with new technologies and new features.\nThe first part is called extrinsic quality and is why customers buy your product. The second part is called intrinsic quality and is why customers buy your product again and recommend it.\nCriteria such as test code coverage, static analyzers, coding guidelines are just tools to detect missing quality. They help your team produce higher quality and nothing else.\nI encounter organizations stating that zero defects as measured with SonarQube is the ultimate goal. And they find normal to have thousands of smells. Time for a reality check.\nTools such as SonarQube, unit test coverage are just instruments to support your teams to detect known non-quality.\nHow to find the Quality Graal? Below, I provide a set of established, old techniques to eliminate non-quality. Most of them are around for at least twenty years. I encourage you to extend your practices with additional procedures based on your measurements and findings.\nExtrinsic Quality - Product Quality Is why you buy a specific car\nAcceptance criteria and behavior test-driven development ATDD – You ensure through automatic tests that the feature behaves how your customer requested.\nDefect driven development – You ensure through automatic tests your customer will never encounter this exact error again.\nFast release and deployment cycle.\nYou give your customer a way to detect bad behavior early and have an opportunity to ask for improvement. By fast, we mean daily or perhaps weekly.\nIntrinsic Quality – Technical Quality Is why you can daily drive your car and not have to weekly repair it. And, later be able to add a charger for your mobile phone without spending a fortune.\nStatic code analysis - Known weaknesses are removed from your source code.\nTest driven development TDD – You can change the code without changing the behavior or outputs, see also ATDD.\nClean code – You guarantee the source code is maintainable [1, 2].\nClean architecture and domain driven development - You guarantee the product is extendable [3, 4, 5].\nAccountability The Scrum Team - Development Team, Product Owner and Scrum Master - are responsible and accountable for the intrinsic and extrinsic quality of the delivered products [6, 7]. Insufficient quality is always a collective failure.\nTruly, if the intrinsic quality of the source code is low, it is undeniably a failure. A failure of the development team and of each software developer writing the code; and a failure of the Scrum master holding and teaching agile and Scrum values.\nWhen there is high pressure on delivery, people have a tendency to pay less attention to processes and standards. That is one of the reasons why in Scrum we have the role of Scrum master responsible for understanding and enacting agile practices and rules.\nAnd no physician will ever cut corners just because he is in a stressful situation. So please be a professional and read again the principles of the agile manifesto such as\nContinuous attention to technical excellence and good design enhances agility.\n— Agile Manifesto Developers please read the seminal book Clean Coder from Robert Martin [2]. As a professional, you are responsible and accountable for the quality of the software you produce.\nI find it intolerable to hear software professionals stating they are not in charge of the intrinsic quality of the product they write. They cowardly try to push the responsibility to the internal quality assurance department or to the whole organization.\nThe above ideas are keys to Software Craftsmanship.\nKaizen - Small Steps bring First Successes The first steps to improve your product are quite simple are around for at least twenty years [8].\nEliminate all compiler errors and warnings.\nUse static checkers.\nActivate the checkers of the IDE you are working with. For example, I am using IntelliJ IDEA. They have extensive checkers.\nIf using SonarQube, download link:../../2018/blog-2018-05-01]SonarLint plugin and simply use it. This tool is best of breed, do not argument and just use it.\nWrite tests with JUnit5, Mockito, AssertJ, Cucumber.\nI am ashamed to see software developers not implementing the above measures on a daily basis. I despair of encountering Scrum masters who tolerate the situation. These techniques cost nothing, are installed in a few minutes and support incremental improvement of your source code. See also Why software developers do not need to ask for permission or forgiveness.\nYour goal is simply zero warnings at the end of the spring. Later tighten it to zero warnings in the trunk of your Git repository. Just do it – and stop arguing about the merits and costs -!\nAnd if you do not agree with one of the warnings, just disable the rule and document the reason for an architecture design record ADR.\nAgile and Scrum are all about learning and continuous improvement. Please stop talking about quality. Just start improving it! I do not want to hear any lame excuses why a software developer is not continuously doing the above activities.\nI acknowledge I am emotionally involved and not fully objective. Lately, I saw a Java code of three different commercial products. I am still recovering from the missing quality.\nReferences [1] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[2] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[3] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[4] E. Evans, Domain-driven design. Addison-Wesley, 2004 [Online]. Available: https://www.amazon.com/dp/0321125215\n[5] V. Vernon, Implementing Domain driven Design. Addison-Wesley Professional, 2012 [Online]. Available: https://www.amazon.com/dp/B00BCLEBN8\n[6] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[7] M. Cohn, Succeeding with agile. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321579364\n[8] D. Thomas and A. Hunt, The Pragmatic Programmer - 20th Anniversary Edition, Second. Addison Wesley, 2020 [Online]. Available: https://www.amazon.com/dp/0135957052\n","categories":"","description":"","excerpt":" Lately I was asked how many bugs and smells detected through SonarQube were acceptable for a software product. And a Scrum master inquired which organizational changes are necessary to empower …","ref":"/blog/2018/how-to-reach-the-software-quality-graal/","tags":["design"],"title":"How to Reach the Software Quality Graal?"},{"body":" What are the main hurdles to introducing agile approaches in Swiss companies? The Swiss agile trends report was published for the last ten years and learn us the difficulties and successes of agile transformations.\nSwissQ has published a \"SwissQ Software Development Switzerland 2018\", the tenth version of this report.\nIntroducing agile company-wide was and is a cultural change process. Such a change takes time and sometimes hurts. Too often, organizations stop the process and revert to all command and control approaches with Waterfall product management.\nWithout the commitment of senior management, the initiative will fail. In other words, Walk the talk.\nYou must teach, coach, and support your collaborators through the transition. You need to believe in them and provide an environment where they can safely learn and experiment.\nIn the end, collaborator purpose, customer satisfaction, and business value matter.\nThe study can be downloaded as PDF from their website. See previous blogs for the results of years 2016, 2013 and 2012. Below some findings of the study.\nSlower Adoption of Agile Approaches The adoption of agile frameworks has markedly slowed down in Switzerland. And hybrid methods based on Waterfall methodology are often used. It is fascinating to see companies trying to merge a linear approach with highly iterative and incremental approaches. It shall be clear that success will only be elusive.\nThe data of the study reflect this fact through the abysmal collaborator satisfaction with these hybrid approaches (see chapter 13). Less than 25% of employees are satisfied with the development process of their company.\nMajor Hurdles When Introducing Agile Approaches The list of hurdles for a successful introduction of agile approaches was updated.\n69% Culture change and you need senior management support\n54% Non-adapted overall processes because local optimizations have a limited effect\n42% Missing product overview because a company sells products\n42% Focus on business value because a company shall earn money\n25% Missing agile know-how of collaborators, and you shall train your collaborators\nWe reached a major threshold. The majority of interviewed companies have more than 500 IT collaborators. These big companies are struggling to introduce agile approaches company-wide. Interestingly, 75% of all companies plan to increase investment in the agile introduction and transition projects.\nOne interesting consequence is the company compiling the report is actively poaching potential agile candidates from these big laggard companies!\nThe majority of teams use Scrum or Kanban. The associated events and tools are used. Deeper values are often missing., Observable examples are test driven development, acceptance test driven development, clean code or refactoring. The key is:\nTo be agile, not to do agile\nWe wrote in previous blogs that introducing Scrum in the development department or in the whole company is a change process. The coaches should be trained in change management and have experiences with resistance to changes. Our experience shows senior management is often not ready to move along the cultural change path.\n","categories":"","description":"","excerpt":" What are the main hurdles to introducing agile approaches in Swiss companies? The Swiss agile trends report was published for the last ten years and learn us the difficulties and successes of agile …","ref":"/blog/2018/agile-trends-switzerland-2018/","tags":["agile","series-swiss-agile-trends"],"title":"Agile Trends Switzerland 2018"},{"body":" Remove issues before they reach customer sites. No quality problems shall reach your Git master branch.\nSonarQube is a central server that processes full analyses (triggered by the various SonarQube Scanners).\nIts purpose is to give a 360° vision about the quality of your code base. For this, it analyzes all the source lines of your product on a regular basis.\nIt should be added that SonarQube also performs scans with well-known third party analyzers (SpotBugs - previously FindBugs -, Checkstyle, PMD) whereas SonarLint does not include those.\nI think the reason is a prioritization on performance and findBugs relying on java byte-code.\nWhat is SonarLint? SonarLint lives only in your IDE (IntelliJ, Eclipse, or Visual Studio). Its purpose is to give instantaneous feedback as you type your code. For this, it concentrates on what code you are adding or updating.\nFindings are displayed in the source code with information such as rule violation, rating of the rule and explanation. You have a window where all findings are displayed to provide an overview and navigation support. You are free to analyze a single file, a package, or the whole product; you can also exclude files or packages from the analysis.\nConnect SonarLint to your preferred code quality application. It then uses the same code analyzers, rules and settings locally that are used on the server.\nIssues marked as Won’t Fix or False Positive in SonarQube or SonarCloud disappear from your IDE.\nBoth SonarLint and SonarQube rely on the same static source code analyzers – most of them being written using SonarSource technology.\nHow to use It? the SonarLint in your favorite IDE\nconfigure the SonarCube instance to synchronize the rule set used in your product.\nConfigure the plugin to access your SonarCube instance.\nRun it.\nSee the messages in the next few seconds.\nJump to the source and correct the problem.\nIterate until all issues are solved.\nRun your unit tests and acceptance tests – TDD and ATDD -.\nCommit your changes.\nThis approach guarantees you always release source code with less SonarCube issues, therefore SonarCube always show no findings for new code and for refactored code.\nAnd you have made a step to the journey to become a professional software developer and achieve craftsmanship.\n","categories":"","description":"","excerpt":" Remove issues before they reach customer sites. No quality problems shall reach your Git master branch.\nSonarQube is a central server that processes full analyses (triggered by the various SonarQube …","ref":"/blog/2018/sonar-lint-for-the-impatient/","tags":["design","java"],"title":"Sonar Lint for the Impatient"},{"body":" An agile organization is able to deliver or change her direction at any time without additional cost.\nMore companies want to become truly agile and book an expensive journey to the holy land of agility. Often travelers never reach their true destination.\nThe LeSS people have a clear set of conditions to increase the odds.\nAll my experiences confirm these conditions are essential for success.\nLeSS Criteria Use these criteria as a checklist to evaluate your current agile transformation.\nEducate everyone\nTrain all involved collaborators extensively, train them multiple times.\nLet them apply the learnt to their daily activities.\nSelect an experienced coach understanding organization, team, and technical excellence.\nPlan for a long-term engagement of the coach. The journey will take years. *Define your “product”\nYou need an elevator pitch describing your product family and why the customers are buying.\nIdentify your vision, your roadmap for the next three years, your releases for the next 12 months, and product backlog and boundaries of your product.\nDefine “done” with a written and published Definition of Done\nDefinition of done tells when your work is completed.\nA strong definition of done supports organizational changes, see the LeSS metaphor of the Undone Department.\nCheck the team can implement the current definition of done or expand cross-functionality and training.\nHave appropriately structured teams\nA team is stable, long-lived, collocated, cross-functional and implement end to end features for the solution. Avoid component teams specialized for the database, user interface or communication layer.\nTeam members are dedicated to the team. They do not work in other projects and do not report to a matrix structure.\nOnly the Product Owner provides work for the teams.\nThe team is dedicated to implementing the best solutions as defined by the product owner. No side activities are tolerated.\nKeep product managers away from the teams.\nProject managers are not needed in an agile organization.\nWe realize and sell products, projects are irrelevant.\nNurture good managers to sustain the transformation.\nFurther Reading Read the LeSS Rules for ideas and wisdom about how to improve your approach to agile product development.\nAs you found out now, I am convinced that LeSS approach is one of the best ways to truly transform into an agile organization. And less truly and deeply advocate technical excellence for all collaborators. You need an agile mindset and technical excellence to develop awesome products. See Software Craftsmanship blog.\nA huge advantage of LeSS is that it is Scrum. You do not need to learn new methodologies, terminology or processes. Just apply all your hard-earned learnings from your Scrum transformation.\n","categories":"","description":"","excerpt":" An agile organization is able to deliver or change her direction at any time without additional cost.\nMore companies want to become truly agile and book an expensive journey to the holy land of …","ref":"/blog/2018/agile-introduction-success-criteria-through-the-less-lens/","tags":["agile"],"title":"Agile Introduction Success Criteria through the LeSS Lens"},{"body":" The last months I was often confronted with software products having insufficient quality.\nInsufficient means late delivery, and few new features. The effort to correct errors in the field eats 30% to 50% away from the development budget. How can such a dreadful situation occur?\nOne root cause is the low quality of the source code and ignorance of basic coding design approaches.\nWe are not talking about complex design activities or complex patterns; we are discussing basic approaches how to write correct and maintainable code.\nMaster Your Technology Stack Most of the programmers have no formal training in the technology stack they are using daily. Their best friend is the Internet. And as a consequence, many agile projects steadily and iteratively produce mediocre software.\nYou shall be a proud software craftsman [1]. You shall work as a professional and deliver professional results. I recommend any Java developer:\nHave formal training in the Java language and library [2]. For example, you should consider a Java Programmer certification for the current JDK you are working daily with.\nLearn the new features in Java e.g. Streams, Lambdas, Reactive Programming, LocalDate, Modules, packaging with jlink.\nRead and understand Effective Java [3] from Joshua Bloch.\nRead and understand the clean series [4, 5, 6, 7, 8].\nRead and understand Refactoring from Martin Fowler [9].\nAnd read Refactoring not in the backlog article from Ron Jeffries.\nLearn modern practices such as logging with slf4j, TDD with JUnit5, Mockito and AssertJ, ATDD with Cucumber.\nLean DevOps, continuous integration, continuous delivery, continuous deployment, monitoring.\nBe aware of famous Java libraries such as Guava, Apache Commons.\nUse SonarQube and the SonarLint plugin for your preferred IDE to catch well-known weaknesses in your source code and improve your coding skills.\nA software developer not knowing the above items is almost certainly not a professional person, just a more or less talented amateur [4, 5]. For a similar point of view, see the blog of Mike Cohn the difference between a professional and an amateur.\nImprove Continuously You shall strive for mastery. The feeling having reached a certain mastery level is truly awesome.\nRead a technical book each quarter.\nLean a new language or framework every two years.\nRead books such as The pragmatic Programmer [10].\nKnow approaches such eXtreme Programming, and read the book [11].\nWork with Scrum, Kanban, LeSS. Agile approaches are definitively state of the industry techniques.\nMaster container approaches with Docker - containers are here to stay and will replace virtual machines -.\nYou shall write good enough software without errors and using the best practices of the industry. If not, consider changing your profession. See my blog post about technical debt discussing the consequences of missing mastery.\nSoftware Craftsmanship Software craftsmanship is an initiative to improve the professionalism of software developers. You do not have to agree with them, look what they are doing.\nFor a detailed discussion, read the book The Software Craftsman: Professionalism, Pragmatism, Pride by Sandro Mancuso.\nDon’t discuss practices, discuss value\nTheir manifesto is\nCraftsmanship is not enough to guarantee the success of a product, but the lack of it can be the main cause of its failure.\nAgile and Craftsmanship complement each other and both are necessary [7, 8].\nAgile processes assume technical excellence and a professional attitude\nSoftware craftsmanship takes technical excellence and professionalism to a whole new level [12, 10].\nTake everything you read with a grain of salt. Software craftsmanship is\nNot a church, trying to convert all developers.\nAbout leading by example and showing how we can be better.\nAbout well-written and designed code and the customer stays in the center.\nAbout continuously delivering value not writing crap code.\nYour goal shall to become a professional developer and reach mastery. How you do it is up to you.\nAn extensive list of books can be found under Books.\nReferences [1] S. Mancuso, The Software Craftsman. Prentice Hall, 2015 [Online]. Available: https://www.amazon.com/dp/0134052501\n[2] J. Bloch and N. Gafter, Java™ Puzzlers. Addison-Wesley Professional, 2005 [Online]. Available: https://www.amazon.com/dp/032133678X\n[3] J. Bloch, Effective Java, Second. Addison-Wesley Professional, 2008 [Online]. Available: https://www.amazon.com/dp/B078H61SCH\n[4] R. C. Martin, Clean Code. Prentice Hall, 2009 [Online]. Available: https://www.amazon.com/dp/0132350882\n[5] R. C. Martin, The Clean Coder. Prentice Hall, 2011 [Online]. Available: https://www.amazon.com/dp/0137081073\n[6] R. C. Martin, Clean Architecture. Pearson, 2017 [Online]. Available: https://www.amazon.com/dp/0134494164\n[7] R. C. Martin, Clean Agile. Prentice Hall, 2020 [Online]. Available: https://www.amazon.com/dp/0135781868\n[8] R. C. Martin, Clean Craftsmanship. Addison-Wesley Professional, 2021 [Online]. Available: https://www.amazon.com/dp/B095C16LSW\n[9] M. Fowler, Refactoring, Second. Addision-Wesley, 2018 [Online]. Available: https://www.amazon.com/dp/0134757599\n[10] D. Thomas and A. Hunt, The Pragmatic Programmer - 20th Anniversary Edition, Second. Addison Wesley, 2020 [Online]. Available: https://www.amazon.com/dp/0135957052\n[11] K. Beck and C. Andres, Extreme Programming Explained, Second. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321278658\n[12] D. Thomas and A. Hunt, The Pragmatic Programmer, First. Addison Wesley, 1999 [Online]. Available: https://www.amazon.com/dp/B003GCTQAE\n","categories":"","description":"","excerpt":" The last months I was often confronted with software products having insufficient quality.\nInsufficient means late delivery, and few new features. The effort to correct errors in the field eats 30% …","ref":"/blog/2018/pragmatic-craftsmanship-professional-software-developer/","tags":["agile","design"],"title":"Pragmatic Craftsmanship - Professional Software Developer"},{"body":" Why do we define metrics and KPI?\nFirst, we want to find out how good the build-in quality of our software artifacts is.\nSecond, we want to improve the build-in quality through experiments and use the metrics to judge the success of these experiments.\nAnd the Key Performance Indicators KPI provide plausibility checks by qualifying the intrinsic quality of software artifacts against quantifiable strategic objectives.\nMeasurements shall be cheap to gather and as much as possible generated automatically through the tooling landscape.\nWe provide two sets of measurements to find out how supportive the development process is for quality and how to evaluate the quality of the artifacts.\nDefinitions A metric is a measure or a combination of measures for quantitatively assessing or improving a product, a process or a team.\nA key performance indicator is a metric that\nIs tied to a strategic objective.\nHas at least one defined time-bound target value such as a number, a trend, a variation, etc.\nTherefore, you must define your strategic objectives before you can use KPIs.\nLean approaches have an imperative to reduce cycle-time, eliminate waste and tend to zero-defect products. The last one is a corollary because defects are waste. Please use this imperative to define your agile and lean KPIs.\nIf your tooling landscape does not support automatic gathering of a specific metric, you shall make it optional until you have solved your tooling weaknesses. Accurate and real-time automated measurements are of tremendous importance for acceptance and lasting success.\nProcess Aspects The optimal lean software development process has a batch size of one, almost no waiting time, no superfluous stock and no quality issues.\nCycle Time of defects It shows the effectivity to resolve non-quality in product development,\nCumulative Flow Diagram for defects and for stories/Backlog Items It shows how effectively resources are allocated,\nSprint and PI burndown planned stories and effort versus completed stories and effective effort trends show the stability and adaptability of the development process,\nPlanned velocity and effective velocity trends It is an indicator for the maturity of the agile product organization.\nThis metrics shall be automatically provided through the issue and product backlog system. For example, the “best of breed” JIRA tool has build-in reports for all the above metrics, so the tools you use should also have them.\nTechnical quality A high-quality software artifact has no code smell issues, no compiler warnings, always compile, and all tests are successfully processed.\nCode quality\nMethod length distribution,\nClass size distribution,\nCyclomatic complexity distribution,\nCode Smells,\nProduct quality\nContinuous integration successful build trends,\nTest coverage trends for unit tests, integration tests and -ility tests. This metric implies the development team uses unit testing, TDD, ATDD, and automatic -ility testing.\nArchitecture\nSeparation of API and implementation can only be inferred on modern technology stacks.\nWork techniques\nRefactoring trends sometimes need to be evaluated manually in some projects.\nEmergent Architecture documentation trends probably need to be evaluated manually in most projects.\nThese metrics shall be automatically provided through your quality tracking and continuous integration systems. For example, the \"best of breed\" tools SonarQube and Jenkins have build-in reports for these metrics, so the tools you use should also have them.\nRemainder The above metrics are tools to discover discrepancies and weaknesses in your product development process and generated artifacts. The inferred results shall be used to identify and implement corrective measures.\nAgile emphasizes transparency. The above metrics and KPIs shall be visible anytime to all involved participants through dashboards.\n","categories":"","description":"","excerpt":" Why do we define metrics and KPI?\nFirst, we want to find out how good the build-in quality of our software artifacts is.\nSecond, we want to improve the build-in quality through experiments and use …","ref":"/blog/2018/why-do-you-need-metrics-and-kpi-in-agile-product-development/","tags":["agile"],"title":"Why Do You Need Metrics and KPI in Agile Product Development?"},{"body":" How can agile approaches be applied to deliver solutions in a government environment?\nHere is an example of a GIS open data portal successfully developed using agile approaches such as Kanban, lean product and technical excellence.\nGIS Open Data Initiative The Swiss government has initiated an open government data strategy to provide data at federal and state level to all citizens and interested parties. The aims are\nRelease of official data The Confederation will make data which are suitable for OGD available to the public in machine-readable and open formats to be freely reused. The individual administrative units must review and, where necessary, adapt the legal, organizational, financial and technical framework of data production to make this possible.\nCoordinated publication and provision of official data With the help of a central infrastructure (OGD portal), the Confederation will make its data sets easily locatable for the public and will make the data available for free use.\nEstablishing an open-data culture The Confederation will support the use of data through free, uniform and understandable terms of use and through additional information on the individual data sets. It will also pursue a continuous dialogue with the public.\nYou can find more details under Open Government Data Switzerland.\nThe solution is a GIS open data portal supporting self-service. It provides over a hundred theme maps with GIS data in multiple formats, resolutions and geographical sizes available through a self-service portal. It was realized using agile approaches.\nAgile Approach The solution was implemented during the year 2017 and released to the public end of the year.\nWe identified these key elements to explain the success of the whole product development. The whole organization and all involved managers shall\ntrust the team will solve adequately and pragmatically the customer needs. Trust your team and create a work environment to support them. For example, you should\nPromote technical excellence.\nProvide approaches for face 2 face communication.\nPublish Kanban board to increase transparency.\nAct as an agile leader\nEncourage accountability and self-management.\nDelegate and truly support technical autonomy.\nBe a gatekeeper to support and protect your team.\nReduce tension with IT, legal and management systems and build bridges to these departments.\nSet reasonable and achievable goals.\nThe delivered solution was\nIntegrated in the existing GIS portal of Zürich state to minimize barriers to interested parties.\nSelf-service approach to minimize running costs.\nPrivate cloud approach due to regulatory aspects.\nREST service to provide human-readable and machine-readable maps in various formats.\nBuild on existing approaches to generate GIS data to minimize risks and respect ambitious timeline [1].\nThe REST API is described here.\nLearnings Pragmatic approaches to become agile were very successful in this setup. These governmental organizations were willing and eager to try them.\nSenior management was supportive. After initial doubts, the team embraced the approach. They enjoyed the whole process and the successful deployment of the solution.\nThe enablers were * Senior management committed to the approach and supported it. * Team was open to new ways of working. * Team members were competent.\n1. A description of the technical solution in German is no more available from inser ","categories":"","description":"","excerpt":" How can agile approaches be applied to deliver solutions in a government environment?\nHere is an example of a GIS open data portal successfully developed using agile approaches such as Kanban, lean …","ref":"/blog/2018/agile-gis-open-data-initiative/","tags":["agile","series-swiss-agile-trends"],"title":"Agile GIS Open Data Initiative"},{"body":" Oracle has decided to release a new JDK two times a year.\nThe next release of Java 10 aka 18.3 will be available in March 2018.\nJDK 11 aka 18.9 will be released in September 2018. Java 11 will also be a long-term support LTS release.\nFor Java to remain competitive, it must not just continue to move forward — it must move forward faster.\n— Mark Reinhold The Visible Change The visible change is the dawn of the keyword var. Now instead of typing the type declaration of a local variable - local to a method, a block or an instruction - you can just use the keyword var. The constraint is that the variable is initialized at declaration. Stay tune for more support in JDK 11.\nWhen the type declaration is a complex generic type definition, the var shortcut is a boon. The code is less verbose and the legibility is at least as good. When the type is a class name, I got the impression. the benefit is less clear.\nAs an exercise, I updated the source code of open source libraries which I have written and the associated tests as in\nEvent \u003cEvents\u003e event = new Event\u003c\u003e(Events.AA_AB); var event = new Event\u003c\u003e(Events.AA_AB); The first impression is that the new construct sometimes simplifies the code of the library and very often improves the test cases. Perhaps it takes time until I am accustomed to the new way of writing Java code.\nUnder the Hood Changes The source code of the JDK is consolidated into one repository. It makes development work more efficient.\nThe garbage collector shall have a clear and documented API. Developing and adding new garbage collectors is easier.\nVarious updates such as the Unicode newest version. The extensions are used in library classes to better support locales.\nOpen JDK and Oracle JDK are slowly merging. For example, CA certificates will be provided to OpenJDK by Oracle.\nOutlook The rhythm of releases is staggering higher. Starting Spring 2018, we will have * The new rule as blogged by Mark Reinhold Moving Java Forward Faster. * You will get a new JDK every six months * You will get security updates every three months * You will get a long-term support release every three years.\nThis means that you shall update your JDK in development environment six times a year if you want to install the new JDK and the security releases. We recommend automating the process in your environment. And you shall deliver your applications in Docker containers to support the whole ecosystem.\nThe tool landscape is still struggling to adapt to the new rhythm. I am working with IntelliJ IDE and I had to wait for the EAP 2018.3 before being able to write JDK 10 code in the IDE. I use Gradle as a building tool and also to wait until JDK 10 was at least partially supported. And I am still waiting for the update of the code coverage plugin. Before that, I was back to stone age, writing software with a text editor and compiling it with the command line.\nThe library landscape is often behind. They are regularly incompatible with the newest version of the JDK.\nJavaFX will be removed from the regular JDK distribution in Fall 2018.\nThe cloud landscape does not support the latest JDK as SAAS. You must provide your custom docker images with the expected JDK or JRE. So we are back to IAAS.\n","categories":"","description":"","excerpt":" Oracle has decided to release a new JDK two times a year.\nThe next release of Java 10 aka 18.3 will be available in March 2018.\nJDK 11 aka 18.9 will be released in September 2018. Java 11 will also …","ref":"/blog/2018/java-10-aka-18.3-changes/","tags":["java"],"title":"Java 10 aka 18.3 Changes"},{"body":" How can you create better products and services?\nHow can you delight your customers, your collaborators, and your stakeholders?\nWe identified six levers to multiply the effectivity of your agile development teams and empower them to create great services and products.\nPlease add these tools to your toolbox and create great products.\nDesign Thinking and Customer Experience You solve customer problems through intuitive services and products. Customer expectations should fit with their experience with your products. That is why they should be involved in the whole definition and realization process. At the beginning, to understand the need and to test first ideas. During the implementation, they are directly asked for feedback, which then flows into further development steps.\nGo out with your incomplete product as soon as possible. Each iteration should deliver an upgraded version of the product. The pressure to deliver is huge. A design thinking iteration has a duration of at most one week.\nLean Startup and Lean UX Minimum viable products MVP are first developed as minimally functional products. Within 60 days, a physical prototype will be created that customers can test during this time. The software component shall be delivered after the first or second iteration, which means in less than one month.\nNew technologies such as 3D printing, cheap hardware and IoT boards, continuous delivery, and simulation enable your teams to deliver on time. These are not pure mockups but executable applications. If it appeals to the customer, the MVP will evolve gradually to a minimum marketable product MMP. The focus is always on adding customer value.\nBeyond Budgeting Approaches There is no long-term budget plan for products and projects. After each cycle of customer feedback, the goals and budget are evaluated again. The value streams have agile teams that work like small companies.\nEach team has a Product Owner - PO - who has overall responsibility for their respective product. Realizations are further funded, modified or canceled on the basis of initial results, meaning after customer and technical tests.\nThe product financing is following a start-up approach and not based on the yearly budget as usual in larger companies.\nCo-location and Team ownership Work is done across departments, in cross-functional teams. All those who can contribute to the success of the product, e.g. company organization, IT, market management, or sales, sit in one room. They form the agile team. Co-location ensures lean coordination processes as well as speed and quality.\nCo-location also means: You are moving. The teams move into a room and work focused together on their product. There are no phones, no other projects, and no outside distractions. They use collaboration tools such as chats, wikis, and Scrum boards. Scrum teams are wholly focused on their product.\nPeople check three times a day their emails; otherwise the email client is closed and inactive. All phones have voicemail.\nAgile Methods and Craftsmanship Employee training is essential. In the value streams, we provide staff with experienced coaches to build knowledge in agile methods and software craftsmanship.\nWork is done according to proven agile methods. Software development relies on modern and agile techniques such as pair programming, refactoring, test-driven development, continuous integration, and Scrum. For bigger product development we use LeSS approach.\nRead this One Way to Improve Your Scrum Approach for a description of modern agile development procedures.\nElastic Infrastructure We shall use the state of industry technology. This enables test-driven development - ATDD, TDD -, meaning predefined automated software tests that run in real-time.\nCloud infrastructure provides unlimited processing capabilities for development, test, and deployment of software artifacts.\nDevelopers have fast notebooks, fast SSD, plenty of RAM, and 4K external screens. In addition, the technical infrastructure enables software to be scaled and adjustments made immediately - CI, CD, DevOps -. The goal is to deliver a software release in production every few hours if needed.\nLearnt Lessons The power of co-location is tremendous. The work atmosphere is focused, friendly and productive. Team members are continuously working on the solution without spurious task switches in their team room.\nEstablish stable and long living teams.\nRealize the importance of training and coaching.\nEmbed your teams and processes in the organization.\nChange processes for beyond budgeting approaches and lean enterprise. The organization has to stop requiring exact budgets and detailed yearly planning.\nReflect on the impact on the whole organization. See also my blog discussing what agile companies are.\n","categories":"","description":"","excerpt":" How can you create better products and services?\nHow can you delight your customers, your collaborators, and your stakeholders?\nWe identified six levers to multiply the effectivity of your agile …","ref":"/blog/2018/six-levers-for-better-agile-product-development/","tags":["agile"],"title":"Six Levers for better Agile Product Development"},{"body":" The Scrum guide was revised in 2016 and got clarification concerning the core values. I was thrilled. Talking about values and mental models, you must have to successfully introduce and be agile is awesome.\nA new revision was published at the end of year 2017, just a year after the addition of values.\nWhat has changed?\nWhat has the community learnt and committed to the new version of the guide?\nScrum is not only for Software Scrum was initially developed for managing and developing products. Starting in the early 1990s, Scrum has been used extensively, worldwide, to:\nResearch and identify viable markets, technologies, and product capabilities.\nDevelop products and enhancements.\nRelease products and enhancements as frequently as many times per day.\nDevelop and sustain Cloud (online, secure, on-demand) and other operational environments for application use.\nSustain and renew products.\nThe essence of Scrum is a small team of people. The individual team is highly flexible and adaptive. These strengths continue operating in single, several, and networks of teams. They develop, release, operate and sustain the work and work products for thousands of people.\nThey collaborate and interoperate through sophisticated development architectures and target release environments.\nScrum is a tool to solve complex problems, any kind of complex problem. It is already the industry standard for software projects. It is becoming a major standard for all complex products.\nWhat does a Scrum Master? Changed wording in The Scrum Master section to provide better clarity to the role. The text now reads:\nThe Scrum Master is responsible for promoting and supporting Scrum as defined in the Scrum Guide. Scrum Masters do this by helping everyone understand Scrum theory, practices, rules, and values.\nThe Scrum Master is a servant-leader for the Scrum Team. The Scrum Master helps those outside the Scrum Team understand which of their interactions with the Scrum Team are helpful and which are not.\nThe Scrum Master helps everyone change these interactions to maximize the value created by the Scrum Team.\nAdded to the section Scrum Master Service to the Product Owner\nEnsuring that goals, scope, and product domain are understood by everyone on the Scrum Team as well as possible.\nScrum master is a servant leader and promotes Scrum and agile approaches. The whole team works on a product. They understand the vision, goals, scope, and have extensive domain knowledge.\nThis means the whole team talks with stakeholders and users. The team members have a genuine interest in learning more about the product domain.\nScrum Events Updated the first paragraph of the Daily Scrum section to read The Daily Scrum is a 15-minute time-boxed event for the Development Team. The Daily Scrum is held every day of the Sprint. At it, the Development Team plans work for the next 24 hours. This optimizes team collaboration and performance by inspecting the work since the last Daily Scrum and forecasting upcoming Sprint work. The Daily Scrum is held at the same time and place each day to reduce complexity.\nUpdated the Daily Scrum section to provide clarity on the goals of the Daily Scrum including this text The structure of the meeting is set by the Development Team and can be conducted in different ways if it focuses on progress toward the Sprint Goal. Some Development Teams will use questions, some will be more discussion based. Here is an example of what might be used:\nWhat did I do yesterday that helped the Development Team meet the Sprint Goal?\nWhat will I do today to help the Development Team meet the Sprint Goal?\nDo I see any impediment that prevents me or the Development Team from meeting the Sprint Goal?\nAdded clarity around time-boxes Using the words “at most” to remove any questions that the time-box for Events means maximum length, but could be shorter.\nThe guide clarifies the daily Scrum event. It establishes a daily feedback loop for improvement.\nFor slow learners, time-box means maximum duration.\nScrum Artifacts Added to the Sprint Backlog section To ensure continuous improvement, it includes at least one high priority way in which the team works, identified in the previous Retrospective meeting.\nAdded clarity to the Increment section An increment is a body of inspectable, \"Done\" work that supports empiricism at the end of the Sprint. The increment is a step toward a vision or goal.\nThe guide emphasizes the learning and improvement process. One root of the agile manifesto is lean thinking.\nFor slow learners, you inspect the result of the increment and put at least one improvement measure in the next sprint backlog.\nPrevious Changes The biggest change for the daily work was introduced in the previous revision. Read previous blog \u003c\u003c[scrum-guide-2011\u003e\u003e. The word commitment is no more used in the description of the planning event. The team now provides a forecast which stories shall be realized until the end of the sprint.\nThis change was necessary because people - especially command and control responsible - did not read the official definition of commitment - Oxford Dictionary -.\nThe state or quality of being dedicated to a cause, an activity.\nThe second big innovation was the introduction of five Scrum values: Commitment, Focus, Openness, Respect, and Courage.\nI welcome the focus on values, principles and core behaviors over detailed checklists and rules. Please also read again the twelve principles of the agile manifesto.\nLinks [1] Scrum Guide 2011. Marcel Baumann. 2016.\n[2] What Does a Scrum Master?. Marcel Baumann. 2017.\n","categories":"","description":"","excerpt":" The Scrum guide was revised in 2016 and got clarification concerning the core values. I was thrilled. Talking about values and mental models, you must have to successfully introduce and be agile is …","ref":"/blog/2018/scrum-guide-2017-what-changed/","tags":["agile"],"title":"Scrum Guide 2017: What changed?"},{"body":" You work using agile approaches. Your collaborators are trained how to use agile approaches.\nTechniques such as test-driven development, continuous integration or clean code are regularly practiced. Your teams reduce their technical debt and deliver regularly stable product increments.\nNow you are looking for the next improvement. How can your team improve product and increase customer value?\nIt is time for a fresh view.\nPerform an agile assessment with an external expert from another company or department.\nEffort You want to take a fresh view on your process and practices. The external person shall provide hints that she observed in your team and how other groups solved similar problems. The assessment lasts approximately 2 days per team, including the finding workshop with the team members, Scrum Master, and Product Owner. This workshop has around half a day duration.\nApproach The Scrum Assessment speeds up your Scrum mastery and lets you collect low-hanging improvements.\nDo you already work with Scrum or Scrum/Kanban and want to know where you stand?\nDo you get the benefits that are possible with Scrum?\nWhere do you deviate from the Scrum theory and what are the consequences for you?\nAre your structures and practices for coordinating dependent teams effective, meaning scale agile?\nWhat potential for improvement do you have?\nWhich measures make sense, so you can benefit more from Scrum?\nCould you introduce agile techniques to increase the quality and to enhance outcomes?\nWe work on these themes in the Scrum Assessment.\nWe analyze your Scrum implementation.\nWe collect feedback through questionnaires and observation.\nWe assess a single team or the whole development organization.\nWe evaluate in comparison with other companies and make suggestions for improvement.\nAction We typically proceed as follows for the analysis:\nRecord Scrum meetings – sprint planning, sprint review, sprint retrospective, daily scrum, if necessary backlog refinement –.\nObserve how the team members work during the sprint, to better understand the dynamics in your team.\nAnalyse the vision, roadmap, release plan, product backlog, and impediment list together with the product owner.\nInterview product owners, scrum masters, selected developers and selected stakeholders.\nReview the structures, processes and practices, (e.g., Scrum of Scrums, Portfolio Kanban) used to coordinate dependent teams.\nAfter this analysis, we do a debriefing in a half-day workshop. We present our observations, conclusions and recommendations. The Scrum team uses our findings to calibrate and adapt their agile transformation journey.\nThrough the workshop approach, we tailor the recommendations together with the team members to specific needs. We can clarify any ambiguities.\nUpon request, we will also prepare a written report.\n","categories":"","description":"","excerpt":" You work using agile approaches. Your collaborators are trained how to use agile approaches.\nTechniques such as test-driven development, continuous integration or clean code are regularly practiced. …","ref":"/blog/2018/one-way-to-improve-your-scrum-approach/","tags":["agile"],"title":"One Way to Improve Your Scrum Approach"},{"body":" Why is it so cool to develop software using Java, a modern IDE and agile tools?\nBecause the environment empowers you and incredibly speed-up your development outcomes. In seconds, you know if the next code increment adds value to your product.\nTest driven development and static quality tools are integrated in your IDE. Each time you check some code into your Git repository, all configured checks shall be executed before allowing the commit.\nLiberated your team works adding functions and no more spend unaccounted hours in setting up infrastructure.\nThis trend is propagating to other technology stacks such as Python or C#, but less for PHP or Javascript/NodeJS worlds. I still experience higher maturity in the Java toolchain.\nBelow, our current set of techniques and tools to multiply our results and bring earlier products to your customers.\nJava Quality Solution Quality The most efficient approaches to improving the intrinsic quality of your software solution are\nUse Pair Programming Write regularly together source code. Decide that all complex code parts shall always be developed through pair programming. If you feel adventurous, give a try to mob programming. Pair Programmers learn:\nTo perform a form of continuous review.\nTo provide a measurable increase of quality.\nTo evaluate more options than solo programmers.\nTo smooth the low points of your partner and level-up the high points.\nTo produce simpler solutions.\nUse Refactoring Before pushing your code to the Git repository, always take a look and refactor your code. You are a craftsman and shall be proud of your result,\nUse Java 8 Lambdas and Streams Actual Java code builds on lambda expressions and stream constructs. Your for loops are replaced by stream pipeline, your algorithms extensively use lambdas.\nUse Java 9 Modules It is finally possible to clearly define public interfaces of a whole software component. Configure the dependencies to other libraries and identify specific modules as privileged participants.\nDo not write Java code as it was done last millennium. Use the actual constructs to write solid and resilient code.\nPairs complete a task in 60% of time taken by a solo programmer. So two people are almost but not quite twice as fast.\nProgrammers working in pairs produce higher-quality output. Teams with high scores in stability and throughput spend 44% more time on new work.\nNo better way to spread learning in a team!\nCode Quality The most efficient tools to detect glitches or legacy constructs in your code are\nSonarLint The plugin for your favorite IDE provides all the SonarCube checkers to apply on your source code. Purify it before pushing it into the continuous build pipeline. The plugin supports download of tailored rules from your company SonarCube instance.\nSpotBugs The successor of the wildly popular FindBugs tool can be integrated in your build pipeline to improve the odds of correctness.\nPMD Is another tool to automatically detect potential quality problems.\nIntelliJ IDEA build-in Checks You are lazy and do not want to use additional tools. Please use at least the build-in checkers of IntelliJ IDEA to improve your code. It is very unprofessional to have equality problems or boolean condition errors in modern code.\nTest Quality Test Driven Development - TDD You are serious about development quality code. So you are working with the test driven approach TDD and need to write unit tests. Each time you write some code, you go through the loop \"red - green - refactor - commit\".\nJunit 5 is the standard and best unit test framework for Java solutions. The newest version supports lambdas is a pleasure to use.\nAssertJ enables the writing of legible assert statements in your unit tests.\nMockito Tests must be lightning fast, thousands of unit tests shall run in a few seconds. Remove all dependencies to external components from your source code, mock these elements with Mockito.\nHamcrest Your test conditions are complex. You want to have a legible code, start using hamcrest to write clear assertions in your tests.\nPlease never access a database or a file system when running unit tests. If you low-level tests with files, use an in-memory file system mock. [1]\nEach time an error is found in productive code, write first a test to reproduce it, then correct the error. This approach guarantees the same error will never again occur.\nAcceptance Test Driven Development - ATDD You are serious about delivering the functions your customer needs. Each story you implement has acceptance criteria. These acceptance criteria define your requirements. See specification by example. Your acceptance tests document and validate these requirements.\nCucumber Write your acceptance criteria and document your requirements in one step.\nRemember stories are not requirements, they are work items. Requirements are coded and documented in your acceptance tests.\nContinuous Integration Agile means reacting to all changes. Lean means build-in quality. Your continuous pipeline certifies after each change that your solution is correct and has the correct behavior.\nGradle Is the new standard for building your artifacts.\nJenkins Is the regular tool for a local build pipeline.\nIf you have a choice, use cloud continuous integration for team activities. Decide if you prefer the cloud approach – e.g., with TravisCI or Bitbucket Pipelines – or Jenkins within Docker for your local integration activities.\nA smooth running CI pipeline is a boost for team morale and motivation. To know that your application compiles and runs through all your automated tests anytime is such a good feeling.\nContinuous Delivery and Deployment Agile means to react fast the changes. You need to deliver and deploy your new solution to your customers in minutes or hours.\nDocker Virtual machines were a powerful construct, but they are slow and require a lot of resources. Docker is the answer. Start a testing instance in 300 milliseconds.\nTomcat and TomEE Embedded servers deployed in docker image in a matter of seconds. Actual versions of Tomcat or TomEE support it.\nhsqldb In memory database are lighting fast for integration and test staging areas. Later move to a file-based database for the production area. The database shall be a configuration of the delivery and not require a new compilation.\nGoogle Cloud AppEngine To deploy various integration environments\nDesign Quality Important decisions and overall structure shall be documented for new team members. Architecture Decision Record: A lightweight approach to document architecture decisions using Markdown documents and traceability through the decision history. UML: Sometimes I would like to draw some UML diagrams to explain a design solution. I am currently using a textual tool to define such diagrams.\nDevelopment Quality Analog Board Nothing beats a big analog board in the team room as the ideal information radiator. If you want your collocated to work effectively and solve problems as a team, you shall provide an analog board.\nTrello, Stride, BitBucket, Hipchat and others Atlassian tools for distributed teams The first advice is to have a collocated team. The productivity and performance gains are unachievable in a distributed environment. We have splendid experience with Atlassian and Google App solutions to mitigate the drawback of distributed teams and establish a team work atmosphere. But a collocated team still rocks.\nIntelliJ IDEA This IDE is the choice for refactoring, powerful context suggestions, and efficient programming. If you use Eclipse or Netbeans, try a friendly refactoring competition with an IDEA convert.\nGit Stop using Subversion, CVS, TFS or other geriatric tools. Agile development, efficient integration in delivery pipelines, and extensive refactoring require Git. Migrate now to Git and leave dreaded message Tree conflict detected, please solve manually behind you.\nThese tools shall be used in the agile way. You do not have long-lived branches in your source code management tool. Either you have only short-lived local branches or better, you work against the trunk. Complex branching strategies are just a waste for a lean practitioner.\nI decided to collect all these hints in the same long post. They belong together. Every day you design a solution, you code it, test it, improve it and guarantee its quality.\nThese activities are tangled together to producing a product you are proud of.\nAnd yes, I know about GitHub, Gitlab, Slack, Ant, Maven, Jetty, Amazon Cloud, AssertJ, Subversion, Eclipse, Netbeans and other good tools. But I still prefer the ones above; I am convinced to be more productive with them.\n1. After years of neglect, a Jimfs 1.2 was released in January 2021 and published on maven central. ","categories":"","description":"","excerpt":" Why is it so cool to develop software using Java, a modern IDE and agile tools?\nBecause the environment empowers you and incredibly speed-up your development outcomes. In seconds, you know if the …","ref":"/blog/2018/why-is-it-so-cool-to-develop-with-java/","tags":["java"],"title":"Why is it so Cool to Develop with Java?"},{"body":" Often, teams discuss if their digital product should upgrade to the current version of open-source or commercial used components.\nThe same discussion arises for development tools and programming language versions.\nI have a strong opinion about upgrades. You should always use the current version of all components included in your product. The only discussion is the timely when and never the if.\nBe realist, if your product is successful, you have to upgrade before the components are obsolete. Otherwise, your application will become a geriatric solution.\nOrganizations often forget the liability of using older versions of components with known and published security flaws [1].\nBelow, I provide you with arguments why you should always update all components in a timely fashion.\nSecurity and Governance Social responsibility and liability considerations require your product to be immune to published attacks. Your company shall provide reasonable protection to all your customers. Therefore, you always include security patches in your product in a timely manner. Other approaches are deeply unprofessional and unethical. In some countries, you are liable if you do not update your software to avoid known security attacks.\nYou should use actual Java JDK and JVM version because the community is concentrating their effort on the latest version. Oracle only provides public support for the latest two Java versions, e.g., in January 2018, Java 9 and Java 8 are officially supported. Java 8 support will stop at the end of September 2018, older versions are no more publicly maintained.\nIf, for some reason, you are using an older commercially but no more publicly supported JDK, you must sign a support contract with the Oracle company and pay for it. You cannot use deprecated JDK versions because nobody provides security fixes on these versions, e.g. Java 6 commercial support ended in December 2017.\nIf you include a deprecated JDK / JVM in your product, you willingly endanger your users and shall be liable for their losses.\nGovernments started to realize how unprofessional organizations are working. Recommendations and laws are grafted to force better security [2].\nUpgrades and Genuine Improvements The component developers put tremendous effort to improve the non-functional aspects of their products. Performance and scalability improvements between Java versions are impressive. You shall not hinder your own customers to rip these low-hanging fruits.\nActual versions of standards - Unicode, HTTP protocol, time zones - help eliminate incompatibilities and subtle errors from use cases. Having older versions will hinder you to support actual timezone changes or extensions in the Unicode standard.\nTraining and Community Support Good training and associated certification are only available for actual versions of languages, frameworks or library. You will not find any training for Ada, Apache server 1.x, or any object-oriented database.\nThe articles in Stack Overflow and the community always cover the current version of components. So you are on your own for support or code examples for older versions of libraries.\nHidden Cost of Backport Writing code for older versions of libraries, frameworks or runtimes means backporting to older application interfaces and features. For example, if you do not have access to auto-closable resources, you have to write your own framework and software checks guarantying closing system resources. You should always free system resources in your application. The literature states this is neither easy nor error free. It is the root reason why such a feature was added to Java.\nTeams often forget the consequences of back porting. Later, when you adopt a more modern version of your dependencies, you have to remove all this now spurious code and migrate to the build-in concept. Otherwise, the code is no more maintainable and changes are error-prone.\nIn other words, you have to twice work when backporting, once to build it in, and a second time to later remove it. This solution is certainly not the most economical one.\nMotivation of Team No professional developer wants to write source code using JDK 7 or older versions. They want to develop using modern and powerful constructs such as lambda, modules, HTTP/2. I would state that not using such constructs disqualifies you as a professional engineer.\nWe observed how whole teams become demotivated because a huge part of their daily work was backporting to old environments.\nI understand that geriatric software solutions do not allow you to use the latest versions. It is time to bury such products and to go on. The only open question is the date of the burial. Do not wait too long, decomposition is never nice to smell.\nMaintaining or extending software based on old versions of libraries is just throwing money out the window. You need a solid basement to build on.\n1. Data privacy and protection laws were established in Europe in 2018 and in Switzerland in 2020. Companies and executives can be sued, sentenced to pay huge fines, and in the worst case, C-level managers get a criminal record entry. Such an entry can destroy your career potential. For example, you are banned from becoming a board of directors members of a lot of companies. 2. The White House in the USA initiated an Executive Order on Improving the Nation’s Cyber-security in 2021. The goal seems to be the definition of minimal rules for software products to minimize known security risks. ","categories":"","description":"","excerpt":" Often, teams discuss if their digital product should upgrade to the current version of open-source or commercial used components.\nThe same discussion arises for development tools and programming …","ref":"/blog/2017/why-use-current-software-components/","tags":["design"],"title":"Why Use Current Software Components?"},{"body":" It is Christmastime.\nClean your desk and the content of your workstation. Upgrade your tools and your development environment to the actual version.\nIt is time to add automated build pipelines, TDD, ATDD, and Docker to your toolbox. Embrace agile approaches.\nWork focused and avoid overtime. Prioritize outcomes instead of outputs. Enjoy family life, practice sport, and pursue continuous training.\nClean Your Desk Digitalize Your Office It is time to sell the last fax device in your office and plan to remove your big printer. Burn your paper documentation and discard your folders. Please store all the information digitally and have an effective search application in your company. Use Wiki to publish company data and store knowledge for all collaborators.\nHave a professional handset and a good camera for video conferences.\nPut all your documents on your company drive and index all this information. Finding relevant data by keyword searching is a huge gain of time. Another advantage is no more backup of workstations and notebooks. All mission-critical information is always on the company’s drives.\nSocialize with your Team Organize a real team room. Colocate all your team members, design on big whiteboards. Please use analog Scrum boards. You need big whiteboards, analog Scrum boards, meeting corners.\nRestart your brown bag training program. A Friday beer event is always a welcome event.\nCelebrate success after each major release of your products. Another gain is tension just disappears when people talk around snacks and drink together a glass of wine.\nUpgrade your Toolbox As a Java developer, it is time to use state of the industry tools and improve your daily work\nJava 9 JDK - If you are still working with Java 7 or earlier, you are a laggard\nJava 8 public support will end middle of next year.\nJava 10 shall be available next year. The early releases are already online. Download them and try the new features. The local variable declarations are a huge improvement.\nYou are a laggard and security danger if you are still using Java 6 or earlier.\nGradle\nBuild, deliver, and deploy your solution with one keystroke.\nContinuous integration, delivery and deployment pipelines.\nNever again configure manually a deployment by hand.\nTest environments with Docker\nNever say again, it is working on my machine.\nModern IDE such as IntelliJ IDEA\nSplendid Gradle support.\nMarvelous JUnit 5 support.\nAlt-Enter anywhere brings up context-sensitive options. Run a test, create a test, create subclass, convert to closure, generate missing test methods, remove an explicit type, split into declaration and assignment, introduce local variable. The suggestions are limitless.\nGreat Java 8 support, suggesting lambda notation where appropriate!\nEven displaying anonymous inner class usage (collapsed) as if it was written using a lambda expression.\nQuality with PMD, FindBugs, SonarLint, or the build-in rules of IntelliJ\nBanish Flash from your workstation\nNew Year Improvements Sustainable Pace Agile approaches state you should work at a sustainable pace, forty hours a week. Avoid working overtime during the evenings or weekends.\nEnjoy family time, practice sport, give back to the community.\nWork with your team, ideally collocated in a team room. Face2Face exchanges and pair working - pair design, pair review, pair programming, pair checkin - are training on the job occasions.\nHone your Craftsmanship Here are some suggestions to hone your craftsmanship\nPractice coding dojos to improve your programming skills.\nRead good technical books, at least one book per quarter.\nLearn new shortcuts and plugins for your favorite IDE.\nImprove the agile, lean, Scrum, LeSS approaches in your department.\nRefactor daily code and practice clean-code.\nBecome an expert of Git.\nIncrease self-awareness and work on your soft skills, teamwork shall improve.\nI wish you success, fulfillment, happiness and fun.\n","categories":"","description":"","excerpt":" It is Christmastime.\nClean your desk and the content of your workstation. Upgrade your tools and your development environment to the actual version.\nIt is time to add automated build pipelines, TDD, …","ref":"/blog/2017/clean-your-desk-and-define-new-year-improvements/","tags":["organization"],"title":"Clean Your Desk and Define New Year Improvements"},{"body":" An impediment is any aspect hindering the team or a company to deliver value and higher quality to the customers.\nAn agile organization continuously removes impediments. It is one of her major activities. This activity is ongoing and can never be completed.\nImpediments resolution is Kaizen 改善, a key technique to lean, agile and Scrum approaches. The translation is change for better.\nOften agile organizations forget to aggressively identify and resolve impediments.\nWe provide hints to improve your Kaizen process.\nIdentify Impediments The first step is to identify and classify your impediments. There are always impediments; solving them will increase the effectivity of your department. You shall\nMake impediments visible. Publish them on the Scrum board for all to be seen. Use diagrams and colors. Do not hide them in an issue tracker or a spreadsheet.\nRaise issues early and often. The daily stand-up meeting is an ideal platform. Ask each day if impediments jeopardize the sprint goal.\nFeelings matter. Let everybody identify impediments. An impediment is a dysfunction of the organization, never a flaw in an individual.\nAim for effectivity and quality. Efficiency is less important.\nFind out the root causes, discuss the 5 Whys over how.\nProvide safe to fail environment. Use the Plan-Do-Check-Adapt loop to implement your experiments to improve,\nLife the Scrum values. Lead by example: Focus, Commitment, Transparency, Openness, Respect, and Courage.\nSolve Impediments The real work of the agile coach is eliminating impediments.\nThe goal of resolving impediments is often higher internal quality. Internal quality is the sole responsibility of the Scrum Team.\nWork on improving external quality and improved effectivity. A delighted customer will order more.\nStart with short-term wins to prove the organization that it is worth the effort.\nAllocate time and resources in each sprint to resolve a few high prioritized impediments. Please define measurements Key Performance Indicators KPI. Find out if the solution solves the root cause of the problem.\nAll team members are responsible for solving team impediments. The Scrum master is responsible for coaching the team and helps solve overall impediments rooted in the organization.\nTrack Impediments The identification step is easy, remember to track impediments and their resolution. You have a serious problem\nIf the impediment backlog lives in the mysterious black book of the Scrum master.\nIf your impediment backlog does not change.\nIf your impediment backlog is empty.\nIf you have an impediment backlog with a growing number of active impediments.\nIf the Scrum master resolves all the impediments himself.\nIf you do not solve at least one impediment each sprint. It is a mandatory part in the Scrum Guide 2018 version.\nAs a Scrum coach, Scrum master or Scrum team member, you should reflect upon the above statements at least monthly. Otherwise, you are just pretending. Remember\nDoing Agile instead of being Agile is just Cargo Cult.\n","categories":"","description":"","excerpt":" An impediment is any aspect hindering the team or a company to deliver value and higher quality to the customers.\nAn agile organization continuously removes impediments. It is one of her major …","ref":"/blog/2017/impediment-list-is-of-tremendous-importance/","tags":["agile"],"title":"Impediment List is of Tremendous Importance"},{"body":" The difficulty with contracts is that it is about trust. Here lays the roots for success or disaster.\nIf no trust exists, the henceforth dreaded process is established. After tough negotiations, the development team starts but does not collaborate with the customer. They just build what is written in outdated requirements. A subpar solution is shipped and the relationship with the customer is deeply damaged.\nWe can do better. We shall collaborate, trust each other and create an awesome product. This is the essence of being agile.\nHow shall we be agile and work the lean way in a contractual environment? By contractual I mean no time and material approach.\nWe shall\nDefine and rapidly realize the minimum viable product MVP. This product defines success and builds trust. Use this MVP as anchor during contract negotiation.\nPrioritize Money, Time, and Scope. The most important item - and it can only be one - is the basis for the agile contract.\nService is the essence of software application development. So your agile contract shall be a service contract. Select a rolling contract approach to deeply involve both sides.\nFail early and learn. The disputes between contractors and customers shall stay reasonable due to the smaller amounts in play.\nContract Initial success is the timely realization and deployment of the MVP. The MVP is the anchor of trust. Use rolling contracts to extend the product.\nPriority on Money Frame cost as investment and discuss value with the customer, not just money. Fix the budget (money dimension) and have some tentative milestones. We must invest to prioritize the stories and talk about your MVP. Often nice to have functions are never realized.\nPriority on Time Sometimes, it is not about the cost. Instead, there is a deadline, like the end of the fiscal year. Fix the product milestones (time dimension). We still must define a budget and prioritize the stories. The mandatory stories shall be implemented before the deadline. The budget can be extended to respect the deadline.\nPriority on Scope And in other cases, the scope actually is quite defined, and both money and time are flexible. In these cases, it makes sense to fix the scope variable. Fix the functionality (scope dimension). Budget overrun and delays are possible. Defining the scope in advance is less agile. You assume you already know everything about the product to build.\nThe contract defines a service. The delivered product is the output of the service contract but not the sole item of the contractual binding.\nTracking Signing a contract is the easy part. Now you must track progress, manage changes, and reach the agreed goals in a timely and economical way.\nCommit to trust, training, and decision-making. Train your people and customer’s representatives.\nDeliver incrementally every few weeks to prove progress and cement trust.\nThe more trust you build, the less escalation you will have during the product.\nHave rolling planning, budgeting, and tracking. You shall gain visibility of progress, transparent costs, and a tentative end to fulfilling the contract.\nHow do you track and document changes?\nHow do you inform your stakeholders about contract changes?\nThe later questions are solved differently based on the level of trust between the contractor and the customer. Try to avoid a full-fledged change management process and systematic escalations.\nWork Approach The Agile Manifesto states\nIndividuals and interactions over processes and tools\nWorking software over comprehensive documentation\nCustomer collaboration over contract negotiation\nResponding to changes over following a plan\n— Agile Manifesto 2001 Here is the approach is to define and finalize a fixed price agile contract. Please remember the manifesto, it is all about collaboration and responding to change.\nCreate the product vision and initial backlog together. Write good epics and identify the main topics. Topics identify the minimum outcomes to maximize solution value.\nCommit to the vision and defined MVP.\nDefine a budget for the product.\nDefine tentative deadlines.\nRefine some epics and write the stories. Keep them concise and clear.\nEstimate the product backlog together with the customer.\nIt is all about cooperation and adaptability.\nUse relative estimates to classify stories, use story points.\nTalk about business value and implementation risks.\nFinalize the contract. What happens if cost overruns happen? We suggest sharing the costs and defining the percentage each party shall pay. If the supplier pays 0%, it is a time and material contract. If the supplier pays 100%, it is a fix price contract. Aim for 50%.\nDefine a checkpoint to validate the estimates and hypotheses.\nDefine exit criteria and exit points for both parties.\nState governance how to simplify scope and stories to respect budget. State and agree upon an escalation process if no agreement is found.\nInvite the customer to the Scrum sessions. Sell the entire Scrum team and not individuals.\nSell releases containing a small set of sprints.\nDeliver and deploy the build solution.\nHave the end users use the deployed product.\nThe Scrum master, the product owner and the team shall perform these activities. Never use external consultants or business analysts. The ones writing the stories and estimating them shall implement them.\nFallback Hide the fact you are working the agile way. Do not tell the customer you are working any differently to normal. Clearly state internally why you do it and why your corporate values allow this solution.\nEstimate and plan the work as you would normally. Sign a perfectly normal contract. UseAgile techniques and especially eXtreme Programming to improve delivery. You need to have a do not ask, do not tell type policy because basically you are lying.\nConclusion The most successful projects I worked for had selected the money dimension seen as investment budgets. Goal correction was communicated early and the contract amended accordingly. We avoided complicated and expensive change request processes.\nThe build products were very successful. We respected the agreed budget and were timely. The dynamic was in the scope definition. We delivered early and often high quality increments, so the end users could adjust their expectations and refine their needs.\n","categories":"","description":"","excerpt":" The difficulty with contracts is that it is about trust. Here lays the roots for success or disaster.\nIf no trust exists, the henceforth dreaded process is established. After tough negotiations, the …","ref":"/blog/2017/agile-approaches-and-fix-price-contracts/","tags":["agile"],"title":"Agile Approaches and Fix Price Contracts"},{"body":" You develop your software products using agile approaches. You are doing Scrum, Kanban, Scrumban, Lean Software Development, or LeSS.\nYour collaborators start asking questions about their organization, management roles, and critique the internal processes.\nHow employee yearly evaluation, bonus evaluation – work? You hear strange statements such Be agile, do not do agile.\nYou as a manager realize you have to describe your role in an agile environment. What does it mean? Please read first this blog post describing What is an Agile Company?\nIf you have time, read the post Why Scrum Masters are not Administrators?\nAnother one is about So Called Agile and Scrum Failures. Upon reading, you shall have a deeper understanding of how to describe your role as a manager in an agile environment.\nWe will first discuss your work environment. Second, the characteristics of people you are working with shall be sketched. Finally, we will sketch your job description.\nComplex Systems and Empiricism The development organization of a software solution is a complex system. This means that nobody understands the rules. You cannot implement a measure and be certain it will improve the whole system. If you want to implement lasting improvements, you must:\nProvide transparency The more you and your collaborators know, the better your decisions are. All information shall be available to all participants, including financial and marketing data.\nExperiment with improvement Inspection and adaptation are keys; processes and value streams shall constantly be improved. Take the lean approach: Relentlessly eliminate waste and increase the value stream.\nEstablish long-living teams Teams are the backbone of your company; people are human beings not resources.\nCollaborators and their Needs Knowledge workers are the collaborators you hire in this millennium. They are smart, motivated and better qualified than you are.\nIt does not make sense to hire smart people and then tell them what to do. We hire smart people, so they can tell us what to do.\n— Steve Jobs A manager working with knowledge workers has understood the above quotes and\nBelieve in the X vs Y theory. You provide safety to all your people and truly respect them. People only perform if you provide psychological safety. The test is Do you compliment every collaborator you are working with at least once a week.\nProvide a purpose, give autonomy, and let them achieve mastery. The test is Continuous learning and improvement through trial and error.\nPromote exclusively intrinsic motivators. The test is No bonus or monetary incentive system exits in the company.\nEstablish a work environment where collaborators work in flow. The test is No email or phone answering rules in the company; no mandatory overtime.\nThe agile and lean principle Plan-Do-Check-Adapt applies to agile managers as well.\nAre you catalyzing organization change to embrace agile values, starting with a culture of value delivery?\nDo you provide significant organizational roadblock removal for agile teams?\nDo they perceive you as a coach and leader more than as a manager?\nDo you use metrics to support teams to improve their performance and to help senior leaders understand how to improve value delivery?\nAre you helping your partners create lean processes to synchronize with agile teams?\nHow are suppliers encouraged to work in an agile way?\nLet Go and Delegate Delegate and empower your team. As a manager, you shall reconsider which activities are your responsibility. An agile team must at least be self-organized and ideally self-designed.\nManager lead The team performs the work,\nself-organised / self-managed The team organizes and performs its own activities and work.\nSelf-designed / self-selected The team creates, selects and removes new members and maintains itself. Logically, they are also in charge of evaluation, rewards, and career development.\nSelf-directed / self-governed The team has no outside management.\nSee also Mike Cohn’s blog https://www.mountaingoatsoftware.com/blog/two-types-of-authority-leaders-must-give-to-self-organizing-teams [Types of Authority Leaders must give to self-organizing Teams].\nJob Description Champion the Agile Process as a manager, you will be expected to get behind the move to agile and support it in both your words and your actions. Create an awesome work environment to attract smart collaborators.\nMentor Teams to Solve Problems Their confidence, learning, and the level of respect they earn from their teams will depend to a large extent on how you treat them.\nParticipate in transition planning Agile transformation promotes self-organized teams that work efficiently on their own, which involves strategic planning.\nFind ways to reduce waste as an agile manager, you will be expected to continually improve workflow and maximize efficiency by eliminating impediments. This key activity may not be part of your current role as a manager.\nYou will have more than enough work as a manager in an agile company. Only the content will be different.\n","categories":"","description":"","excerpt":" You develop your software products using agile approaches. You are doing Scrum, Kanban, Scrumban, Lean Software Development, or LeSS.\nYour collaborators start asking questions about their …","ref":"/blog/2017/your-management-job-in-an-agile-environment/","tags":["agile"],"title":"Your Management Job in an Agile Environment"},{"body":" Readers know I am an early adopter of agile and Scrum approaches.\nI experienced how much more effective and fun it is to work in an agile team developing digital products.\nLately I was asked if I was interested in working as a Scrum master [1, 2, 3].\nThe job description below was handed me over. What an experience it was.\nThe text with the regular font is the job description. I wrote down my comments in italics.\nManage team of software engineers: provide technical direction, schedule and delegate work, evaluate performance. Advise on good practices and developing practice, review code.\nA Scrum master empowers a development team. The team schedules the work during each Sprint. The team members select the stories they will implement next. The Scrum master advises good practices, but he should really not perform code reviews and police the team.\nHe does not manage and certainly not micromanage engineers. He shall never evaluate the performance of team members. He shall not police the team by reviewing the source code.\nAnalyze requirements and provide time estimates: consume non-technical functional requirement documentation. Provide feedback when necessary, translating into the technical documentation when necessary. Provide feasibility assessment and estimate level of effort to implement.\nThe product owner and the team write and refine stories. Avoid requirements and move to stories and epics. The team shall write technical documentation and feasibility assessments. Only the team has the right to estimate the effort needed to implement a story.\nThe Scrum master is neither a business analyst defining requirements, nor a product manager creating schedules and time estimates.\nHelp develop, communicate and enforce workflows. Work with the development department head and QA to ensure that clear workflows are established and followed within the team.\nAn agile team has quality assurance roles as cross-functional capabilities. You do need a quality assurance team. Dissolve the quality assurance department. Move their specialists to the teams and get rid of the vice president of quality assurance.\nThe Scrum master does neither administrate the flow of information nor implement processes. He trusts and coaches his teams to deliver the best quality.\nCoordinate with QA, IT Operations, and Database Administrators on testing. Launch planning, launch, and troubleshooting or optimization of features after the launch.\nThe product owner plans the release schedule with the team. A high-quality product does not need a troubleshooting process. The above nicely describes an organization based on functional silos. No cross-functionality is ensured and product focus is an unknown concept.\nThe Scrum master is neither an administrator nor an overall coordinator. His teams are self-organizing and directly communicate with all involved parties.\nArchitecture: participate in technical design of new and expanding systems and infrastructure. Aid in creating documentation for new and existing systems.\nThe team grows the architecture and implements the solution. Not an external so-called expert shall be in charge of the architecture or sole owner of the design.\nThe Scrum master is neither in charge of the architecture nor the external expert imposing his views on the team.\nI clearly decided not to apply for this position. I was fascinated that companies still believe that such alibi positions will not be detected. The above position is a flag for me. As an agile developer, Scrum master or product owner, I shall never work for this company. I will not have Fun at Work.\nThey were looking for an administrator and a classical project manager. They were not looking for an agile professional and Scrum master.\nI kindly suggested the authors of the job description shall get an introduction training to Agile, Lean and Scrum. I will certainly not recommend this company to my acquaintances.\nReferences [1] Z. Sochova, The Great ScrumMaster. Addison Wesley, 2016 [Online]. Available: https://www.amazon.com/dp/013465711X\n[2] G. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\n[3] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n","categories":"","description":"","excerpt":" Readers know I am an early adopter of agile and Scrum approaches.\nI experienced how much more effective and fun it is to work in an agile team developing digital products.\nLately I was asked if I was …","ref":"/blog/2017/scrum-masters-are-not-administrators/","tags":["agile"],"title":"Scrum Masters are not Administrators"},{"body":" What does a Scrum master the whole day?\nAre you just a fancy administrator or are you actively removing impediments?\nDo you coach your teams toward mastery?\nToo often, Scrum masters become Scrum administrators.\nThey schedule meetings, moderate discussions, write progress reports and draw beautiful slides how to improve the organization.\nOr worst, they collect extensive statistics about velocity, planned versus delivered story points or how precise story estimation was.\nAt the end of the day, your job is to mentor your team to be champions and build awesome products [1, 2, 3].\nWake up! You are not a product manager, you shall be a catalyst.\nFacets of a Scrum Master Be a servant leader whose focus is on the needs of the team members and those they serve (the customer), with the goal of achieving results in line with the organization’s values, principles, and business objectives.\nTeach ensuring agile, lean, Scrum and other approaches are understood and enacted.\nMentor to transfer agile knowledge and experience to the team, and concentrate on continuous improvement.\nCoach the individual with a focus on their mindset and behavior.\nHelp the organization to truly collaborate with the Scrum team.\nBe an impediment remover solving blocking issues to the team’s progress, taking into account the self-organizing capabilities of the development team.\nFacilitate by setting the stage and providing clear boundaries in which the team can collaborate.\nBe a change agent to enable a culture in which Scrum teams can flourish.\nRemember the definition of an agile or Scrum team. Ask yourself if your team fulfils this definition. Work hard to improve if it is not the case. Each team is self-managing, cross-functional and customer-focused, co-located, long-lived.\nScrum Master Tasks Help your teams to remove impediments [1, 2, 3]. From time to time, you could also remove a specific impediment.\nEvangelise agile, lean values and principles.\nModerate Scrum meetings. Remember to regulate delegate moderation to your team.\nGently transform your department and organization to become more agile.\nRemove yearly evaluation, practice biweekly face to face meetings.\nRemove any individual bonus, either introduce team bonuses. Better remove extrinsic motivators.\nRemove test and quality department, move the specialists to the Scrum teams.\nYou shall by all means avoid administrative waste, such as\nWriting information in Word documents or in Wiki that nobody actively uses.\nWriting multiple times the same information.\nWriting status information instead of publishing it on the team board. The board shall be the information radiator of your product development. Do not create head sinks in documents.\nHolding meetings with one person projecting their notebook screen content and all other attendees looking at it.\nTips and Tricks A good Scrum Master helps a Scrum Team survive in an organization’s culture. A great Scrum Master helps change the culture, so Scrum Teams can thrive.\n— Geoff Watts Scrum Mastery Face 2 Face Prefer physical meetings to all other communication mediums. Use the video conference and chatting tools to feel the mood of your team.\nEmergent Good enough to try it, Safe enough to do it. Do not look for the perfect solution before trying a new approach.\nPlan Do Check Act PDCA Embrace complex systems and try new approaches to improve your team. F focus on external and internal quality.\nProcess Ownership to Keep It Alive You are not in charge of the team processes, the team is,\nCommunity of Practice PoC is an effective way to move your team to technical excellence.\nIf you are new to the role, read \"The Great Scrum Master\" from Zuzana Šochová. A more extensive list of books can be found here.\nReferences [1] Z. Sochova, The Great ScrumMaster. Addison Wesley, 2016 [Online]. Available: https://www.amazon.com/dp/013465711X\n[2] G. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\n[3] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n","categories":"","description":"","excerpt":" What does a Scrum master the whole day?\nAre you just a fancy administrator or are you actively removing impediments?\nDo you coach your teams toward mastery?\nToo often, Scrum masters become Scrum …","ref":"/blog/2017/what-does-a-scrum-master/","tags":["agile"],"title":"What does a Scrum Master?"},{"body":" Agile will never guarantee product success.\nAll projects, especially application development, entail risk.\nIf a product was risk-free, it is unlikely to provide significant benefits or competitive advantages.\nThere are a number of ways in which Agile Scrum projects repeatedly fail which are worth examining.\nAgile approaches and Scrum framework can reduce risks in projects and increase the return on investment. Standish Group report is a proof of this statement. One picture shows it all. Look at the failed column.\nBelow are common patterns and errors when doing agile instead of being agile\nWagile is a team which continues to follow basically a Waterfall product but uses the language of Agile and adds a few agile practices. For example, the team may present burn-down charts together with Gantt charts. Or the team computes individual resource allocation for the next three months. You can also replace Waterfall with V-Model, HERMES, RUP, and even sometimes SAFe.\nScrumBut describes a team which claims to follow Scrum but misses various practices. For example, We do Scrum, but we don’t have a Product Owner. Or We do Scrum but the Project Manager allocates tasks. Such teams normally have a long list of “buts” and show little progress of removing them.\nHitting The Scrum Wall The most popular Agile method is Scrum, which is a product management technique. Scrum is normally used with a number of other Agile techniques, typically user stories redaction and the technical practices from eXtreme Programming – such as TDD, ATDD, code refactoring, continuous integration and delivery CI/CD, pair programming, etc. Teams that adopt the Scrum framework initially see an improvement in productivity and customer satisfaction. Without technical practices, quality is low, and the team hit the wall. The quality gap makes it impossible to maintain the pace in the long run.\nFake Agile occurs when a team declares itself Agile and blames everyone else for their failure to interact correctly with the group. Such a group typically stops writing documentation, listening to business analysts, product managers and other customers, and dictates its own delivery schedule. Meanwhile, the team does not improve quality, does not adopt test-driven development or any other practice they dislike.\nPotemkin Agile occurs when a team adopts and applies an Agile method well but does not deliver business value. This is a form of goal deferment were the team consider adhering to the process rather than delivering business value as the success criteria.\nCustomer (Business Analyst, Product Manager, Product Owner) overload on a well-functioning Agile product the customer, or proxy customer, is called upon to do a lot. They need to decide requirements, set priorities, scout ahead of the product, align strategy, work with the developers, testers and managers, and may even have their own day job to do. In the earliest XP product (“C3”) the first business analyst came close to a nervous breakdown.\nFall back Management may bring in consultants and other experts to help switch a team to Agile. Once the consultants leave, some teams return to their old ways of working. Advisers and consultants can be a great help when introducing Agile. They need to build capacity in the development team to continue learning and evolving when the consultants are gone.\nFailure to go far enough To maximize the benefits of Agile Software Development, the people, processes and organization that interface and work with the Agile team needs to understand Agile. It should adjust their expectations and working techniques too. Agile is not a drop-in technology that can be swapped in to replace another failing method. Isolated Agile teams will find it difficult to be completely Agile. When other groups adopt agile approaches, the benefits of Agile can spread beyond Software Development.\nExploding cards happens when teams do not sufficiently understand the technology they are working with – either in the solution or problem domain. Small work packages suddenly turn out to be large tasks in their own right.\nHyper changing requirements Most Agile methods, especially Scrum, hold the iteration goals fixed for a few weeks. An exception is Kanban. Most businesses should be able to hold to goals for such short periods of time. If it proves impossible to hold requirements and goals fixed for even one week, then something is wrong. In a few cases, business is genuinely changing extremely rapidly. In this case, teams are better off using Kanban style management than a Scrum-based approach. More often, hyper change in goals and requirements are a sign that something is wrong beyond the team. The organization itself may lack strategy and objectives, or the Product Owner may not be filling their role adequately.\nFragile, not Agile Some Agile techniques, like TDD, ATDD, CI or CD, when poorly applied with a lack of understanding can show short-term benefits but create long-term problems.\nFew of these failure modes are unique to Agile approaches. They are reoccurring failure modes for all IT software development projects. Neither are they a comprehensive list of the ways in which Agile or traditional application development projects fail.\nWe can state that (see the Scrum Guide)\nTeam process improvement is a major focus for the Scrum Master or the Scrum Coach\nCoaching the Development Team in self-organization and cross-functionality.\nTeaching and leading the Development Team to create high-value products.\nRemoving impediments to the Development Team’s progress,\nFacilitating Scrum events as requested or needed.\nCoaching the Development Team in organizational environments in which Scrum is not yet fully adopted and understood.\nCompany process improvement is a major task for the Scrum Master or the Scrum Coach.\nLeading and coaching the organization in Agile and Scrum adoption.\nPlanning Scrum implementations within the organization.\nHelping employees and stakeholders understand and enact Scrum and empirical product development.\nCausing change that increases the productivity of the Scrum Team.\nWorking with other Scrum Masters to increase the effectiveness of the framework application in the organization.\nThe essence of succeeding with Agile, Lean and Scrum is\nIt is a change process with well-known and discussed aspects.\nYou must have a strong and experienced Scrum Master and Scrum Coach to maximize success.\nDo not tinker with the Scrum process before you really master it.\nIf you have to scale your process, please consider LeSS.\n","categories":"","description":"","excerpt":" Agile will never guarantee product success.\nAll projects, especially application development, entail risk.\nIf a product was risk-free, it is unlikely to provide significant benefits or competitive …","ref":"/blog/2017/so-called-agile-and-scrum-failures/","tags":["agile"],"title":"So Called Agile and Scrum Failures"},{"body":" You shall put your source code and text documentation under a version management system.\nThe actual industrial standard for version control systems is git, a distributed version control system - DVCS -. It tracks changes in any set of computer files, usually used for coordinating work among programmers who are collaboratively developing source code during software development.\nSubversion was a great tool and should now be retired. Simple refactoring activities with renaming will already corrupt a subversion repository. Commit operations can take quite some time before completing.\nInstall git on your development machine.\nBinaries are available for all major platforms and can be found under Downloads GUI clients are also provided for all major platforms [1].\nIf you want higher security, you should install ssh. The operation is trivial for linux and macOS systems. It is more cumbersome on Microsoft Windows systems.\nIn case you are using the IntelliJ IDEA configure Git in the IDE through the preference pane.\nGraphical Git clients are available. I sometimes use the free available SourceTree.\nCreate a Local Repository To put your product under git version management, go to the root of the product and perform the command\ngit init You have want to have a local copy of an existing git repository:\ngit clone \u003crepository link\u003e (1) 1 The link is either the https or an ssh link to the remote repository. Once you have a local copy of a shared repository, you can update your copy with the changes of the remote repository using:\ngit pull To add a specific file or all your source files to git.\ngit add [filename] git add * You shall perform these operations to add a product to a local Git repository directly in IntelliJ IDEA:\nOpen the product you want to store in a repository.\nOn the main menu, choose VCS | Import into Version Control | Create Git Repository.\nIn the dialog that opens, specify the directory where you want to create a new Git repository.\nPut the required files under Git version control. The files appear in the Local Changes tab of the Version Control tool window, under the Default change list.\nYou can define the set of files which should be ignored by git in the .gitignore configuration file. See gitignore for details.\nYour IDE shall support this feature and would add files or folder to ignore through its user interface.\nCommit Changes To commit your changes, you simply:\ngit commit -m \"commit message, should be clear and legible\" (1) 1 Development platforms such as GitHub, GitLab orhttps://bitbucket.org/[Bitbucket] often support linking commit messages containing keywords with work items and tickets. You can perform these operations directly in IntelliJ IDEA using the provided VCS functions. Switch to the Version Control tool window and switch to the Local Changes tab.\nExpand the Un-versioned Files node, and select the files to be added. From the context menu, choose to Add to VCS, or press ⌥⌘A.\nSwitch to the Project tool window and select the files to be added. From the context menu, choose Git | Add or press⌥⌘A.\nEach time you commit your changes, you gain the ability to reverse back to exactly this state. Each time you made a modification and tested it, just commit it. The cost of a commit is marginal. When working with Git, TDD, and ATDD, it is normal to commit every few minutes. By a few minutes, we mean 5 or 10 minutes.\nObserve yourself. If you commit at the end of the day, you are using your DVCS as a backup medium. It is time to change your habits. Use Git as a history of all successful changes you implement, and simply roll back all unsuccessful ones, simply discarding them.\nIf you forget some files when performing the last commit, you can correct it:\ngit commit --amend (1) 1 Please do not amend shared commits. Amending a commit shared with another user will potentially require confusing and lengthy merge conflict resolutions. Once you are satisfied with your changes, you can propagate them to the remote repository using:\ngit push What is Your Project Status? To find out what the status of your product is, simply\ngit status (1) git log (2) git diff (3) 1 status of your local copy with modified files, and untracked files. 2 list of commits with detailed information. 3 shows the changes in edited files. The same information is available in IntelliJ IDEA under\nOpen the required product\nOn the main menu, choose VCS | Refresh File Status\nSwitch to the Version Control window and open the Local Changes tab.\nAlways Work with Trunk Ideally, you shall always work against trunk, also called the main branch. Because you develop using TDD and ATTD approaches, you know your source code is always working. This approach is deeply compatible with lean and agile values. It is also the one with the least waste of effort.\nIf your team decides to work with branches, make them short-lived!. See how you can do it in the Git Branches for the Impatient post.\nDiscarding Changes You find the changes you made locally were not a good decision. No problem, you can erase these changes with:\nUndo last commit putting everything back into the staging area:\ngit reset --soft HEAD^ Undo last and remove changes:\ngit reset --hard HEAD^ (1) 1 Short form is git reset --hard. You revert to the last save-committed set of files. Resetting with the hard option recursively discards all of your currently uncommitted (unstaged or staged) changes.\nYou want to restore just one file to its previous committed state.\ngit checkout --[filename] Configuration Tips You shall avoid the end of online character warnings by configuring git to handle them. The situation arises because Microsoft OS uses CRLF for the end of lines instead of CR.\nYou can configure git to handle it by running on Windows:\ngit config --global core.autocrlf true Or on Linux and macOS:\ngit config --global core.autocrlf input Thoughts When using an IDE, consider the Editor Configuration approach for the end of line, indentation, and tabs versus spaces. All major integrated development environments support this configuration approach.\nYou can find a lot of information on Stack Overflow. Beware when reading the answers on Stack Overflow that Git commands have changed over time. Select new posts to find the best answers.\nThe nifty-gritty details can be found in the official Git documentation.\nThe Pro Git book can be downloaded from Git SCM.\nLinks Git Branches for the Impatient Marcel Baumann. 2016.\nGit Local Repositories for the Impatient Marcel Baumann. 2017.\nGit Rebase and Merge for the Impatient Marcel Baumann. 2023.\nGit Tag for the Impatient Marcel Baumann. 2023.\nSemantic Commits for the Impatient Marcel Baumann. 2023.\n1. Major platforms are Unix, Linux, macOS, and Microsoft Windows. ","categories":"","description":"","excerpt":" You shall put your source code and text documentation under a version management system.\nThe actual industrial standard for version control systems is git, a distributed version control system - DVCS …","ref":"/blog/2017/git-local-repositories-for-the-impatient/","tags":["agile","git","series-students"],"title":"Git Local Repositories for the Impatient"},{"body":" You have more agile coaches on the market than sand-corns on a regular beach.\nThey all promise the holly grail of agile product development, highly productive teams and perfect applications for internal and external customers.\nWhy should any sane customer hire us to deploy or perfect their agile approach?\nYour overall goal is to continuously improve the products delivered to customers.\nI am convinced to achieve ingrained success an agile coach shall:\nCoach team members how to reach technical excellence. They build your solution, it shall fulfill the user’s requirements, be of high quality and affordable.\nLearn them to attain mastery and build awesome products.\nCoach the team how to improve, focus and enjoy the work on a daily basis. Flow shall be natural for them,\nCoach the organization how to adapt, provide the ground to have the best collaborators and become most successful in the market. Use a lean approach.\nIn other words, you need technical coaching, team coaching and organization coaching. Avoid hiring management consultants with agile painting, coaches should understand software and product development.\nAt the end of the day, your products shall improve. Your customers shall be delighted. How your highly qualified teams develop software shall become more effective and efficient.\nFirst comes quality, effectiveness and only later efficiency. Look at lean methods. First, we improve the quality-effectiveness for the customer, then the productivity and efficiency for the company.\nMinimum Viable Change What is coaching? Coaching means that an experienced coach will work closely together with an organization to improve the organization’s product development.\nThis usually involves shortening feedback loops and focusing on improved quality.\nThis faster feedback cycle leads to benefits such as higher productivity and more flexibility.\n— https://less.works/[LeSS] How shall you coach? You use Minimum Viable Change (MVC). So I am using yet another acronym. Each MVC has a hypothesis about how to improve an aspect of your organization or your team. It has measurements – often called KPI by management – to decide if the change was a worthy improvement. For the savvy readers, it is a variant of PDCA, a cornerstone of all agile and lean approaches.\nOur core strength at tangly is we truly understand software technology and software craftsmen. We consistently connect organizational MVC with technical MVC. This is our special recipe for deep-rooted and lasting success.\nThree Ways of Coaching To improve your organization, you need these three levels of coaching.\nOrganizational coaching The coach works with multiple teams and the management to improve the organization and its structure.\nChange processes to be customer-centric.\nImprove organization to see the whole product and the customer.\nDelegate decision-making processes to your teams.\nRemove functional silos.\nRedefine the roles of product managers, middle managers, quality managers.\nEliminate waste: processes and artifacts not adding any value to the customer products.\nTeam coaching The coach works with one or a few teams to improve their team-working and LeSS practices. It is common for a coach to take on the Scrum Master role.\nImplement MVC.\nImprove Scrum approach, teach agile values.\nIntroduce eXtreme Programming practices.\nImprove decision-making, meetings, flow of customer value.\nLearn, teach, coach through the stages of Shu Ha Ri (守破離).\nEmpower the team to turn into the best of breed.\nTechnical coaching The coach works with (or on) a team on their actual codebase to improve technical practices and adopt agile development techniques such as simple design, refactoring, unit testing, test-driven development and acceptance test-driven development.\nDiscovering code/design smells. Places where code/design could be improved.\nExplaining modern, clean code that is simple and easier to change and maintain.\nRefactoring “smells” into clean code.\nTest-driven development and test automation.\nContinuous integration and continuous delivery.\nSpecification by Example (Acceptance Test-Driven Development).\nEfficient and effective working practices (IDE, automation).\nApplying design patterns.\nThoughts I believe that the right mindset is boosted by good practice, just as good practice cannot be achieved without the correct mindset. When advising others, I spend much of my time trying to connect practice with a mindset, as they are symbiotic. You truly need both.\nChoose wisely your coaches. Check they can coach at technical, team and organization level. Senior coaches shall have a decade of experience. Good coaches practice Gemba and should restrain drawing too many slides.\n","categories":"","description":"","excerpt":" You have more agile coaches on the market than sand-corns on a regular beach.\nThey all promise the holly grail of agile product development, highly productive teams and perfect applications for …","ref":"/blog/2017/what-is-our-specialty-as-agile-coaches-at-tangly/","tags":["organization","tangly"],"title":"What is Our Specialty as Agile Coaches at tangly?"},{"body":" It is time to throw a big party in Switzerland. More than 60% of all projects are now realized using an agile approach (to see Agile Trends in Switzerland 2017] by SwissQ), Scrum being the most popular one, Kanban as the second one. What a change in just one year. In 2016, we had 40% of projects being agile, one year later we have 60%. Time to adapt and become agile.\nIt was a long journey. At the beginning of this millennium, I was convincing managers that agile is not evil and could be used in Switzerland. Yes, agile is compatible with Swiss culture. We finally added Scrum to the national methodology HERMES. The report 2016 patently states that agile projects are more successful for the customer and the company than non-agile ones. It is genuinely time to adapt.\nSee our previous blogs for the results of Agile Trends Switzerland 2012, Agile Trends Switzerland 2012, and Agile Trends Switzerland 2013. They illustrate the slow gains of agile and lean approaches in our country.\nI have a strong déjà-vu. I am now convincing managers that agile approaches for the whole company are not evil and could be used in Europe and Switzerland. Yes, agile approaches are compatible with European and Swiss cultures. Yes, holistic agile approaches increase the odds of success to deliver tremendous products to our customers. Again, I heard the same arguments as 15 years ago why our companies are different and need special approaches.\nTo ripe the benefits of agile approaches, it is now time to transition whole departments and the company. I hope to succeed in the first half of this century.\nBelow some findings of the study.\nMajor Hurdles Introducing Agile Approaches The major hurdles when introducing agile approaches at department/company level are\nCurrent company culture First change the structure, it enables cultural change. Quite a few companies try to change their culture without altering their structure. It is doomed to fail.\nExisting company structure and frozen hierarchies It is time to rethink your structure and move decision power to the teams, near to the customers,\nControlling not tailored to agile approaches It is difficult to be slightly agile. The same can be said about lean. Either you are lean, agile or you are not. Try Beyond Budgeting Round Table,\nOverall processes are not tailored to agile Once you change your structure and hierarchy, the processes will evolve.\nTrust is missing Here again we talk again about trust, or the beliefs your collaborators are competent and do their best to achieve success. As an organization and as a manager, it is time to decide. Do you truly trust your collaborators?\nCustomers are not involved or engaged Customers are the center in the new world. Please involve them, talk to them, find out what they need.\nYou could also say organizations are still struggling with Being agile, not doing agile. Avoid cargo cult.\nOur Recommendations You shall start introducing agile approaches at department and company level.\nSenior management is fully committed to the approach and approves the cultural change. Read the book \"Reinventing Organizations\" from Frederic Laloux to understand the implied changes.\nTrain your managers to understand agile, lean, and customer-centric approaches. Training is not a half-day introduction, it is days and days of training, workshops, and reading.\nThe transition is painful, see the seminal articles of Steve Denning:\nWhy do managers hate agile?\nMore on why managers hate agile.\nThe principles are\nProducts are value-driven and quality oriented\nTeams are focused mastering their work and tools – Craftsmanship, eXtreme Programming -\nFor huge development departments consider using the LeSS approach.\nTeams work best if you can answer with a deafening yes to these five questions.\nPsychological safety: Can we take risks on this team without feeling insecure or embarrassed?\nDependability: Can we count on each other to do high-quality work on time?\nStructure \u0026 clarity: Are goals, roles, and execution plans on our team clear?\nMeaning of work: Are we working on something that is personally important for each of us?\nImpact of work: Do we fundamentally believe that the work we are doing matters?\nIf you have doubts, please refrain from using agile and lean methods. Introducing agile approaches in product development is similar to introducing lean principles in a production environment. Either you do it fully or the benefits are marginal. Worst the best employees will see through and probably leave due to unkept promises.\n","categories":"","description":"","excerpt":" It is time to throw a big party in Switzerland. More than 60% of all projects are now realized using an agile approach (to see Agile Trends in Switzerland 2017] by SwissQ), Scrum being the most …","ref":"/blog/2017/agile-trends-switzerland-2017-we-won/","tags":["agile"],"title":"Agile Trends Switzerland 2017: We Won"},{"body":" It is Spring in Switzerland. We often have time for small talk because it is cold or rainy outside.\nQuite a few of the discussions are about job opportunities, and how interesting and motivating the current activities are.\nI selected two articles to help everybody to decide if your software development job is worth the effort.\nGo through the questions and ask yourself if the current product provides the current settings.\nJoel Test The Joel Test is slightly outdated. Keep his questions and do the following changes:\nCan you replace CVS with Git to reflect the current state of the industry?\nMove from daily builds to continuous builds at check-in.\nRemember \"Daily Builds are for Wimps\".\nDo not only fix bugs but also write the associated automated unit and acceptance tests. Remember Defect Driven Development to guaranty your customer. He will never again see the same issue.\nCheck that your specification also has acceptance criteria which can be automated.\nFor Microsoft developers, are you forced to use TFS instead of tools of your choice, and why?\nAre you testers and quality experts integrated into your Scrum team and sitting in the same room? Do you think about testers and quality experts of roles and not people?\nDo new candidates code and perform a refactoring to achieve clean code during their interview? [1].\nNo matter how great the potential projects and teammates might be, I do not think you can do truly meaningful work in an environment where you, the developer, are not empowered to succeed.\nIf a company does not get that, then they do not get the software.\nMy personal list My personal list is:\nIs respect a key value of your organization and your team?\nAre you creating a meaningful product and improving the quality of life?\nAre you working in an agile team, preferably a Scrum team?\nHas your team a sustainable development rhythm?\nAre you using good software practice daily, such as TDD, ATDD, refactoring, check-in in Git master, CI/CD, deliver each day?\nCan you contribute to the open-source projects you are using during work time?\nIf you are developing in Java, are you using IntelliJ IDEA as your IDE?\nTake ten minutes to decide if your current job is good enough. If not, it is time to regain ownership of your life.\n1. The link to article The Cody Powel test: Eight questions to identify a dull programming job was removed. The questions are up to date. His final remark is worth remembering. ","categories":"","description":"","excerpt":" It is Spring in Switzerland. We often have time for small talk because it is cold or rainy outside.\nQuite a few of the discussions are about job opportunities, and how interesting and motivating the …","ref":"/blog/2017/fun-at-workplace/","tags":["organization","tangly"],"title":"Fun at Workplace"},{"body":" I am regularly asked by practitioners and technical universities, which books I shall recommend learning more about agile developers, agile projects, and agile companies.\nReading is a great way to learn and to get new ideas.\nBelow, a selection of books I read and found fascinating.\nThe selection is certainly not exhaustive.\nThe criteria are\nI read the book and learnt something.\nI have bought this book to have it as a reference. I mean by that a real reference opened at least monthly.\nThe book is available as an ebook. I only read ebooks and save trees.\nSoftware Engineering Scrum and XP From the Trenches: How We Do Scrum, Henrik Kniberg A short and splendid introduction to Scrum and XP, worth looking again and again, Kniberg is also the guy behind the Spotify Way\nClean Code: A Handbook of Agile Software Craftsmanship, Robert C. Martin The reference book about clean code and XP practices. You are a programmer, you know this book\nThe Clean Coder: A Code of Conduct for Professional Programmers, Robert C. Martin Are you a coder doing clean code (or are a looser)?\nRefactoring: Improving the Design of Existing Code, Martin Fowler You cannot be agile and not do refactor, see also XP practices. You shall refactor daily or you are lying to yourself\nAgile Project Management with Scrum, Ken Schwaber. A seminal work from one of the founders of Scrum\nAgile Product Management With Scrum: Creating Products That Customers Love, Roman Pichler From the expert for product owner role and activities. Make the shift from project to product.\nAgile Testing: A Practical Guide for Testers and Agile Teams, Lisa Crispin and Janet Gregory What does it mean to test and ensure quality in an agile environment?\nAgile Management Aspects Agile Management: Leadership in an agile environment, Angel Medinilla: An overview about agile management at company level, you should also read the Leader’s Dilemma and see the Beyond Budgeting Round Table ideas.\nLeading Lean Software Development: Results Are Not the Point, Mary Poppendieck \u0026 Tom Poppendieck: Lean often means to change your point of view to better understand the system.\nThe Lean Mindset: Ask the Right Questions, Mary Poppendieck \u0026 Tom Poppendieck: What does lean mean?\nFearless Change: Patterns for Introducing New Ideas, Mary Lynn Manns \u0026 Linda Rising: When introducing changes, you have to understand change management. You can later read the works of John P. Kotter.\nAgile Retrospective: Making Good Teams Great, Esther Derby \u0026 Diana Larsen \u0026 Ken Schwaber. The major place where improvements are identified is during retrospectives, often the less well-managed meeting in a Scrum team.\nPractices for Scaling Lean and Agile Development, Craig Larman \u0026 Bas Vodde A set of practices and ideas how to do big agile projects, the guys behind LeSS\nScaling Lean \u0026 Agile Development: Thinking and Organizational Tools for Large-Scale Scrum, Craig Larman and Bas Vodde A second set of practices and ideas how to do big agile projects, still the guys behind LeSS\nThe Leader’s Dilemma: How to Build an Empowered and Adaptive Organization Without Losing Control, Jeremy Hope \u0026 Peter Bunce \u0026Franz Rösli \u0026 Franz Röösli The modern reference text for the BBRT initiative\nPresentation Techniques You have to make a beautiful presentation to make a difference!\nPresentation Zen: Simple Ideas on Presentation Design and Delivery, Garr Reynolds Presentation Zen Design: Simple Design Principles and Techniques to Enhance Your Presentations\nBlah, Blah, Blah: What to Do When Words Don’t Work?, Dan Roam\nHistory You have to know history, or you will repeat the errors of the past generations.\nAll books of Tom deMarco, e.g., Peopleware, The deadline, Slack, Waltzing with Bears\nAll books of Gerry Weinberg, such as Becoming a Technical Leader, Are your Lights on?, The Psychology of Computer Programming\nThe Mythical Man-Month: Essays on Software Engineering, Anniversary Edition, Frederick P. Brooks Jr [1].\nGood To Great, Jim Collins\nFree Time Vorkosigan Saga, Lois McMaster Bujold\nEmpire of Bones Saga, Terry Mixon\nThe Ender Quintet, Orson Scott Card\nThe Art of War, Sun Tzu\nEnjoy reading. Please enjoy life and your family.\nPlease leave a comment to improve this list.\n","categories":"","description":"","excerpt":" I am regularly asked by practitioners and technical universities, which books I shall recommend learning more about agile developers, agile projects, and agile companies.\nReading is a great way to …","ref":"/blog/2017/list-of-agile-and-lean-books-for-software-engineers-or-students/","tags":["agile"],"title":"List of Agile and Lean Books for Software Engineers or Students"},{"body":" What are the main hurdles to introducing agile approaches in Swiss companies? The last five years learn us that:\nIntroducing agile company-wide is a cultural change process. Such a change takes time and sometimes hurts.\nWithout the commitment of senior management, the initiative will fail.\nYou must teach, coach, support your collaborators through the transition. You need to believe in them and provide an environment where they can safely learn and experiment.\nIn the end, what matters are collaborator purpose, customer satisfaction, business value.\nSwissQ has published a \"SwissQ Software Development Switzerland 2016\". The study can be downloaded as PDF from their website. See a previous blog for the results of Agile Trends Switzerland 2013 and another blog for the results of Agile Trends Switzerland 2012.\nBelow some findings of the study.\nMajor Hurdles When Introducing Agile Approaches The number left is the value for 2016. The number in parentheses is the value found in the study for year 2013. Bold items are new in the 2016 study and have no 2013 values.\n63% (72%): Culture change\n61% (21%): Management support\n42% (28%): The team\n30% (-%): Integration of the business\n28% (25%): Focus on business value\n19% (-%): Discipline\n17% (28%): Know-how collaborators\nThe trend is a clear move toward agile approaches. Companies seem less reluctant to introduce agile approaches, but often compromise using bimodal IT. A typical Swiss example is the government Hermes method mixing Scrum with Waterfall.\nMajor opponents such as senior managers or internal and external customers more and more acknowledge the success of agile approaches.\nThe majority of teams use Scrum or Kanban. The associated events and tools are used. Values such as test driven development, acceptance test driven development, clean code or refactoring are often missing. The key is\nTo be agile, Not to do agile.\nWe wrote in previous blogs that introducing Scrum in the development department or in the whole company is a change process. The coaches should be trained in change management and have experiences with resistance to changes. Our experience shows senior management is often not ready to move along the cultural change path.\nRecommendations You shall start introducing agile approaches\nSenior management is fully committed to the approach and approves the cultural change. Read the book \"Reinventing Organizations\" from Frederic Laloux to understand the implied changes.\nProducts are value-driven and quality oriented\nTeams focus on how to master their work and tools. They used craftsmanship or eXtreme Programming approaches.\nFor huge development departments consider using the LeSS approach.\nTeams work best if you can answer a sounding yes to these five questions (see Google:rework).\nPsychological safety Can we take risks on this team without feeling insecure or embarrassed?\nDependability Can we count on each other to do high-quality work on time?\nStructure \u0026 clarity Are goals, roles, and execution plans on our team clear?\nMeaning of work Are we working on something that is personally important for each of us?\nImpact of work Do we fundamentally believe that the work we are doing matters?\nIf you have doubts, please refrain from using agile methods. Introducing agile approaches in product development is similar to introducing lean principles in a production environment. Either you do it fully, or the benefits are marginal.\n","categories":"","description":"","excerpt":" What are the main hurdles to introducing agile approaches in Swiss companies? The last five years learn us that:\nIntroducing agile company-wide is a cultural change process. Such a change takes time …","ref":"/blog/2017/agile-trends-switzerland-2016/","tags":["agile"],"title":"Agile Trends Switzerland 2016"},{"body":" The post describes a presentation I gave at a company internal technical day. It reflects situations we have seen in a lot of agile projects over the last years.\nI assume that the Scrum approach is well introduced in your company.\nYou are already proficient with Scrum, eXtreme Programming, Clean Code, Code Refactoring, how to write stories and story maps, and techniques such as TDD, ATDD.\nYou are using Scrum well and can laugh about all these posts about Scrum-But(t).\nMisunderstandings about Scrum still abound.\nWe will present common pitfalls seen in teams already applying Scrum; meaning teams using Scrum as an empirical process, holding the meetings as described in the Scrum guide, and producing all expected artefacts.\nWe want to increase your awareness and reflect how you can become better Scrum experts. We exhort you to eliminate these misunderstandings in your projects.\nWhat is Scrum? The Scrum approach is clear, well documented and shall be done by the book.\nThe Scrum framework is straight forward. The possibilities inside are unlimited.\nIt is like chess, the game has a simple set of rules. The variants how to play a game are limitless.\nThis article is not about Scrum But impediments describing common errors how meetings are held, artifacts created or roles lived.\nWe are talking about misunderstandings once you have reached this first level of mastership. Before talking about misunderstandings, we should remember the most important facet of Scrum. Scrum is all about ROI. Scrum was defined because the founders were convinced you could develop more effectively better products with higher value.\nThe essence of Scrum is ROI All decisions in Scrum should be based on Return of Investment ROI. Each time you doubt how you should do an activity, ask your team what is the ROI of your proposition?\nStakeholders want ROI. Each time you request a budget from your stakeholders, you should always remember.\nYou want stakeholder’s money, convince them. Show your different solutions to the problem.\nAs a stakeholder, I want to see:\nAt least three approaches.\nShow your ROI estimation for each approach.\nPresent your preferred solution. Explain why it is the best solution.\nIn other words, we want to Bang for the Buck\nYou shall fill all time-boxed meetings The agile manifesto states\nIndividuals and interactions over processes and tools\nCustomer collaboration over contract negotiation.\n— Agile Manifesto Perhaps too often we interpret these sentences as\nRespect people, have nice interactions and avoid any hard discussions.\nCollaborate with the customer, never disagree and avoid harsh truths.\nSwiss people are well-educated. They always empty their glasses in the restaurant and have trouble leaving some wine in the glass. They also do not like conflict.\nWe often forget the Pareto rule, 80% of all solutions are found in 20% of the time. Is it worth the time to find a slightly better solution for the remaining 20% of the problems? In Scrum terminology,\n\" It is also 20% less important. \" Meeting costs versus solved issues. Meetings cost money. Meeting with eight people and of a duration of 30 minutes cost in Switzerland around 600 Swiss Francs or 500 Euros.\nROI is Avoiding meetings.\nPrefer a team gathering or a pair working session.\nInstead of calling for a meeting, use instant messaging and collaborative tools. This advice is very efficient in bigger or older companies. Such companies tend to develop a meeting culture. People do not work anymore, they just sit in meetings.\nFor each meeting you should have\nan agenda,\na moderator,\na protocol of the meeting,\nas a result, a list of decisions, and a list of tasks – who must do what until when -.\nInteresting enough, all Scrum meetings have a clear agenda, a moderator and a documented result.\nDo the same for additional meetings, Remember two ground rules Once you have reached the goals of the meeting, stop the meeting. A team decision is about 20% better than a qualified individual decision.\nCompute your ROI.\nYou shall have a cross-functional team Scrum teams try to be fully cross-functional and invest a lot of effort to reach this goal. They probably do it because it is written in all Scrum tutorials. Every person should be able to take a task from the Scrum board and implement it. It is like a soccer team where each team member can play all roles.\nROI: Learning costs to cost of errors You need T-shaped team members.\nThis concept was described in the mythical man-month book by Fredericks Brook Junior [1] and later by Grady Booch before most of you were born.\nA T person is a master in one technical area\nThis is the leg of the T\nAnd knows about a lot of domains. This is the roof of the T.\nIn fact, Square-shaped team members would be better but are arduous to find. To increase your ROI, the specialist of the team should perform the tasks it is best suited for.\nBut a good team also does risk management to ensure that another person can do the job if the main specialist is not available. See risk management theory how the cost of a risk is evaluated to calculate the ROI of training additional team members.\nThe simplest way to distribute knowledge is the four-eyes principles exemplified through pair programming and peer checkin.\nAre you doing peer activities in your company?\nAs a rule of thumb, a good T-shape person\nIs master in one technical area.\nHas a delegate.\nA challenger and an apprentice.\nCare about the domain of his users.\nYou shall allow changes anytime Scrum is about agility. Therefore, you have the right to change anything at any time, isn’t it? Your stakeholders need the changes now. They cannot wait until the end of the sprint, a mere ten working days or two weeks of elapsed time. But Scrum also states we have a vision, features, a minimum viable product and a potentially shippable product. How often can you change these key concepts? What is the balance between agility and chaos?\nROI: New value versus cost of development and associated errors\nFirst, let me state some concepts deeply entrenched in Scrum Sprint backlog cannot be changed during a sprint. This is Scrum.\nBend it with Kanban, for example, for maintenance activities, agile approach is about a minimum viable product release as soon as possible. This definition is part of the vision and the initial release planning, Release planning is a must in real Scrum projects.\nSo you have the right to change everything at the end of each sprint, but the costs are enormous.\nHere again we are back to ROI computations.\nAs a rule of thumb to test your decision, Uncle Bob stated in the \"Clean Coder\" book if you deliver an application with errors. The only professional approach is to personally sign a check to the customer for the loss of income. In other words, are you ready to change the user interface two hours before the sprint demonstration will be held?\nYou shall not perform up-front design Architecture emerge during the coding of the solution. So teams state that\nNo architecture is needed before starting coding.\nNo enterprise architecture should be defined or looked at.\nNo non-functional considerations are needed.\nLook at the picture. Could you design a village without knowing about the ground, the kind of population, do you need school, do they have a flood in the area? They believe that refactoring will solve all the problems. Architects are no more needed, we are all talented hackers.\nROI: The overhead of architecture activities versus to effort to write it twice\nYou start once you have a vision, an initial plan, and a set of initial decisions.\nYou should not have a complete and detailed plan.\nMajor assumptions should be identified; if they change - see above, \"You shall allow change any time\" – you should reevaluate the architecture.\nYou should understand the application domain, the technology, known similar examples and calculate the ROI of the variants you propose.\nOften teams forget about non-functional requirements such as scalability, reliability, and multiple sites. These features cannot be added later, you have to write the application twice.\nAs a rule of thumb, please be honest: our systems are complex, but there is no groundbreaking work. Similar solutions already exist. I expect a talented team to provide architecture with some prototyping in less than a sprint.\nYou shall write user stories during coffee breaks Writing user stories is easy, and anyway nobody has time for\nThe product owner has better to do. He writes the stories during a coffee break or just before the start of the planning meeting, – Anyway, just read the requirements, it is all written down.\nThe developers want to code, they have no time to write some user stories or improve them.\nScrum states the product backlog is the most important document in a Scrum product.\nROI: New features with the most value Creating a new successful product is a full-time job.\nYou cannot define a vision and key features during a coffee break. The product owner must create a vision, an initial release plan, identify the key features and define a minimal shippable product.\nYou shall not perform up-front design\nEither the product owner has a team of requirement engineers to elicit the use cases. Or the role of requirement engineering is part of the team.\nThe team provides technical feedback and input about potential technologies for all stories, discuss the non-functional requirements and refine the acceptance criteria.\nAs a simple check, the team guaranty together with the product owner that each story is valuable. Use INVEST - Independent, Negotiable, Valuable (ROI), Estimable, Size appropriately, Testable -.\nIf not why? As a rule of thumb, Writing quality user stories are as tough as writing requirements.\nIt is the same job!\nBe honest: Developers cannot write clean requirements or design a clean user interface\nYou shall not train engineering practices You shall not train engineering practices\nThe process solves all problems.\nI want to code. I do not have time to become a craftsman.\nScrum is snake oil. It cures all illnesses and makes you immortal, For the older ones, do you remember CASE, CMM and ISO-9000.\nThe PROCESS promises that you will deliver high quality software on time, on budget with unqualified and cheap collaborators.\nDo you really believe in snake oil?\nDo you think that a collaborator can win a competition just respecting a process?\nHe must train every week to achieve and maintain a given level of skills.\nROI: Engineering versus bureaucracy\nTo build quality solutions, you have to have craftsmen and craftswomen as team members.\nA craftsman masters his work techniques, is experienced, knows his limits and is an expert with his tools.\nYou must be a craftsman: You are an expert in XP, clean code, TDD, ATDD, Mocking, CI, CD, refactoring, etc. And you must train, train, train.\nUse the concept of coding dojo as an approach to improve.\nYou shall worship Scrum as the PROCESS Scrum is a framework. You can use it to manage different things, including complex product development.\nScrum is defined in the Scrum Guide and consists of roles, events and meetings, artifacts, and a set of rules binding them together. It is based on empirical process control and bottom-up thinking.\nEach sprint to ameliorate some aspects, measure and decide if the change is worth the effort?\nBut Scrum will never give checklists to guarantee success. This job is YOURS.\nScrum is the best approach to fail fast and learn. You can learn and improve.\nCall for Action Eliminate these misunderstandings in your projects\nAct using ROI\nWhat is the risk?\nThe truth is complex, more blurred. The answer for your product cannot be stated in one standard rule set. We are talking about agile quality assurance, lean approaches and the best practices.\nBest practice should only be selected through its ROI.\nPlease look at the Software Craftsmanship Manifesto.\nNot only working software, but also well-crafted software, Not only responding to change, but also steadily adding value, Not only individuals and interactions, but also a community of professionals, Not only customer collaboration, but also productive partnerships, That is, in pursuit of the items of the left, we have found the items of the right to be indispensable. ","categories":"","description":"","excerpt":" The post describes a presentation I gave at a company internal technical day. It reflects situations we have seen in a lot of agile projects over the last years.\nI assume that the Scrum approach is …","ref":"/blog/2017/seven-pitfalls-with-agile-or-scrum-methods/","tags":["agile"],"title":"Seven Pitfalls with Agile or Scrum Methods"},{"body":" I often hear discussions asking who is performing the traditional product leader tasks in Scrum.\nThis is in general an excuse to state that Scrum alone cannot work and classical product leaders are still needed.\nI encourage you to classify these so-called regular product manager activities. Often these jobs are plain reporting progress to various boards and micromanaging the development team.\nI truly acknowledge the importance and value of a line manager caring for his collaborators and nurturing the success of the products they develop.\nBut to be honest, these activities are implemented by good people and technical leaders and almost never by some product managers.\nBelow a list of tasks you do NOT need anymore to do in Scrum.\nMake commitments on behalf of the team about how much they can get done by a certain date or estimate effort for the team.\nCoerce the team that the commitments made on their behalf are attainable.\nCoerce the team to change their estimates.\nGive a direction to the team on how to implement the work.\nMonitor the team’s progress to make sure they stay on schedule.\nStep in and determine the solution.\nConduct weekly status update and face to face meetings with the team to surface issues and provide a direction.\nProvide motivation and push the team to work harder than they might want to use carrots and sticks.\nDecide task assignments among the team members and follow up on tasks to verify completion. Force them to work during weekends.\nBe responsible for the team doing the right thing at the right time in the right way.\nUpdate Gantt charts for the iteration and release planning.\nFinding out those requirements means to explain to team members what they should implement.\nReview the documents and code to guaranty quality.\nExplain upper management why the product is late and why you need additional resources.\nExplain upper management why you cannot transfer a team member to another product.\nAttend weekly progress and escalation meetings to explain in detail the status of your product.\nDefine the priority of the next activities.\nThe above Scrum anti-patterns picture shows more common misunderstandings about the Scrum framework.\nAs a Scrum practitioner, you should regularly read material, attend formal training, and seek advanced certifications.\nYou as Scrum master or agile product manager have to perform important and useful tasks:\nHelp to remove impediments to increase the velocity of a team.\nCoach the team to implement Scrum and reflect on their activities.\nPlan-Do-Check-Adapt Plan Do Check Act principle is built into Scrum with retrospectives and sprint reviews.\nCoach product owner to deliver a groomed and refined backlog.\nInform and support all product’s stakeholders.\nIf you reflect on these two lists, it becomes obvious that the first list describes malfunctions and the second one describes mechanisms how to improve continuously - lean principles -.\nJeff Sutherland gives some interesting insights about the Scrum master\nThe Scrum master enforces Scrum practices Coaching rather than command and control\nThe Scrum master effort is\nFew problems: for a small team 10%, for a large team, 50% of your working time.\nMany problems: for a small team 50%, for a large team, 100% of your working time until the team reaches flow status\nA Scrum master is a change agent and supports the organization to become more agile.\nI experimented with the Scrum master being part of the team, or Scrum master working for multiple teams. Experience has shown us that the full-time Scrum master is more effective.\nAnd the LeSS framework has a clear rule about product managers.\nKeep product managers away from the teams!\nRemarks For all Project Management Institute PMI fans, the institute acquired Disciplined Agile Delivery DAD in 2019. The PMI-ACP is working on integrating agile approaches in the official PMI approach.\nAn official definition of Scrum and the responsibilities of the team, product owner and Scrum master are documented in Scrum Guide.\nThe agile alliance provides a glossary of agile terms.\n","categories":"","description":"","excerpt":" I often hear discussions asking who is performing the traditional product leader tasks in Scrum.\nThis is in general an excuse to state that Scrum alone cannot work and classical product leaders are …","ref":"/blog/2016/what-you-do-not-need-to-do-in-scrum/","tags":["agile"],"title":"What you do NOT need to do in Scrum!"},{"body":" I left the company I founded 20 years ago and needed a new home to work and have access to social insurance.\nThe best legal construct in Switzerland and in Europe is to establish a limited liability company.\nYou need such a construct in Switzerland to work as a software specialist. The legal Swiss institutions, such as taxes, social insurances, and accident insurances are challenging and almost unfair with freelancers.\nI had to found a limited liability company with a capital of CHF 20'000.\nHere are the steps for the impatient.\nFoundation Swissregistration wrote the statutes for the company and performed the foundation with certifying notary for CHF 780. Six hours after the first phone call, they sent me the electronic documents. The next day, the documents were delivered in paper form. It was really impressive.\nBefore you are allowed to found a company, you must deposit the capital into a special account. I choose Postfinance. It is a well-known Swiss institute and their fee is only CHF 145. They insisted I met one of their collaborators to fill their forms. They probably never heard about web forms. I had bad luck. They needed three weeks to create the account and send payment confirmation. They were aware of the problem and very helpful, but it still took three weeks.\nUpon reception of the payment confirmation, I sent all signed documents to Swissregistration. The next day the company was founded, and I received the official paper documents a few hours later.\nI went to Handelsregisteramt Zug to register the company. They were very nice but told me they had a lot of work. Two weeks later, they finally registered the company and sent me the papers and an invoice for CHF 780.\nA few phone calls later Postfinance converted the account into a regular account. They give me access to the founding capital minus their fee.\nDuring the waiting time, I started to organize for the mandatory insurances you need in Switzerland\nBVG – the best offer was from Axa [1]. They also help me because the company CRIF AG wrongly classified the activities of the new company. They never contacted me and their NOGA classification has a huge impact on my costs. They are arrogant morons.\nBU/NBU – the best offer was from Basler Versicherung When starting a software startup I suggest not concluding any other insurances\nThe government-controlled social insurance contracts can only be initiated once the company is registered in the Swiss company registry. The AHV center needed more than two weeks to confirm my registration.\nLessons Learnt The costs of founding my limited company in Switzerland are CHF 1'705 or 8.5% of the company’s capital.\nThe state-owned companies and state services are very slow; in my case, 20 times slower than the private ones. On the bright side, their collaborators are very supportive.\nPublic or big private companies, such as insurance firms, are incapable of sending documents or invoices electronically. They only use paper mail. Upon inquiry, their collaborators told me their processes are incapable of handling modern communication ways.\nUpon foundation, you get pseudo-official letters from various companies to sell dubious services. Throw them away.\nThe industry development office of Kanton Zug has no clues about start-up companies; the ones in Zürich and Lucerne seem better.\nNow we are ready to create great products with our customers\nPlease leave a comment if you know a better or less expensive way to found a Swiss liability company.\n(the post was also published on LinkedIn)\n1. The company was called Axa Winthertur. ","categories":"","description":"","excerpt":" I left the company I founded 20 years ago and needed a new home to work and have access to social insurance.\nThe best legal construct in Switzerland and in Europe is to establish a limited liability …","ref":"/blog/2016/found-a-limited-liability-company-in-switzerland/","tags":["organization","tangly"],"title":"Found a Limited Liability Company in Switzerland"},{"body":" Lately, people often ask me what is an agile company.\nThey have an understanding of agile software development techniques such as Scrum, Lean Software Development, Kanban, eXtreme Programming but no clue how a company could be agile.\nWhat does it mean to be an agile organization?\nOne way to approach this theme is to implement concepts of the above-mentioned agile approaches.\nThese are the pillars for iterative incremental improvements.\nScrum Pillars Transparency You trust all collaborators to provide their best when working on the product. They need full access to all relevant information: quality, progress, budget, people and financial data. They use the data to select the best alternatives to reach the company’s goals.\nInspection You cherish a failure culture because inspections will find weak points. You need a culture where people are never blamed. One consequence is that you eliminate management of objectives and bonuses in your company.\nAdaptation You are ready to learn better approaches and truly believe there is a better solution. Processes change regularly bottom-up, company’s budget can only be a rolling indicative budget, and planning has to be continuously updated.\nYou can also pursue desirable attitudes or values of agile persons.\nScrum Values Commitment As an employee you want to win, you are engaged. Every manager truly believes you work best to achieve the goals. If not, this manager made a mistake by hiring or keeping you.\nCourage You are ready to say “I am wrong” because being wrong opens the door for improvement.\nFocus You daily optimize the customers’ value and thrive for excellence. As a developer, you do not work on projects, you work on excellent products. You provide value to your customers.\nOpenness You seek better ideas and ways of doing. Openness requires transparency and respect.\nRespect You truly respect customers, team members, collaborators, and people. In your team, I will not hear any disrespectful comments about people.\nModern Agile The modern agile movement defines guiding principles.\nMake people awesome Dedicated collaborators want to give their best. Give them a purpose, a goal, empower them and let them climb the mountain. Thriving people need purpose, excellence and autonomy. They are happier, healthier and more productive.\nDeliver value continuously Maintain sustainable pace and stability, all divisions of the organization should focus on customer value. At the end of the day, successful products are the only reason you get your paycheck.\nMake safety a prerequisite People do their best in their daily work, you believe in McGregor Y theory. Trust them and support them to become excellent. You shall develop self-awareness to increase safety.\nExperiment and learn rapidly You make mistakes, you learn and increase continuously the delivered value. You have a learning culture, you inspect and adapt. You can react to new opportunities faster than competitors.\nSelf Assessment The above concepts are comprehensible. How do you know if you are moving in the right direction? A few concrete tests help you find out if you are an agile department or company.\nBe agile instead of do agile. Practice the above attitudes and do not just follow a checklist\nNobody micromanages in your company\nFeel accountable instead of being accountable. You want to improve, and your company as a natural part of the daily work.\nCompliment every collaborator you are working with at least once a week instead of evaluating weaknesses and criticising people. Do you lead by example?\nNo management by objectives - MBO - or bonuses are established in your company\nEvery collaborator has access to all company data, every collaborator can request process and tool changes. We favour Individuals and interactions over tools and processes\nYou want to be excellent in your work. You have a purpose and autonomy in your daily work\nTeam members take the decision to hire or to fire collaborators, not the department responsible or the human resources group. Think about collaborators selecting their leaders, about managers being servants, about information available to all collaborators\nCan you say these essential sentences at least three times a week?\nthe most important one word, Sorry.\nthe most important two words, Thank you.\nthe most important three words, I was wrong.\nand the most important four words, Can I help you?\nI truly believe that we all want a fulfilling job which improves our world. I cannot understand other reasons to spend 40 hours and more per week for something less valuable. Take the above principles and apply them to your daily work. There are universal values to establish a working atmosphere you are proud of.\nI agree with all of you to desire a fulfilling job is only true if you earn enough money to pay your monthly bills.\nFood for Thoughts These ideas are not new. You can delve in empirical evidence and discussions in books written by business management professors, CEO, and passionate agile advocates. Below a list of mind openers (available as Amazon ebooks):\nReinventing organisations A guide to creating organisations inspired by the next stage of human consciousness by Frederic Laloux,\nAccelerate Building strategy agility for a fast-moving world by John P. Kotter.\nBeyond budgeting How managers can break free from the annual performance trap;\nThe Leader’s Dilemma How to build an empowered and adaptive organization without losing control; both books by Jeremy Hope,\nHolacracy the new management system for a rapidly changing world by Brian J. Robertson,\nDeliver Happiness A path to profits, passion and purpose by Tony Hsieh.\nThe Lean Startup How today’s entrepreneurs use continuous innovation to create radically successful businesses by Eric Ries,\nLean Novels The Lean Manager A novel of lean transformation;\nLead with Respect A novel of lean practice;\nThe Gold Mine A novel of lean turnaround; all three books by Freddy Balle,\nThe Lean Mindset Ask the right questions by Mary Poppendieck,\nSocial Intelligence The new science of human relationships, by Daniel Goleman\nManagement 3.0 Leading agile developers, developing agile leaders by Jurgen Appelo,\nThe Fifth Discipline The art and practice of the learning organization by Peter M. Senge,\nFearless Change Patterns for introducing new ideas; More Fearless Change: Strategies for making your ideas happen; both books by Linda Rising,\nExcellence Novels Build to Last Successful habits of visionary companies;\nGood to Great Why some companies make the leap and others don’t;\nHow the Mighty Fall And why some companies never give in; all three books by Jim Collins,\nGoogle re:work Google blog about work environment and work techniques\n(this post was also published on LinkedIn)\n","categories":"","description":"","excerpt":" Lately, people often ask me what is an agile company.\nThey have an understanding of agile software development techniques such as Scrum, Lean Software Development, Kanban, eXtreme Programming but no …","ref":"/blog/2016/what-is-an-agile-company/","tags":["agile","organization"],"title":"What is an Agile Company?"},{"body":" What are the main hurdles to introducing agile approaches in Swiss companies?\nIntroducing agile company-wide is a cultural change process. Such a change takes time and sometimes hurts.\nWithout the commitment of senior management, the initiative will fail.\nDoubt that lean or agile works for big projects, doubt you can convince your collaborators and middle management, doubt your customers agree with lean,\nIn the end, what matters are collaborator purpose, customer satisfaction, business value.\nSwissQ has published a \"SwissQ Agile Trends \u0026 Benchmarks Switzerland 2013\". The study can be downloaded as PDF from their website. See Agile Trends in Switzerland 2012.\nBelow some findings of the study.\nMajor Hurdles When Introducing Agile Approaches The number left is the value for 2013. The number in parentheses is the value found in the study for year 2012. Bold items are new in the 2013 study and have no 2012 values.\n72% (95%): Capabilities to handle organizational changes and the culture\n53% (-%): Difficulty how to handle the loss of control seen from a management perspective\n28% (37%): Availability of skilled collaborators in the area of agile approaches\n25% (34%): Projects are too big or too complex\n23% (39%): Overall resistance against changes\n21% (-%): Scalability\n21% (28%): Missing support of senior management\n14% (25%): Company wide introduction of agile methods, doubts agile approaches scale\n14% (31%): Resistance for the internal or external customer\n11% (23%): No resources or time for sustainable changes\n4% ( 9%): Costs reasons\nThe trend is a clear move toward agile approaches. Companies seem less reluctant to introduce agile approaches. Major opponents such as senior managers or internal and external customers more and more acknowledge the success of agile approaches. The two first identified hurdles still reflect the difficulty of changes at company level. They are also the main reasons why a Scrum introduction fails in Swiss companies for my experience. Too often, companies revert to some Waterfall/Hermes process or worst to a so-called internal adhoc method.\nWe wrote in previous blogs that introducing Scrum in the development department or in the whole company is a change process. The coaches should be trained in change management and have experiences with resistance to changes.\nThe Scrum Master is of tremendous importance. You need a skilled and enthusiastic Scrum Master; avoid Scrum Administrator. Ken and Jeff have a clear idea who is in charge of this.\nThe Scrum Master serves the organization in several ways, including:\nLeading and coaching the organization in its Scrum adoption;\nPlanning Scrum implementations within the organization;\nHelping employees and stakeholders understand and enact Scrum and empirical product development;\nCausing change that increases the productivity of the Scrum Team; and,\nWorking with other Scrum Masters to increase the effectiveness of how to apply Scrum in the organization.\nThe Scrum Master is a main driver for the introduction of Scrum in all departments and levels in the company. He indeed needs senior management support, but the Scrum Master daily job is to spread Scrum in the company.\nSwiss IT CIO Agenda 2013 Computerworld Switzerland has published an article about the main reasons why projects are late or cancelled in Switzerland in the April 2013 CIO Agenda edition. The study uses data from Computerworld and Experteer. As an excerpt, I gave you the four major identified failure reasons.\nChanges during the product (62% Computer, 48% Experteer) Agile and Scrum welcome changes in the product. It is one of the four mantras of the Agile Manifesto. All agile processes are optimised to support changes.\nUnclear product definition forms the business stakeholders (50% Computer, 43% Experteer) Scrum requests a clearly stated vision, roadmap and story map of the product. The Scrum board is a radiator to communicate the product vision, goals, and motivations to all interested parties.\nInsufficient product management and controlling (40 % of Computer, 4847 Experteer) Scrum team, product owner, and Scrum master have clear responsibilities for product management. At the end of each sprint, we have an objective and explicit control point.\nInsufficient communication between involved persons (36% Computer, 45% Experteer) Scrum framework enforces clear, transparent and regular communication within the team and with all stakeholders.\nIn one sentence, be agile, use Scrum and eXtreme Programming and the major four above problems are handled in a professional and consistent way.\n","categories":"","description":"","excerpt":" What are the main hurdles to introducing agile approaches in Swiss companies?\nIntroducing agile company-wide is a cultural change process. Such a change takes time and sometimes hurts.\nWithout the …","ref":"/blog/2016/agile-trends-switzerland-2013/","tags":["agile","series-swiss-agile-trends"],"title":"Agile Trends Switzerland 2013"},{"body":" What are the main hurdles to introducing agile approaches in Swiss companies?\nIntroducing agile company-wide is a cultural change process.Such a change takes time and sometimes hurts.\nWithout the commitment of senior management, the initiative will fail.\nDoubt that lean or agile works, doubt you can find agile experts, doubt that your projects can be realised with agile approaches.\nIn the end, what matters are collaborator purpose, customer satisfaction, business value.\nSwissQ has published a SwissQ Agile Trends \u0026 Benchmark Switzerland 2012. The study can be downloaded as PDF from their website.\nBelow some findings of the study.\nMajor Hurdles When Introducing Agile Approaches 95%: Capabilities to handle organizational changes and the culture\n39%: Overall resistance against changes\n37%: Availability of skilled collaborators in the area of agile approaches\n34%: Projects are too big or too complex\n31%: Resistance for the internal or external customer\n28%: Missing support of senior management\n25%: Doubts that agile approaches do scale\n23%: No resources or time for sustainable changes\n9%: Costs reasons\nWe wrote on blogs that introducing Scrum in the development department or in the whole company is a change process. The coaches should be trained in change management and have experiences with resistance to changes.\nThe above points in italics are all related to changing processes. You can handle two thirds of the hurdles with adequate change management training and a clear change product definition. Do not try to introduce Scrum at company level without such an approach.\nThe main Reasons Why Agile Projects are Cancelled 52%: Missing experience with agile approaches\n45%: Company culture clashes with agile principles\n41%: External pressure to use traditional approaches (Agile 51%, Waterfall 40%, Iterative 22%, RUP 16%, and HERMES 12%)\nThe used agile approaches are:\nScrum 84.5%,\nKanban 16.9%,\nOwn Approach 15.5%,\neXtreme Programming 14.1%,\nAgile Unified Process 11.3%,\nOthers 9.9%,\nScrumban 8.5%,\nFeature Driven Development FDD 0%\n38%: Missing support from senior management\n37%: Missing or insufficient training and coaching\n35%: Missing communication between departments\n23%: Team does not want to learn a new approach\nWe wrote in previous Scrum master is a full time job that the Scrum Master is of tremendous importance. You need a skilled and enthusiastic Scrum Master; avoid Scrum Administrator. The new version of the Scrum guide clearly stated who is responsible for the introduction of the Scrum approach in the company? Often people state that the management should spread Scrum in the company. Ken and Jeff have a clear idea who is in charge of this.\nThe Scrum Master serves the organization in several ways, including:\nLeading and coaching the organization in its Scrum adoption;\nPlanning Scrum implementations within the organization;\nHelping employees and stakeholders understand and enact Scrum and empirical product development;\nCausing change that increases the productivity of the Scrum Team; and,\nWorking with other Scrum Masters to increase the effectiveness of how you apply Scrum in the organization.\nSo the Scrum Master is a main driver for the introduction of Scrum in all departments and levels in the company. He needs senior management support, but the Scrum Master’s daily job is to spread Scrum in the company.\n","categories":"","description":"","excerpt":" What are the main hurdles to introducing agile approaches in Swiss companies?\nIntroducing agile company-wide is a cultural change process.Such a change takes time and sometimes hurts.\nWithout the …","ref":"/blog/2016/agile-trends-switzerland-2012/","tags":["agile","series-swiss-agile-trends"],"title":"Agile Trends Switzerland 2012"},{"body":" You are working in a small mostly collocated development team. Sometimes a team member works from a remote location.\nYou have one git repository accessible to all team members.\nThis repository is used to share source code and documentation artifacts.\nYou use the actual industrial standard for version control systems is git.\nYou decided to use branches to implement new features or fix errors instead of using Trunk-Based Development.\nHere the cookbook to create, edit, merge and delete local and remote branches in Git (version 2.x).\nGit branches have two important qualities.\nA branch is like an idea. Once you implemented the idea, feature or fix, you just merge back to trunk and delete the branch.\nMultiple branches coexist in a repository. Ideally branches should be short-lived to avoid waste.\nThe history of the branch commits is still visible upon deletion of the branch.\nIn an agile working setup, a branch should be merged before the end of the sprint.\nAll stories should be completed inside a sprint time slot.\nYou should use meaningful names for your branch name and associated commit messages. Put the ticket number into the branch name and messages for future searches.\nA lot of servers support keywords such as fix #42 to automatically close ticket 42.\nThe described approach is optimal for small teams. The approach is compatible with pull requests if you introduce such a workflow later. You do not need to pull requests when you are working collocated. I prefer pair programming and pair check-in sessions against the trunk.\nFor a short introduction to how to start using Git in software projects, see the blog Git Local Repositories for the Impatient.\nCreate the Branch You get a list of branches with:\ngit branch (1) git fetch (2) 1 List of all branches in the local repository. 2 Retrieve all changes from the remote repository including new branches and store them in the local repository. Your working directory is not modified. Create new branch feat-#42 locally.\ngit checkout -b feat-#42 (1) git checkout feat-#42 (2) 1 Create a new local branch. 2 Select an existing branch. Create the remote branch with the same name and initiate tracking, assuming your remote uses the standard default name origin.\ngit push -u origin feat-#42 Publish files on branch when you are ready to share your changes. Once files are available on remote repository, you should avoid rebasing your branch.\nWork on the Branch Add your changes and commit them regularly.\ngit commit -a -m “commit message describing activities for feat-#42“ As long as you are working alone on the branch, regularly synchronize it with the main trunk using rebase operations. I suggest performing the synchronization at least daily.\nOnce you share your branch, synchronize using merge operations. Doing a rebase will confuse other developers by providing an alternate version of the same change.\nThis housekeeping avoids stress when you finally merge your branch back to trunk.\nUpon running the unit tests locally, push the changes to the repository.\ngit push Now you can test the branch from the central repository and deploy it to your continuous integration pipeline environment.\nWhen working in a team, you can request a review of your branch before closing it.\nGitHub calls such a request a pull request. You can open a request through the platform.\nGitLab calls such a request a merge request. You can open a request through the platform.\nThese platforms provide tools to identify open requests you are requested to provide feedback.\nMajor IDEs provide some support to create and edit a merge request. Often GitHub is better supported than GitLab or Bitbucket.\nMerge the Branch Switch to main and synchronize with your remote repository, the -p parameter means --prune.\ngit checkout main (1) git fetch --all -p git pull 1 The default branch is often called main, master, or trunk. Merge to main. The option --no-ff will always keep branch information.\ngit merge --no-ff feat-#42 Or if you want a single commit to the complete branch.\ngit merge —squash —no-ff feat-#42 (1) 1 You can perform complex squashing of selected commits using git rebase -i HEAD-X. X the number of commits in the past you want to manipulate. Please consult a tutorial or an expert before trying it. The strategy using squash when merging is often used when a Pull Request is closed. Code hosting platforms like GitHub, GitLab, or Bitbucket support this as an option when merging a pull request.\nPush the changes.\ngit push For advanced users, you can first rebase your branch and squash superfluous commits before merging the branch back to trunk.\nDelete the Branch Delete the remote branch (also git branch -dr origin/feat-#42).\ngit push origin --delete feat-#42 Delete the local branch.\ngit branch -d feat-#42 You are done. Now you are ready to implement the next feature.\nView Local and Remote Branches If you want to view branches, use the following commands for the local branches.\ngit branch git branch --no-merged If you want to view remote branches.\ngit branch -r git branch -r --no-merged Checkout Remote Branch. The -p parameter means --prune\ngit fetch --all -p git checkout #feat_42 Thoughts You can find a lot of information on Stack Overflow. Beware when reading the answers on Stack Overflow that Git commands have changed over time. Select new posts to find the best answers.\nThe nifty-gritty details can be found in the official Git documentation.\nThe Pro Git book can be downloaded from Git SCM.\nBeware that gitolite does not support special characters such as # in branch names. Use them only in the commit messages.\nThese same characters work in bitbucket.\nLinks Git Branches for the Impatient Marcel Baumann. 2016.\nGit Local Repositories for the Impatient Marcel Baumann. 2017.\nGit Rebase and Merge for the Impatient Marcel Baumann. 2023.\nGit Tag for the Impatient Marcel Baumann. 2023.\nSemantic Commits for the Impatient Marcel Baumann. 2023.\n","categories":"","description":"","excerpt":" You are working in a small mostly collocated development team. Sometimes a team member works from a remote location.\nYou have one git repository accessible to all team members.\nThis repository is …","ref":"/blog/2016/git-branches-for-the-impatient/","tags":["agile","git","series-students"],"title":"Git Branches for the Impatient"},{"body":" The new version of the Scrum Guide written by Ken Schwaber and Jeff Sutherland has been available since July 2011.\nYou should regularly read the Scrum guide to reflect how your teams are applying agile principles and ideas.\nYou should also consult the seminal Agile Manifesto and the 12 Agile Manifesto Principles.\nThe older version was published in May 2009.\nI found quite interesting the precision of the Scrum Master’s responsibility.\nI have discussions with the customers and companies I coach about the responsibility of the Scrum Master.\nBelow key statements I find useful for Scrum masters and agile enthusiasts.\nWho is responsible for the introduction of Scrum? People often state that management should spread Scrum in the company. Ken and Jeff have a clear idea who is in charge of this.\nThe Scrum Master serves the organization in several ways, including:\nLeading and coaching the organization in its Scrum adoption;\nPlanning Scrum implementations within the organization;\nHelping employees and stakeholders understand and enact Scrum and empirical product development;\nCausing change that increases the productivity of the Scrum Team; and,\nWorking with other Scrum Masters to increase the effectiveness of how Scrum is applied in the organization.\nThe Scrum Master is a main driver for the introduction of Scrum in all departments and levels in the company. He needs senior management support, but the Scrum Master daily job is to spread Scrum in the company.\nWho should coach the product owner? The Scrum Master serves the Product Owner in several ways, including:\nFinding techniques for effective Product Backlog management.\nClearly, communicating vision, goals, and Product Backlog items to the Development Team.\nTeaching the Development Team to create clear and concise Product Backlog items.\nUnderstanding long-term product planning in an empirical environment.\nUnderstanding and practicing agility.\nFacilitating Scrum events as requested or needed.\nThe Scrum Master should also coach the product owner and support him in the long term planning, the communication of the vision and backlog management. The vision and goals of the product should always contain an overall planning frame. During product development, empirical evidence will trigger revision of the milestones and product planning.\nWhat is a potentially shippable product? When the Product Backlog item or an Increment is described as Done, everyone must understand what “Done” means. Although this varies significantly per Scrum Team, members must have a shared understanding of what it means for work to be complete, to ensure transparency. This is the Definition of Done for the Scrum Team and is used to assess when work is complete on the product Increment.\nDevelopment Teams deliver an Increment of product functionality every Sprint. This Increment is a working product, so a Product Owner may choose to immediately release it. Each Increment is additive to all prior Increments and thoroughly tested, ensuring that all Increments work together.\nAs Scrum Teams mature, it is expected that their Definition of Done will expand to include more stringent criteria for higher quality.\nThe Increment is the sum of all the Product Backlog items completed during a Sprint and all previous Sprints. At the end of a Sprint, the new Increment must be ““Done””, which means it must be in usable condition and meet the Scrum Team’s Definition of Done.\nIt must be in usable condition regardless of whether the Product Owner decides to actually release it.\nSo at the end of the sprint, all stories realized since the start of the product must be correct. Therefore, you need automated acceptance tests to guaranty their correctness. The Scrum team must guaranty that at the end of each sprint all functions of the product work as specified and accepted by the product owner in the current and previous sprint reviews.\nHigher quality is reached through extreme programming approach: test driven development, clean code, pair programming, pair check-in, coding dojo, static analysis tools.\nDoes Scrum consider long-term planning? Yes, it is a major activity performed by the Scrum Master and Product Owner. See the above point about the Scrum Master coaching the Product Owner. See if anyone states that long-term planning is not part of the Scrum theory, you should challenge them and give them the Scrum Guide to read. What can be changed during a Sprint? Often customers have heated discussions that can be changed during a sprint Here a clear statement.\nDuring the Sprint: * No changes are made that would affect the Sprint Goal; * Development Team composition and quality goals remain constant; and, * Scope may be clarified and re-negotiated between the Product Owner and Development Team as more is learned.\nWhat is measured in a burn-down chart? Scrum does not consider the time spent working on Sprint Backlog Items. The work remaining and date are the only variables of interest.\nThe only relevant information is the amount of work still open and when this work will be completed. This is true for sprint, release and whole backlog burn-down chart. I am glad that these precisions were added to the new version of the Scrum guide. I simplify my daily work. I can now simply refer the official Scrum Guide to convince people how aspects of Scrum should be understood. The older version of the Scrum Guide is still relevant because it contains hints and best practices no more part of the new version.\n","categories":"","description":"","excerpt":" The new version of the Scrum Guide written by Ken Schwaber and Jeff Sutherland has been available since July 2011.\nYou should regularly read the Scrum guide to reflect how your teams are applying …","ref":"/blog/2016/the-version-of-the-scrum-guide-2011/","tags":["agile"],"title":"The Version of the Scrum Guide 2011"},{"body":" I am very happy we discuss in depth the role, responsibilities and activities of a good Scrum Master. I fully agree with Scrum advocates that Scrum Master is a dedicated full-time job.\nI am also convinced a Scrum Master can support multiple experienced Scrum teams. The Large Scale Scrum framework LeSS states a full-time Scrum Master supports 1 to 3 teams.\nI worked with quite a few Scrum Masters, Product Owners, and Scrum teams. My experience shows it is more productive and effective when the Scrum Master works full-time as (see white paper of Barry Overeem) [1]\nA servant leader\nA coach\nA facilitator\nA teacher\nA mentor\nAn impediment remover\nA change agent\nA manager (please restrain yourself)\nHe should not implement stories. A Scrum Master is under huge stress being a development team member and having to balance their Scrum Master responsibilities against the commitment of the sprint goals.\nSo you shall have full-time Scrum Masters. More important is that you have real Scrum Masters, and not only Scrum administrators who organize meetings and manage the Scrum board and burn-down charts. Scrum has always been a hands-on approach to be successful in this you need to have a passion for getting your hands dirty.\nFind out if you are a real professional Scrum master. Do you perform each sprint the top things a Scrum Master usually forgets to focus on?\nDo Gemba. Redefine career paths, incentives, organization to be more Scrum focused.\nIdentify with the product owner and the development team missing product backlog items.\nState team issues are not being discussed because they are too uncomfortable.\nFind out an appropriate balance between end-to-end system tests and unit tests.\nPlay back the team’s progress against the proposed release plan.\nIntegrate all tests into continuous integration, delivery and deployment.\nCoach your team members to understand the benefits of refactoring, removing waste and focus on quality.\nTeach Kaizen. Coach team to peer review and continuously improve towards perfection.\nTeach pair programming on a daily basis.\nExpand with the team and the organization the definition of done. Beware it can trigger an organizational change.\nI hope the discussion what a successful Scrum master does stay active. Avoid agile coaches not being Scrum masters, they are not doing Gemba and lose contact with the knowledge workers.\nRead our what you do not need to do.\nIt is a huge gain for the Agile community that people and organizations understand that a Scrum master is a professional coach, teacher, mentor, and change catalyst.\n1. The liberators have changed their website structure. Search under The Liberators Shop to find information. ","categories":"","description":"","excerpt":" I am very happy we discuss in depth the role, responsibilities and activities of a good Scrum Master. I fully agree with Scrum advocates that Scrum Master is a dedicated full-time job.\nI am also …","ref":"/blog/2016/scrum-master-is-a-full-time-role/","tags":["agile"],"title":"Scrum Master is a full-time Role"},{"body":" I am often told that it is difficult to use Agile/Scrum approaches for brown field projects or for big projects or for distributed projects or for in other situations.\nInterestingly, these people also state that the same problems exist with traditional approaches such as RUP/OpenUP, Waterfall Model, V Model defined as a formal standard in Germany V-Modell Entwicklungsstandard, and the Swiss variant called HERMES.\nAgile approaches are currently the standard for new projects and are thought in technical universities.\nScrum is the main agile method and state of the industry approach for the implementation of software projects.\nTo open the discussion and bring the discussion back to objective arguments, I often recommend the following books\nBig Projects and Distributed Projects Scaling Lean and Agile Development: Thinking and Organizational Tools for Large-Scale Scrum, Craig Larman and Bas Vodde, Addison-Wesley 2009. This book and the one below are a very extensive presentation about the challenges and trade-offs of big distributed agile projects using LeSS. Don’t expect pre-cocked solutions but a tool set how to lead successfully such projects. Not always an easy reading but worth the effort\nPractices for Scaling Lean and Agile Development: Large, Multi-side, and Offshore Product Development with Large-Scale Scrum, Craig Larman and Bas Vodde, Addison-Wesley 2010 See above for a review of the book\nAgile Testing: A Practical Guide for Testers and Agile Teams, Lisa Crispin and Janet Gregory, Addison-Wesley 2009 The seminal reference book how to blend testing with agile projects. Lisa Crispin and Janet Gregory provide insights and a proven track how to guaranty agile quality assurance and agile testing. A must-read book for everyone seriously developing agile projects.\nAgile Estimating and Planning, Mike Cohn, Prentice-Hall, 2006 The seminal reference to estimating agile projects. The experienced readers will understand why Mike Cohn used the words estimating and planning instead of estimates and plan.\nThe Enterprise and Scrum, Ken Schwaber, Microsoft Press, 2007 The work of one of the Scrum founders how a company can adopt Scrum. You should read the standard works of Scrum to understand the concepts.\nAgile Project Management with Scrum, Ken Schwaber, Microsoft Press 2003 The work of one of the Scrum founders how Scrum influences product organization and management. You should read the standard works of Scrum to understand the concepts.\nBrown-Field Projects Refactoring Improving the Design of Existing Code, Martin Fowler, Addison-Wesley 1999, How to implement continuous improvement on the code level. If you are not refactoring, you are not agile.\nWorking Effectively with Legacy Code, Michael C. Feathers, Prentice-Hall 2005, the Majority of developers work on existing code bases. Based on the above statement, you have to find a way to unit test and refactor legacy code if you want to be agile.\nExtreme Programming Test Driven Development by Example, Ken Beck, Addison-Wesley 2003 How can a programmer be sure his code is working before and after refactoring\nClean Code: A Handbook of Agile Software Craftsmanship, Robert C. Martin, Prentice Hall 2009 We are professional developers and uncle Bob shows how we should work\nThe Clean Coder: A Code of Conduct for Professional Programmers, Robert C. Martin, Prentice Hall 2011 Uncle Bob defines what a professional developer is. I know quite a few developers shocked by his requirements\nAgile and Lean Concepts Lean Software Development, An Agile Toolkit, Mary \u0026 Tom Poppendieck, Addison-Wesley 2003 Classical work what lean development means\nImplementing Lean Software Development: From Concept to Cash, Mary \u0026 Tom Poppendieck, Addison-Wesley 2007 The hand-ons how to implement lean approaches\nAgile Product Management with Scrum: Creating Products that Customers Love, Roman Pichler, Addison-Wesley 2010 Requirement engineering done the agile way\nScrum and XP from the trenches: How we do Scrum, Henrik Knieberg, InfoQ 2007 is a short book how to implement Scrum and XP in projects\nChange Management Fearless Change: Patterns for Introducing New Ideas. Mary Lynn Manns \u0026 Linda . Addison-Wesley 2005. The introduction of Scrum and agile principles means change in the organization and the teams. Linda Rising shows how changes are introduced with success in existing organizations.\nBooks everybody should have read Peopleware: Productive Projects and Teams, Tom DeMarco \u0026 Timothy Lister, Dorset House 1987 How to grow teams and lead successful projects\nThe Mythical Man-Month 2nd Edition, Frederick P. Brooks, Addison-Wesley 1995 [1]. The first version was published in 1975. The rules postulated by Brooks are still actual. Sad is that a lot of product leaders have no clue of these rules.\nBecoming a Technical Leader: An organic Problem-Solving Approach, Gerald M. Weingartner, Dorset House 1986 How a gifted technical engineer can become a manager.\nSlack: Getting past burnout, busywork, and the myth of total efficiency, Tom DeMarco, Broadway Books 2001 In one sentence, the tremendous difference between efficiency and effectivity.\nThe Dilbert Principle, Scott Adams, Harper Collins 1996 An entertainment presentation of all the mistakes companies are doing and still thinking they are smart\nDeath March: The complete Software Developer’s Guide to Surviving \"Mission Impossible\" Projects, Prentice Hall 1997 In my current coaching activities I still encounter departments where burnouts are common. Either these managers are criminals or so plain stupid that they cannot be held responsible. I am still unsure\nI am curious about books you recommend for agile or other approaches. You find a more complete book list under Books.\nDrop me an email or leave a comment.\n","categories":"","description":"","excerpt":" I am often told that it is difficult to use Agile/Scrum approaches for brown field projects or for big projects or for distributed projects or for in other situations.\nInterestingly, these people …","ref":"/blog/2016/books-for-persons-interested-in-agile-approaches/","tags":["agile"],"title":"Books for Persons interested in Agile Approaches"},{"body":"Unknown reference: lean-agile-software-develpment I learnt quite a few new acronyms and techniques when studying for the PMI-ACP certification program. In this post, I collected these acronyms, some definition and the bibliography you should know before attending the examination.\nThe main advantage of having it is that you no longer need to argue with PMI certified product managers if agile is applicable to software projects.\nThe main interest of PMI-ACP certification is their collection of concepts taken from Agile, eXtreme Programming, Scrum and Lean.\nIt could be worth your money to buy the book \"The PMI-ACP Exam: How to pass on Your First Try\", Andy Crowe, First Edition 2012. The book itself is not rocket science, but it contains two hundred questions which are similar to the ones you will encounter during the examination.\nTo get your 21 PDUs necessary for the examination you must attend a training course. I booked an online course at Simplilearn for a reasonable price. The content was reasonable. The test questions were good.\nThe renewal of the certification again requires PDUs. I took online training in interesting areas such as coaching techniques, how to manage effective and efficient meetings or how to write good protocols. Some online videos of Mike Cohn also count for PDUs.\nChapter List PMI ACP eligibility, examination content\nAgile product management APM Framework, agile product lifecycle\nEnvision\nSpeculate (During the speculate phase, the product stories are delivered. This phase involves planning and delivering tested stories in a short iteration, constantly seeking to reduce the risk and uncertainty of the product).\nExplore,\nAdapt,\nClose.\nScope, Costs, Time\nBlog: Value (releasable product), Quality (reliable, adaptable product), Constraints (cost, schedule, scope) [1]\nPeople, Products and Processes\nThe five identified core risk areas for a product are: Intrinsic schedule flaw, Specification breakdown, Scope creep, Personnel loss and Productivity variation.\nPlanning, monitoring, adapting\nEstimation in agile projects\nCommunication on agile projects\nAnalysis and design on agile projects\nAgile quality\nSoft skills for agile product leaders and negotiation\nValue based prioritization of requirements\nManaging risk on agile projects\nMetrics and charts on agile projects\nAgile value stream analysis\nKnowledge and skills\nAgile team members should be flexible and adaptable.\nBibliography The examination reference list of PMI ACP is (the titles in italics are also part of the CAT reference list)\nE. Derby, D. Larsen, and K. Schwaber, Agile Retrospectives. Pragmatic Bookshelf, 2006 [Online]. Available: https://www.amazon.com/dp/0977616649\nA. Cockburn, Agile Software Development, Second. Addison-Wesley Professional, 2006 [Online]. Available: https://www.amazon.com/dp/0321482751\nM. Sliger, The software project manager’s bridge to agility. Addison-Wesley, 2008 [Online]. Available: https://www.amazon.com/dp/B004YW6M5C\nL. Adkins, Coaching agile teams. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321534468\nJ. A. Highsmith, Agile project management. Addison Wesley Professional, 2010 [Online]. Available: https://www.amazon.com/dp/B002HMJYAG\nG. Smith and A. Sidky, Becoming Agile. Manning Publications, 2008 [Online]. Available: https://www.amazon.com/dp/B09782BTD4\nM. Cohn, Agile estimating and planning. Prentice Hall Professional Technical Reference, 2005 [Online]. Available: https://www.amazon.com/dp/0131479415\nJ. Shore and S. Warden, The Art of Agile Development, First. O’Reilly Media, Incorporated, 2007 [Online]. Available: https://www.amazon.com/dp/B09JL2JW4V\nM. Cohn, User Stories Applied. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321205685\nK. Schwaber, Agile Project Management with Scrum. Microsoft Press, 2004 [Online]. Available: https://www.amazon.com/dp/B00JDMPOZW\nlean-agile-software-develpment\nIt is interesting to compare the above list with the reference list of the Certified Agile Tester CAT\nL. Crispin, Agile testing. Addison-Wesley, 2009 [Online]. Available: https://www.amazon.com/dp/0321534468\nM. Cohn, Succeeding with agile. Addison-Wesley, 2010 [Online]. Available: https://www.amazon.com/dp/0321579364\nC. Larman, Agile and Iterative Development. Addison-Wesley Professional, 2003 [Online]. Available: https://www.amazon.com/dp/0131111558\nK. Schwaber, Agile Project Management with Scrum. Microsoft Press, 2004 [Online]. Available: https://www.amazon.com/dp/B00JDMPOZW\nE. Derby, D. Larsen, and K. Schwaber, Agile Retrospectives. Pragmatic Bookshelf, 2006 [Online]. Available: https://www.amazon.com/dp/0977616649\nM. Cohn, User Stories Applied. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321205685\nT. DeMarco, The Deadline. Dorset House Publishing Company, Incorporated, 2011 [Online]. Available: https://www.amazon.com/dp/B006MN4RAS\nT. DeMarco, Peopleware productive projects and teams, Third. 2013 [Online]. Available: https://www.amazon.com/dp/B00DY5A8X2\nK. Beck and C. Andres, Extreme Programming Explained, Second. Addison-Wesley Professional, 2004 [Online]. Available: https://www.amazon.com/dp/0321278658\nH. Kniberg, Lean from the Trenches. Pragmatic Bookshelf, 2011 [Online]. Available: https://www.amazon.com/dp/B00N4HZ6PK\nD. J. Anderson, Kanban. Blue hole press, 2010. Terminology and Acronyms The more terms and acronyms you know, the easier the examination will be.\nActive Listening\nARCSThe Attention Relevance Confidence Satisfaction is relevant for motivational theory and process for systematic motivational design\nAffinity Estimation - e.g., story points or tee-shirt sizes -. The Affinity Estimating exercise is best conducted on Product Backlogs larger than 20 items. It is best when you have at least 40 items which allow for groupings to easily become apparent.\nATDD Acceptance Test Driven Development - Discuss, Distill, Develop, and Demo - see also Behaviour Driven Development BDD\nContinuous Deployment CD. The Continuous Delivery CD is not part of the examination.\nCumulative Flow Diagrams CFD\nContinuous Integration CI: multistage integration is running additional tests for performance, load or stability\nCollaboration versus Coordination: Work Together versus Share Information\nCycle Time = Flow Time\nThe acronym DEEP Detailed Appropriately, Estimable, Emergent, Prioritised. Split story into smaller stories.\nDRY Do not Repeat Yourself\nEI Emotional Intelligence\nEISA Emotional Intelligence Skills Assessment Perceiving, Managing, Decision Making, Achieving, Influencing\nEQ Emotional Intelligence Quotient\nError-feedback ratio: is the number of new defects injected when fixing existing defects. Several years ago, Jerry Weinberg conducted studies on the error-feedback ratio and found that a 20% difference in the feedback ratio leads to an 88% difference in completion time (bad enough), but the next 10% increase leads to a 112% increase.\nEarned Value Management EVM - this is standard PMI theory -\nPV (Planned Value) = BAC (Budget At Completion) \\* Planned Percentage Completed Budget Cost of Work Scheduled\nAC (Actual Cost) - Budget Cost of Work Performed\nEV (Earned Value) = BAC (Budget At Completion) \\* Actual Percentage Completed - Sum (PV[Completed]) from start until current\nCPI (Cost Performance Index) = EV / AC (Actual Cost) indicates if we are under or other budget\nSPI (Schedule Performance Index) = PV / AC indicates if we are early or late\nETC (Cost Required) = (BAC - EV) / CPI - This metric is the forecast amount to complete the remaining work -\nEAC (Forecast Cost for the total planned work) = BAC / CPI = AC + ETC\nFive Levels of Conflicts\nProblem to Solve (Good Teams) → Collaboration, consensus Collaboration and Seeking a win-win situation. Consensus-Learning where every team member’s head is with regard to the issue and, in time, arriving at a decision everyone can back.\nDisagreement → Negotiate, support\nContest → Accommodate\nCrusade → Shuttle between parties\nWorld War → Protect to avoid injuries\nJBGE Just Barely Good Enough\nINVEST Independent Negotiable Valuable Estimable Small (Sized appropriately) Testable\nInternal Rate of Return IRR, the higher, the better. The internal Rate of Return (IRR) is used to express the return on product in % terms when comparing two different cash flow streams.\nJIT Just In Time\nKano Model: Must have, Linear feature, Delight\nThreshold or basic attributes must have attributes, otherwise the product is incomplete. Threshold features are those that must be present in the product for it to be successful. They are often referred to as must-have features.\nPerformance attributes are linear, the more, the better\nExcitement attributes are delights\nMMF Minimally Marketable Feature\nMoSCoW Must, Should, Could, Would\nNet Present Value NPV → FV = PV * (1+i)^n, FV is future value, PV is the present value. It is the number of periods/years; you can interpret as the higher, the better\nPayback Period, you can interpret as the lower, the better\nPESTLE Political, Environmental, Societal, Technological, Legal, Economical\nPMI-ACP Project Management Institute Agile Certified Practitioner\nProduct Owner: Committed, Responsible, Authorized, Collaborative, and Knowledgeable\nProject management methods\nRelative Weighting Method\nRetrospective: Set the stage, Gather data, Generate insights, Decide what to do, Close the retrospective\nRisk\nRisk Board\nRisk Exposure (Risk Sensus) → Risk Probability * Risk Cost = Risk Exposure\nRisk Management Process: Identify, Assess, Respond, Review of risks\nStrategies: Avoid, Mitigate, Transfer, Accept\nROI Return On Investment (Benefits - Costs) / Costs in percent. The higher, the better\nROTI Return On Time Invested (done in 60 seconds)\n0 = \"I would have been better off making a Starbucks run. Complete waste of time\" or Lost Principle: No Benefit Received for Time Invested Break-Even\n1 = \"You really should have let me stay at my desk and code\"\n2 = \"This was an OK meeting. About as valuable as if I haave been coding\" or Received Benefit Equal to Time Invested High Return on Investment\n3 = \"Surprisingly, this was more valuable than if I have been writing code\"\n4 = \"Wow, this meeting saved me tons of time. Thank goodness I did not skip it to code\" or Received Benefit Greater than Time Invested\nRUP Rational Unified Process: Inception, Elaboration, Construction, Transition phases\nStaging: The process of defining and prioritizing the nonfunctional requirements for scaling is called staging. Staging occurs prior to the start of the first sprint and takes just one day. During this day, the nonfunctional scaling requirements for this particular product are determined and placed in the Product Backlog.\nShu Ha Ri: can be considered as concentric circles, with Shu within Ha, and both Shu and Ha within Ri. The fundamental techniques and knowledge do not change.\n\"protect\", \"obey\" — traditional wisdom — learning fundamentals, techniques, heuristics, proverbs\n\"detach\", \"digress\" — breaking with tradition — detachment from the illusions of self\n\"leave\", \"separate\" — transcendence — there are no techniques or proverbs. All moves are natural. Becoming one with spirit alone without clinging to forms; transcending the physical\nScrum\npillars: Transparency, Inspection, Adaptation\nScrum of Scrums = Meta Scrum\nSDLC System Development Lifecycle\nServant Leadership\nSIP Software In Progress\nSMART - Specific Measurable Attainable Relevant Time-bound -\nTFD Test First Development\nTest Driven Development TDD\nExtreme Programming XP\nWideband Delphi\nWave: Wave is the Product Planning structure with a Medium-range time frame (3 months) with story level capability and capability commitment. Waves, or milestones, are intermediate points, usually from one month to three months apart. Waves can have both a product management and a technical function. From a product management perspective, they provide a chance to review progress and make adjustments.\nWork Breakdown Structure WBS\nBelow some additional definitions\nRegardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.\n— Norm Kerth's Prime Directive (should be used in review and retrospective) Story Points versus Ideal Days - and Elapsed Days -\nCrystal Clear requires\nthe following properties:\nFrequent delivery of usable code to users\nReflective improvement\nOsmotic communication preferably by being co-located\nCrystal Clear additionally includes these optional properties:\nPersonal safety\nFocus\nEasy access to expert users\nAutomated tests, configuration management, and frequent integration\nAgile Coach Failure Modes: Spy, Seagull, Opinionated, Admin, Hub, Butterfly, Expert\nRoot-causing a defect or testing the feasibility of an algorithm or a third party solution is an example of a spike\nMeasure: ascertain the size, amount, or degree of (something) by using an instrument or device marked in standard units or by comparing it with an object of known size\nDysfunctional teams pyramid: absence of trust, fear of conflict, lack of commitment, avoidance of accountability, inattention to results\nAccording to DeMarco, Fragmented knowledge workers may look busy, but a lot of their business is just thrashing. The minimum cost penalty is 15%\nThe declaration milestone is a verbal notice from one person to another, or to multiple people, that a milestone was reached.\nThe three coach styles are Teaching, Coaching, and Advising.\nThe quantity of function is scope, measured in terms of user stories, use cases, requirements, or features (depending on a particular situation). In software, these may be measured ultimately as objects, modules, classes, or lines of code.\nQuestions Which of the following correctly defines the team members themselves managing assignment of the day-to-day tasks required to deliver stories at the end of each iteration? Workload Management\nWhich of the following techniques can be used to apply to bring down the Lost Opportunity Cost within your team? Team Collocation\nWhen should the Product Owner provide feedback on the work results? Just in time reviews\nWho is the most appropriate person to monitor all the risks in an Agile product? The product manager\nWhich of the following is false about Velocity? Velocity cannot correct Estimation errors\nWhich of the following is NOT the skill for Agile coaches for facilitating change? Reaching agreement\nWhich tool combines the estimation techniques of expert opinion, disaggregation and analogy? Planning poker combines expert opinion, analogy, and disaggregation into an enjoyable approach to estimating that results in quick but reliable estimates.\nWhich of the following metrics can be BEST standardized across teams? Business case realization -The PMO can help the teams to enable timely decision making by standardizing the metrics.-\nWhich is the communication technique where you repeat back a summary of what the other person just said to you to confirm understanding? Reflective Listening is a communication technique where you repeat back a summary of what the other person just said to you to confirm understanding. Another benefit in this situation is that having a person hear their own ideas in another person’s voice/words may make it easier for them to be objective.\nAdaptation depends upon understanding a wide range of information, including an assessment of the product’s progress, technical risks, the requirements evolution, and ongoing competitive market analysis. Which are the areas where every team needs to constantly evaluate and make appropriate adaptations? Product Value, Product quality, Product status, Team performance -Every team needs to constantly evaluate and make appropriate adaptations in the following four areas - Product Value, Product quality, Product status, Team performance-\nA standard for measuring or evaluating something. Metric - A metric is a standard for measuring or evaluating something.-\nWhat BEST describes the characteristics of a Learner at Level 3 or in the Fluent stage of learning? Learners in the Fluent stage are experts -The Stage 3 Learner is at the stage of mastery. He is able to figure out the end effect of any procedure and to make his way to that end.-\nScrum uses the sashimi technique to require that every slice of functionality created by the developers be complete. All the requirements gathering and analysis, design work, coding, testing, and documentation that constitute a complete product are required to be completed in every Sprint and demonstrated in the Sprint increment of functionality. Sprints are kept short enough that the stakeholders don’t lose interest in the product before the Sprints are completed. And stakeholders can see that they have an opportunity to redirect the product at the start of every Sprint to optimize the value they derive from the product. At the end of every Sprint, stakeholders see new functionality. Models, requirements, and internal artefacts might be of use to the developers, but they are never shown to the stakeholders.\nFeature X has a value of 12 and the total value of all features is 35. If the feature is estimated to cost 56%, what is the priority of this feature using relative weighting? Correct Answer is B. The priority of the feature is determined by dividing the relative value by the cost %. Hence the answer = (12/35)/(0.56) = 0.61.\nThe 100-Point Method was originally developed by Dean Leffingwell and Don Widrig for use cases and is used for prioritization as well. It is a voting scheme where each stakeholder is given 100 points that he or she can use for voting in favour of the most important requirements. How they distribute the 100 points is up to them: 20 here, 10 there or even all 100 on a single requirement if that is their sole priority.\nWhen a team member approaches the Coach with a complaint about another team member, what conflict resolution technique should the Coach use? Three-step intervention path Every team needs to constantly evaluate and make appropriate adaptations in the following four areas: Product value, Product quality, Team performance, Project status.\nNormative methodologies are based on solutions or sequences of steps known to work for the discipline. Electrical and other building codes in house wiring are examples. In software development, one would include state diagram verification in this category.\nIterative development means that we build a partial version of a product and then expand that version through successive short time periods of development followed by reviews and adaptations. Feature-based delivery means that the engineering team builds features of the final product or, particularly with industrial products. At least a close representation of the final product (such as a simulation model). Iterations are constrained to produce a result within a certain period of time—a time box (as short as 1–4 weeks for software). Time boxes force closure; they force us to make something concrete, often before we are quite ready. Incremental development means that we build these products such that they could be deployed at the end of one or more of the iterations.\nForecasting the financial value of a theme is the responsibility of the product owner, but it is a responsibility shared with all other team members—programmers, testers, analysts, product managers, and so on.\nDecision Framing focuses majorly on, Decision framing focuses on who gets involved in the decision process. Managers who make decisions without input from subordinates and peers make poor decisions. Engineers who make decisions without input from managers and peers make poor decisions. Who makes the decision is less important than getting the right people involved in the decision process.\nWhich of the following charts shows the total number of story points completed through the end of each iteration? Cumulative story point burn-down chart\nDuring critical problem-solving, you can ask probing questions, use active and reflective listening, Lead to an answer, but one should avoid injecting their own ideas.\nI wish you success for your certification.\n1. Jim Highsmith removed all blogs. Try to find the blog beyond scope schedule and cost: the agile triangle. ","categories":"","description":"","excerpt":"Unknown reference: lean-agile-software-develpment I learnt quite a few new acronyms and techniques when studying for the PMI-ACP certification program. In this post, I collected these acronyms, some …","ref":"/blog/2016/pmi-acp-certification/","tags":["agile"],"title":"PMI-ACP Certification"},{"body":" I loved Linux as a young developer. I compiled new kernels during evening sessions. I worked hard to install and configure drivers to support the hardware I had bought.\nI explored forums and talked with technical support specialists to activate hardware or support the resolution of my display. I struggled days to have the correct drivers for the graphic card and communication components of my notebook.\nI grew older and decided to enjoy my evenings and weekends with my family and friends. Surely I would prefer to have no virus, trojan and other evils in my workstation.\nSo I went to macOS and Apple notebooks without regrets.\nGains The major gains upon migrating to OS X are:\nNo virus scanners are necessary, the speed-up during complex programming and development activities is tremendous.\nNo trouble when updating the operating system, updates are automatic, and often no new start is required.\nUnix Command Line and Tools are available in the console. Homebrew or MacPorts projects provide all known and less-known utilities and programs available under Linux [1].\nA long-lived notebook is still working and looking nice after five years of daily usage. The performance is more than adequate for software development with Java 8/9/10/11 stack and C++.\nThe last notebooks I had all lasted between six and nine years. These computers were used daily the first five years.\nDaily Development The tools I really enjoy and use on a daily basis for software development as I mainly developed in Java - are:\nIntelliJ IDEA IDE,\nAtlassian Cloud applications - BitBucket, HipChat, CI pipeline -,\nHomebrew as package manager for utilities,\nDocker as container manager,\nVirtualBox when I need a full-fledged virtual machine, [2].\nDaily Work The tools I use to perform administrative work are:\nLibreOffice,\nGoogle Business for team work in the cloud using collaborative tools,\nApple Mail Client with GPG plugin for PGP and S/MIME secure email,\nA local Swiss application Banana for accounting and VAT reports for the federal government. I bought it as soon as the company stopped requesting higher prices for OS X than for the other platforms.\nLibreOffice completely replaced Microsoft Office suite. I stopped using OpenOffice after the strange behavior of Oracle with the application.\nI never really regretted leaving Linux or Ubuntu behind me.\n1. I use currently Homebrew. The available packages and the handling are excellent. 2. The need of virtual machines for daily work is fading away. ","categories":"","description":"","excerpt":" I loved Linux as a young developer. I compiled new kernels during evening sessions. I worked hard to install and configure drivers to support the hardware I had bought.\nI explored forums and talked …","ref":"/blog/2016/why-i-use-a-macbookpro-and-os-x/","tags":["organization"],"title":"Why I use a MacBookPro and OS X"},{"body":" Decision makers and waterfall aficionados loudly ask if agile approaches are worth the hype.\nDoes the approach really promote team work?\nWell, my current experience is that the answer is a sounding YES.\nDevelopers love to develop software products using Scrum. The motivation and positive energy just explode.\nPeople talk together, build as a team better products and enjoy the daily activities.\nStakeholders and customers or users embrace the advantages they get.\nA whisper can still be heard:\nYes, it is not without consequences for the organization.\nSay your team is developing software products with Scrum. We have the following roles:\nThe stakeholders\nThe developers (Development Team)\nThe Scrum master (SM)\nThe product owner (PO)\nThe Scrum Team is the composition of the development team, Scrum master, and the product owner.\nStakeholders Stakeholders love Scrum. Every two weeks they have a new application version they can use, test, and get feedback from all users. This is the dream of every key account manager.\nBecause a new release is available every two weeks, the stakeholders should also provide feedback every two weeks. They sometimes hate the pressure of agile and Scrum.\nSome organizations struggle with high-delivery rhythm. Explain to your stakeholders a new release is available every two weeks. The stakeholders decide how often the solution is deployed into production.\nDevelopers Team Agile methods, such as Scrum, eXtreme Programming, or LeSS, are fun for all developers. Suddenly, everyone can see your code, so at the beginning you as a developer must cope with different views how good code should be written. Suddenly, you must master Test Driven Development TDD, mocking, unit test, legible documents. But once you have it, you start to experience the \"flow\" and enjoy the atmosphere and to deliver at the end of each sprint a new software artifact.\nYou realize later that Scrum says the team is responsible. You must acknowledge that product success is also your success. ROI considerations now also drive each design decision. If you master these responsibilities, you suddenly discover the world of engineering. It is creating great products with an optimal balance of external quality and costs without ever jeopardizing the quality of the core. You can never again deny that you as a developer are in charge.\nScrum Master The Scrum master [1] is cool with a team enjoying Scrum and the flow of success. You just have to realize you are not a master. You are the enabler for a team of talented engineers.\nSo you need to discover your the lonely cowboy riding in the sun song why this job is so rewarding.\nProduct Owner As a product owner [2], you control the budget of the product, the priorities. At the end of each iteration, you can change all priorities and goals. Cool isn’t it. But wait as a product owner, I am responsible for the budget and product success, and each time a member of the team asks me something I must have an answer ready.\nScrum is cool and we enjoy it. And Scrum makes everything transparent and fast. Every two weeks, a new version is delivered. This version must be evaluated, accepted or a list of improvements must be provided in the next few days. This rhythm is fast, really fast. Once you are up to this speed, you will enjoy the flow.\nLessons Learnt Middle management often struggles with the agile approach at the beginning. See, for example, the discussion about manager role in an agile environment in the LeSS approach. Be assured the results are worth the effort.\nReading an experience report or digging in the findings of Kotter, you realize success or failure goes through how you handle middle management.\nReferences [1] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n[2] D. McGreal and R. Jocham, The Professional Product Owner. Addison-Wesley Professional [Online]. Available: https://www.amazon.com/dp/B07D5ZPJBY\n","categories":"","description":"","excerpt":" Decision makers and waterfall aficionados loudly ask if agile approaches are worth the hype.\nDoes the approach really promote team work?\nWell, my current experience is that the answer is a sounding …","ref":"/blog/2016/do-agile-methods-scrum-motivate-your-team/","tags":["agile"],"title":"Do Agile Methods - Scrum - Motivate your Team?"},{"body":" The Scrum and agile mantra is to have a ready-to-ship product each time a sprint is completed. You must avoid any incomplete activities at any price.\nIncomplete activities are also called Undone Work. They are technical debts in your software, hindering its delivery to users. They are expended money you cannot invoice to your customers.\nRegulatory and traditional quality insurance departments request all kinds of documents, such as review, test results, risk analysis matrix. They want insurance that their view of quality is fulfilled.\nScrum sees the importance of quality like the lean production approach [1].\nQuality is built into the product.\nYou do not need any documents proving you have fulfilled this goal.\nYour sole goal is to optimize the process to produce the best products, not to repair them after production.\nIt is the sole responsibility of the Scrum team to guaranty the quality of their product [2]. Scrum teams also learnt you cannot win against big corporations. So you have to define solutions satisfying the QA departments with minimal overhead and almost no undone work. We have experience working with quality insurance and TUV or FDA regulatory departments. We use the following approaches to handle the needs of the regulatory departments, seen as stakeholders in the Scrum terminology.\nUse static analysis tools such as PMD, Checkstyle, Findbugs [1] to create quality gate reports for your QA department. Thousands of checks and hundreds of pages of reports will satisfy any QA department. Plugins exist for Eclipse [2] and continuous integration servers.\nUse review plugin such as Eclipse Jupiter to create these still mandatory review reports on the source code. These reports are useless in an agile team working with techniques such as refactoring and pair programming. But they are still mandatory for most of the traditional quality assurance QA departments. The plugin allows you to generate nice looking reports and to implement the findings at the same time.\nUse Test Driven Development approach and create a lot of unit tests. By slightly extending the logging features of JUnit and by using code coverage tools, you can create reports showing which source code was tested. Add some annotations to your test cases, and you have full traceability to your stories and associated software requirements. With a small amount of work, you can generate thousands of pages of information and provide the PDF documents to the regulatory department. These documents are also TUV and FDA compliant.\nUse Behavior Driven Development approach and create acceptance criteria for all your stories. Using the reporting features of easyb footonote:[The website of easyb is no more available therefore no link can be provided.], you can create acceptance test reports for all your stories. It generates hundreds of pages of information and provides the PDF documents to the regulatory department. These documents are also TUV and FDA compliant.\nUse continuous integration servers to run all the above measures and generate the documentation at the end of each sprint or release.\nLink your version control system with your continuous server, issue tracking application and unit tests. So you can generate release notes stating the list of closed issues with the associated source code and unit tests verifying the correctness of the change.\nSimilar tools are available in Python .NET, or C++ communities.\nYou can satisfy your QA and regulatory stakeholders with a lot of reports nobody will ever read. A real Scrum team corrects weaknesses during the development process and always deliver software of the highest quality. The reports can only show the inherent quality of the software and are not worth the paper they are printed on.\nBut you satisfy powerful stakeholder groups and can more freely work on the most important goal. Deliver on time and in budget the best software the customer wants to have.\nReferences [1] G. Verheyen, Scrum - A Pocket Guide, Third. Van Haren Publishing, 2021 [Online]. Available: https://www.amazon.com/dp/B08XWQ7DG9\n[2] S. Ockerman and S. Reindl, Mastering Professional Scrum. Addison Wesley, 2019 [Online]. Available: https://www.amazon.com/dp/B07XTLNPTC\n1. The successor of FindBugs is SpotBugs 2. A more popular IDE is IntelliJ IDEA with similar plugins. ","categories":"","description":"","excerpt":" The Scrum and agile mantra is to have a ready-to-ship product each time a sprint is completed. You must avoid any incomplete activities at any price.\nIncomplete activities are also called Undone …","ref":"/blog/2016/minimizing-undone-work-when-working-with-regulatory-departments/","tags":["agile"],"title":"Minimizing Undone Work when Working with Regulatory Departments"},{"body":" Development Approach Introduction Values Architecture Decisions Architecture Decisions shall be documented to provide causality and an audit trade why the current solution was chosen. The evolution of architecture and the history of decisions is of tremendous importance to understand the trade-offs built into the solution.\nArchitecture design records ADR is a promising approach to documenting the evolution of a solution architecture.\nSpecifications As a user, I want to have all architecture decisions of a component to understand the tradeoffs of the current solution.\nAs a user, I want to have all architecture decisions constraining the design of a component to understand the constraints of the component design.\nAs a user, I want to visualize the history of a specific decision to better understand why the current solution was selected.\n","categories":"","description":"","excerpt":" Development Approach Introduction Values Architecture Decisions Architecture Decisions shall be documented to provide causality and an audit trade why the current solution was chosen. The evolution …","ref":"/docs/dev/developmentapproach/","tags":"","title":""},{"body":" Introduction and Goals Application Goals The application is an application of modern software engineering principles.\nThe essential features are used to implement all acquisition, project management and financial process of an agile software consulting company.\nThe smoke test is to run the tangly processes on the ERP solution.\nRequirements Overview ID Type Description Remarks req-001\nimport\nAs a user, I want to import all company data as a set of TSV files so that I can migrate strategic data.\nNo dependencies to a database shall exit\nreq-002\nexport\nAs a user, I want to export all company data as a set of TSV files so that I can back up strategic data in a human-readable form.\nHuman-readable form is necessary for audit. The export format is also used as import format.\nQuality Goals Source Code Quality Goals Documentation Quality Goals The architecture documentation shall empower a developer to master the bounded domains and build extensions.\nID Type Explanation doc-001\nCorrect\nDocumentation needs to be accurate and free from errors. Wrong documentation is often worse than no documentation.\ndoc-002\nCurrent\nDocumentation needs to be correct over time, reflecting changes performed upon code, infrastructure or interfaces of the system.\ndoc-003\nUnderstandable\nDocumentation needs to be understood by the target audience.\ndoc-004\nRelevant\nWith respect to structure, form and content, documentation shall be relevant for the tasks of its audience.\ndoc-005\nReferenceable\nUse a consistent numbering schema for headings, diagrams and tables.\ndoc-006\nProper language\nUse proper language, correct spelling and grammar, active voice, positive statements and short sentences.\ndoc-007\nMaintainable\nMaintainability is key to keeping documentation current.\ndoc-008\nEasy to find\nDocumentation itself should be easy to find whenever needed. Its content should be easily navigable and searchable.\ndoc-009\nVersioned\nAs the system evolves, so will your documentation, without losing its history\ndoc-010\nTooling support\nFocus on content, reduce time needed for tool-setup\ndoc-011\nContinuously updated\nMake it a habit to maintain and expand the documentation with every relevant change in your system.\ndoc-012\nRelevant\nDocumentation should be written in a public domain format. Multiple public tools should support writing in the selected format.\ndoc-013\nRelevant\nDocumentation should be searchable to easily access topics.\nThe current approach is arc42 structure, C4 Model and UML diagrams to document the design. The content is written in Asciidoc format. The documentation is published as a static website using Hugo and Docsy.\nThe Java source code is documented with Javadoc. Source code in other programming languages is documented with Doxygen.\nStakeholders Role Relevance Expectations Open Source Developer\nImportant\nwants to extend the application with functions required for a specific market or user segment.\nCompany Prospect\nImportant\nlooking for a portfolio to show compentencies in areas he is interested to work with us.\nClosed Source Developer\nRelevant\nwants to extend the application with functions she could sell to her customers.\nBlog Reader\nRelevant\ninterested to explore a concept discussed in a blog article and exemplary realized in the application.\nApplication user\nRelevant\nwants to understand decisions and their impact on the product value or costs.\nBachelor Student\nInteresting\nwants to use components for semester projects and understand a specific aspect of the design.\nThe ERP is developed using an open source approach. Development capabilities are dependent on the goodwill and availability of active committers.\n","categories":"","description":"","excerpt":" Introduction and Goals Application Goals The application is an application of modern software engineering principles.\nThe essential features are used to implement all acquisition, project management …","ref":"/docs/domains/architecture/01-introduction-and-goals/","tags":"","title":""},{"body":" Architecture Constraints The programming language is Java. The version is the current released JDK.\nEmbedded programming language is C++. The version is the current released ISO standard.\nTh user interface for all Java applications is build with Vaadin. The version is the current released version available on Maven Central.\nThe documentation language is English US.\nExchange of data is over TSV files.\n","categories":"","description":"","excerpt":" Architecture Constraints The programming language is Java. The version is the current released JDK.\nEmbedded programming language is C++. The version is the current released ISO standard.\nTh user …","ref":"/docs/domains/architecture/02-architecture-constraints/","tags":"","title":""},{"body":" System Scope and Context Contents System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.\nIf necessary, differentiate the business context (domain specific inputs and outputs) from the technical context (channels, protocols, hardware).\nMotivation The domain interfaces and technical interfaces to communication partners are among your system’s most critical aspects. Make sure that you completely understand them.\nForm Various options:\nContext diagrams\nLists of communication partners and their interfaces.\nFurther Information See Context and Scope in the arc42 documentation.\nBusiness Context Contents Specification of all communication partners (users, IT-systems, …​) with explanations of domain specific inputs and outputs or interfaces. Optionally you can add domain specific formats or communication protocols.\nMotivation All stakeholders should understand which data are exchanged with the environment of the system.\nForm All kinds of diagrams that show the system as a black box and specify the domain interfaces to communication partners.\nAlternatively (or additionally) you can use a table. The title of the table is the name of your system, the three columns contain the name of the communication partner, the inputs, and the outputs.\n\u003cDiagram or Table\u003e\n\u003coptionally: Explanation of external domain interfaces\u003e\nTechnical Context Contents Technical interfaces (channels and transmission media) linking your system to its environment. In addition a mapping of domain specific input/output to the channels, i.e. an explanation which I/O uses which channel.\nMotivation Many stakeholders make architectural decision based on the technical interfaces between the system and its context. Especially infrastructure or hardware designers decide these technical interfaces.\nForm E.g. UML deployment diagram describing channels to neighboring systems, together with a mapping table showing the relationships between channels and input/output.\n\u003cDiagram or Table\u003e\n\u003coptionally: Explanation of technical interfaces\u003e\n\u003cMapping Input/Output to Channels\u003e\n","categories":"","description":"","excerpt":" System Scope and Context Contents System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the …","ref":"/docs/domains/architecture/03-system-scope-and-context/","tags":"","title":""},{"body":" Solution Strategy Technical Approach Software Development Modern Java is the preferred programming language for realization.\nEmbedded Software Development Modern C++ is the preferred programming language for embedded functionalities. The source code is object-oriented.\nA realtime operating system RTOS provides scheduling and concurrent processing.\nThe communication uses asynchronous message passing. Messages are immutable value objects.\nThread logic is realized as a finite state machine.\nDocumentation Approach Follow the recommendations of arc42 approach for document structure and content.\nGraphical modelization is done with C4 Model and UML.\nDocuments will be written in Asciidoc. Documentation language is English. Documentation is published as a static website.\nAPI will be documented with Doxygen. Doxygen is the de facto standard tool for generating documentation from annotated C++ sources. It also supports other popular programming languages such as C.\nImport and Export Format An entity aggregate can be imported from and exported to a tab separated file. This approach is the preferred one. The Gleam module provides a mechanism to describe the mappings between Java classes and TSV columns.\nEntities with complicated structure target a JSON format file.\n","categories":"","description":"","excerpt":" Solution Strategy Technical Approach Software Development Modern Java is the preferred programming language for realization.\nEmbedded Software Development Modern C++ is the preferred programming …","ref":"/docs/domains/architecture/04-solution-strategy/","tags":"","title":""},{"body":" Building Block View Content The building block view shows the static decomposition of the system into building blocks (modules, components, subsystems, classes, interfaces, packages, libraries, frameworks, layers, partitions, tiers, functions, macros, operations, data structures, …​) as well as their dependencies (relationships, associations, …​)\nThis view is mandatory for every architecture documentation. In analogy to a house this is the floor plan.\nMotivation Maintain an overview of your source code by making its structure understandable through abstraction.\nThis allows you to communicate with your stakeholder on an abstract level without disclosing implementation details.\nForm The building block view is a hierarchical collection of black boxes and white boxes (see figure below) and their descriptions.\nLevel 1 is the white box description of the overall system together with black box descriptions of all contained building blocks.\nLevel 2 zooms into some building blocks of level 1. Thus it contains the white box description of selected building blocks of level 1, together with black box descriptions of their internal building blocks.\nLevel 3 zooms into selected building blocks of level 2, and so on.\nFurther Information See Building Block View in the arc42 documentation.\nWhitebox Overall System Here you describe the decomposition of the overall system using the following white box template. It contains\nan overview diagram\na motivation for the decomposition\nblack box descriptions of the contained building blocks. For these we offer you alternatives:\nuse one table for a short and pragmatic overview of all contained building blocks and their interfaces\nuse a list of black box descriptions of the building blocks according to the black box template (see below). Depending on your choice of tool this list could be sub-chapters (in text files), sub-pages (in a Wiki) or nested elements (in a modeling tool).\n(optional:) important interfaces, that are not explained in the black box templates of a building block, but are very important for understanding the white box. Since there are so many ways to specify interfaces why do not provide a specific template for them. In the worst case you have to specify and describe syntax, semantics, protocols, error handling, restrictions, versions, qualities, necessary compatibilities and many things more. In the best case you will get away with examples or simple signatures.\n\u003cOverview Diagram\u003e\nMotivation \u003ctext explanation\u003e\nContained Building Blocks \u003cDescription of contained building block (black boxes)\u003e\nImportant Interfaces \u003cDescription of important interfaces\u003e\nInsert your explanations of black boxes from level 1:\nIf you use tabular form you will only describe your black boxes with name and responsibility according to the following schema:\nName Responsibility \u003cblack box 1\u003e\n\u003cText\u003e\n\u003cblack box 2\u003e\n\u003cText\u003e\nIf you use a list of black box descriptions then you fill in a separate black box template for every important building block . Its headline is the name of the black box.\n\u003cName black box 1\u003e Here you describe \u003cblack box 1\u003e according the the following black box template:\nPurpose/Responsibility\nInterface(s), when they are not extracted as separate paragraphs. This interfaces may include qualities and performance characteristics.\n(Optional) Quality-/Performance characteristics of the black box, e.g.availability, run time behavior, …​.\n(Optional) directory/file location\n(Optional) Fulfilled requirements (if you need traceability to requirements).\n(Optional) Open issues/problems/risks\n\u003cPurpose/Responsibility\u003e\n\u003cInterface(s)\u003e\n\u003c(Optional) Quality/Performance Characteristics\u003e\n\u003c(Optional) Directory/File Location\u003e\n\u003c(Optional) Fulfilled Requirements\u003e\n\u003c(optional) Open Issues/Problems/Risks\u003e\n\u003cName black box 2\u003e \u003cblack box template\u003e\n\u003cName black box n\u003e \u003cblack box template\u003e\n\u003cName interface 1\u003e …​ ==== \u003cName interface m\u003e\nLevel 2 Here you can specify the inner structure of (some) building blocks from level 1 as white boxes.\nYou have to decide which building blocks of your system are important enough to justify such a detailed description. Please prefer relevance over completeness. Specify important, surprising, risky, complex or volatile building blocks. Leave out normal, simple, boring or standardized parts of your system\nWhite Box \u003cbuilding block 1\u003e …​describes the internal structure of building block 1.\n\u003cwhite box template\u003e\nWhite Box \u003cbuilding block 2\u003e \u003cwhite box template\u003e\n…​ ==== White Box \u003cbuilding block m\u003e\n\u003cwhite box template\u003e\nLevel 3 Here you can specify the inner structure of (some) building blocks from level 2 as white boxes.\nWhen you need more detailed levels of your architecture please copy this part of arc42 for additional levels.\nWhite Box \u003c_building block x.1_\u003e Specifies the internal structure of building block x.1.\n\u003cwhite box template\u003e\nWhite Box \u003c_building block x.2_\u003e \u003cwhite box template\u003e\nWhite Box \u003c_building block y.1_\u003e \u003cwhite box template\u003e\n","categories":"","description":"","excerpt":" Building Block View Content The building block view shows the static decomposition of the system into building blocks (modules, components, subsystems, classes, interfaces, packages, libraries, …","ref":"/docs/domains/architecture/05-building-block-view/","tags":"","title":""},{"body":" Runtime View Contents The runtime view describes concrete behavior and interactions of the system’s building blocks in form of scenarios from the following areas:\nimportant use cases or features: how do building blocks execute them?\ninteractions at critical external interfaces: how do building blocks cooperate with users and neighboring systems?\noperation and administration: launch, start-up, stop\nerror and exception scenarios\nRemark: The main criterion for the choice of possible scenarios (sequences, workflows) is their architectural relevance. It is not important to describe a large number of scenarios. You should rather document a representative selection.\nMotivation You should understand how (instances of) building blocks of your system perform their job and communicate at runtime. You will mainly capture scenarios in your documentation to communicate your architecture to stakeholders that are less willing or able to read and understand the static models (building block view, deployment view).\nForm There are many notations for describing scenarios, e.g.\nnumbered list of steps (in natural language)\nactivity diagrams or flow charts\nsequence diagrams\nBPMN or EPCs (event process chains)\nstate machines\n…​\nFurther Information See Runtime View in the arc42 documentation.\n\u003cRuntime Scenario 1\u003e \u003cinsert runtime diagram or textual description of the scenario\u003e\n\u003cinsert description of the notable aspects of the interactions between the building block instances depicted in this diagram.\u003e\n\u003cRuntime Scenario 2\u003e …​ \u003cRuntime Scenario n\u003e ","categories":"","description":"","excerpt":" Runtime View Contents The runtime view describes concrete behavior and interactions of the system’s building blocks in form of scenarios from the following areas:\nimportant use cases or features: how …","ref":"/docs/domains/architecture/06-runtime-view/","tags":"","title":""},{"body":" Deployment View Content The deployment view describes:\ntechnical infrastructure used to execute your system, with infrastructure elements like geographical locations, environments, computers, processors, channels and net topologies as well as other infrastructure elements and\nmapping of (software) building blocks to that infrastructure elements.\nOften systems are executed in different environments, e.g. development environment, test environment, production environment. In such cases you should document all relevant environments.\nEspecially document a deployment view if your software is executed as distributed system with more than one computer, processor, server or container or when you design and construct your own hardware processors and chips.\nFrom a software perspective it is sufficient to capture only those elements of an infrastructure that are needed to show a deployment of your building blocks. Hardware architects can go beyond that and describe an infrastructure to any level of detail they need to capture.\nMotivation Software does not run without hardware. This underlying infrastructure can and will influence a system and/or some cross-cutting concepts. Therefore, there is a need to know the infrastructure.\nForm Maybe a highest level deployment diagram is already contained in section 3.2. as technical context with your own infrastructure as ONE black box. In this section one can zoom into this black box using additional deployment diagrams:\nUML offers deployment diagrams to express that view. Use it, probably with nested diagrams, when your infrastructure is more complex.\nWhen your (hardware) stakeholders prefer other kinds of diagrams rather than a deployment diagram, let them use any kind that is able to show nodes and channels of the infrastructure.\nFurther Information See Deployment View in the arc42 documentation.\nInfrastructure Level 1 Describe (usually in a combination of diagrams, tables, and text):\ndistribution of a system to multiple locations, environments, computers, processors, .., as well as physical connections between them\nimportant justifications or motivations for this deployment structure\nquality and/or performance features of this infrastructure\nmapping of software artifacts to elements of this infrastructure\nFor multiple environments or alternative deployments please copy and adapt this section of arc42 for all relevant environments.\n\u003cOverview Diagram\u003e\nMotivation \u003cexplanation in text form\u003e\nQuality and/or Performance Features \u003cexplanation in text form\u003e\nMapping of Building Blocks to Infrastructure \u003cdescription of the mapping\u003e\nInfrastructure Level 2 Here you can include the internal structure of (some) infrastructure elements from level 1.\nPlease copy the structure from level 1 for each selected element.\n\u003cInfrastructure Element 1\u003e \u003cdiagram + explanation\u003e\n\u003cInfrastructure Element 2\u003e \u003cdiagram + explanation\u003e\n…​ ==== \u003cInfrastructure Element n\u003e\n\u003cdiagram + explanation\u003e\n","categories":"","description":"","excerpt":" Deployment View Content The deployment view describes:\ntechnical infrastructure used to execute your system, with infrastructure elements like geographical locations, environments, computers, …","ref":"/docs/domains/architecture/07-deployment-view/","tags":"","title":""},{"body":" Cross-cutting Concepts Content This section describes overall, principal regulations and solution ideas that are relevant in multiple parts (= cross-cutting) of your system. Such concepts are often related to multiple building blocks. They can include many different topics, such as\nmodels, especially domain models\narchitecture or design patterns\nrules for using specific technology\nprincipal, often technical decisions of an overarching (= cross-cutting) nature\nimplementation rules\nMotivation Concepts form the basis for conceptual integrity (consistency, homogeneity) of the architecture. Thus, they are an important contribution to achieve inner qualities of your system.\nSome of these concepts cannot be assigned to individual building blocks, e.g. security or safety.\nForm The form can be varied:\nconcept papers with any kind of structure\ncross-cutting model excerpts or scenarios using notations of the architecture views\nsample implementations, especially for technical concepts\nreference to typical usage of standard frameworks (e.g. using Hibernate for object/relational mapping)\nStructure A potential (but not mandatory) structure for this section could be:\nDomain concepts\nUser Experience concepts (UX)\nSafety and security concepts\nArchitecture and design patterns\n\"Under-the-hood\"\ndevelopment concepts\noperational concepts\nNote: it might be difficult to assign individual concepts to one specific topic on this list.\nFurther Information See Concepts in the arc42 documentation.\n\u003cConcept 1\u003e \u003cexplanation\u003e\n\u003cConcept 2\u003e \u003cexplanation\u003e\n…​ === \u003cConcept n\u003e\n\u003cexplanation\u003e\n","categories":"","description":"","excerpt":" Cross-cutting Concepts Content This section describes overall, principal regulations and solution ideas that are relevant in multiple parts (= cross-cutting) of your system. Such concepts are often …","ref":"/docs/domains/architecture/08-crosscutting-concepts/","tags":"","title":""},{"body":" Architecture Decisions Overall Decisions System Guava Removal\nUnit Test Conventions\nUse Modern Java Constructs\nPublish Technical Documentation through Static Website\nPublish Maven Central Artifacts\nDependency Injection Guice\nPersistence with MicroStream\nUse log4j2 as Default Logger\nUse hsqldb as SQL store\nArchive Data\nVaadin as User Interface Approach\nERP UI Decisions Asciidoc for all Texts\nFSM Decisions Move Abstractions to JDK Classes\nPublish Maven Central Artifacts\n","categories":"","description":"","excerpt":" Architecture Decisions Overall Decisions System Guava Removal\nUnit Test Conventions\nUse Modern Java Constructs\nPublish Technical Documentation through Static Website\nPublish Maven Central Artifacts …","ref":"/docs/domains/architecture/09-architecture-decisions/","tags":"","title":""},{"body":" Quality Requirements Content This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals)\nHere you can also capture quality requirements with lesser priority, which will not create high risks when they are not fully achieved.\nMotivation Since quality requirements will have a lot of influence on architectural decisions you should know for every stakeholder what is really important to them, concrete and measurable.\nFurther Information See Quality Requirements in the arc42 documentation.\nQuality Tree Content The quality tree (as defined in ATAM – Architecture Tradeoff Analysis Method) with quality/evaluation scenarios as leafs.\nMotivation The tree structure with priorities provides an overview for a sometimes large number of quality requirements.\nForm The quality tree is a high-level overview of the quality goals and requirements:\ntree-like refinement of the term \"quality\". Use \"quality\" or \"usefulness\" as a root\na mind map with quality categories as main branches\nIn any case the tree should include links to the scenarios of the following section.\nQuality Scenarios Contents Concretization of (sometimes vague or implicit) quality requirements using (quality) scenarios.\nThese scenarios describe what should happen when a stimulus arrives at the system.\nFor architects, two kinds of scenarios are important:\nUsage scenarios (also called application scenarios or use case scenarios) describe the system’s runtime reaction to a certain stimulus. This also includes scenarios that describe the system’s efficiency or performance. Example: The system reacts to a user’s request within one second.\nChange scenarios describe a modification of the system or of its immediate environment. Example: Additional functionality is implemented or requirements for a quality attribute change.\nMotivation Scenarios make quality requirements concrete and allow to more easily measure or decide whether they are fulfilled.\nEspecially when you want to assess your architecture using methods like ATAM you need to describe your quality goals (from section 1.2) more precisely down to a level of scenarios that can be discussed and evaluated.\nForm Tabular or free form text.\n","categories":"","description":"","excerpt":" Quality Requirements Content This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals)\nHere …","ref":"/docs/domains/architecture/10-quality-requirements/","tags":"","title":""},{"body":" Risks and Technical Debts Contents A list of identified technical risks or technical debts, ordered by priority\nMotivation “Risk management is project management for grown-ups” (Tim Lister, Atlantic Systems Guild.)\nThis should be your motto for systematic detection and evaluation of risks and technical debts in the architecture, which will be needed by management stakeholders (e.g. project managers, product owners) as part of the overall risk analysis and measurement planning.\nForm List of risks and/or technical debts, probably including suggested measures to minimize, mitigate or avoid risks or reduce technical debts.\nFurther Information See Risks and Technical Debt in the arc42 documentation.\n","categories":"","description":"","excerpt":" Risks and Technical Debts Contents A list of identified technical risks or technical debts, ordered by priority\nMotivation “Risk management is project management for grown-ups” (Tim Lister, Atlantic …","ref":"/docs/domains/architecture/11-technical-risks/","tags":"","title":""},{"body":" User Manual Idea The tangly services ERP provides the functionalities to manage a service company offerings and legal documents.\nThe first customer ever using the application is tangly llc company. The company is an agile consulting and Java stack boutique organization.\nA service company has no inventory, production, or logistics departments.\nA service company has a strong focus on customers, products, projects and associcated efforts. Cash-flow is dictated by the timely invoicing of performed activities. The cash drain is mainly salaries and social costs.\nCommand Line Domain Access The goal is to provide a command line access to the various ERP domains. Specific and bulk operations shall be supported.\nCommand line applications do not access the persistent storage or database. They only access services or external artifacts. These applications can be used in parallel to the main ERP system without any interferences.\nInvoices Generate an invoice document for a JSON invoice and a template. Optionally the SwissQR code or the FacturX data are added to the human readable and printable invoice document.\nGenerate all invoices doucuments for a tree of directories containing JSON invoices and a set of templates. Optionally SwissQR code or FacturX data can be added.\nThe invoices need the product descriptions and the invoices. No database or other services are needed.\ncreate-invoices [-qrswiss] [-facturX] [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (1) create-invoices -i \u003cinvoice-id\u003e [-qrswiss] [-facturX](2) report-contract -c \u003ccontract-id\u003e [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (3) report-sellee -s \u003csellee-id\u003e [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (4) report-range -d \u003cinvoiceDate|dueDate|paidDate\u003e] [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (5) 1 create all invoice artifacts with the created date in the time range specified with from and to date. Open intervals are supported. The artifact can optionally contain a QrSwiss code and a facturX B2B data package. Existing files will be overwritten. 2 create the invoice artifact for the given invoice identifier. The artifact can optionally contain a QrSwiss code and a facturX B2B data package. Existing files will be overwritten. 3 create a report over all invoices related to a contract. 4 - 5 - ","categories":"","description":"","excerpt":" User Manual Idea The tangly services ERP provides the functionalities to manage a service company offerings and legal documents.\nThe first customer ever using the application is tangly llc company. …","ref":"/docs/domains/architecture/12-user-manual/","tags":"","title":""},{"body":" Glossary Term Definition Remarks ADR\nArchitecture Design Record\nDDD\nDomain-Driven Design\nDoD\nDefinition of Done\nFSM\nFinite State Machine\nSDL\nSpecification and Description Language\nUML\nUnified Modeling Language\n","categories":"","description":"","excerpt":" Glossary Term Definition Remarks ADR\nArchitecture Design Record\nDDD\nDomain-Driven Design\nDoD\nDefinition of Done\nFSM\nFinite State Machine\nSDL\nSpecification and Description Language\nUML\nUnified …","ref":"/docs/domains/architecture/13-glossary/","tags":"","title":""},{"body":" Introduction and Goals Application Goals The application is an application of modern software engineering principles.\nThe essential features are used to implement all acquisition, project management and financial process of an agile software consulting company.\nThe smoke test is to run the tangly processes on the ERP solution.\nRequirements Overview ID Type Description Remarks req-001\nimport\nAs a user, I want to import all company data as a set of TSV files so that I can migrate strategic data.\nNo dependencies to a database shall exit\nreq-002\nexport\nAs a user, I want to export all company data as a set of TSV files so that I can back up strategic data in a human-readable form.\nHuman-readable form is necessary for audit. The export format is also used as import format.\nQuality Goals Source Code Quality Goals Documentation Quality Goals The architecture documentation shall empower a developer to master the bounded domains and build extensions.\nID Type Explanation doc-001\nCorrect\nDocumentation needs to be accurate and free from errors. Wrong documentation is often worse than no documentation.\ndoc-002\nCurrent\nDocumentation needs to be correct over time, reflecting changes performed upon code, infrastructure or interfaces of the system.\ndoc-003\nUnderstandable\nDocumentation needs to be understood by the target audience.\ndoc-004\nRelevant\nWith respect to structure, form and content, documentation shall be relevant for the tasks of its audience.\ndoc-005\nReferenceable\nUse a consistent numbering schema for headings, diagrams and tables.\ndoc-006\nProper language\nUse proper language, correct spelling and grammar, active voice, positive statements and short sentences.\ndoc-007\nMaintainable\nMaintainability is key to keeping documentation current.\ndoc-008\nEasy to find\nDocumentation itself should be easy to find whenever needed. Its content should be easily navigable and searchable.\ndoc-009\nVersioned\nAs the system evolves, so will your documentation, without losing its history\ndoc-010\nTooling support\nFocus on content, reduce time needed for tool-setup\ndoc-011\nContinuously updated\nMake it a habit to maintain and expand the documentation with every relevant change in your system.\ndoc-012\nRelevant\nDocumentation should be written in a public domain format. Multiple public tools should support writing in the selected format.\ndoc-013\nRelevant\nDocumentation should be searchable to easily access topics.\nThe current approach is arc42 structure, C4 Model and UML diagrams to document the design. The content is written in Asciidoc format. The documentation is published as a static website using Hugo and Docsy.\nThe Java source code is documented with Javadoc. Source code in other programming languages is documented with Doxygen.\nStakeholders Role Relevance Expectations Open Source Developer\nImportant\nwants to extend the application with functions required for a specific market or user segment.\nCompany Prospect\nImportant\nlooking for a portfolio to show compentencies in areas he is interested to work with us.\nClosed Source Developer\nRelevant\nwants to extend the application with functions she could sell to her customers.\nBlog Reader\nRelevant\ninterested to explore a concept discussed in a blog article and exemplary realized in the application.\nApplication user\nRelevant\nwants to understand decisions and their impact on the product value or costs.\nBachelor Student\nInteresting\nwants to use components for semester projects and understand a specific aspect of the design.\nThe ERP is developed using an open source approach. Development capabilities are dependent on the goodwill and availability of active committers.\n","categories":"","description":"","excerpt":" Introduction and Goals Application Goals The application is an application of modern software engineering principles.\nThe essential features are used to implement all acquisition, project management …","ref":"/docs/domains/shared/_design/01-introduction-and-goals/","tags":"","title":""},{"body":" Architecture Constraints The programming language is Java. The version is the current released JDK.\nEmbedded programming language is C++. The version is the current released ISO standard.\nTh user interface for all Java applications is build with Vaadin. The version is the current released version available on Maven Central.\nThe documentation language is English US.\nExchange of data is over TSV files.\n","categories":"","description":"","excerpt":" Architecture Constraints The programming language is Java. The version is the current released JDK.\nEmbedded programming language is C++. The version is the current released ISO standard.\nTh user …","ref":"/docs/domains/shared/_design/02-architecture-constraints/","tags":"","title":""},{"body":" System Scope and Context Contents System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.\nIf necessary, differentiate the business context (domain specific inputs and outputs) from the technical context (channels, protocols, hardware).\nMotivation The domain interfaces and technical interfaces to communication partners are among your system’s most critical aspects. Make sure that you completely understand them.\nForm Various options:\nContext diagrams\nLists of communication partners and their interfaces.\nFurther Information See Context and Scope in the arc42 documentation.\nBusiness Context Contents Specification of all communication partners (users, IT-systems, …​) with explanations of domain specific inputs and outputs or interfaces. Optionally you can add domain specific formats or communication protocols.\nMotivation All stakeholders should understand which data are exchanged with the environment of the system.\nForm All kinds of diagrams that show the system as a black box and specify the domain interfaces to communication partners.\nAlternatively (or additionally) you can use a table. The title of the table is the name of your system, the three columns contain the name of the communication partner, the inputs, and the outputs.\n\u003cDiagram or Table\u003e\n\u003coptionally: Explanation of external domain interfaces\u003e\nTechnical Context Contents Technical interfaces (channels and transmission media) linking your system to its environment. In addition a mapping of domain specific input/output to the channels, i.e. an explanation which I/O uses which channel.\nMotivation Many stakeholders make architectural decision based on the technical interfaces between the system and its context. Especially infrastructure or hardware designers decide these technical interfaces.\nForm E.g. UML deployment diagram describing channels to neighboring systems, together with a mapping table showing the relationships between channels and input/output.\n\u003cDiagram or Table\u003e\n\u003coptionally: Explanation of technical interfaces\u003e\n\u003cMapping Input/Output to Channels\u003e\n","categories":"","description":"","excerpt":" System Scope and Context Contents System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the …","ref":"/docs/domains/shared/_design/03-system-scope-and-context/","tags":"","title":""},{"body":" Solution Strategy Technical Approach Software Development Modern Java is the preferred programming language for realization.\nEmbedded Software Development Modern C++ is the preferred programming language for embedded functionalities. The source code is object-oriented.\nA realtime operating system RTOS provides scheduling and concurrent processing.\nThe communication uses asynchronous message passing. Messages are immutable value objects.\nThread logic is realized as a finite state machine.\nDocumentation Approach Follow the recommendations of arc42 approach for document structure and content.\nGraphical modelization is done with C4 Model and UML.\nDocuments will be written in Asciidoc. Documentation language is English. Documentation is published as a static website.\nAPI will be documented with Doxygen. Doxygen is the de facto standard tool for generating documentation from annotated C++ sources. It also supports other popular programming languages such as C.\nImport and Export Format An entity aggregate can be imported from and exported to a tab separated file. This approach is the preferred one. The Gleam module provides a mechanism to describe the mappings between Java classes and TSV columns.\nEntities with complicated structure target a JSON format file.\n","categories":"","description":"","excerpt":" Solution Strategy Technical Approach Software Development Modern Java is the preferred programming language for realization.\nEmbedded Software Development Modern C++ is the preferred programming …","ref":"/docs/domains/shared/_design/04-solution-strategy/","tags":"","title":""},{"body":" Building Block View Content The building block view shows the static decomposition of the system into building blocks (modules, components, subsystems, classes, interfaces, packages, libraries, frameworks, layers, partitions, tiers, functions, macros, operations, data structures, …​) as well as their dependencies (relationships, associations, …​)\nThis view is mandatory for every architecture documentation. In analogy to a house this is the floor plan.\nMotivation Maintain an overview of your source code by making its structure understandable through abstraction.\nThis allows you to communicate with your stakeholder on an abstract level without disclosing implementation details.\nForm The building block view is a hierarchical collection of black boxes and white boxes (see figure below) and their descriptions.\nLevel 1 is the white box description of the overall system together with black box descriptions of all contained building blocks.\nLevel 2 zooms into some building blocks of level 1. Thus it contains the white box description of selected building blocks of level 1, together with black box descriptions of their internal building blocks.\nLevel 3 zooms into selected building blocks of level 2, and so on.\nFurther Information See Building Block View in the arc42 documentation.\nWhitebox Overall System Here you describe the decomposition of the overall system using the following white box template. It contains\nan overview diagram\na motivation for the decomposition\nblack box descriptions of the contained building blocks. For these we offer you alternatives:\nuse one table for a short and pragmatic overview of all contained building blocks and their interfaces\nuse a list of black box descriptions of the building blocks according to the black box template (see below). Depending on your choice of tool this list could be sub-chapters (in text files), sub-pages (in a Wiki) or nested elements (in a modeling tool).\n(optional:) important interfaces, that are not explained in the black box templates of a building block, but are very important for understanding the white box. Since there are so many ways to specify interfaces why do not provide a specific template for them. In the worst case you have to specify and describe syntax, semantics, protocols, error handling, restrictions, versions, qualities, necessary compatibilities and many things more. In the best case you will get away with examples or simple signatures.\n\u003cOverview Diagram\u003e\nMotivation \u003ctext explanation\u003e\nContained Building Blocks \u003cDescription of contained building block (black boxes)\u003e\nImportant Interfaces \u003cDescription of important interfaces\u003e\nInsert your explanations of black boxes from level 1:\nIf you use tabular form you will only describe your black boxes with name and responsibility according to the following schema:\nName Responsibility \u003cblack box 1\u003e\n\u003cText\u003e\n\u003cblack box 2\u003e\n\u003cText\u003e\nIf you use a list of black box descriptions then you fill in a separate black box template for every important building block . Its headline is the name of the black box.\n\u003cName black box 1\u003e Here you describe \u003cblack box 1\u003e according the the following black box template:\nPurpose/Responsibility\nInterface(s), when they are not extracted as separate paragraphs. This interfaces may include qualities and performance characteristics.\n(Optional) Quality-/Performance characteristics of the black box, e.g.availability, run time behavior, …​.\n(Optional) directory/file location\n(Optional) Fulfilled requirements (if you need traceability to requirements).\n(Optional) Open issues/problems/risks\n\u003cPurpose/Responsibility\u003e\n\u003cInterface(s)\u003e\n\u003c(Optional) Quality/Performance Characteristics\u003e\n\u003c(Optional) Directory/File Location\u003e\n\u003c(Optional) Fulfilled Requirements\u003e\n\u003c(optional) Open Issues/Problems/Risks\u003e\n\u003cName black box 2\u003e \u003cblack box template\u003e\n\u003cName black box n\u003e \u003cblack box template\u003e\n\u003cName interface 1\u003e …​ ==== \u003cName interface m\u003e\nLevel 2 Here you can specify the inner structure of (some) building blocks from level 1 as white boxes.\nYou have to decide which building blocks of your system are important enough to justify such a detailed description. Please prefer relevance over completeness. Specify important, surprising, risky, complex or volatile building blocks. Leave out normal, simple, boring or standardized parts of your system\nWhite Box \u003cbuilding block 1\u003e …​describes the internal structure of building block 1.\n\u003cwhite box template\u003e\nWhite Box \u003cbuilding block 2\u003e \u003cwhite box template\u003e\n…​ ==== White Box \u003cbuilding block m\u003e\n\u003cwhite box template\u003e\nLevel 3 Here you can specify the inner structure of (some) building blocks from level 2 as white boxes.\nWhen you need more detailed levels of your architecture please copy this part of arc42 for additional levels.\nWhite Box \u003c_building block x.1_\u003e Specifies the internal structure of building block x.1.\n\u003cwhite box template\u003e\nWhite Box \u003c_building block x.2_\u003e \u003cwhite box template\u003e\nWhite Box \u003c_building block y.1_\u003e \u003cwhite box template\u003e\n","categories":"","description":"","excerpt":" Building Block View Content The building block view shows the static decomposition of the system into building blocks (modules, components, subsystems, classes, interfaces, packages, libraries, …","ref":"/docs/domains/shared/_design/05-building-block-view/","tags":"","title":""},{"body":" Runtime View Contents The runtime view describes concrete behavior and interactions of the system’s building blocks in form of scenarios from the following areas:\nimportant use cases or features: how do building blocks execute them?\ninteractions at critical external interfaces: how do building blocks cooperate with users and neighboring systems?\noperation and administration: launch, start-up, stop\nerror and exception scenarios\nRemark: The main criterion for the choice of possible scenarios (sequences, workflows) is their architectural relevance. It is not important to describe a large number of scenarios. You should rather document a representative selection.\nMotivation You should understand how (instances of) building blocks of your system perform their job and communicate at runtime. You will mainly capture scenarios in your documentation to communicate your architecture to stakeholders that are less willing or able to read and understand the static models (building block view, deployment view).\nForm There are many notations for describing scenarios, e.g.\nnumbered list of steps (in natural language)\nactivity diagrams or flow charts\nsequence diagrams\nBPMN or EPCs (event process chains)\nstate machines\n…​\nFurther Information See Runtime View in the arc42 documentation.\n\u003cRuntime Scenario 1\u003e \u003cinsert runtime diagram or textual description of the scenario\u003e\n\u003cinsert description of the notable aspects of the interactions between the building block instances depicted in this diagram.\u003e\n\u003cRuntime Scenario 2\u003e …​ \u003cRuntime Scenario n\u003e ","categories":"","description":"","excerpt":" Runtime View Contents The runtime view describes concrete behavior and interactions of the system’s building blocks in form of scenarios from the following areas:\nimportant use cases or features: how …","ref":"/docs/domains/shared/_design/06-runtime-view/","tags":"","title":""},{"body":" Deployment View Content The deployment view describes:\ntechnical infrastructure used to execute your system, with infrastructure elements like geographical locations, environments, computers, processors, channels and net topologies as well as other infrastructure elements and\nmapping of (software) building blocks to that infrastructure elements.\nOften systems are executed in different environments, e.g. development environment, test environment, production environment. In such cases you should document all relevant environments.\nEspecially document a deployment view if your software is executed as distributed system with more than one computer, processor, server or container or when you design and construct your own hardware processors and chips.\nFrom a software perspective it is sufficient to capture only those elements of an infrastructure that are needed to show a deployment of your building blocks. Hardware architects can go beyond that and describe an infrastructure to any level of detail they need to capture.\nMotivation Software does not run without hardware. This underlying infrastructure can and will influence a system and/or some cross-cutting concepts. Therefore, there is a need to know the infrastructure.\nForm Maybe a highest level deployment diagram is already contained in section 3.2. as technical context with your own infrastructure as ONE black box. In this section one can zoom into this black box using additional deployment diagrams:\nUML offers deployment diagrams to express that view. Use it, probably with nested diagrams, when your infrastructure is more complex.\nWhen your (hardware) stakeholders prefer other kinds of diagrams rather than a deployment diagram, let them use any kind that is able to show nodes and channels of the infrastructure.\nFurther Information See Deployment View in the arc42 documentation.\nInfrastructure Level 1 Describe (usually in a combination of diagrams, tables, and text):\ndistribution of a system to multiple locations, environments, computers, processors, .., as well as physical connections between them\nimportant justifications or motivations for this deployment structure\nquality and/or performance features of this infrastructure\nmapping of software artifacts to elements of this infrastructure\nFor multiple environments or alternative deployments please copy and adapt this section of arc42 for all relevant environments.\n\u003cOverview Diagram\u003e\nMotivation \u003cexplanation in text form\u003e\nQuality and/or Performance Features \u003cexplanation in text form\u003e\nMapping of Building Blocks to Infrastructure \u003cdescription of the mapping\u003e\nInfrastructure Level 2 Here you can include the internal structure of (some) infrastructure elements from level 1.\nPlease copy the structure from level 1 for each selected element.\n\u003cInfrastructure Element 1\u003e \u003cdiagram + explanation\u003e\n\u003cInfrastructure Element 2\u003e \u003cdiagram + explanation\u003e\n…​ ==== \u003cInfrastructure Element n\u003e\n\u003cdiagram + explanation\u003e\n","categories":"","description":"","excerpt":" Deployment View Content The deployment view describes:\ntechnical infrastructure used to execute your system, with infrastructure elements like geographical locations, environments, computers, …","ref":"/docs/domains/shared/_design/07-deployment-view/","tags":"","title":""},{"body":" Cross-cutting Concepts Content This section describes overall, principal regulations and solution ideas that are relevant in multiple parts (= cross-cutting) of your system. Such concepts are often related to multiple building blocks. They can include many different topics, such as\nmodels, especially domain models\narchitecture or design patterns\nrules for using specific technology\nprincipal, often technical decisions of an overarching (= cross-cutting) nature\nimplementation rules\nMotivation Concepts form the basis for conceptual integrity (consistency, homogeneity) of the architecture. Thus, they are an important contribution to achieve inner qualities of your system.\nSome of these concepts cannot be assigned to individual building blocks, e.g. security or safety.\nForm The form can be varied:\nconcept papers with any kind of structure\ncross-cutting model excerpts or scenarios using notations of the architecture views\nsample implementations, especially for technical concepts\nreference to typical usage of standard frameworks (e.g. using Hibernate for object/relational mapping)\nStructure A potential (but not mandatory) structure for this section could be:\nDomain concepts\nUser Experience concepts (UX)\nSafety and security concepts\nArchitecture and design patterns\n\"Under-the-hood\"\ndevelopment concepts\noperational concepts\nNote: it might be difficult to assign individual concepts to one specific topic on this list.\nFurther Information See Concepts in the arc42 documentation.\n\u003cConcept 1\u003e \u003cexplanation\u003e\n\u003cConcept 2\u003e \u003cexplanation\u003e\n…​ === \u003cConcept n\u003e\n\u003cexplanation\u003e\n","categories":"","description":"","excerpt":" Cross-cutting Concepts Content This section describes overall, principal regulations and solution ideas that are relevant in multiple parts (= cross-cutting) of your system. Such concepts are often …","ref":"/docs/domains/shared/_design/08-crosscutting-concepts/","tags":"","title":""},{"body":" Architecture Decisions Overall Decisions System Guava Removal\nUnit Test Conventions\nUse Modern Java Constructs\nPublish Technical Documentation through Static Website\nPublish Maven Central Artifacts\nDependency Injection Guice\nPersistence with MicroStream\nUse log4j2 as Default Logger\nUse hsqldb as SQL store\nArchive Data\nVaadin as User Interface Approach\nERP UI Decisions Asciidoc for all Texts\nFSM Decisions Move Abstractions to JDK Classes\nPublish Maven Central Artifacts\n","categories":"","description":"","excerpt":" Architecture Decisions Overall Decisions System Guava Removal\nUnit Test Conventions\nUse Modern Java Constructs\nPublish Technical Documentation through Static Website\nPublish Maven Central Artifacts …","ref":"/docs/domains/shared/_design/09-architecture-decisions/","tags":"","title":""},{"body":" Quality Requirements Content This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals)\nHere you can also capture quality requirements with lesser priority, which will not create high risks when they are not fully achieved.\nMotivation Since quality requirements will have a lot of influence on architectural decisions you should know for every stakeholder what is really important to them, concrete and measurable.\nFurther Information See Quality Requirements in the arc42 documentation.\nQuality Tree Content The quality tree (as defined in ATAM – Architecture Tradeoff Analysis Method) with quality/evaluation scenarios as leafs.\nMotivation The tree structure with priorities provides an overview for a sometimes large number of quality requirements.\nForm The quality tree is a high-level overview of the quality goals and requirements:\ntree-like refinement of the term \"quality\". Use \"quality\" or \"usefulness\" as a root\na mind map with quality categories as main branches\nIn any case the tree should include links to the scenarios of the following section.\nQuality Scenarios Contents Concretization of (sometimes vague or implicit) quality requirements using (quality) scenarios.\nThese scenarios describe what should happen when a stimulus arrives at the system.\nFor architects, two kinds of scenarios are important:\nUsage scenarios (also called application scenarios or use case scenarios) describe the system’s runtime reaction to a certain stimulus. This also includes scenarios that describe the system’s efficiency or performance. Example: The system reacts to a user’s request within one second.\nChange scenarios describe a modification of the system or of its immediate environment. Example: Additional functionality is implemented or requirements for a quality attribute change.\nMotivation Scenarios make quality requirements concrete and allow to more easily measure or decide whether they are fulfilled.\nEspecially when you want to assess your architecture using methods like ATAM you need to describe your quality goals (from section 1.2) more precisely down to a level of scenarios that can be discussed and evaluated.\nForm Tabular or free form text.\n","categories":"","description":"","excerpt":" Quality Requirements Content This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals)\nHere …","ref":"/docs/domains/shared/_design/10-quality-requirements/","tags":"","title":""},{"body":" Risks and Technical Debts Contents A list of identified technical risks or technical debts, ordered by priority\nMotivation “Risk management is project management for grown-ups” (Tim Lister, Atlantic Systems Guild.)\nThis should be your motto for systematic detection and evaluation of risks and technical debts in the architecture, which will be needed by management stakeholders (e.g. project managers, product owners) as part of the overall risk analysis and measurement planning.\nForm List of risks and/or technical debts, probably including suggested measures to minimize, mitigate or avoid risks or reduce technical debts.\nFurther Information See Risks and Technical Debt in the arc42 documentation.\n","categories":"","description":"","excerpt":" Risks and Technical Debts Contents A list of identified technical risks or technical debts, ordered by priority\nMotivation “Risk management is project management for grown-ups” (Tim Lister, Atlantic …","ref":"/docs/domains/shared/_design/11-technical-risks/","tags":"","title":""},{"body":" User Manual Idea The tangly services ERP provides the functionalities to manage a service company offerings and legal documents.\nThe first customer ever using the application is tangly llc company. The company is an agile consulting and Java stack boutique organization.\nA service company has no inventory, production, or logistics departments.\nA service company has a strong focus on customers, products, projects and associcated efforts. Cash-flow is dictated by the timely invoicing of performed activities. The cash drain is mainly salaries and social costs.\nCommand Line Domain Access The goal is to provide a command line access to the various ERP domains. Specific and bulk operations shall be supported.\nCommand line applications do not access the persistent storage or database. They only access services or external artifacts. These applications can be used in parallel to the main ERP system without any interferences.\nInvoices Generate an invoice document for a JSON invoice and a template. Optionally the SwissQR code or the FacturX data are added to the human readable and printable invoice document.\nGenerate all invoices doucuments for a tree of directories containing JSON invoices and a set of templates. Optionally SwissQR code or FacturX data can be added.\nThe invoices need the product descriptions and the invoices. No database or other services are needed.\ncreate-invoices [-qrswiss] [-facturX] [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (1) create-invoices -i \u003cinvoice-id\u003e [-qrswiss] [-facturX](2) report-contract -c \u003ccontract-id\u003e [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (3) report-sellee -s \u003csellee-id\u003e [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (4) report-range -d \u003cinvoiceDate|dueDate|paidDate\u003e] [-from \u003ciso-date\u003e] [-to \u003ciso-date\u003e] (5) 1 create all invoice artifacts with the created date in the time range specified with from and to date. Open intervals are supported. The artifact can optionally contain a QrSwiss code and a facturX B2B data package. Existing files will be overwritten. 2 create the invoice artifact for the given invoice identifier. The artifact can optionally contain a QrSwiss code and a facturX B2B data package. Existing files will be overwritten. 3 create a report over all invoices related to a contract. 4 - 5 - ","categories":"","description":"","excerpt":" User Manual Idea The tangly services ERP provides the functionalities to manage a service company offerings and legal documents.\nThe first customer ever using the application is tangly llc company. …","ref":"/docs/domains/shared/_design/12-user-manual/","tags":"","title":""},{"body":" Glossary Term Definition Remarks ADR\nArchitecture Design Record\nDDD\nDomain-Driven Design\nDoD\nDefinition of Done\nFSM\nFinite State Machine\nSDL\nSpecification and Description Language\nUML\nUnified Modeling Language\n","categories":"","description":"","excerpt":" Glossary Term Definition Remarks ADR\nArchitecture Design Record\nDDD\nDomain-Driven Design\nDoD\nDefinition of Done\nFSM\nFinite State Machine\nSDL\nSpecification and Description Language\nUML\nUnified …","ref":"/docs/domains/shared/_design/13-glossary/","tags":"","title":""},{"body":" fsm-bbv States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nOff\nRoot\nfalse\ntrue\nfalse\nEntry action of Off state\nExitOffstate\nMaintenance\nRoot\nfalse\nfalse\nfalse\nOn\nRoot\nfalse\nfalse\ntrue\nFM\nOn\nfalse\nfalse\ntrue\nentryFM\nexitFM\nDAB\nOn\nfalse\ntrue\nfalse\nPlay\nFM\nfalse\ntrue\nfalse\nentryPlay\nexitPlay\nAutoTune\nFM\nfalse\nfalse\nfalse\nfsm-bbv Transitions Start State End State Description Local Guard Action Off\nMaintenance\nOff → TogglePower\nfalse\nMaintenance is On\nlog transition Off to Maintenance\nOff\nOn\nOff → On\nfalse\nMaintenance Off\nOfftoOn\nMaintenance\nOff\nMaintenance → Off\nfalse\nMaintainedtoOff\nOn\nOff\nTogglePower → On\nfalse\nOntoOff\nFM\nDAB\nFM → DAB\nfalse\nFMtoDAB\nDAB\nDAB\nDAB → DAB\ntrue\nDAB\nFM\nDAB → FM\nfalse\nDABtoFM\nPlay\nPlay\nPlay → Play\ntrue\nPlay\nAutoTune\nPlay → AutoTune\nfalse\nPlaytoAutoTune\nAutoTune\nPlay\nAutoTune → Play\nfalse\nAutoTunetoPlay\n","categories":"","description":"","excerpt":" fsm-bbv States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nOff\nRoot\nfalse\ntrue\nfalse\nEntry action of Off state\nExitOffstate\nMaintenance\nRoot …","ref":"/docs/fsm/examples/fsm-bbv/","tags":"","title":""},{"body":" fsm-test States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nA\nRoot\nState A\nfalse\ntrue\ntrue\n-\n-\nAA\nA\nState AA\nfalse\ntrue\nfalse\n-\n-\nAB\nA\nState AB\nfalse\nfalse\nfalse\n-\n-\nB\nRoot\nfalse\nfalse\ntrue\n-\n-\nBA\nB\nState BA\nfalse\nfalse\nfalse\n-\n-\nBB\nB\nState BB\nfalse\ntrue\nfalse\n-\n-\nC\nRoot\ntrue\nfalse\nfalse\n-\n-\nfsm-test Transitions Start State End State Description Local Guard Action A\nC\nA → C when A_C\nfalse\nAA\nAA\nLocal transition AA → AA when (AA_AA)\ntrue\nAA\nAB\nAA → AB when AA_AB\nfalse\nAA\nB\nAA → B when AA_B\nfalse\nAA\nBB\nAA → BB when (AA_BB)\nfalse\nAB\nAA\nAB → AA when AB_AA\nfalse\nAB\nAB\nAB → AB when AB_AB\nfalse\nB\nC\nB → C when B_C\nfalse\nBA\nA\nBA → A when BA_C\nfalse\nBA\nBB\nBA → BB when BA_BB\nfalse\nBB\nBB\nLocal transition BB → BB when BB_BB\ntrue\nBB\nBA\nfalse\nVV → BA when BB_BA\nBB\nC\nBB → C when BB_C\nfalse\n","categories":"","description":"","excerpt":" fsm-test States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nA\nRoot\nState A\nfalse\ntrue\ntrue\n-\n-\nAA\nA\nState AA\nfalse\ntrue\nfalse\n-\n-\nAB\nA\nState AB …","ref":"/docs/fsm/examples/fsm-test/","tags":"","title":""},{"body":" fsm-washer States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nRunning\nRoot\nRunning State\nfalse\ntrue\ntrue\n-\n-\nEnd\nRoot\nState End\ntrue\nfalse\nfalse\n-\n-\nWashing\nRunning\nWashing State\nfalse\ntrue\nfalse\n-\n-\nRinsing\nRunning\nRising State\nfalse\nfalse\nfalse\n-\n-\nDrying\nRunning\nDrying State\ntrue\nfalse\nfalse\n-\n-\nPowerOff\nRoot\nPowerOff State\nfalse\nfalse\nfalse\n-\n-\nfsm-washer Transitions Start State End State Description Local Guard Action Running\nEnd\nRunning → End\nfalse\nRunning\nPowerOff\nRunning → PowerOff\nfalse\nWashing\nRinsing\nWashing → Rinsing\nfalse\nRinsing\nDrying\nRinsing → Drying\nfalse\nPowerOff\nRunning\nPowerOff → Running\nfalse\n","categories":"","description":"","excerpt":" fsm-washer States Name Context Description Final Initial Composite Entry Action Exit Action Root\n-\ntrue\ntrue\ntrue\n-\n-\nRunning\nRoot\nRunning State\nfalse\ntrue\ntrue\n-\n-\nEnd\nRoot\nState End\ntrue\nfalse …","ref":"/docs/fsm/examples/fsm-washer/","tags":"","title":""},{"body":" About tangly llc Open Source Components tangly llc Documentation Site\ntangly llc is a small company specialized in software craftsmanship, technical excellence, agile transformation, Scrum , LeSS and lean.\nOur technology stack is Modern Java.\nAs a strong supporter of the open source approach, we published our open source components.\nOur Values Do the Right Thing Respect and tolerance Solidarity and social responsibility Curiosity, creativity and passion Transparency and integrity Champion Product Excellence Do not focus on the products you are building, focus on the problems your customers are encountering Achievement, accountability and success Run a Sustainable Business Great companies are not in business to make money, they make money to stay in business and accomplish an important purpose Technical Information The static website is generated using Hugo and Asciidoctor. We use the Hugo docsy theme.\nWe write all technical documents and blogs using the asciidoc syntax.\nThe website repository is hosted on tangly documentation repository hosted on GitHub.\n","categories":"","description":"","excerpt":" About tangly llc Open Source Components tangly llc Documentation Site\ntangly llc is a small company specialized in software craftsmanship, technical excellence, agile transformation, Scrum , LeSS and …","ref":"/about/","tags":"","title":"About tangly OS Components"},{"body":" Release Process Find the description of the release and publication process under ideas.\nThe architecture and design documentation for the whole project are also located under architecture.\nCommercial Support tangly llc provides commercial support for all components. Please contact the company for support agreements and training workshops.\nWhat you pay contributes to the maintenance and future development of tangly open source components. All contributions will be licensed under Apache 2.0.\n","categories":"","description":"","excerpt":" Release Process Find the description of the release and publication process under ideas.\nThe architecture and design documentation for the whole project are also located under architecture. …","ref":"/community/","tags":"","title":"Community"},{"body":"","categories":"","description":"","excerpt":"","ref":"/false/","tags":"","title":"False"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tango/","tags":"","title":"Tango"},{"body":"","categories":"","description":"","excerpt":"","ref":"/true/","tags":"","title":"True"}]