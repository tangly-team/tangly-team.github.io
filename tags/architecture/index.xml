<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on tangly Components</title>
    <link>https://blog.tangly.net/tags/architecture/</link>
    <description>Recent content in Architecture on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Domain-Driven Design with ROS-2</title>
      <link>https://blog.tangly.net/blog/2024/domain-driven-design-with-ros-2/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/domain-driven-design-with-ros-2/</guid>
      <description>At its core, Robot Operation System provides a message-passing system, often called middleware.&#xA;Communication is one of the first needs to arise when implementing a new robot application, or really any software system that will interact with hardware. ROSâ€™s built-in and well-tested messaging system saves you time by managing the details of communication between distributed nodes via an anonymous Publish and Subscribe Pattern.&#xA;This approach encourages good practices in your software development, including fault isolation, Seperation of Concerns, and clear interfaces.</description>
    </item>
    <item>
      <title>Agile Architecture Questions</title>
      <link>https://blog.tangly.net/blog/2024/agile-architecture-questions/</link>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/agile-architecture-questions/</guid>
      <description>Agile architecture means how enterprise architects, system architects and software architects apply architectural practice in agile software development.&#xA;An agile architect should handle a regular set of questions for each application he is working on.&#xA;Each digital product encounters similar requirements and shall provide good solutions for the most acute restrictions.&#xA;The goal is to define an evolvable minimal architecture. New functional and non-functional requirements shall be realized with minimal changes in the design.</description>
    </item>
    <item>
      <title>Document Your Agile Architecture</title>
      <link>https://blog.tangly.net/blog/2024/document-your-agile-architecture/</link>
      <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/document-your-agile-architecture/</guid>
      <description>The overwhelming success of agile approaches to create digital products has implications on our work techniques.&#xA;Design emerges. The team learns incrementally and refines the solution [1].&#xA;Agile architecture is a collaborative and iterative process.&#xA;Agile methods do not require comprehensive documentation at the beginning. Managers do not need to plan months in advance because things can change as the project evolves.&#xA;The idea is to produce documentation with information that is essential to move forward when it makes the most sense.</description>
    </item>
    <item>
      <title>Actors with CMSIS OS in Cpp</title>
      <link>https://blog.tangly.net/blog/2024/actors-with-cmsis-os-in-cpp/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/actors-with-cmsis-os-in-cpp/</guid>
      <description>The actor library defines the actor abstraction with mailboxes and concrete implementation for various target platforms.&#xA;The CMSIS-RTOS v2 platform provides an actor implementation for all realtime kernels supporting the CMSIS API. The API is under the stewardship of ARM company.&#xA;Any kernel with a CMSIS-RTOS v2 compatible layer is eligible.&#xA;STM provides the CMSIS integration with freeRTOS for all STM32 microcontrollers.&#xA;Library The library defines key abstractions as abstract classes [1] [2].</description>
    </item>
    <item>
      <title>Actors in Cpp</title>
      <link>https://blog.tangly.net/blog/2024/actors-in-cpp/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/actors-in-cpp/</guid>
      <description>There is a strong need for higher-level frameworks ensuring safe concurrent programming.&#xA;The Actor Model is one of the best approaches to safe concurrency and legible code [1]. The model is based on Message Passing.&#xA;Although multiple actors can run at the same time, an actor will process a given message sequentially. This means that if you send three messages to the same actor, it will just execute one at a time.</description>
    </item>
    <item>
      <title>Actor Model</title>
      <link>https://blog.tangly.net/blog/2024/actor-model/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/actor-model/</guid>
      <description>Concurrent programming has always been tricky. Accessing a shared state from multiple threads is a central problem, where hard-to-catch errors may easily appear.&#xA;Protected access to identified shared variables is easy to realize. Mechanisms to avoid deadlocks or starvation are cumbersome to implement and almost impossible to validate.&#xA;The need for concurrent programming has increased tremendously with the fact that all modern processors and many microcontrollers have multiple cores.</description>
    </item>
    <item>
      <title>How to Document Your Software Architecture</title>
      <link>https://blog.tangly.net/blog/2024/how-to-document-your-software-architecture/</link>
      <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/how-to-document-your-software-architecture/</guid>
      <description>You are creating the next digital software masterpiece.&#xA;How can you document your software architecture in a way that is useful for your team and stakeholders?&#xA;A software architecture document SAD is a document that describes the structure of a software solution.&#xA;It includes the architecture of its components, the relationships between those components, and the principles that guide its design.&#xA;The solution architecture document is typically used as a reference for designing, building, and maintaining a software system.</description>
    </item>
    <item>
      <title>Nice Statechart Diagrams</title>
      <link>https://blog.tangly.net/blog/2024/nice-statechart-diagrams/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/nice-statechart-diagrams/</guid>
      <description>What are statecharts, also called hierarchical state machines?&#xA;Put simply, a statechart is a beefed-up state machine [1] [2]. The syntax is formally defined in the UML standard.&#xA;The beefing up solves a lot of the problems that state machines have, especially state explosion that happens as state machines grow.&#xA;We explain below what statecharts are and how they are useful.&#xA;Statecharts offer a surprising array of benefits:&#xA;It is easier to understand a statechart than many other forms of code.</description>
    </item>
    <item>
      <title>Bus Sensors and Actuators</title>
      <link>https://blog.tangly.net/blog/2023/bus-sensors-and-actuators/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/bus-sensors-and-actuators/</guid>
      <description>Your embedded system has a set of sensors and actors.&#xA;Some sensors and actors are connected to a bus. Typical buses are CAN bus, Serial Peripherical Interface, Ethernet, Bluetooth, or I2C standards.&#xA;The bus is a shared medium used to communicate with a set of external active or passive components.&#xA;Which design rules shall you follow when designing sensors and actors using a bus architecture?&#xA;Do you need to consider threading design?</description>
    </item>
    <item>
      <title>Sensors and Actuators</title>
      <link>https://blog.tangly.net/blog/2023/sensors-and-actuators/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/sensors-and-actuators/</guid>
      <description>Embedded design maps domain abstractions to the underlying hardware.&#xA;A temperature sensor is a domain abstraction of a physical hardware temperature sensor.&#xA;A valve is a domain abstraction of a physical hardware valve. A physical valve can be a simple opened-closed device, or a proportional device.&#xA;The microcontroller board reads the temperature sensor through an I2C or SPI bus. It controls the valve through a GPIO, a PWM or a CAN bus controller.</description>
    </item>
    <item>
      <title>Command Interpreter</title>
      <link>https://blog.tangly.net/blog/2023/command-interpreter/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/command-interpreter/</guid>
      <description>Most digital products have a command interpreter.&#xA;External systems send requests to the system and often await an answer. A command interpreter can model this behavior.&#xA;The channels used to transmit requests and return answers are variable. Messages can be transmitted other various buses and protocols.&#xA;An operator can send a command over a CAN bus, Serial Peripherical Interface, Ethernet or Bluetooth connection.&#xA;A regular command line interpreter inputs commands as a string containing a request and associated parameters.</description>
    </item>
    <item>
      <title>Pragmatic Java Application Design</title>
      <link>https://blog.tangly.net/blog/2023/pragmatic-java-application-design/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/pragmatic-java-application-design/</guid>
      <description>I attended the 20th edition of the Devoxx Belgium conference in Antwerp.&#xA;I heard about beautiful examples of how to design complex software applications written in Java.&#xA;The solutions scale to hundreds of thousands of users, are resilient to network disruption and use fancy libraries and tools.&#xA;The applications are deployed on cloud infrastructure and are available worldwide.&#xA;After the conference, I went to Ibiza for a family holiday. Our family enjoys prolonging the summer on this beautiful balearic island.</description>
    </item>
    <item>
      <title>C4 and UML with PlantUML</title>
      <link>https://blog.tangly.net/blog/2023/c4-and-uml-with-plantuml/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/c4-and-uml-with-plantuml/</guid>
      <description>You are creating an awesome digital product. The software part shall work flawlessly over the years.&#xA;Technology changes will be added to the product. Legal changes and security improvements are implemented in a timely manner over the years.&#xA;This application will evolve to satisfy new needs and customer segments. The life span of your product is probably more than a decade.&#xA;How can you document critical cross-cutting design decisions and key mechanisms?</description>
    </item>
    <item>
      <title>Software Architecture Themes and Questions</title>
      <link>https://blog.tangly.net/blog/2023/software-architecture-themes-and-questions/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/software-architecture-themes-and-questions/</guid>
      <description>A software architect works with a development team to define how features shall be realized. The selected approach should support corporate governance and legal constraints.&#xA;A new digital product must fulfill a set of technical aspects to be usable. Technical constraints are the non-functional requirements of the product [1].&#xA;Some of these technical requirements are encountered again and again when developing digital products.&#xA;Any software product must provide solutions to standard problems.</description>
    </item>
    <item>
      <title>Software Developer Assumptions</title>
      <link>https://blog.tangly.net/blog/2023/software-developer-assumptions/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/software-developer-assumptions/</guid>
      <description>Here are some software development topics I have learnt to like after 40 years in the industry.&#xA;I worked at quite a few industrial and commercial digital product development initiatives. I truly enjoyed creating successful solutions.&#xA;Over the years, I encountered similar architecture and design patterns when creating source code for these applications.&#xA;I started programming with languages such as Ada, Portal, and C. I embraced object-oriented languages with first C++ and later Java.</description>
    </item>
    <item>
      <title>Behavior Driven Design</title>
      <link>https://blog.tangly.net/blog/2022/behavior-driven-design/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/behavior-driven-design/</guid>
      <description>Domain-Driven Design DDD has been around since Eric Evans published his book about the subject in 2003 [1].&#xA;Vernon Vaugh published powerful approaches how to implement DDD concepts into a software solution [2, 3].&#xA;How do you validate and test your DDD digital solutions?&#xA;Behavior Driven Development BDD is an inversion how systems are often developed. In some ways, it is an extension of Test Driven Development TDD approach to the whole application.</description>
    </item>
    <item>
      <title>Modern Java Constructs</title>
      <link>https://blog.tangly.net/blog/2022/modern-java-constructs/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/modern-java-constructs/</guid>
      <description>Modern Java is quite a departure from the traditional Java available at the beginning of the millennium.&#xA;The most visible change is certainly lambda expressions and stream, enabling a more functional programming approach in Java.&#xA;Functional programming is a paradigm that supports developers to think in terms of functions instead of classes. Functions are stateless and without side effects. Avoiding state can lead to better software, especially in high-performance, concurrent applications [1].</description>
    </item>
    <item>
      <title>Vaadin</title>
      <link>https://blog.tangly.net/blog/2022/vaadin/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/vaadin/</guid>
      <description>Vaadin is an ideal solution if you are a Java developer and wants to provide a user interface for your product. Vaadin is a framework to create graphical user interfaces using plain Java, or any JVM-based language for that matter.&#xA;You develop in Java, and the framework takes care of all the rest. It generates the client-side code, and the communication between the client-side code in the browser and the backend code on the server.</description>
    </item>
    <item>
      <title>ArchUnit</title>
      <link>https://blog.tangly.net/blog/2022/archunit/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/archunit/</guid>
      <description>How often have you experienced a well-defined and understood software architecture on paper? And it falls apart when developers start implementing it?&#xA;While re-architecting recently legacy components in an application, I experienced the same.&#xA;As more and more developers joined the team, it became a constant routine to make them aware of the design and how to adhere to it.&#xA;I know some of you may say, Why not control the implementation during code-review sessions?</description>
    </item>
    <item>
      <title>Modular Monoliths are the new Graal</title>
      <link>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</guid>
      <description>A modular monolith is a software design approach in which a monolith is designed with an emphasis on interchangeable and potentially reusable modules.&#xA;A modular monolith can be split in the future into a set of microservices.&#xA;Delay the split as long as you can. Microservices have a steep price tag during operations.&#xA;A modular monolith provides:&#xA;Independent and parallel development approach.&#xA;Diminish coupling and improve cohesion. The interfaces are better documented and thinner.</description>
    </item>
    <item>
      <title>Software Structure with DDD</title>
      <link>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</guid>
      <description>Domain Driven Development DDD is the preferred software architecture approach for designing digital products. The method nicely matches with the operational concepts of microservices.&#xA;Domain-driven design is a holistic approach to understanding, designing and building software applications.&#xA;Seminal books [1, 2, 3] describes the approach and key concepts defining the development method.&#xA;Concrete recipes and examples of code structure are still sparse.&#xA;How should you structure your namespaces and modules?</description>
    </item>
    <item>
      <title>Measurements and Units</title>
      <link>https://blog.tangly.net/blog/2022/measurements-and-units/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/measurements-and-units/</guid>
      <description>JSR-385 could have saved Mars Climate Orbiter[2] in year 1999.&#xA;Accidents in computer applications happen again and again due to calculation errors.&#xA;The International System of Units SI, commonly known as the metric system, is the international standard for measurement.&#xA;The International Treaty of the Mete was signed in Paris on May 20, 1875, by seventeen countries, including the United States.&#xA;In May 2019, the system of units was updated.</description>
    </item>
    <item>
      <title>Choice is Good</title>
      <link>https://blog.tangly.net/blog/2021/choice-is-good/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/choice-is-good/</guid>
      <description>First and foremost, our primary goal is to develop successful products and delight users. We are always looking for good practices to improve our odds.&#xA;Product development is a risky business.&#xA;We want to expand our toolbox with proven approaches. We use these tools to experiment when confronted with new problems. There is No Silver Bullet to solve our specific challenges.&#xA;Using a goal-driven approach that guides people through process-related options is one powerful approach.</description>
    </item>
    <item>
      <title>Agile Design Modeling</title>
      <link>https://blog.tangly.net/blog/2021/agile-design-modeling/</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/agile-design-modeling/</guid>
      <description>Unknown reference: implementing-domain-driven-desing The line between software development and software architecture is a tricky one.&#xA;Some people will tell you that it does not exist and that architecture is simply an extension of the design process undertaken by developers. Others will make out it is a massive gaping chasm that can only be crossed by lofty developers. They believe you must always abstract your abstractions and not get bogged down by those pesky implementation details.</description>
    </item>
    <item>
      <title>What I Learnt Teaching Agile Software Architecture</title>
      <link>https://blog.tangly.net/blog/2021/what-i-learnt-teaching-agile-software-architecture/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/what-i-learnt-teaching-agile-software-architecture/</guid>
      <description>I am teaching agile software architecture and techniques SWAT as advanced bachelor level lecture weighted with 3 ECTS.&#xA;I gave this training the last three years at Lucerne University of Applied Sciences and Arts HSLU in Switzerland.&#xA;All materials are released under the Creative Commons copyright.&#xA;The course contents are aligned with the big software architecture programs.&#xA;The Open Group organization is the steward of TOGAF standard. TOGAF is the worldwide industrial standard for enterprise software architecture.</description>
    </item>
    <item>
      <title>Why Enterprise Architecture?</title>
      <link>https://blog.tangly.net/blog/2021/why-enterprise-architecture/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/why-enterprise-architecture/</guid>
      <description>Architecture principles hold true in agile environments. The major difference between older traditional approaches and modern agile ones is the way of performing enterprise architecture.&#xA;The last years have shown a promising evolution of plan-based, centralist enterprise architecture approaches to more agile, decentralized, meritocracy driven processes.&#xA;These new approaches are way more compatible with modern and agile software product development framework such as Scrum, eXtreme Programming, and LeSS&#xA;Traditional processes use dedicated persons or departments to define architecture principles in a top-down approach.</description>
    </item>
    <item>
      <title>Agile Software Architecture is Mainstream</title>
      <link>https://blog.tangly.net/blog/2021/agile-software-architecture-is-mainstream/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/agile-software-architecture-is-mainstream/</guid>
      <description>Slowly, slowly major actors in the software architecture landscape acknowledge agile development is state of the industry approach to building software products.&#xA;They are still struggling to integrate their older views in a faster, iterative, incremental development approach. The duration of a regular Scrum sprint is usually two weeks.&#xA;More important, they have discovered we build products because no customers buy projects. They buy solutions and products.&#xA;I am relieved I need less fight to convince enterprise architects that agile is the way.</description>
    </item>
    <item>
      <title>Agile Architecture within Scrum</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-within-scrum/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-within-scrum/</guid>
      <description>You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks.&#xA;Agile architecture is a key element to improve the quality of your solution and reduce the overall cycle-time of your product delivery.&#xA;Your journey toward greater business agility starts by identifying what outcomes are most important to your companyâ€™s success.&#xA;Outcomes are codified in functional and non-functional requirements your product shall fulfill.</description>
    </item>
    <item>
      <title>Agile Architecture Principles</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-principles/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-principles/</guid>
      <description>You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks. The product market introduction is a success. You will successfully sell the solution for the next ten years.&#xA;How shall you define the software architecture of your product and ensure a long living and high-quality solution?&#xA;The experts tell you the design is emergent.</description>
    </item>
    <item>
      <title>Architectural Decision Records ADR</title>
      <link>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</guid>
      <description>Architecture Decision Record ADR is compact and traceable documents of all important decisions taken during the realization of a product. Use Asciidoc or Markdown and Git to have agile and lean documentation of your major decisions.&#xA;The huge advantage of Architecture Design Record ADR is the timeline of the decisions. It tremendously helps to understand the technical changes during the product lifecycle.&#xA;Please try architecture design records to document your key decisions when developing your software product.</description>
    </item>
  </channel>
</rss>
