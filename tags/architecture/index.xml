<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tangly Components – architecture</title>
    <link>https://blog.tangly.net/tags/architecture/</link>
    <description>Recent content in architecture on tangly Components</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 12 Oct 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://blog.tangly.net/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: Modern Java Constructs</title>
      <link>https://blog.tangly.net/blog/2022/modern-java-constructs/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/modern-java-constructs/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_modern_java_constructs&#34;&gt;Modern Java Constructs&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-10-02-head.jpg&#34; alt=&#34;2022 10 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Modern Java&lt;/strong&gt; is quite a departure from the traditional Java available at the beginning of the millennium.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most visible change is certainly lambda expressions and stream, enabling a more functional programming approach in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Functional programming is a paradigm that supports developers to think in terms of functions instead of classes.
Functions are stateless and without side effects.
Avoiding state can lead to better software, especially in high-performance, concurrent applications
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
Functional programming is also a natural fit for multicore parallel programming.
The paradigm is the best way to squeeze more performance out of modern CPUs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java Streams library allows algorithms to be coded declaratively meaning the developer specifies what they want, not how they want it.
This improves code quality because all the plumbing code is handled by the library itself.
The fluent interface style is just a way to express streams algorithm in one continuous line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional modern constructs reduce boiler code and often eliminate known potential errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here a set of extensions we use daily in our code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find additional examples in the introductory book &lt;em&gt;Java by Comparison&lt;/em&gt; [&lt;a href=&#34;#java-by-comparison&#34;&gt;1&lt;/a&gt;] and the more advanced &lt;em&gt;Effective Java&lt;/em&gt; [&lt;a href=&#34;#effective-java-3rd&#34;&gt;2&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_try_with_closeable_resources&#34;&gt;Try with Closeable Resources&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Automatic resource management was introduced in Java 7 in 2011.
Better handling of final variables was added in Java 9 in 2017.
Local variable type inference with the &lt;em&gt;var&lt;/em&gt; keyword was added to Java 10 in March 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;em&gt;AutoCloseable&lt;/em&gt; interface is the API extension you should use to declare any resource type in your solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A nice feature of the solution is the support of suppressed exception hierarchy to access all exceptions potentially thrown during the closing operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Writer&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Files&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;newBufferedWriter&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;StandardCharsets&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;   &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;features&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;                                                                               &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declares an auto-closeable resource in the block context.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The auto-closeable resource is closed by Java runtime when leaving the block either through regular flow or when an exception is thrown.
The programmer can never forget to close the resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_streams&#34;&gt;Streams&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall always use streams to manipulate data collections.
Stream operators support similar functionality as SQL dialects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;firstname&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;card&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getProperties&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Property&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;Id&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;FN&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;Property:&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;])&lt;/span&gt;
            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;findAny&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;orElse&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sequences of values are also streams.
Simply use the &lt;em&gt;Stream.iterate(…​)&lt;/em&gt; method.
Therefore, a &lt;em&gt;for&lt;/em&gt; loop is easily transformed into a stream of operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most imperative operations, such as conditional and loop statements, can be rewritten as stream operators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Streams are often more legible and compact.
The approach moves the developers from imperative programming to a more functional programming style.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java code has seldom loops and conditional statements.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_functional_programming&#34;&gt;Functional Programming&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Null values are acknowledged as a language design fault in modern software engineering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should never return a null value from any method.
Either you give back an empty collection or an optional object for single values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Optional&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Organization&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;findOrganizationById&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;identifier&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;                            &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;identifier&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;?&lt;/span&gt;
                &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;realm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;organizations&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;identifier&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Optional&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;empty&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Split&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;splites&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;splits&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;splits&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;copyOf&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;splits&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Collections&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;     &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns an optional with a value if found or an empty optional.
The optional can be processed as a stream instead of using a conditional statement.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;returns either a list of items or an empty list.
The result can be processed as a stream instead of using a conditional statement.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Streams provide the &lt;em&gt;flatmap&lt;/em&gt; operator to elegantly handle optional values in collection processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Remember that &lt;em&gt;Optional&amp;lt;T&amp;gt;&lt;/em&gt; is almost an implementation of a monad.
Time to study the concepts of functional programming and lambda calculus [&lt;a href=&#34;#functional-programming-java&#34;&gt;3&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are really starting to program using functional programming idioms if you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pass lambda expressions or single abstract method &lt;em&gt;SAM&lt;/em&gt; instances as parameters of some methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;return lambda expressions or single abstract method &lt;em&gt;SAM&lt;/em&gt; instances in some methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just scan your code and find out how often you write such constructs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Explore the &lt;em&gt;java.util.function&lt;/em&gt; package to increase your functional programming skills.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_pattern_matching&#34;&gt;Pattern Matching&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pattern matching is another approach for functional programming.
New versions of Java support more related constructs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The extension of the &lt;em&gt;switch&lt;/em&gt; statement into a powerful &lt;em&gt;switch&lt;/em&gt; &lt;strong&gt;expression&lt;/strong&gt; was a game changer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pattern matching supports:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select a transformation based on the variable type using the &lt;em&gt;instanceof&lt;/em&gt; operator.
The simplified and type-aware variable declaration is provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refine the selection though &lt;em&gt;when&lt;/em&gt; clause to differentiate the transformation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Record deconstruction gives access to field variables without having to call accessor methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_records_and_sealed_types&#34;&gt;Records and Sealed Types&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sealed types perfectly model a closed inheritance hierarchy.
You can control your bounded domain and inhibit any client to change it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records are immutable objects.
Records are the perfect construct to implement value objects as described in domain-driven design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Business logic is implemented as additional methods.
The fact that the value objects are also immutable makes the business operations both thread-safe and side effect free.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;permits&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;Nil&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;ImmutableList&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008080&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;ImmutableList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Factory methods can automatically be created using &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_modules&#34;&gt;Modules&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modules were introduced with Java 9, which was released in September 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A module is a group of closely related packages and resources along with a new module descriptor file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we create a module, we include a descriptor file that defines several aspects of our new module [&lt;a href=&#34;#java-9-modularity&#34;&gt;4&lt;/a&gt;]:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Name&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;the name of our module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a list of other modules that this module depends on.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Public Packages&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a list of all packages we want accessible from outside the module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Services Offered&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;we can provide service implementations that can be consumed by other modules.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Services Consumed&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;allow the current module to be a consumer of a service.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reflection Permissions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;explicitly allows other classes to use reflection to access the private members of a package.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach describes in plain Java the coupling and cohesion principles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;fsm&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;dsl&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;utilities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;eventbus&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;eventbus&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;imp&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;apache&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;logging&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;log4j&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;transitive&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;jetbrains&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;annotations&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_goodies&#34;&gt;Goodies&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/projects/loom//&#34;&gt;Loom&lt;/a&gt; Threads&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Java 19 introduces lightweight threads in the library.
You can now program massively multithreaded applications with hundreds of thousands of threads without taxing the JVM or the operating system.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/413/&#34;&gt;JavaDoc code snippets&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Code examples in your java documentation are declared as a code snippet in a regular Java class.
Your unit tests ensure that all your documented code snippets compile and run without trouble.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;JShell&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You have access to a Read-Evaluate-Print Loop &lt;em&gt;REPL&lt;/em&gt; to test new Java code.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/426/&#34;&gt;Vector Optimizations&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You have access to the SIMD modules in your CPU directly from your Java code.
Speed-ups can be tremendous.
The code is still portable for all supported Java platforms.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-by-comparison&#34;&gt;&lt;/a&gt;[1] S. Harrer, J. Lenhard, and L. Dietz, &lt;em&gt;Java By Comparison&lt;/em&gt;. Pragmatic Bookshelf, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07CLFTVZS&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07CLFTVZS&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[2] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;functional-programming-java&#34;&gt;&lt;/a&gt;[3] V. Subramaniam, &lt;em&gt;Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions&lt;/em&gt;. The Pragmatic Programmers, 2014 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00J8W0OTI&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00J8W0OTI&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-9-modularity&#34;&gt;&lt;/a&gt;[4] S. Mak, &lt;em&gt;Java 9 Modularity&lt;/em&gt;. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491954167&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491954167&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The &lt;em&gt;record&lt;/em&gt; construct was added to Java 15 in March 2020. Records are shallow immutable objects. You can use them in pure functions to avoid unwanted side effects.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Vaadin</title>
      <link>https://blog.tangly.net/blog/2022/vaadin/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/vaadin/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_developing_with_vaadin&#34;&gt;Developing with Vaadin&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-10-01-head.jpg&#34; alt=&#34;2022 10 01 head&#34; width=&#34;200&#34; height=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://vaadin.com/&#34;&gt;Vaadin&lt;/a&gt; is an ideal solution if you are a Java developer and wants to provide a user interface for your product.
Vaadin is a framework to create graphical user interfaces using plain Java, or any JVM-based language for that matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You develop in Java, and the framework takes care of all the rest.
It generates the client-side code, and the communication between the client-side code in the browser and the backend code on the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your team only needs to program in the Java stack.
Your developers focus on their key competencies.
This is a huge advantage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Proficiency is difficult in one technology stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Only exceptional individuals really master multiple development environments.
You can probably not afford to hire them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Vaadin framework is optimal for internal applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It scales up to a few thousands of active users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_progressive_web_applications_pwa&#34;&gt;Progressive Web Applications &lt;a href=&#34;https://en.wikipedia.org/wiki/Progressive_web_app/&#34;&gt;PWA&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;User interfaces shall accommodate various screen resolutions.
Ideally, you should support phone displays, tablets, and high-resolution workstations.
Progressive Web applications provide the functionalities to realize such solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin provides first-level support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Progressive_web_app/&#34;&gt;PWA&lt;/a&gt; functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The regular Vaadin distribution provides the expected regular visual components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://vaadin.com/directory/search?author=Vaadin+++ComponentFactory&#34;&gt;Vaadin Component Factory&lt;/a&gt; distributes more specialized components.
These components were before created for a particular customer and later released to the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use the &lt;a href=&#34;https://vaadin.com/directory/component/so-charts&#34;&gt;SO-Charts&lt;/a&gt; components to draw various charts.
This library is a thin wrapper for the Apache project &lt;a href=&#34;https://echarts.apache.org/en/index.html&#34;&gt;ECharts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_developing_with_vaadin_2&#34;&gt;Developing with Vaadin&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most popular IDE for Java is currently the &lt;em&gt;IntelliJ IDEA&lt;/em&gt; tool.
You develop Vaadin applications just as regular Java applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; as build tool.
This approach is well-supported in the IDE.
The Vaadin company still seems to prefer &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; as build tool.
You find Gradle examples created by the developer of the Karibu library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I prefer to deploy Vaadin application with an embedded Web Server.
The approach has two advantages.
First, debugging the application is easier and snappier.
Second, the modern production environment builds on Docker images and Kubernetes.
You will never deploy more than one solution on a container instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin components do not hinder domain-driven design approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_testing_with_karibu&#34;&gt;Testing with &lt;a href=&#34;https://github.com/mvysny/karibu-testing/&#34;&gt;Karibu&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Digital solutions are developed using agile approaches.
They are often deployed multiple times every week in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The unit and integration tests are run automatically before each deployment.
The successful execution of the test suite guarantees no known errors are deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/mvysny/karibu-testing/&#34;&gt;Karibu&lt;/a&gt; test library efficiently supports developers writing Vaadin integration or end-to-end automated tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Karibu testing is here to perform:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Containerless testing&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You do not need to launch the servlet container.
Karibu creates a &lt;em&gt;Vaadin Session&lt;/em&gt;, the UI and other necessary Vaadin classes straight in the JVM, which runs your JUnit tests.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Browserless testing&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You look up components straight from &lt;em&gt;UI.getCurrent()&lt;/em&gt;, bypassing the browser and the JavaScript bridge completely.
You directly call methods on your server-side &lt;em&gt;View&lt;/em&gt; classes and on the server-side Java Vaadin components.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_learning_vaadin&#34;&gt;Learning Vaadin&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin provides &lt;a href=&#34;https://vaadin.com/learn/training/&#34;&gt;training videos&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A &lt;a href=&#34;https://vaadin.com/learn/training/&#34;&gt;certification program&lt;/a&gt; validates your learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://vaadin.com/docs/latest/&#34;&gt;Extensive documentation&lt;/a&gt; and tutorials are published on their website.
The current examples emphasize the usage of &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; as a build tool.
I prefer &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; and had to search the Internet to find clues how to build the examples with Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Concrete examples of how to realize specific functions with Vaadin are collected in the &lt;a href=&#34;https://cookbook.vaadin.com/&#34;&gt;cookbook&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware of selecting examples using the current version of the framework.
Legacy code uses Vaadin 8 and is useless for modern solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Very cool is the &lt;a href=&#34;https://vaadin.com/student-program/&#34;&gt;student program&lt;/a&gt;.
I am currently trying to introduce computer science bachelor students to the advantages of Vaadin.
Students are bombarded with various technology stacks.
Java and Vaadin is a single Java-based approach to write more easily semester and bachelor development assignments.
The drawback is it is less sexy than &lt;em&gt;React&lt;/em&gt;, &lt;em&gt;VueJS&lt;/em&gt;, or perhaps &lt;em&gt;Angular&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin supports the latest version of Java in a timely manner
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
I acknowledge that the Vaadin company is rather slow to adopt newer Java standards.
It took them years to acknowledge the Jakarta renaming scheme
footnot:[The renaming was necessary because Oracle screwed up. The delaying of Vaadin means you cannot use the latest version of Jetty or similar frameworks].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_links&#34;&gt;Links&lt;/h3&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.frankel.ch/why-love-vaadin/&#34;&gt;Why I (still) love Vaadin&lt;/a&gt;.
Nicolas Fränkel. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ankurmans/an-open-letter-to-all-enterprise-level-business-web-application-decision-makers-446527292627&#34;&gt;5 Reasons Why Enterprises Use Vaadin For Their Web Application UI Needs&lt;/a&gt;.
Ankurman Shrestha .2018.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://vaadin.com/accessibility&#34;&gt;Vaadin Accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The same can be said for the &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; since it supports toolchains configuration.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: ArchUnit</title>
      <link>https://blog.tangly.net/blog/2022/archunit/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/archunit/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_verifying_software_design_constraints_with_archunit&#34;&gt;Verifying Software Design Constraints with ArchUnit&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-09-01-head.png&#34; alt=&#34;2022 09 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How often have you experienced a well-defined and understood software architecture on paper?
And it falls apart when developers start implementing it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While re-architecting recently legacy components in an application, I experienced the same.
As more and more developers joined the team, it became a constant routine to make them aware of the design and how to adhere to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I know some of you may say, &lt;em&gt;Why not control the implementation during code-review sessions?&lt;/em&gt;.
Technically you can, but in that case, the reviewer becomes the bottleneck in the whole &lt;a href=&#34;https://en.wikipedia.org/wiki/Systems_development_life_cycle&#34;&gt;SDLC&lt;/a&gt; process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What if there was something that could enforce design constraints in the form of the test cases?
The violation of the agreed-upon design principles is marked as a failed build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My quest led me to a test library for architecture called &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt;.
It enforces architectural constraints in Java projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_idea&#34;&gt;Idea&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ArchUnit is a test library and allows us to validate whether a solution adheres to a given set of design considerations or architecture rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The product is a free, simple and extensible library for checking the architecture of your Java code using any plain Java unit test framework.
The license is the open source &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;.
The support for &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/&#34;&gt;JUnit 5&lt;/a&gt; is very good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ArchUnit can check dependencies between packages and classes, layers and slices, detect cyclic dependencies and more.
It does so by analyzing the given Java bytecode after importing all classes into a Java code structure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_use_architectural_constraints&#34;&gt;Use Architectural Constraints&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You first need to import the library in Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;implementation&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;tngtech&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;archunit&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;archunit:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1.0&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;                             &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For real projects you should describe your dependencies in a &lt;a href=&#34;https://docs.gradle.org/current/userguide/platforms.html&#34;&gt;catalog file&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The definition of a validation test is easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below an architectural rule to respect the &lt;em&gt;Domain-Driven Design&lt;/em&gt; concepts in our project &lt;a href=&#34;#software-structure-with-ddd&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@AnalyzeClasses&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;packages&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;net.tangly.erp.collaborators&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;                     &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;DomainRules&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;                                                     &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;SERVICES&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Services&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;PORTS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Ports&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;DOMAIN&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@ArchTest&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;ArchRule&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;layersRule&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;layeredArchitecture&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;consideringAllDependencies&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;layer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;DOMAIN&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;definedBy&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;..domain..&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;layer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;SERVICES&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;definedBy&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;..services..&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;layer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;PORTS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;definedBy&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;..ports..&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;whereLayer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;DOMAIN&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;mayOnlyBeAccessedByLayers&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;SERVICES&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;PORTS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;whereLayer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;SERVICES&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;mayOnlyBeAccessedByLayers&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;PORTS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;whereLayer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;PORTS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;mayNotBeAccessedByAnyLayer&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declare the root package for the bounded domain classes.
The bounded domain should be defined as a Java module.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The domain rules class shall be declared as part of the domain library of your application.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These rules are defined in the library component and enforced in all the &lt;em&gt;Bounded Domains&lt;/em&gt; we implement through the following unit tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@AnalyzeClasses&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;packages&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;net.tangly.erp.collaborators&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;ArchitectureTest&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;                                                &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@ArchTest&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;ArchTests&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;domainRules&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;ArchTests&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;DomainRules&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;      &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The class is located in the unit test folder and will be executed with JUnit 5 as part of the unit test CI step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Import all the rules defined in the domain rules class and apply them to the bounded domain &lt;em&gt;collaborators&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can insure architectural constraints to all bounded domains defined in a product.
The constraints are defined only once in a common module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The huge advantage is the integration of architectural validations in the continuous integration pipeline &lt;a href=&#34;#introducing-devops-ideas&#34;&gt;[2]&lt;/a&gt; &lt;a href=&#34;#devops-for-sme&#34;&gt;[3]&lt;/a&gt;.
No expensive human activities are required to enforce these rules &lt;a href=&#34;#agile-architecture&#34;&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_links&#34;&gt;Links&lt;/h3&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;software-structure-with-ddd&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2022/software-structure-with-ddd/&#34;&gt;Software Structure with DDD&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;introducing-devops-ideas&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2022/introducing-devops-ideas/&#34;&gt;Introducing DevOps Ideas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;devops-for-sme&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2021/devops-for-small-applications/&#34;&gt;DevOps for Small Applications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-architecture&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Modular Monoliths are the new Graal</title>
      <link>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_modular_monoliths_are_the_new_graal&#34;&gt;Modular Monoliths are the new Graal&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-02-head.svg&#34; alt=&#34;2022 06 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith is a software design approach in which a monolith is designed with an emphasis on interchangeable and potentially reusable modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith can be splitted in the future into a set of microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Delay the split as long as you can.
Microservices have a steep price tag during operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith provides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Independent and parallel development approach&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diminish coupling and improve cohesion.
The interfaces are better documented and thinner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better observability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_benefits_of_modular_monoliths&#34;&gt;Benefits of Modular Monoliths&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Adopting the modular approach for monolithic applications can have benefits in a few key areas, including better-organized dependencies, increased &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_reuse&#34;&gt;code reusability&lt;/a&gt;, and increased code observability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Reusability&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;For large development teams, developing modular components of an application helps to increase reusability.
Modular components can be reused and repurposed and can help teams establish a single source of truth.
This can lead to faster and more consistent development.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Better-Organized Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Because modular monoliths make individual functions more independent, they, by nature, make dependencies more organized and visible.
This makes it easier for developers to easily assess which parts of the application require which dependencies.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Observability&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Developing with modularity in mind means code is more accessible to developers.
For Java developers in particular, interface classes and their requisite javadoc comments help to enhance accessibility and interoperability for developers who may need to work with the modularized function.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Monolith Benefits&lt;/th&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Modular Monolith Benefits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Low operational complexity.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Low operational complexity.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Can be more secure than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Can be more secure than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Easy to manage database consistency.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Easy to manage database consistency.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Less complex than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Less complex than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Monoliths are usually a nightmare to maintain.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Developed code is reusable.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Often called big ball of mud.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Has better-organized dependencies than a standard monolith.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Observability is often low.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Better code observability than a standard monolith.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_when_to_use_a_modular_monolith&#34;&gt;When to Use a Modular Monolith&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Any time a developer is working on a monolithic application, using principles of modularity can help them to improve the processes for their team.
Whether that means making dependencies more manageable within the application, improving developer interoperability on the modular components of that application, or adding modular components to the house repository, embracing modularity can have a positive impact on teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For the application itself, embracing modularity can help to organize dependencies, making it easier and less time-consuming to change components within the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good practices shall be applied to refactor the application [&lt;a href=&#34;#clean-code&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;4&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_when_not_to_use_a_modular_monolith&#34;&gt;When Not to Use a Modular Monolith&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course, just as microservices are not one size fits all solutions, neither is modularity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For developers working on small projects with small development teams, developing their code in a modular way may not be worth the added time, or formality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_final_thoughts&#34;&gt;Final Thoughts&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture approach for modular monoliths or microservices is &lt;em&gt;Domain Driven Design&lt;/em&gt;
[&lt;a href=&#34;#domain-driven-design&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;7&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are like many Java developers who are still working on a monolithic application, then employing modularization best practices can help make your application achieve some benefits of microservices without the associated cost of refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, modular monoliths have significant shortcomings when compared to microservices — especially in terms of continuous testing, integration, and deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_links&#34;&gt;Links&lt;/h3&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;software-structure-with-ddd&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2022/software-structure-with-ddd/&#34;&gt;Software Structure with DDD&lt;/a&gt;
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[1] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[3] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[4] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[5] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[6] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[7] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Software Structure with DDD</title>
      <link>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_software_structure_when_using_domain_driven_design&#34;&gt;Software Structure when using Domain-Driven Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-01-head.jpg&#34; alt=&#34;2022 06 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Development&lt;/a&gt; &lt;em&gt;DDD&lt;/em&gt; is the preferred software architecture approach for designing digital products.
The method nicely matches with the operational concepts of microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design is a holistic approach to understanding, designing and building software applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Seminal books [&lt;a href=&#34;#domain-driven-design&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;3&lt;/a&gt;] describes the approach and key concepts defining the development method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Concrete recipes and examples of code structure are still sparse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How should you structure your namespaces and modules?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We propose a simple and adequate code structure for implementation using modern Java constructs.
The approach builds on the strengths of the Java packages and modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The language visibility rules enforce cohesion and minimize coupling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The described approach is ideal for small to medium software solutions.
The source code size of a bounded domain is often less than 50&amp;#39;000 lines of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The heart of software is its ability to solve domain-related problems for its user.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Eric Evans&lt;br/&gt;
&lt;cite&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_layers_in_ddd&#34;&gt;Layers in DDD&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design &lt;em&gt;DDD&lt;/em&gt; has four layers in the architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Interface
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;This layer is in charge of the interaction with the user, whether software presents information to the user or receives information from the user.&lt;br/&gt;
&lt;em&gt;I use vaadin to increase productivity.
Vaadin allows us to use the single technology stack Java to develop all backend and frontend functionalities.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Application
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;This is a thin layer between the interface and the domain, it could call domain services to serve the solution purposes.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Domain
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;The heart of the software, this layer holds domain logic and business knowledge.&lt;br/&gt;
&lt;em&gt;A major gaal is to avoid any tainting of the core domain model from other layers.&lt;/em&gt;
&lt;em&gt;Try to avoid extending domain entities with implementation specific root classes or to a lesser degree annotations.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Infrastructure
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;A supporting layer for the other layers.
This layer contains supporting libraries or external services like a database or UI supporting library.&lt;br/&gt;
&lt;em&gt;I use libraries to minimize effort in support functions such as persistence, JSON transformation, archiving and reporting.
The microstream library is a good example of this approach.
The persistence capability is less than fifty lines of codes.
No changes in the domain model was necessary.
We did not have to add a root persistent class or use annotations.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_package_structure&#34;&gt;Package Structure&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bounded domain shall be configured as a Java module [&lt;a href=&#34;#java-9-modularity&#34;&gt;4&lt;/a&gt;].
The exported services and entities are explicitly listed with the &lt;em&gt;exports&lt;/em&gt; directive.
A huge advantage is the obligation to list all dependencies with the &lt;em&gt;requires&lt;/em&gt; directive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-01-hexagonal-architecture.png&#34; alt=&#34;2022 06 01 hexagonal architecture&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java compiler validates the module dependencies and interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Services
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;defines the bounded domain context.
The domain uses the library to implement a bounded domain.
The ports, handlers and realms are declared in the context package for small bounded domains.
Complex domains can declare these interfaces in separate packages for legibility.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Logic
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains common business logic and features.
Elaborate domains can contain more business features.
Use a package structure increasing legibility and enforcing separation of concerns.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Ports
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the services receiving data and events from the environment.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Handlers
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the services providing data and events to the environment and to other applications.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Realm
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the repository functions to persist and create domain entities and object values.
The current approach uses the &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; library.
The amount of code to persist the domain model is minimal and non-intrusive
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Domain
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the abstraction describing the bounded domain.
Care is taken to define resilient and legible domain abstractions.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/bounded-domain-structure.svg&#34; alt=&#34;bounded domain structure&#34; width=&#34;328&#34; height=&#34;181&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above diagram shows the package structure for a bounded domain named &lt;strong&gt;bounded-domain&lt;/strong&gt;.
The names with the regular font are package names, the ones in italics are class names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The infrastructure supports classes are not part of this structure.
These classes shall be defined in a separate Java module and imported with regular dependency declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We use the &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; tool to insure the expected structure is provided for each bounded domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The user interface for a bounded domain is stored in a separate package and often in its own Java module.
The bounded domain implementation shall not constrain the technologies used to provide a user interface.
Different approaches for user interface realization are available and no clear winner can currently be identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I mainly use &lt;a href=&#34;https://www.vaadin.com&#34;&gt;Vaadin&lt;/a&gt; to realize browser or mobile first internal applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_considerations&#34;&gt;Java Considerations&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Entities shall have well-documented internal or external identifiers.
Entities visible to other bounded domains shall always have an external identifier.
Identifiers are always immutable objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Objects that have a distinct identity that runs through time and different representations.
You also hear these called &lt;em&gt;reference objects&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value objects shall be expressed as Java value types.
Record construct is the preferred way to model a value object in Java.
The record concept provides the expected &lt;em&gt;equals(Object)&lt;/em&gt; behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Objects that matter only as the combination of their attributes.
Two value objects with the same values for all their attributes are considered equal.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An aggregate is a set of Entities and Value Objects that do not make sense alone.
Every aggregate has a root entity, which will be responsible for providing all methods involving business rules that will modify its child entities.
The first rule is that aggregates reference each other by identity instead of object references.
Aggregates shall be constructed with the help of factory patterns such as factory method, abstract factory, or builder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A DDD aggregate is a cluster of domain objects that can be treated as a unit.
An example may be an order and its line-items, these will be separate objects.
Tt is useful to treat the order together with its line items as a single aggregate.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Rich domains are models that have full control of their data and do not rely on external objects to manipulate them.
Anemic domains are models that rely on other classes to validate their data.
Anemic domains are a smell in the domain-driven design world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Services should be pure functions and be stateless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pure functions are functions (or methods) that do not change the value of any object outside it.
It avoids side effects and guarantees the same output for certain inputs, meaning it needs to be completely deterministic.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_architecture_integrity&#34;&gt;Architecture Integrity&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A Bounded Context is a logical boundary of a domain where particular terms and rules apply consistently.
Inside this boundary, all terms, definitions and concepts form the Ubiquitous Language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good practices shall be applied to ensure the quality of the bounded domain software architecture [&lt;a href=&#34;#clean-architecture&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;7&lt;/a&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java Platform Module System (JPMS) encourages us to build more reliable and strongly encapsulated modules.
As a result, these features can help to isolate our contexts and establish clear boundaries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bounded domain is implemented as a Java module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The domain internal layered architecture is verified with &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; custom validation rules.
The rules are coded as unit tests and are processed in the continuous integration pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The advantages of the architecture are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The whole company talking the same ubiquitous language, reduced risk of misunderstandings.
Everyone needs to be aligned, both in vocabulary and ownership of the components.
The engineers have common understanding and coding guidelines to realize the layers inside a bounded domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have a segregated architecture defining a modular monolith application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smaller and well-defined components are easier to maintain.
Your services are independent and can more easily be refactored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Development scalability is implicitly provided.
Teams can develop simultaneous and independently bounded domain features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_bounded_domain_relations&#34;&gt;Bounded Domain Relations&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are five main types of relationships between Bounded Contexts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Partnership
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a relationship between two contexts that cooperates to align the two teams with dependent goals.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Shared Kernel
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a kind of relationship when common parts of several contexts are extracted to another context/module to reduce code duplication.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Customer-supplier
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a connection between two contexts, where one context (upstream) produces data, and the other (downstream) consume it.
In this relationship, both sides are interested in establishing the best possible communication.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Conformist
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;this relationship also has upstream and downstream, however, downstream always conforms to the upstream’s APIs.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Anti-corruption layer
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;this relationship kind is widely used for legacy systems to adapt them to a new architecture and gradually migrate from the legacy codebase.
The protection layer acts as an adapter to translate data from the upstream and protect from undesired changes&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Great technologies, programming languages and tools are used when building software applications.
That is good and right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But unfortunately, it is often lost that the decisive factor for the success of a project is not technology, but the solution.
In order to understand the subject matter or domain, we need a common language with the domain experts and users.
If we do not map the technical model in the software and its architecture, it will not help our users in their work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a computer scientist, it is easy to fall into the trap of focusing on technology instead of specialist knowledge
footnoote:[In the modern trend of technology driven curriculum this dreadful approach is often encountered].
The principle of bounded contexts from DDD can help us here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design (DDD) is a useful approach that provides excellent guidelines for modeling and building systems, but it is a means to an end, not an end in itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While the concepts are valid, you lose a lot if you limit yourself to using them only: There actually is a life beyond DDD.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Stefan Tilkov&lt;br/&gt;
&lt;cite&gt;2021&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The DDD approach emphasizes systematic refactoring and code improvements [&lt;a href=&#34;#refactoring&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#clean-code&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;5&lt;/a&gt;].
It recommends test driven approach for bounded domain development [&lt;a href=&#34;#agile-testing&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;#more-agile-testing&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;#bridging-communication-gap&#34;&gt;12&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[1] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[2] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[3] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-9-modularity&#34;&gt;&lt;/a&gt;[4] S. Mak, &lt;em&gt;Java 9 Modularity&lt;/em&gt;. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491954167&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491954167&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[5] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[6] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[7] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[8] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[9] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;agile-testing&#34;&gt;&lt;/a&gt;[10] L. Crispin, &lt;em&gt;Agile testing&lt;/em&gt;. Addison-Wesley, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321534468&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321534468&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;more-agile-testing&#34;&gt;&lt;/a&gt;[11] J. G. Gregory and L. Crispin, &lt;em&gt;More Agile Testing&lt;/em&gt;. Addison-Wesley Professional [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321967054&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321967054&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;bridging-communication-gap&#34;&gt;&lt;/a&gt;[12] G. Adzic, &lt;em&gt;Bridging the Communication Gap&lt;/em&gt;. Neuri Limited, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B008YZ993W/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B008YZ993W/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. You do &lt;strong&gt;not&lt;/strong&gt; need to modify your domain model. No inheritance from a special persistence class, no annotations are required.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Measurements and Units</title>
      <link>https://blog.tangly.net/blog/2022/measurements-and-units/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/measurements-and-units/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_measurements_and_units&#34;&gt;Measurements and Units&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-05-01-head.png&#34; alt=&#34;2022 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JSR-385 could have saved Mars Climate Orbiter&lt;a href=&#34;#mars-climate-orbiter&#34;&gt;[2]&lt;/a&gt; in year 1999.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Accidents in computer applications happen again and again due to calculation errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The International System of Units &lt;em&gt;SI&lt;/em&gt;, commonly known as the metric system, is the international standard for measurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Metre_Convention&#34;&gt;International Treaty of the Mete&lt;/a&gt; was signed in Paris on May 20, 1875, by seventeen countries, including the United States.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In May 2019, the system of units was updated.
All units are defined by constants of nature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Still various countries use alternate conventions to complicate our lives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here some well-documented and expensive catastrophes originating from wrong approaches to measurements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Patriot Missile&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The cause here was an inaccurate calculation of the time that has passed since the start due to arithmetic errors in the computer system.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Ariane 5 Explosion&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A floating point number was converted, which then had a larger value than could be stored using the available 16-bit signed integer value.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;US Air Machine&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A US airliner nearly crashed on a flight between the United States and Canada, in the Great Lakes area and the greater Chicago area.
Here, when refueling the machine, the US gallon and British gallon volume units for liquid and fuel were mixed up.
The actual amount of kerosene available was significantly reduced.
The machine ending up on the holding pattern on approach without sufficient fuel.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Numerous, sometimes fatal, incorrect dosages of medication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_definitions&#34;&gt;Definitions&lt;/h3&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-05-01-si-units.png&#34; alt=&#34;2022 05 01 si units&#34; width=&#34;200&#34; height=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java classes defined in the &lt;a href=&#34;https://unitsofmeasurement.github.io/&#34;&gt;JSR-385&lt;/a&gt; specification are not limited to science, physics or math alone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a result, the terms quantity and unit of measure should be used in their general terminology, such as physical quantity or physical unit of measure, unless otherwise specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This generalization holds true even if the Units of Measurement API was originally designed with scientific or physical quantities as the primary goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The names and terms used in the specification are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Dimension&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Dimension is one of the fundamental aspects of quantity, including length, mass, time or combinations thereof.
The concept of measure expresses a characteristic without any concept of size.
So we can talk about length without any implication.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Quantity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Any kind of quantitative property or attribute of a thing.
Mass, time, distance, heat, longitude or latitude are among the familiar examples of quantitative properties.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No unit of measure is required to express a quantity, nor does one need specific arithmetic to do so.
Alice can quantify the size of her shoes by picking them up.
Alice can add the mass of her left shoe and the mass of her right shoe by placing them both in the bowl of a scale.
Quantities can be measurable or dimensionless: the number of Alice’s shoes is a dimensionless quantity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Units of measure are required to represent measurable quantities on a computer, on paper, on a network, device, etc.
Two or more of these specifications do not mandate the use of a particular quantity as a standard unit of measure.
Therefore, SI (System-International) is usually used so that the standard system of units of measurement is suitable for most applications.
According to the JSR-385 API specification, 7 quantities should be acceptable if they have the same dimensions so that they can be compared with one another in a meaningful way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Unit&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A unit, or unit of measure, is a quantity that is assumed to be the standard with a unique value that can be used to express.
The same type units of measurement are used as a comparison value.
For example, one foot corresponds to a quantity of 0.3048 meters.
Regardless of how this came about, a unit of measure can be expressed as the quantity of other units of measure of the same kind.&lt;/p&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Base-Unit&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The base unit is a well-defined unit of measurement that is defined as being dimensionally independent of other basic units of measurement.
The SI system defines only 7 basic units of measurement (including meters, kilograms and seconds) from which all other SI units of measurement are derived.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Derived-Unit&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Derived-Unit is a unit of measurement formed as the product of the results of basic units of measurement.
Some derived units of measurement have been given a special name and a symbol for convenience and ease of use.
In the SI system, special name derived units of measurement include &lt;a href=&#34;https://en.wikipedia.org/wiki/Hertz&#34;&gt;Hertz&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Newton_(unit)&#34;&gt;Newtons&lt;/a&gt;
and &lt;a href=&#34;https://en.wikipedia.org/wiki/Volt&#34;&gt;Volts&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;System-of-Units&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A system of units is a set of basic and derived units of measure chosen as standards for specifying measures.
Examples are the SI (metric) and the imperial (English) system.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Prefix (multiplier)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A prefix is a leading word that can be applied to a unit of measure to form a decimal multiplication or decrease of the unit of measure.
Prefixes are used in the SI system, which includes kilo-, centi-, mili- etc.
Other cultures and regions use multiplier systems of a similar type, some of which differ from the SI system.
Examples are the separate use of multipliers such as Lakh- (100,000) or Crore- (10 million) in countries like India or parts of the Middle East.
This can be attributed to the fact that different currency systems exist.
It can also be traced back to historical number systems, which differ from the Latin or Arabic origin of today’s western systems in some areas or are absent in these in the same form.
On the other hand, the use of others, such as a dozen, is almost unknown there.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_measurement&#34;&gt;Measurement&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In May 2019, all units are defined by constants of nature in the world-wide &lt;a href=&#34;https://en.wikipedia.org/wiki/International_System_of_Units&#34;&gt;international system of units&lt;/a&gt;.
These changes are incorporated in the newer verison of the RFC and the reference implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_how_to_use_the_api&#34;&gt;How to Use the API&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JSR-385 defines the API 2.x.
Historically, JSR-363 defined the API 1.0 and is now superseded by the newer definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt;    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;javax.measure:unit-api:2.1.3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;tech.units:indriya:2.1.3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;tec.units:unit-ri:1.0.3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Length&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;distance&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;MILLI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;METRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;));&lt;/span&gt;

    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cubicMetre&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;CUBIC_METRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;litres&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;ComparableQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cubicMetre&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;CUBIC_METRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;ComparableQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;litres&lt;/span&gt;  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;assertTrue&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cubicMetre&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;compareTo&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;litres&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Speed&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;velocity&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;METRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
                                         &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;divide&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;SECOND&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;))&lt;/span&gt;
                                         &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;asType&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Speed&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The power of the approach is in the object-oriented abstractions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;WaterTank&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;setCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;capacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;WaterTankTest&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;givenQuantity_whenGetUnitAndConvertValue_thenSuccess&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;WaterTank&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterTank&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;WaterTank&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterTank&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;setCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;9.2&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;assertEquals&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterTank&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getUnit&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;());&lt;/span&gt;

        &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterCapacity&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterTank&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;volumeInLitre&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterCapacity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;doubleValue&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;assertEquals&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;9.2&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;volumeInLitre&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0.0f&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #3c5d5d;font-weight: bold&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;conversionTest&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;volumeInMilliLitre&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterCapacity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;MILLI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;))&lt;/span&gt;
                                                 &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;doubleValue&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;assertEquals&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;9200.0&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;volumeInMilliLitre&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0.0f&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The abstractions allow compilation time detection of errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;waterCapacity&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;MILLI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;KILOGRAM&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;));&lt;/span&gt;         &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// compilation error&lt;/span&gt;

    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Length&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Kilometer&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;KILO&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;METRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Length&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Centimeter&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;CENTI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// compilation error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_recommendations&#34;&gt;Recommendations&lt;/h3&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep your unit definitions in a single place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulate your own &lt;em&gt;Quantities&lt;/em&gt; by delegation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create converters when storing units into a JPA-based persistent store.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In any case, if a unit does not exist in the system of units, you can create new units with new symbols: — &lt;em&gt;AlternateUnit&lt;/em&gt; is a new unit with the same dimension but different symbol and nature. — &lt;em&gt;ProductUnit&lt;/em&gt; is a new unit created as the product of rational powers of other units.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_links&#34;&gt;Links&lt;/h3&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;units-of-measurement&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;https://unitsofmeasurement.github.io/&#34;&gt;Units of Measurement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;mars-climate-orbiter&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://en.wikipedia.org/wiki/Mars_Climate_Orbiter&#34;&gt;Mars Climate Orbiter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Choice is Good</title>
      <link>https://blog.tangly.net/blog/2021/choice-is-good/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/choice-is-good/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_choice_is_good&#34;&gt;Choice is Good&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-11-01-head.jpg&#34; alt=&#34;2021 11 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First and foremost, our primary goal is to develop successful products and delight users.
We are always looking for good practices to improve our odds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Product development is a risky business&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We want to expand our toolbox with proven approaches.
We use these tools to experiment when confronted with new problems.
There is &lt;a href=&#34;https://en.wikipedia.org/wiki/No_Silver_Bullet&#34;&gt;No Silver Bullet&lt;/a&gt; to solve our specific challenges.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using a goal-driven approach that guides people through process-related options is one powerful approach.
We need to take decisions to tailor and scale agile strategies to address the context of the situations we face.
Approaches such as &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt; have a minimal set of instructions.
You are responsible to add the missing pieces to improve your development organization and remove your specific impediments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are the advantages to take a goal-driven approach?
How can you tailor your product development process?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_goals_over_prescription&#34;&gt;Goals over Prescription&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.pmi.org&#34;&gt;Project Management Institute&lt;/a&gt; has acquired the disciplined agile delivery method and heavily promotes the approach.
I personally prefer the &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt; approach to scale agile product development.
Nevertheless, Scott Ambler is an experienced and talented developer.
Learning from his experiences and analyzing his approaches promotes the essence of &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt;.
We want to experiment with new approaches and add the successful ones in our toolbox.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our philosophy is to look for great ideas regardless of their source and to recognize there ar no best practices.
When we learn a new technique, we strive to understand what its strengths and weaknesses are and in what situations to apply it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The diagram shows a potential approach for scope exploration.
For each facet of the exploration we have set of methods to work with.
The context of the product development and the identified goals should allow us to select the most effective approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-11-01-explore-scope.jpg&#34; alt=&#34;2021 11 01 explore scope&#34; width=&#34;800&#34; height=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Supports process tailoring&lt;/strong&gt;.
I think that figures below make it very clear how people are enabled to make intelligent process decisions.
I think that this is a huge improvement over previous process frameworks, particularly Rational Unified Process &lt;em&gt;RUP&lt;/em&gt;.
&lt;em&gt;RUP&lt;/em&gt; provides great process advice regardless of what some agilists may claim but struggled to provide consumable process tailoring advice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enables effective scaling&lt;/strong&gt;.  &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt; is our preferred scaling approach.
An important part of scaling agile is to tailor your strategy to reflect the realities of the scaling factors which you face.
For example, consider your approach to exploring the initial scope of your effort (the goal captured in Figure 2).
A large agile team or a geographically distributed team will make different tailoring decisions than a small co-located team.
A team in a regulatory environment will make different decisions, particularly around amount of detail, than teams in non-regulatory environments.
These are just three of several scaling factors (more on this in a future blog posting, although you may find my agility at scale blog to be of interest).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Makes your process options very clea&lt;/strong&gt;.
Figure 4, in combination with the more detailed goals diagrams (such as in Figures 2 and 3) make it very clear what you need to consider when tailoring an agile solution delivery process to meet the unique needs of the situation faced by your team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Takes the guesswork out of extending agile methods&lt;/strong&gt;.
Although it makes for wonderful marketing rhetoric, it’s disingenuous for people to claim that simple methods such as Scrum can be tailored to meet your actual needs.
Yes, we suppose this claim is true but how do you do so?
Shouldn’t you start with a full delivery lifecycle, not just a construction lifecycle?
Shouldn’t the toolkit cover a wider range of issues, such as leadership and requirements management as Scrum does, technical issues as XP does, modeling and documentation as Agile Modeling does, and many other issues?
In short, shouldn’t it be a hybrid?
Finally, shouldn’t you be given some context-sensitive advice for tailoring the details, as we do with the goal-driven approach described here?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Makes it clear what risks you’re taking on&lt;/strong&gt;.
By making your process decision options clear, and by describing the trade-offs associated with those options, we make it very clear what risks you’re taking on.
Want to write a detailed requirement specification up front then the approach is going to make it very clear what risks you’ve just taken on by doing so.
It also makes clear when this decision is appropriate, so if you’re not in this situation then it is likely time to rethink your approach.
Although we cannot prevent challenges such as a Water-Scrum-Fall approach.
Such when a heavy approach is taken to &lt;em&gt;Inception&lt;/em&gt; and &lt;em&gt;Transition&lt;/em&gt; and an agile approach to Construction.
We still can certainly make it very clear what the impact is of the decisions that led you to that approach.
We have spoken with several people who have used the decision tables in it to argue against inappropriate process decisions on their projects.
In many situations the argument &lt;em&gt;that isn’t agile&lt;/em&gt; falls on deaf ears.
Whereas &lt;em&gt;that will take longer and here’s why&lt;/em&gt;, &lt;em&gt;that will be more expensive and here’s why&lt;/em&gt; will be listened to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It hints at an agile maturity model&lt;/strong&gt;.
We suggest that in the case of issues where the options are ordered there is a clearly an indication of agile maturity or sophistication.
Having said that I have no desire to wade into the agile maturity model morass, but I think it is an important observation nonetheless.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_change_and_adapt&#34;&gt;Change and Adapt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Acknowledge that goals and priorities will shift during the product lifetime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-11-01-change-scope.jpg&#34; alt=&#34;2021 11 01 change scope&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The palette of approaches for a facet of your process was exemplary showed above.
You should explore solutions for all your process steps to continuously improve.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Design Modeling</title>
      <link>https://blog.tangly.net/blog/2021/agile-design-modeling/</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/agile-design-modeling/</guid>
      <description>
        
        
        Unknown reference: implementing-domain-driven-desing
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_design_modeling&#34;&gt;Agile Design Modeling&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-10-01-head.jpg&#34; alt=&#34;2021 10 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The line between software development and software architecture is a tricky one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some people will tell you that it does not exist and that architecture is simply an extension of the design process undertaken by developers.
Others will make out it is a massive gaping chasm that can only be crossed by lofty developers.
They believe you must always abstract your abstractions and not get bogged down by those pesky implementation details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As always, there is a pragmatic balance somewhere in the middle, but it does raise the interesting question of how you move from one to the other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_key_takeaways&#34;&gt;Key Takeaways&lt;/h3&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Understanding the basics of software architecture is more important than ever before, given the distributed nature of the software systems we are now building, and the distributed nature of the teams building them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sweet spot of up front design, between too much and none at all, should focus on understanding the significant decisions and trade-offs that influence the shape of a software system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good architects are active members of the development team, from collaborating on code to coaching and providing technical leadership to the team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communicating about software architecture is challenging.
The &lt;a href=&#34;https://c4model.com/&#34;&gt;C4&lt;/a&gt; model can help structure the communication, starting with a context diagram, and working down to more technical aspects of the
system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contrary to some popular assumptions, putting effort towards good architecture actually enables agility.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We could state the definition of software design and architecture is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Management of non-functional requirements, see &lt;a href=&#34;https://www.thoughtworks.com/en-es/insights/articles/fitness-function-driven-development/&#34;&gt;Fitness Functions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architecture definition, see &lt;a href=&#34;https://c4model.com/&#34;&gt;C4 Models&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Technology selection, see &lt;a href=&#34;https://en.wikipedia.org/wiki/Architectural_decision&#34;&gt;ADR&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architecture evaluation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architecture collaboration&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_good_practices&#34;&gt;Good Practices&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Domain-Driven Design&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;I would postulate if your agile design follow domain-driven principles, you are safe for the next five years.
Just do it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Evolutive Architecture&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Features and non-functional requirements will change over time.
Define an architecture which will evolve with these changes.
Domain-driven design approach is highly evolutive Refactoring and Clean Code Fitness Functions Continuous Integration and Delivery Software Craftsmanship&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Refactoring&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Evolutive architecture means you will regularly refactor your code base.
Refactoring implies you have extensive integration and unit tests available.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_ideas&#34;&gt;Ideas&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Explore approaches to improve the qaulity and adequacy of your architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Architect products, evolve from projects to products,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Focus on quality attributes, not on functional requirements,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay design decisions until they are absolutely necessary,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architect for change, leverage the &lt;em&gt;power of small&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architect for build, test, deploy, and operate,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model the organization of your teams after the design of the system you are working on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Melvin E. Conway
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-10-01-agile-design.png&#34; alt=&#34;2021 10 01 agile design&#34; width=&#34;90%&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile digital product architects are aware of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Allow architecture to emerge,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software architecture is &lt;strong&gt;not&lt;/strong&gt; about big design up front,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A picture is worth thousand words,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You do not need to use UML See also &lt;a href=&#34;https://c4model.com/&#34;&gt;C4 Model&lt;/a&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every software team needs to consider software architecture,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everyone is an architect and everyone owns the architecture,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The software architecture role is about coding, coaching and collaboration,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A good software architecture enables agility.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Support Constant Change&lt;/em&gt;. O’Reilly Media [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491986360&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491986360&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementing-domain-driven-desing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M. C. Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;. Prentice Hall, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0131177052&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0131177052&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J. Kerievsky, &lt;em&gt;Refactoring to Patterns&lt;/em&gt;. Addison-Wesley Professional, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321213351&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321213351&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E. Gamma, R. Helm, R. Johnson, and J. Vlissides, &lt;em&gt;Design Patterns&lt;/em&gt;. Addison-Wesley Professional, 1995 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B000SEIBB8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B000SEIBB8&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S. Newman, &lt;em&gt;Building Microservices&lt;/em&gt;. O’Reilly Media, Incorporated, 2020 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B09B5L4NVT&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B09B5L4NVT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: What I Learnt Teaching Agile Software Architecture</title>
      <link>https://blog.tangly.net/blog/2021/what-i-learnt-teaching-agile-software-architecture/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/what-i-learnt-teaching-agile-software-architecture/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_i_learnt_teaching_agile_software_architecture&#34;&gt;What I Learnt Teaching Agile Software Architecture&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-09-01-head.png&#34; alt=&#34;2021 09 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I am teaching agile software architecture and techniques &lt;em&gt;SWAT&lt;/em&gt; as advanced bachelor level lecture weighted with 3
&lt;a href=&#34;https://en.wikipedia.org/wiki/European_Credit_Transfer_and_Accumulation_System&#34;&gt;ECTS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I gave this training the last three years at &lt;a href=&#34;https://www.hslu.ch/en&#34;&gt;Lucerne University of Applied Sciences and Arts&lt;/a&gt; &lt;em&gt;HSLU&lt;/em&gt; in Switzerland.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All materials are released under the &lt;a href=&#34;https://creativecommons.org/&#34;&gt;Creative Commons&lt;/a&gt; copyright.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The course contents are aligned with the big software architecture programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.opengroup.org/&#34;&gt;Open Group&lt;/a&gt; organization is the steward of &lt;a href=&#34;https://publications.opengroup.org/standards/togaf&#34;&gt;TOGAF&lt;/a&gt; standard.
&lt;a href=&#34;https://publications.opengroup.org/standards/togaf&#34;&gt;TOGAF&lt;/a&gt; is the worldwide industrial standard for enterprise software architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The group has realized that software and enterprise architecture must incorporate the agile principles &lt;a href=&#34;#agile-architecture&#34;&gt;[1]&lt;/a&gt;, &lt;a href=&#34;#open-agile-architecture&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All students had formal training in Java, object-oriented programming and design, and agile software project approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The school is still teaching waterfall and hybrid methods as a main approach for digital product development.
One consequence is that students have a shallow understanding of more modern frameworks such as Scrum or DevOps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The official proficiencies for the Scrum roles Scrum Master&lt;a href=&#34;#scrum-master-formation&#34;&gt;[4]&lt;/a&gt;, Product Owner&lt;a href=&#34;#product-owner-formation&#34;&gt;[5]&lt;/a&gt;, and Developer&lt;a href=&#34;#scrum-developer-formation&#34;&gt;[6]&lt;/a&gt; are not achieved with the current curriculum.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_swat_lecture_content&#34;&gt;SWAT Lecture Content&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The lecture description is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Teaches the basics of systematic agile design of an adequate software architecture for a selected application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods of agile quality assurance and software craftsmanship are explored using predefined or self-selected projects of students.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The fourteen lecture themes are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Traditional and Agile Approaches for software product architecture&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-1&#34;&gt;&lt;/a&gt;Why Agile Architecture and Design?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-2&#34;&gt;&lt;/a&gt;Evolution of Software Architecture over the last Decades&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-3&#34;&gt;&lt;/a&gt;What is Agile Architecture?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-4&#34;&gt;&lt;/a&gt;Agile Approaches with Scrum, XP, LeSS&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Agile Components and Subsystem Design and Continuous Improvements&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-5&#34;&gt;&lt;/a&gt;Refactoring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-6&#34;&gt;&lt;/a&gt;Errors, Vulnerabilities, Smells in Source Code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-7&#34;&gt;&lt;/a&gt;Architecture of Components and Subsystems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-8&#34;&gt;&lt;/a&gt;Verify Functional Features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-9&#34;&gt;&lt;/a&gt;Validate Quality Attributes of a Software Architecture&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Agile Application Architecture and Domain Driven Design&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-10&#34;&gt;&lt;/a&gt;Architecture Documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-11&#34;&gt;&lt;/a&gt;Architecture Trends I&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-12&#34;&gt;&lt;/a&gt;Architecture Trends II&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-13&#34;&gt;&lt;/a&gt;Domain Driven Design Workshop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;chapter-14&#34;&gt;&lt;/a&gt;Team and Technical Excellence for Architects&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;../../../ideas/learnings/lectures&#34;&gt;slides of the SWAT course&lt;/a&gt; are available for all interested parties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The course provides &lt;a href=&#34;../../../ideas/learnings/lectures/#software-architecture-and-techniques-lectures&#34;&gt;mandatory and optional literature&lt;/a&gt; for studying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The reference texts are [&lt;a href=&#34;#domain-driven-design&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#building-evolutionary-architectures&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#working-effectively-with-legacy-code&#34;&gt;4&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following books are recommended for interested students [&lt;a href=&#34;#clean-code&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;#clean-agile&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;#clean-craftsmanship&#34;&gt;9&lt;/a&gt;].
Each book is quite compact and can read over a weekend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The lecturer can also use [&lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;11&lt;/a&gt;] for the workshop parts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_arc42_architecture_approach&#34;&gt;arc42 Architecture Approach&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The course discusses the key points defined in approaches such as &lt;a href=&#34;https://arc42.org/&#34;&gt;arc42&lt;/a&gt;.
The same concepts can naturally be found in TOGAF with a slight different terminology.
The main sections in the arc42 documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Introduction and Goals&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Short description of the requirements, driving forces, extract (or abstract) of requirements.
Top three (max five) quality goals for the architecture which have the highest priority for the major stakeholders.
A table of important stakeholders with their expectation regarding architecture.&lt;br/&gt;
&lt;em&gt;Agile defines the product vision, goals and roadmap.
Stakeholder management has a strong emphasis and is the responsibility of the product owner.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-1&#34;&gt;Why Agile Architecture and Design&lt;/a&gt;, &lt;a href=&#34;#chapter-2&#34;&gt;Evolution of Software Architecture&lt;/a&gt;, &lt;a href=&#34;#chapter-4&#34;&gt;Agile Approaches&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Constraints&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Anything that constrains teams in design and implementation decisions or decision about related processes.
Can sometimes go beyond individual systems and are valid for whole organizations and companies.&lt;br/&gt;
&lt;em&gt;Define, track and verified through fitness functions.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-9&#34;&gt;Non-functional Features&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Context and Scope&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Delimits your system from its (external) communication partners (neighboring systems and users).
Specifies the external interfaces.
Shown from a business/domain perspective (always) or a technical perspective (optional)&lt;br/&gt;
&lt;em&gt;Define and document using the UML or C4 approach.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Solution Strategy&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Summary of the fundamental decisions and solution strategies that shape the architecture.
Can include technology, top-level decomposition, approaches to achieve top quality goals and relevant organizational decisions.&lt;br/&gt;
&lt;em&gt;Document through an architecture document, architecture workshops and diagrams.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;, &lt;a href=&#34;#chapter-11&#34;&gt;Trends I&lt;/a&gt;, &lt;a href=&#34;#chapter-12&#34;&gt;Trends II&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Building Block View&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Static decomposition of the system, abstractions of source-code, shown as hierarchy of white boxes (containing black boxes), up to the appropriate level of detail.
&lt;em&gt;Document through an architecture document, architecture workshops and diagrams.
Complex UML models are useless and not maintainable.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-7&#34;&gt;Component Architecture&lt;/a&gt;, &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Runtime View&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Behavior of building blocks as scenarios, covering important use cases or features, interactions at critical external interfaces, operation and administration plus error and exception behavior.+ &lt;em&gt;Documented through automated tests and if necessary diagrams.
Complex UML models are useless and not maintainable.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-7&#34;&gt;Component Architecture&lt;/a&gt;, &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Deployment View&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Technical infrastructure with environments, computers, processors, topologies.
Mapping of (software) building blocks to infrastructure elements.&lt;br/&gt;
&lt;em&gt;Infrastructure as code document the infrastructure and the solution deployment.
Usually deployment diagrams are useless.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-7&#34;&gt;Component Architecture&lt;/a&gt;, &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Cross Cutting Concepts&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Overall, principal regulations and solution approaches relevant in multiple parts (→ cross-cutting) of the system.
Concepts are often related to multiple building blocks.
Include different topics like domain models, architecture patterns and styles, rules for using specific technology and implementation rules.&lt;br/&gt;
&lt;em&gt;Should be documented as architecture decisions.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-9&#34;&gt;Non-functional Features&lt;/a&gt;, &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Architecture Decisions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Important, expensive, critical, large scale or risky architecture decisions including rationales.&lt;br/&gt;
&lt;em&gt;It is an important aspect of any software architecture.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Quality Requirements&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Quality requirements as scenarios, with quality tree to provide a high-level overview.
The most important quality goals should have been described in section 1.2 (quality goals).&lt;br/&gt;
&lt;em&gt;Should be documented as fitness functions and realized as automated tests.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-9&#34;&gt;Non-functional Features&lt;/a&gt;, &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Risk and Technical Debt&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Known technical risks or technical debt.
What potential problems exist within or around the system?
What does the development team feel miserable about?&lt;br/&gt;
&lt;em&gt;Risk management is part of any professional product development and shall be documented.
Ideally, a good product developed with professionals has a very low technical debt.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See  &lt;a href=&#34;#chapter-3&#34;&gt;What is Agile Architecture&lt;/a&gt;, &lt;a href=&#34;#chapter-5&#34;&gt;Refactoring&lt;/a&gt;, &lt;a href=&#34;#chapter-9&#34;&gt;Non-functional Features&lt;/a&gt;, &lt;a href=&#34;#chapter-14&#34;&gt;Excellence for Architects&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Glossary&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Important domain and technical terms that stakeholders use when discussing the system.
Also: translation reference if you work in a multi-language environment.&lt;br/&gt;
&lt;em&gt;Static web page generator approaches create more legible, searchable and usable documentation.
Paper-based documentation or wikis are a suboptimal way of describing a software product.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The arc42 approach is heavily influenced by their &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Modeling_Language&#34;&gt;UML&lt;/a&gt; and
&lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_Unified_Process&#34;&gt;RUP&lt;/a&gt; roots.
This heritage is one major reason why this approach is not extensively taught in the course.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Bachelor students have attended formal training in UML and scientific diagramming notations such as &lt;a href=&#34;https://c4model.com/&#34;&gt;C4&lt;/a&gt; or
&lt;a href=&#34;https://en.wikipedia.org/wiki/Business_Process_Model_and_Notation&#34;&gt;BPMN&lt;/a&gt;.
They can produce these artifacts before attending the SWAT course.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_isaqb_architecture_program&#34;&gt;ISAQB Architecture Program&lt;/h3&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-09-02-cspa-foundation.png&#34; alt=&#34;2021 09 02 cspa foundation&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The SWAT lecture has similar theme weights as the &lt;a href=&#34;https://www.isaqb.org/&#34;&gt;ISAQB&lt;/a&gt; &lt;em&gt;International Software Architecture Qualification Board&lt;/em&gt; foundation level training and certification
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The ISAQB foundation is kind of a laggard.
Most of their trainings are for classical software and enterprise architecture.
They have finally understood lately that agile is won the war how to develop digital products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;THe ISAQB programs teach skills in three areas: technological competence, methodical competence, and communicative competence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The key points are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The concept and meaning of software architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks and responsibility for you as a software architect&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your role as a software architect in projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State-of-the-art methods and techniques for the development of software architectures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The taught skills are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How can you coordinate essential software architecture decisions with other project participants from the fields of requirements management, project management, testing and development?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How can you document and communicate software architectures based on architecture patterns and technical concepts?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How can you independently carry out the essential steps in designing software architectures for small and medium-sized systems?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-09-02-cspa-agile.png&#34; alt=&#34;2021 09 02 cspa agile&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They have a specific module for agile software architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile approach to architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architecture requirements in agile projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Designing architectures in a team&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reflection and feedback&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Examples of agile architecture work&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this module, the participants learn how to design, develop and further develop software systems and architectures in accordance with agile principles.
On the one hand, the module covers the application of agile principles and concepts to architecture work.
On the other hand, expedient anchoring of architecture practices in an agile approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The development of architectures in projects with self-sufficient teams or shared responsibilities demands new skills and capabilities on the part of developers and architects.
These in turn cover technical as well as methodical and communicative aspects, which are addressed here all theoretically and in practical exercises.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The learning goals for the ISAQB agile certification are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Introduction to agile software architecture&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Knowing and being able to explain the significance of agile ideas for architecture work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowing the tasks involved in architecture development and how they are modified in the agile environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to appropriately align architecture work to the specific problem and project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowledge of agile tools for architecture work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowledge of the capabilities of anchoring architecture as a cross-cutting aspect in agile organisations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-3&#34;&gt;What is Agile Architecture&lt;/a&gt;, &lt;a href=&#34;#chapter-4&#34;&gt;Agile Approaches&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;The agile architecture approach&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being able to iteratively and agilely structure architecture work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowledge of role models for architects in agile projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowledge of ways of involving stakeholders in architecture work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-4&#34;&gt;Agile Approaches&lt;/a&gt;, &lt;a href=&#34;#chapter-14&#34;&gt;Excellence for Architects&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Architecture requirements in agile projects&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being able to formulate quality requirements appropriately for specific target groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to use agile concepts for architecture requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to use iterative approaches for continuous definition of architecture requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to effectively organise joint management, evaluation and prioritisation of requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowing and being able to explain urgency as a driving factor for architecture work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-4&#34;&gt;Agile Approaches&lt;/a&gt;, &lt;a href=&#34;#chapter-8&#34;&gt;Functional Features&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Designing and developing architectures in a team&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being able to use methods for making decisions in groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to support groups and teams in reaching decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to create the necessary prerequisites for team decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with architecture concepts for promoting local decision-making capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with methods for just-in-time architecture decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with ways of communicating architecture decisions in agile projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-4&#34;&gt;Agile Approaches&lt;/a&gt;, &lt;a href=&#34;#chapter-14&#34;&gt;Excellence for Architects&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reflection and feedback on architecture work in the agile context&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with techniques for joint reflection on architecture decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to find the reasons for specific architecture problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with feedback capabilities from the implementation and able to attribute results to architecture objectives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-6&#34;&gt;Errors and Smells&lt;/a&gt;, &lt;a href=&#34;#chapter-7&#34;&gt;Component Architecture&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Examples of agile architecture work&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with and understanding examples for decision-making procedures in agile projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with and understanding examples for agile architecture requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with physical characteristics of agile communication concepts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to understand the postponement of architecture decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with and understanding examples of agilely organised architecture groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;#chapter-14&#34;&gt;Excellence for Architects&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Care was taken that all the above aspects are handled over the SWAT course.
The main difference is the SWAT course has a more technical approach to agile architecture.
Communication, team findings techniques and documentation are discussed in &lt;a href=&#34;#chapter-4&#34;&gt;Agile Approaches&lt;/a&gt;, &lt;a href=&#34;#chapter-10&#34;&gt;Architecture Documentation&lt;/a&gt; and &lt;a href=&#34;#chapter-14&#34;&gt;Excellence for Architects&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Bachelor students have attended formal training in &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt; and had extensive team workshop to foster communication techniques.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h3&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_foundations&#34;&gt;Foundations&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Principles need to be taught at the beginning.
The students already know concepts such as &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID&#34;&gt;SOLID&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&#34;&gt;YAGNI&lt;/a&gt; from previous lectures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They can seldom apply these principles in their own code or semester projects.
Understanding why certain &lt;a href=&#34;https://en.wikipedia.org/wiki/Anti-pattern&#34;&gt;anti-patterns&lt;/a&gt; are often wrong is seldom observable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can only become a professional software architect if you are proficient in a technology stack.
You shall be a craftsman about how to write industrial grade source code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You know how to test it, deploy it, run it and maintain it.
You shall have knowledge of the idioms of your programming language and software design patterns at the component level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The students are motivated and eager to learn.
It takes time to establish the capabilities of a professional programmer and component designer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This time is missing in our SWAT lecture for the discussion of product software architecture themes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We are now defining an overall path for all students to achieve craftsmanship over their bachelor curriculum.
Students must write professional source code, master design at the component level, and understand agile techniques.
Approaches such as clean code, test-driven development, refactoring and infrastructure as code shall be studied material.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_design_and_architecture&#34;&gt;Design and Architecture&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Design concepts must be refined.
The students understand concepts such as patterns, micro-architecture, layered architecture.
They seldom formulate the technical and financial tradeoffs associated with a specific concept application
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Almost no student has experience with open source libraries.
They use them on a daily basis and never looked at the source code, provided an improvement, or read the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We are trying to formulate an approach to improve achieved goals.
We shall either build these concepts into project management lectures or in the semester theses.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_links&#34;&gt;Links&lt;/h3&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-architecture&#34;&gt;&lt;/a&gt;[1] Agile Architecture in the Digital Age.
Open Group. 2018&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;open-agile-architecture&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://pubs.opengroup.org/architecture/o-aa-standard-single/&#34;&gt;Open Agile Architecture&lt;/a&gt;.
Open Group. 2019. (ISBN: 1-947754-62-1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;enterprise-architecture&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2021/why-enterprise-architecture/&#34;&gt;Why Enterprise Architecture?&lt;/a&gt;.
Marcel Baumann. 20221&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-master-formation&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2021/scrum-master-formation&#34;&gt;Scrum Master Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;product-owner-formation&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;../../2021/product-owner-formation&#34;&gt;Product Owner Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-developer-formation&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;../../2021/scrum-developer-formation&#34;&gt;Scrum Developer Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-architecture-principles&#34;&gt;&lt;/a&gt;[7] &lt;a href=&#34;../../2019/agile-architecture-principles/&#34;&gt;Agile Architecture Principles&lt;/a&gt;.
Marcel Baumann. 2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-software-architecture&#34;&gt;&lt;/a&gt;[8] &lt;a href=&#34;../../2021/agile-software-architecture-is-mainstream/&#34;&gt;Agile Software Architecture is Mainstream&lt;/a&gt;
Marcel Baumann, 2021&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[1] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[2] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures&#34;&gt;&lt;/a&gt;[3] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Support Constant Change&lt;/em&gt;. O’Reilly Media [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491986360&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491986360&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;working-effectively-with-legacy-code&#34;&gt;&lt;/a&gt;[4] M. C. Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;. Prentice Hall, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0131177052&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0131177052&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[5] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[6] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[7] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-agile&#34;&gt;&lt;/a&gt;[8] R. C. Martin, &lt;em&gt;Clean Agile&lt;/em&gt;. Prentice Hall, 2020 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0135781868&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0135781868&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-craftsmanship&#34;&gt;&lt;/a&gt;[9] R. C. Martin, &lt;em&gt;Clean Craftsmanship&lt;/em&gt;. Addison-Wesley Professional, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B095C16LSW&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B095C16LSW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[10] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[11] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The main difference is the course has weighted more heavily on examples and exercises. Students learn better when they practice the theory
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Chosing a technical and financial tradeoff is the essence of an engineer work. These tradeoffs are often formulated in architecture design records &lt;em&gt;ADR&lt;/em&gt;.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Why Enterprise Architecture?</title>
      <link>https://blog.tangly.net/blog/2021/why-enterprise-architecture/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/why-enterprise-architecture/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why_enterprise_architecture&#34;&gt;Why Enterprise Architecture?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-07-02-head.jpg&#34; alt=&#34;2021 07 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture principles hold true in agile environments.
The major difference between older traditional approaches and modern agile ones is the way of performing enterprise architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The last years have shown a promising evolution of plan-based, centralist enterprise architecture approaches to more agile, decentralized, meritocracy driven processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These new approaches are way more compatible with modern and agile software product development framework such as &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt;, &lt;a href=&#34;http://www.extremeprogramming.org/&#34;&gt;eXtreme Programming&lt;/a&gt;, and &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Traditional processes use dedicated persons or departments to define architecture principles in a top-down approach.
Thick standards such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Enterprise_Architecture_Body_of_Knowledge&#34;&gt;Enterprise Architecture Body of Knowledge&lt;/a&gt; codifies wisdom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Guide to the Enterprise Architecture Body of Knowledge (EABOK) organizes and characterizes the knowledge content of the Enterprise Architecture (EA) discipline.
This organization and characterization promotes a consistent view of EA, establishes the scope and bounds of the EA discipline, and places the discipline in the context of related disciplines.
The EABOK subdivides EA into knowledge areas and topics within each area, presents an overview of the topic, and provides the reader references for further information.
The EABOK is a guide to EA, not the body of knowledge itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— EABOK
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The enterprise architects community has realized over the years that the centralist approach is too slow and cumbersome for the digital age.
The &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Open_Group&#34;&gt;Open Group&lt;/a&gt; promotes the official enterprise architecture method
&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Open_Group_Architecture_Framework&#34;&gt;TOGAF&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Open Group published a series of white papers &lt;a href=&#34;#agile-architecture&#34;&gt;[1]&lt;/a&gt;, &lt;a href=&#34;#open-agile-architecture&#34;&gt;[2]&lt;/a&gt; to bridge the gap between classical enterprise architecture and agile digital product development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile frameworks tend to define and promote agile receipts through collaborative structures.
Examples are &lt;a href=&#34;https://en.wikipedia.org/wiki/Community_of_practice&#34;&gt;Community of Practice&lt;/a&gt;, design workshop, event storming, pair designing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_concepts&#34;&gt;Concepts&lt;/h3&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-07-02-togaf.png&#34; alt=&#34;2021 07 02 togaf&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Enterprise_architecture&#34;&gt;Enterprise Architecture&lt;/a&gt; &lt;em&gt;EA&lt;/em&gt; , when performed in an agile manner, is an important enabler of agile software delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is true for several reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Common architecture enables agile teams to focus on value creation&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A common enterprise architecture enables reuse across delivery teams.
When agile teams have high-quality assets – such as micro-services, legacy data sources, and frameworks – they are able to focus on creating new value.
They should not waste money on reinventing new versions of existing infrastructure.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Common technical guidance enables greater consistency&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;When team follow effective, common conventions it results in greater quality.
This makes it easier to learn about assets that are new to them, in particular existing source code, and to evolve those assets as needed.
Greater consistency also makes it easier for people to move between teams.
It will be easier for them to come up to speed on what the new team is doing and to share their skills with those team members.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Agile architectures enable disaggregation&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;When your solutions are built from loosely coupled, highly cohesive components it is easier to spread development work across smaller teams.
This reduces overall risk and organizational complexity, which in turn reduces time-to-delivery.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Common infrastructure enables continuous delivery&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A common technical infrastructure empowers delivery teams to deploy into it.
The easier it is to deploy, the more often it makes sense to deploy.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Enterprise architecture scales agile&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An agile approach to enterprise architecture enables organizations to scale agile strategies “horizontally” across their entire IT department.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_the_ea_process&#34;&gt;The EA Process&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some methods will choose to prescribe a single approach.
Such as capturing architectural requirements in the form of epics or pre-building &lt;em&gt;architectural runways&lt;/em&gt;.
The agile toolkit promotes an adaptive, context-sensitive strategy.
A goal-driven approach that indicates the process decision points you need to consider.
Have a range of techniques or strategies for you to address each decision point, and the advantages and disadvantages of each technique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following diagram overviews the potential activities associated with &lt;em&gt;Agile Enterprise Architecture&lt;/em&gt;.
image::2021-07-02-entreprise-architecture-process.png[width=800,height=800,role=center]
The process decision points that you need to consider for enterprise architecture are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Support stakeholders&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enterprise architects will work with business and IT stakeholders on a regular basis to understand their needs and to help them develop a vision for the organization.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Support delivery teams&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enterprise architects will work with IT delivery teams, and ideally be active members of IT delivery teams, on a regular basis.
They may guide the teams in the business and technical roadmaps, help them to identify potentially reusable assets, to identify technical debt.
They should transfer their skills and knowledge to team members.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Negotiate technical dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Like it or not, there are dependencies between the solutions that we create.
For example, if your system invokes a web service, or calls an API, provided by another system then you have a dependency on that system.
Enterprise architects will often find that they need to negotiate these dependencies with other teams, either at a high-level in their role of Enterprise Architect or sometimes at a detailed level in their role of Architecture Owner on a delivery team.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Explore architectural views&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Organizations are complex and as a result they must be understood from a variety of view points.
It’s not just a matter of writing “architectural epics” on a collection of index cards.
The enterprise architecture team may choose to adopt, and likely tailor, an existing enterprise architecture framework.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Tailor the chosen architecture framework&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;These frameworks typically suggest a multi-view collection of artifacts to create and techniques for doing so.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Evolve enterprise architecture&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enterprise architects will collaborate with one another, and with their stakeholders, in a variety of ways.
They may choose to hold architecture envisioning/modeling sessions or regular meetings where they share learnings with one another.
They will often work together, or with IT delivery teams, to investigate new technologies or identify candidate architecture strategies.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Evolve roadmap(s)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An important output of your enterprise architecture effort will be one or more roadmaps.
They describe your technology strategies and your architectural strategies.
The roadmaps are updated in a rolling wave approach where the roadmap(s) are updated regularly.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Capture enterprise architecture&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;There are two broad categories for how enterprise architects can capture their work: as documents or as working/executable examples.
High-level models work well for the documentation.
Executable artifacts, such as executable reference architectures or architectural runways, are usually preferred over documentation by delivery teams.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Govern architecture&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Architectural activities within your organization should be governed in a lightweight, collaborative manner.
This is an important activity for enterprise architects as well as for your IT governance team.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_team_workflow&#34;&gt;Team Workflow&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The workflow within an agile enterprise architecture team is depicted in the following diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-07-02-team-workflow.jpg&#34; alt=&#34;2021 07 02 team workflow&#34; width=&#34;800&#34; height=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are four major activities:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Envision initial architecture&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The enterprise architects will spend several days developing initial, high-level models of the enterprise architecture.
This will be a face-to-face, initial architecture envisioning session where the scope is the entire organization, not just a single IT solution.
Ideally this is done in an agile modelling room to streamline the communication and collaborative modelling efforts.
Such a room is large with lots of whiteboard space, enabling the team to work on several models in parallel (each of which has its own section of wall space).
The primary purpose of this session is for the EA team to develop a common understanding, at least a high level, of the current state of the enterprise architecture and a vision for how the team would like to see it evolve.
Secondary outcomes include creating some initial artifacts.
The enterprise architects will evolve these artifacts over time, meeting one another for the first time, and building bonds between the team members.
Potential challenges to this activity include getting an agile modeling room, and the logistics of getting the right people together at the same time.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Collaborate with business stakeholders&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;On a regular basis enterprise architects work with business stakeholders to understand their needs.
They work with them to envision the future, and help educate them on the possibilities and constraints of technology.
This collaboration may be in the form of working sessions, presentations, or one-on-one conversations.
These sessions occur as needed and at times it can be difficult to gain access to stakeholders as they are often very busy people.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Collaborate with IT stakeholders&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Disciplined agile EAs will spend the majority of their time, 80 to 90% of it typically, working as members of IT delivery teams.
By doing this they bring their knowledge, vision, and skills to the team in a pragmatic, hands-on manner.
The teams will often take on the role of &lt;em&gt;architecture owners&lt;/em&gt;.
Enterprise architects will also work with other IT stakeholders, including operations engineers, support staff, the data management team.
They need to understand their needs.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Evolve architecture assets&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The enterprise architecture team, or at least the portion of the team who is currently available, will meet on a regular basis.
They evolve the enterprise architecture assets based on their learnings.
A common pattern we have seen it for the team to meet every Friday afternoon for two hours.
They discuss what they’ve learned that week from working on delivery teams and working with their various stakeholders.
The result of the meeting is often that the enterprise architects may take on action items to update existing artifacts.
These artifacts may include EA models, reference architectures, development guidelines, white papers.
When a new major topic arises, such as the potential adoption of a new platform or a merger with another organization, they schedule agile modelling sessions.
They explore the newly discovered topics during these sessions.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h3&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-07-02-aeaf.png&#34; alt=&#34;2021 07 02 aeaf&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Various organizations are trying to redefine enteprise architecture in the context of agile approaches.
Such an example would be the &lt;em&gt;Agile Enterprise Architecture Framework&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Often you see the tension between more agility and the drag of traditional complex enterprise architecture frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The regular enterprise architecture frameworks are too complicated to be applied in nimble product development.
The approach is cumbersome and slow.
The processes are based on the assumption documents are written and later a group of experts review them.
Agile approaches are too nimble and fast to mesh with such workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The techniques used in these frameworks are powerful ones.
Software designers should master and use them accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly prefer the architecture work techniques described in &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt;.
The &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt; framework uses good practices to improve architecture and design.
Their approach is highly compatible with agile practices and speed of development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I do not use the bloated TOGAF architecture standard.
I also avoid bloated agile methodologies such as &lt;a href=&#34;https://www.scaledagileframework.com/&#34;&gt;SAFe&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I recommend using all these proven architecture techniques and tools.
Apply them on your software product development using agile approaches like &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt; and &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Study the rules of &lt;a href=&#34;https://en.wikipedia.org/wiki/Lean_software_development/&#34;&gt;Lean Software Development&lt;/a&gt; to optimize the value of your product.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_links&#34;&gt;Links&lt;/h3&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-architecture&#34;&gt;&lt;/a&gt;[1] Agile Architecture in the Digital Age.
Open Group. 2018&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;open-agile-architecture&#34;&gt;&lt;/a&gt;[2]
&lt;a href=&#34;https://pubs.opengroup.org/architecture/o-aa-standard-single/&#34;&gt;Open Agile Architecture&lt;/a&gt;.
Open Group. 2019. (ISBN: 1-947754-62-1)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Software Architecture is Mainstream</title>
      <link>https://blog.tangly.net/blog/2021/agile-software-architecture-is-mainstream/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/agile-software-architecture-is-mainstream/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_software_architecture_is_mainstream&#34;&gt;Agile Software Architecture is Mainstream&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-head.jpg&#34; alt=&#34;2021 03 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Slowly, slowly major actors in the software architecture landscape acknowledge agile development is state of the industry approach to building software products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They are still struggling to integrate their older views in a faster, iterative, incremental development approach.
The duration of a regular Scrum sprint is usually two weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More important, they have discovered we build products because no customers buy projects.
They buy solutions and products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I am relieved I need less fight to convince enterprise architects that agile is the way.
The big names &lt;a href=&#34;https://www.pmi.org/&#34;&gt;&lt;em&gt;Project Management Institute&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.opengroup.org/&#34;&gt;&lt;em&gt;Open Group&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.isaqb.org/&#34;&gt;&lt;em&gt;iSAQB&lt;/em&gt;&lt;/a&gt;
have at last an agile architecture offering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If pushed, they acknowledge agile development is mainstream and used in the overwhelming majority of complex product development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have learnt it is difficult to concede and congratulate the winning party.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Look at the president of the United States of America &lt;a href=&#34;https://en.wikipedia.org/wiki/Donald_Trump&#34;&gt;Donald Trump&lt;/a&gt; to have a well-documented case of a loser trying all lies and tricks to avoid reality.
Not long ago, the tobacco industry did the same as professional liars.
And we still have climate change deniers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We show mercy to all the software architecture and designer traditionalists who needed almost twenty years to acknowledge the supremacy of agile approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Laggards, please bow and embrace modern software development approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_pmi_and_disciplined_agile_delivery&#34;&gt;PMI and Disciplined Agile Delivery&lt;/h3&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-dad.jpg&#34; alt=&#34;2021 03 03 dad&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;PMI realized a few years ago, their standard approach to project management was losing ground in the software industry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first step was the &lt;em&gt;PMI Agile Certified Practitioner&lt;/em&gt; certification to test what agile is.
They never really integrated it with their other certifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The coup was their acquisition of &lt;em&gt;Disciplined Agile Delivery&lt;/em&gt; in the second half of 2019.
The &lt;a href=&#34;https://en.wikipedia.org/wiki/Disciplined_agile_delivery&#34;&gt;DAD&lt;/a&gt; approach has been around since 2015 and had some success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The framework has a complexity sympathetic to PMI.
The roots of a lot of DaD concepts can be found in &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_Unified_Process&#34;&gt;Rational Unified Process&lt;/a&gt; &lt;em&gt;RUP&lt;/em&gt;.
It is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Iterative_and_incremental_development&#34;&gt;Iterative and Incremental Development&lt;/a&gt; methodology.
RUP is certainly not agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The founder of DAD &lt;a href=&#34;https://en.wikipedia.org/wiki/Scott_Ambler&#34;&gt;Scott W. Ambler&lt;/a&gt; has a long history with the Unified Modeling Language and CMM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anyway, it is a huge step for PMI to move away from traditional heavy project development methods and embrace somehow agile product development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_open_group_and_open_agile_architecture_initiative&#34;&gt;Open Group and Open Agile Architecture Initiative&lt;/h3&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-open-group-agile.png&#34; alt=&#34;2021 03 03 open group agile&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The open group has stewardship for the TOGAF enterprise architecture standard and training.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The open group has started to discuss the future of software architecture and agile approaches with a white paper second half of 2019.
They published a first potential approach to &lt;a href=&#34;https://pubs.opengroup.org/architecture/o-aa-standard-single/&#34;&gt;agile software architecture&lt;/a&gt; end of 2020.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach is quite rough.
It is more a collection of ideas available in various approaches and ideas picked from the Internet.
The fact they recognized the necessity to have an agile solution is encouraging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-open-agile-architecture.png&#34; alt=&#34;2021 03 03 open agile architecture&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The open agile architecture shows they are at the very beginning of their journey.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They will have to compromise and find a way to integrate TOGAF ideas with agile concepts.
I am not sure the result will be pretty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The concepts and techniques defined in TOGAF are reasonable.
The official process how to implement them is flawed.
You cannot work with short iterations and incrementally improve your solution upon discovering new facts in a timely and efficient manner.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_isaqb_agile_software_architecture&#34;&gt;iSAQB Agile Software Architecture&lt;/h3&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-isaqb.jpg&#34; alt=&#34;2021 03 03 isaqb&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The German software architecture bastion has finally fallen.
&lt;a href=&#34;https://www.isaqb.org/&#34;&gt;iSAQB&lt;/a&gt; provides an
&lt;a href=&#34;https://www.isaqb.org/certifications/cpsa-certifications/cpsa-advanced-level/agila-agile-software-architecture/&#34;&gt;advanced level module&lt;/a&gt; for agile software architecture.
Their proposal of the module is described below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The participants learn how to design, develop and further develop software systems and architectures in accordance with agile principles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On one hand, the module covers the application of agile principles and concepts to architecture work.
On the other hand, expedient anchoring of architecture practices in an agile approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The development of architectures in projects with self-sufficient teams or shared responsibilities demands new skills and capabilities on the part of developers and architects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We cover technical as well as methodical and also communicative aspects, which are addressed here all theoretically and in practical exercises.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above statements are quite shallow.
I hope they will add more material in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_agile_requirements_engineering&#34;&gt;Agile Requirements Engineering&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interestingly, the requirement community is further on the path to agility.
The most relevant organization is Europe is the &lt;a href=&#34;https://www.ireb.org/&#34;&gt;International Requirements Engineering Board&lt;/a&gt; &lt;em&gt;IREB&lt;/em&gt;.
The organization offers two certifications with emphasis on agile approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RE@Agile Primer - Bridging the gap between RE and Agile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Level RE@Agile - is part of the advanced CPRE AL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_agile_testing_engineering&#34;&gt;Agile Testing Engineering&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interestingly, the quality insurance and testing community are further on the path to agility.
The most relevant organization is Europe is the &lt;a href=&#34;https://www.https://www.istqb.org/&#34;&gt;International Software Testing Qualifications Board&lt;/a&gt; &lt;em&gt;ISTQB&lt;/em&gt;.
The organization offers a whole set of certifications with emphasis on agile approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Foundation Level Agile Tester&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Level Agile Test Leadership at Scale&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Level Agile Technical Tester&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A nice bonus is that &lt;em&gt;IREB&lt;/em&gt; and &lt;em&gt;ISTQB&lt;/em&gt; work together to align their terminology and approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Architecture within Scrum</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-within-scrum/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-within-scrum/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_architecture_within_scrum&#34;&gt;Agile Architecture within Scrum&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-08-01-head.jpg&#34; alt=&#34;2019 08 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are applying the agile, lean approach to your software product development.
Your teams use Scrum or Kanban to deliver running software every two weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile architecture is a key element to improve the quality of your solution and reduce overall cycle-time of your product delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your journey toward greater business agility starts by identifying what outcomes are most important to your company’s success.
Outcomes are codified in functional and non-functional requirements your product shall fulfill.
A key component is to find out how to create a great resilient architecture within the Scrum framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What Is Agile Architecture?
An agile architecture shall have four characteristics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-08-01-architecture.jpg&#34; alt=&#34;2019 08 01 architecture&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Allow change quickly&lt;/em&gt; because we cannot foresee the future.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Always verifiable&lt;/em&gt; because we want changes without impeding integrity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Support rapid development&lt;/em&gt; because we want effective and efficient implementation of new features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Always working&lt;/em&gt; because we want continuous deployment to have customers&amp;#39; feedback -.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These characteristics are essential for successful agile development of great software products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_what_is_the_scrum_approach&#34;&gt;What Is The Scrum Approach?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Scrum and the &lt;a href=&#34;https://scrumguides.org/scrum-guide.html&#34;&gt;Scrum Guide&lt;/a&gt; are silent how architecture activities are performed during sprints.
We can use the Scrum values, the &lt;a href=&#34;https://www.scrumguides.org/scrum-guide.html&#34;&gt;Scrum Guide&lt;/a&gt; and the
&lt;a href=&#34;https://agilemanifesto.org/principles.html&#34;&gt;Agile Manifesto Principles&lt;/a&gt; to infer approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The architect shall be part of the Scrum development team.
This is the most embedded way an architect would fit into a Scrum team.
It may not even be an individual who has the title of an architect.
The big idea behind Scrum teams is that team members have different skills.
Their roles may change to deliver what is required for a particular sprint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So it could be that senior developers within the team got architecture skills.
They are in the best position, or have the best knowledge, to make those architectural decisions.
Those team members with architectural skills are involved in the sprint on a day-to-day basis.
They attend the daily Scrum meetings, take items off the backlog, and work on them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interestingly &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt; is more opinionated and describe
&lt;a href=&#34;https://less.works/less/technical-excellence/architecture-design.html&#34;&gt;Successful Approaches&lt;/a&gt; for agile architecture and design.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_how_do_you_perform_agile_design&#34;&gt;How Do You Perform Agile Design?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Scrum is quite silent about technical practices.
The Scrum fathers and community strongly emphasize adopting &lt;a href=&#34;https://en.wikipedia.org/wiki/Extreme_programming&#34;&gt;eXtreme Programming&lt;/a&gt; practices.
For bigger systems use the good practices described in &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An actual very good practice is to use &lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34;&gt;Event Storming&lt;/a&gt; and
&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Design&lt;/a&gt; &lt;em&gt;DDD&lt;/em&gt; to model the application domain and partition the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use &lt;a href=&#34;https://www.thoughtworks.com/insights/blog/fitness-function-driven-development&#34;&gt;fitness functions&lt;/a&gt;
to monitor and validate all non-functional requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The well-established practices from the object-oriented and DevOps communities are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Develop very early a working skeleton.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean architecture implies clean code and requires clean coders in your team.
See our post &lt;a href=&#34;../../2019/agile-code-is-clean-code/&#34;&gt;Clean Code&lt;/a&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aggressive refactoring and understand technical debt, Continuous integration, continuous delivery, and continuous deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For a detailed discussion, consult the post &lt;a href=&#34;../../2018/pragmatic-craftsmanship-professional-software-developer/&#34;&gt;Pragmatic Craftsmanship&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_what_is_the_architect_role&#34;&gt;What is the Architect Role?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The architect shall&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Be part of the team, work daily with team members and attend all team events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maintain the pace of development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Often Communicate and early as a coach and mentor - &lt;em&gt;meaning pair programming and design sessions&lt;/em&gt; -.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be fluent in domain-driven development, hexagonal architecture, refactoring, and clean code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use architecture design record ADR and light documentation to describe architecture decisions - meaning no lengthy Software Architecture Document SAD or overwhelming UML models -.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be a master programmer and writes code in the application technological stack.
He writes actual source code as current good practices are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have rich knowledge of architecture and design.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have mentioned refactoring, which is how we evolve an ever-improving design and architecture while building the product incrementally.
To do that, we need to know the difference between good architecture and design and not-so-good.
We need a rich pool of architecture and design options in our bag of tricks, ranging from very simple options to the more complex and rich options that we may need as the system grows.
One never knows too much about the quality of architecture, code, and design.
One does, of course, need to apply that knowledge smoothly, incrementally, little by little.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_agile_architecture_series&#34;&gt;Agile Architecture Series&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The agile architecture track contains the following blogs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also published our &lt;a href=&#34;https://www.tangly.net/insights/continuous-learning/agile-architecture-course&#34;&gt;agile architecture course&lt;/a&gt; (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Architecture Principles</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-principles/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-principles/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_architecture_principles&#34;&gt;Agile Architecture Principles&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-05-01-head.jpg&#34; alt=&#34;2019 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are applying the agile, lean approach to your software product development.
Your teams use Scrum or Kanban to deliver running software every two weeks.
The product market introduction is a success.
You will successfully sell the solution for the next ten years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How shall you define the software architecture of your product and insure a long living and high-quality solution?
The experts tell you the design is emergent.
What does it mean?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_less_architecture_observations&#34;&gt;LeSS Architecture Observations&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following observations are true for any software product.
It is irrelevant if developed using agile approaches or traditional older ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;The sum of all source code artifacts is the true design blueprint or software architecture&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The real software architecture evolves (better or worse) every day of the product, as people do programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;real living architecture needs to be grown every day&lt;/em&gt; through acts of programming by master programmers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A software architect who is not in touch with the evolving source code of the product is out of touch with reality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Every programmer is some kind of architect&lt;/em&gt; — whether wanted or not.
Every act of programming is some kind of architectural act — good or bad, small or large, intended or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile architecture comes from the behavior of agile architecting&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hands-on master-programmer architects, a culture of excellence in code,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ban emphasis on pair-programming coaching for high-quality code/design,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;agile modeling design workshops,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;test-driven development and refactoring&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and other hands-on-the-code behaviors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_quality_of_your_architecture&#34;&gt;Quality of Your Architecture&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall measure the quality of your design and produced software artifacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static analysis tools - validate your source code -,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test driven development - validate your design -,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acceptance test driven development - validate your functional requirements -,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fitness functions - validate your non-functional requirements -,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pair programming - improve the produced artifacts through wisdom of the crowd -,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pair review and pull requests - validate your developers&amp;#39; work -.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above validation activities are backed through tools.
But these tools can only detect non-quality and never provide a proof you achieved quality.
Qualified and experienced engineers are your best guaranty to achieve and sustain high quality in architecture and software products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement the above measures to gather data and publish the actual state of your source code.
You find further information in Code Scene as Crime Scene, SonarLint for the Impatient, and Pragmatic Craftsmanship articles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://less.works/less/technical-excellence/architecture-design.html&#34;&gt;LeSS architecture page&lt;/a&gt; for a comprehensive discussion of agile architecting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_good_versus_bad_architecture&#34;&gt;Good versus bad architecture&lt;/h3&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A good architecture fulfills the specifications and is easy to change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It shall emerge during the development and intentionally implement the known requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your architects are talented developers and are full members of your Scrum teams.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your development teams&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;are experts in the used programming language and stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;understand object-oriented, functional and rule-based programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;known all major patterns and idioms of the used development stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;practice &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development&#34;&gt;ATDD&lt;/a&gt;, clean code, refactoring, embrace CI/CD and DevOps,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read source code from open source projects to learn better ways.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;know &lt;a href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;&gt;SMART&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/INVEST_(mnemonic)&#34;&gt;INVEST&lt;/a&gt;,
&lt;a href=&#34;https://de.wikipedia.org/wiki/Solid_(Software)&#34;&gt;SOLID&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&#34;&gt;YAGNI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hold weekly design workshops with huge whiteboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;domain driven design&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34;&gt;event storming&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Big_Design_Up_Front&#34;&gt;BDUF&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall keep it simple, make it valuable, and build it piece by piece.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above hints and practices shall empower your teams to practice successfully agile architecture and timely deliver delightful software solutions.
Your organization shall train your collaborators, see also Shu Ha Ri model.
Smart money goes in training your collaborators.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_agile_architecture_series&#34;&gt;Agile Architecture Series&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The agile architecture track contains the following blogs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also published our &lt;a href=&#34;https://www.tangly.net/insights/continuous-learning/agile-architecture-course&#34;&gt;agile architecture course&lt;/a&gt; (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Architectural Decision Records ADR</title>
      <link>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_architectural_decision_records_adr&#34;&gt;Architectural Decision Records ADR&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-07-01-head.jpg&#34; alt=&#34;2018 07 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture Decision Record ADR is a compact and traceable documentation of all important decisions taken during the realization of a product.
Use &lt;a href=&#34;https://asciidoc.org/&#34;&gt;asciidoc&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown/&#34;&gt;Markdown&lt;/a&gt; and Git to have an agile and lean documentation of your major decisions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The huge advantage of Architecture Design Record &lt;em&gt;ADR&lt;/em&gt; is the timeline of the decisions.
It tremendously helps to understand the technical changes during the product lifecycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please try architecture design records to document your key decisions when developing your software product.
Feel free to identify better approaches&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_definition&#34;&gt;Definition&lt;/h3&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An Architectural Decision (AD) is a software design choice that addresses a functional or non-functional requirement that is architecturally significant.
A decision can be documented in an architecture design record (ADR).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In each ADR file, write these sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Title&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;short present tense imperative phrase, less than 50 characters, like a git commit message.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Status&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;proposed, accepted, rejected, deprecated, superseded&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Context&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;what is the issue that we’re seeing that is motivating this decision or change.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Decision&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;what is the change that we’re actually proposing or doing.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Consequences&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;what becomes easier or more difficult to do because of this change.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use asciidoc format to write all our architecture design records.
You can add to the same git repository as the product, visualize differences and if desired generate a nice looking document.
And my IDE IntelliJ IDEA has a nice plugin for this format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before using ADR I documented the decision changes as footnote in a Microsoft Word document.
The ADR approach is way more legible and easier to trace with the help of git repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_title&#34;&gt;Title&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These documents have names that are short noun phrases.
For example, &amp;#34;ADR 1: Deployment on Ruby on Rails 3.0.10&amp;#34; or &amp;#34;ADR 9: LDAP for Multiple tenant Integration&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_context&#34;&gt;Context&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This section describes the forces at play, including technological, political, social, and product local.
These forces are probably in tension, and should be called out as such.
The language in this section is value-neutral.
It is simply describing facts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_decision&#34;&gt;Decision&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This section describes our response to these forces.
It is stated in full sentences, with active voice.
&amp;#34;We will …​&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_status&#34;&gt;Status&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A decision may be &amp;#34;proposed&amp;#34; if the product stakeholders haven’t agreed with it yet, or &amp;#34;accepted&amp;#34; once it is agreed.
If a later ADR changes or reverses a decision, it may be marked as &amp;#34;deprecated&amp;#34; or &amp;#34;superseded&amp;#34; with a reference to its replacement(s).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The status and the graph of related decisions can be tracked and visualize using tools.
You can also track your decisions without any tools, a regular product has often less than hundred decisions.
And you can always write a small parse utility to extract your dependency graph.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_consequences&#34;&gt;Consequences&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This section describes the resulting context, after applying the decision.
All consequences should be listed here, not just the &amp;#34;positive&amp;#34; ones.
A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and product in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_tips_and_tricks&#34;&gt;Tips and Tricks&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The whole document describing an ADR should be one or two pages long.
We will write each ADR as if it is a conversation with a future developer.
This requires good writing style, with full sentences organized into paragraphs.
Bullets are acceptable only for visual style, not as an excuse for writing sentence fragments (Bullets kill people, even PowerPoint bullets).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The cost of undocumented decisions is hard to measure, but the effects usually include duplicated efforts.
Other engineers try to solve the same problems or competing solutions (two third-party libraries that do the same thing).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach is very similar to how you would document a software pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Believe and respect is the prime directive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Norman Kerth
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
