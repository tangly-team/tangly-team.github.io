<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Students-Java on tangly Components</title>
    <link>https://blog.tangly.net/tags/students-java/</link>
    <description>Recent content in Students-Java on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/tags/students-java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Structure Your Concurrency</title>
      <link>https://blog.tangly.net/blog/2024/structure-your-concurrency/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/structure-your-concurrency/</guid>
      <description>Writing concurrent software is one of the greatest challenges for software developers [1, 2].&#xA;A professional software developer must understand the principles of concurrent programming and the tools available to write concurrent software.&#xA;Only concurrent applications can access all cores of modern multicore processors and provide the best performance.&#xA;Java thread model makes it a strong contender among concurrent languages, but multithreading has always been inherently tricky.&#xA;The introduction of virtual threads empowered Java to provide a unique and highly-optimized threading system that is also easy to understand.</description>
    </item>
    <item>
      <title>Nice Statechart Diagrams</title>
      <link>https://blog.tangly.net/blog/2024/nice-statechart-diagrams/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/nice-statechart-diagrams/</guid>
      <description>What are statecharts, also called hierarchical state machines?&#xA;Put simply, a statechart is a beefed-up state machine [1] [2]. The syntax is formally defined in the UML standard.&#xA;The beefing up solves a lot of the problems that state machines have, especially state explosion that happens as state machines grow.&#xA;We explain below what statecharts are and how they are useful.&#xA;Statecharts offer a surprising array of benefits:&#xA;It is easier to understand a statechart than many other forms of code.</description>
    </item>
    <item>
      <title>Java Modules</title>
      <link>https://blog.tangly.net/blog/2024/java-modules/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/java-modules/</guid>
      <description>Java 9 introduces a new level of abstraction above packages, known as the Java Platform Module System JPMS, or Modules for short [1].&#xA;Modules emphasize at compilation time modern software engineering principles such as encapsulation, and modularity [2, 3, 4].&#xA;Java 9 was released in September 2017.&#xA;Most Java developers are still not using this powerful and elegant construct to modularize their applications.&#xA;Modules A module is a group of closely related Java packages and resources along with a new module descriptor file.</description>
    </item>
    <item>
      <title>Advanced Streams</title>
      <link>https://blog.tangly.net/blog/2024/advanced-streams/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/advanced-streams/</guid>
      <description>The Java Stream API is a powerful and simple to understand set of tools for processing sequences of elements. The standard collections were retrofitted with the stream() method, which allows us to convert any collection to a stream.&#xA;Modern Java code has almost no loops and conditional statements. It relies on the Stream API and the functional programming style to implement algorithms.&#xA;When used properly, it allows us to reduce a huge amount of boilerplate code, create more readable programs, and improve productivity [1, 2].</description>
    </item>
    <item>
      <title>Data Classes, Sealed Types and Pattern Matching</title>
      <link>https://blog.tangly.net/blog/2024/data-classes-sealed-types-and-pattern-matching/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/data-classes-sealed-types-and-pattern-matching/</guid>
      <description>Records, sealed types, enumerations are the key language features for Algebraic Data Types.&#xA;The features have been available since Java 17.&#xA;Latter JDK releases provide additional capabilities and syntactic sugar.&#xA;Based on the features of JDK 22, we are still missing with constructors for records and primitive support for pattern matching [1].&#xA;Pattern matching capabilities empower the developer to implement complex algorithms in a compact and legible way.&#xA;Patterns such as visitor pattern are obsolete.</description>
    </item>
  </channel>
</rss>
