<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on tangly Components</title>
    <link>https://blog.tangly.net/tags/design/</link>
    <description>Recent content in Design on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yet Another Hybrid Method</title>
      <link>https://blog.tangly.net/blog/2022/yet-another-hybrid-method/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/yet-another-hybrid-method/</guid>
      <description>SoDa Software Development Agile is a homebrew project development method created at the technical university of Lucerne. It is a mixture of Waterfall, RUP and Scrum approaches. It uses a distorted Scrum for the concept and implementation phase[2].&#xA;The documentation was not updated the last ten years. The approach is clinically dead and should not be promoted for active software development efforts.&#xA;A similar approach exists with the official governmental Swiss project method HERMES.</description>
    </item>
    <item>
      <title>Immutability in Java</title>
      <link>https://blog.tangly.net/blog/2022/immutability-in-java/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/immutability-in-java/</guid>
      <description>Immutability is a powerful and simple concept in programming theory that is strangely underused.&#xA;An immutable object is simply a class whose instances cannot be modified. This is in contrast to a mutable object or changeable object, which can be modified after it is created.&#xA;Immutable objects are also useful because they are inherently thread-safe. Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects</description>
    </item>
    <item>
      <title>Technical Debt</title>
      <link>https://blog.tangly.net/blog/2022/technical-debt/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/technical-debt/</guid>
      <description>The technical debt or code debt is a concept in software development that reflects the implied cost of additional rework. The rework is caused by choosing an easy limited solution now instead of using a better approach that would take longer to realize.&#xA;Another source of technical debt is natural technical obsolescence.&#xA;As with monetary debt, if technical debt is not repaid, it accumulates interest, making it harder and harder to implement changes.</description>
    </item>
    <item>
      <title>Improving a Static Web Site Build With Hugo and Docsy</title>
      <link>https://blog.tangly.net/blog/2021/improving-a-static-web-site-build-with-hugo-and-docsy/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/improving-a-static-web-site-build-with-hugo-and-docsy/</guid>
      <description>The static website build tool Hugo is awesome. With the extensive built-in feature set of Hugo and the feature-rich text formatting options that Asciidoc offers, it creates a blogging experience composed of easy content management and fun writing experience.&#xA;In most static site generators including Hugo, Markdown is the one and only first-class citizen when it comes to creating posts.&#xA;However, in recent Hugo versions, external helpers are an official feature.</description>
    </item>
    <item>
      <title>MicroStream 4.x</title>
      <link>https://blog.tangly.net/blog/2021/microstream-4.x/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/microstream-4.x/</guid>
      <description>MicroStream approach empowers Java developers. The library provides a cool and compact approach to persist complex data models. You can persist your whole data model with less than a hundred lines of code. The library is efficient and works reliably.&#xA;Modern architectures based on bounded domains and Domain Driven Design are supported.&#xA;The company behind the product has promised to open source their product beginning of 2021.&#xA;I use the library to prototype bounded domain implementations requiring persistent data.</description>
    </item>
    <item>
      <title>Meaningful Identifiers</title>
      <link>https://blog.tangly.net/blog/2021/meaningful-identifiers/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/meaningful-identifiers/</guid>
      <description>Identifiers are a key concept to successfully model complex business domains. They permeate how our modern civilization functions.&#xA;Could you imagine a country without a car registration number of vehicles, internet addresses, postal addresses or social security numbers?&#xA;Identifiers are identifiers.&#xA;Identifiers cannot be changed at any time.&#xA;Updating identifiers means introducing mapping relations between the old and the new values.&#xA;In computer science, identifiers IDs are lexical tokens that name entities.</description>
    </item>
    <item>
      <title>Value Objects as Embedded Entities</title>
      <link>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</guid>
      <description>This post discusses the value object pattern, and the factory pattern, which are tactical patterns in the domain-driven design Domain-Driven Design approach.&#xA;Value objects represent typed values that have no conceptual identity in your domain. They can help you write better codes that are less error-prone, more performant and more expressive.&#xA;Value objects define the second kind of domain objects besides entities. Their main characteristic is immutability:&#xA;Attributes of a value object never change.</description>
    </item>
    <item>
      <title>Support Comments for Static Hugo Website</title>
      <link>https://blog.tangly.net/blog/2020/support-comments-for-static-hugo-website/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/support-comments-for-static-hugo-website/</guid>
      <description>There are times in software when you are facing a problem, you find an off-the-shelf solution, and a few lines of code later it just works.&#xA;Today I lived one of those moments.&#xA;The whole configuration of comments and modification of the Docsy theme took around one hour.&#xA;Motivation I wanted to add a comment section to this blog for a while. I was reluctant to implement one myself the classical way, using an external service such as disqus.</description>
    </item>
    <item>
      <title>Reference Codes</title>
      <link>https://blog.tangly.net/blog/2020/reference-codes/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/reference-codes/</guid>
      <description>Reference codes are an old concept. They are often used in the relational database schema definition as enumeration values. The database specialists often call them lookup tables.&#xA;Reference codes are dynamic enumeration values. By dynamic, we mean you can add values without recompiling the source code.&#xA;In modern DevOps environments where deployment of a new version is performed in minutes, this advantage is somewhat shallow. We view reference codes more as strongly typed and efficient tags.</description>
    </item>
    <item>
      <title>Creating a technical Website with Hugo and Asciidoc</title>
      <link>https://blog.tangly.net/blog/2020/creating-a-technical-website-with-hugo-and-asciidoc/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/creating-a-technical-website-with-hugo-and-asciidoc/</guid>
      <description>I hosted my technical blogs on blogger for years.&#xA;If I correctly remember, I started to use blogger ten years ago. It was a good choice at that time.&#xA;I could easily write blogs and publish them.&#xA;It is a great tool with some drawbacks. Over the years, the deficiencies sting more and more&#xA;The major drawbacks are:&#xA;Their editor is brittle, with limited functionality and unreliable. The generated HTML is not legible and does not support concepts such as micro fragments, meta information or simple functions such as source code highlighting.</description>
    </item>
    <item>
      <title>The power of Tags and Comments</title>
      <link>https://blog.tangly.net/blog/2020/the-power-of-tags-and-comments/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/the-power-of-tags-and-comments/</guid>
      <description>A software architect models customer domains and maps them to excellent software constructs. The solution shall support future customer groups and expand to store additional information.&#xA;Tags, also called labels, provide an informal ontology to classify customer data.&#xA;Tags are extensible and are machine-readable.&#xA;Comments empower users to store relevant unstructured information.&#xA;Comments are only for human beings.&#xA;What are good approaches to provide searchable tags and labels and avoid wild growth of useless records?</description>
    </item>
    <item>
      <title>Entities, Identifiers, External identifiers and Names</title>
      <link>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</guid>
      <description>A software architect models customer domains and maps them to powerful software abstractions [1]. Soon you correlate internal efficient identifiers, meaningful external identifiers, and domain entities.&#xA;You enjoy long conversations with the enterprise data architect and identify the system owning a specific external identifier.&#xA;How do you relate to external systems and communicate with other companies?&#xA;How do you define internal identifiers, which grow with application success?&#xA;How can you bridge the customer world with your software solution?</description>
    </item>
    <item>
      <title>A Journey Implementing Digital Invoices</title>
      <link>https://blog.tangly.net/blog/2020/a-journey-implementing-digital-invoices/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/a-journey-implementing-digital-invoices/</guid>
      <description>Our company has the ambition to digitize all our workflows since our inception. We proudly state we never bought a printer or a fax machine. Analog machines should become obsolete in the digital age.&#xA;Companies should be more environment-aware and save some trees. See our blog on A Journey to Be a Digital Company.&#xA;Switzerland finally introduced a digital payment slip. It uses a QR code and still assumes you need to print it.</description>
    </item>
    <item>
      <title>Legacy Systems Refactoring</title>
      <link>https://blog.tangly.net/blog/2020/legacy-systems-refactoring/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/legacy-systems-refactoring/</guid>
      <description>In computer programming and software design, code refactoring is the process of restructuring existing computer code without changing its external behavior.&#xA;Refactoring is intended to improve the design, structure, or implementation of the software (its non-functional attributes), while preserving its functionality.&#xA;Using refactoring, you can take bad design, even chaos software and rework it into well-designed code. Most often, it is cheaper to refactoring a legacy application instead of rewriting it from scratch.</description>
    </item>
    <item>
      <title>Agile Component Design</title>
      <link>https://blog.tangly.net/blog/2020/agile-component-design/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/agile-component-design/</guid>
      <description>You are an experienced programmer. You master your primary technology stack and systematically write clean code.&#xA;Your team recognized your merits and asked you to take ownership of whole packages in the application.&#xA;You are now responsible for creating or modifying a software component in your current application.&#xA;This is a design activity.&#xA;How can you create a good, legible, maintainable component architecture?&#xA;How can you validate your functional and non-functional requirements?</description>
    </item>
    <item>
      <title>Agile Architecture Principles</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-principles/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-principles/</guid>
      <description>You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks. The product market introduction is a success. You will successfully sell the solution for the next ten years.&#xA;How shall you define the software architecture of your product and ensure a long living and high-quality solution?&#xA;The experts tell you the design is emergent.</description>
    </item>
    <item>
      <title>Code Scene as Crime Scene</title>
      <link>https://blog.tangly.net/blog/2019/code-scene-as-crime-scene/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/code-scene-as-crime-scene/</guid>
      <description>You have a successful product and happy users. Slowly, the cost of adding new features is creeping up and product margins are shrinking. Which crimes did put us in this dreaded situation?&#xA;How can you analyze the history of your product’s source code?&#xA;How can you explore the social dimension of your product development? How can you find good approaches to increase time to market and improve development costs?</description>
    </item>
    <item>
      <title>You Need an Engineering Culture</title>
      <link>https://blog.tangly.net/blog/2019/you-need-an-engineering-culture/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/you-need-an-engineering-culture/</guid>
      <description>Agile approaches are not enough. You need a strong engineering culture to achieve quality and lasting success.&#xA;Often, coaches and Scrum masters tinker with the processes and invest effort and blood to improve the ceremonies and the company structure.&#xA;But at the end of the day, the success of your application is defined by its adequacy to customer needs and its overall quality. You need a solid and professional engineering culture to produce high-quality products and release them at a high rate.</description>
    </item>
    <item>
      <title>Architectural Decision Records ADR</title>
      <link>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</guid>
      <description>Architecture Decision Record ADR is compact and traceable documents of all important decisions taken during the realization of a product. Use Asciidoc or Markdown and Git to have agile and lean documentation of your major decisions.&#xA;The huge advantage of Architecture Design Record ADR is the timeline of the decisions. It tremendously helps to understand the technical changes during the product lifecycle.&#xA;Please try architecture design records to document your key decisions when developing your software product.</description>
    </item>
    <item>
      <title>How to Reach the Software Quality Graal?</title>
      <link>https://blog.tangly.net/blog/2018/how-to-reach-the-software-quality-graal/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2018/how-to-reach-the-software-quality-graal/</guid>
      <description>Lately I was asked how many bugs and smells detected through SonarQube were acceptable for a software product. And a Scrum master inquired which organizational changes are necessary to empower software developers to write good code. Speechless and dumbfounded, I was unable to answer these questions.&#xA;After some time, I realized these people believe tools can measure the quality of software. But tools can only measure non-quality.&#xA;They tell you when you are doing it wrong, only your heart can tell you when you are doing it right.</description>
    </item>
    <item>
      <title>Sonar Lint for the Impatient</title>
      <link>https://blog.tangly.net/blog/2018/sonar-lint-for-the-impatient/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2018/sonar-lint-for-the-impatient/</guid>
      <description>Remove issues before they reach customer sites. No quality problems shall reach your Git master branch.&#xA;SonarQube is a central server that processes full analyses (triggered by the various SonarQube Scanners).&#xA;Its purpose is to give a 360° vision about the quality of your code base. For this, it analyzes all the source lines of your product on a regular basis.&#xA;It should be added that SonarQube also performs scans with well-known third party analyzers (SpotBugs - previously FindBugs -, Checkstyle, PMD) whereas SonarLint does not include those.</description>
    </item>
    <item>
      <title>Pragmatic Craftsmanship - Professional Software Developer</title>
      <link>https://blog.tangly.net/blog/2018/pragmatic-craftsmanship-professional-software-developer/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2018/pragmatic-craftsmanship-professional-software-developer/</guid>
      <description>The last months I was often confronted with software products having insufficient quality.&#xA;Insufficient means late delivery, and few new features. The effort to correct errors in the field eats 30% to 50% away from the development budget. How can such a dreadful situation occur?&#xA;One root cause is the low quality of the source code and ignorance of basic coding design approaches.&#xA;We are not talking about complex design activities or complex patterns; we are discussing basic approaches how to write correct and maintainable code.</description>
    </item>
    <item>
      <title>Why Use Current Software Components?</title>
      <link>https://blog.tangly.net/blog/2017/why-use-current-software-components/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2017/why-use-current-software-components/</guid>
      <description>Often, teams discuss if their digital product should upgrade to the current version of open-source or commercial used components.&#xA;The same discussion arises for development tools and programming language versions.&#xA;I have a strong opinion about upgrades. You should always use the current version of all components included in your product. The only discussion is the timely when and never the if.&#xA;Be realist, if your product is successful, you have to upgrade before the components are obsolete.</description>
    </item>
  </channel>
</rss>
