<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tangly Components – Design</title>
    <link>https://blog.tangly.net/tags/design/</link>
    <description>Recent content in Design on tangly Components</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://blog.tangly.net/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: Yet Another Hybrid Method</title>
      <link>https://blog.tangly.net/blog/2022/yet-another-hybrid-method/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/yet-another-hybrid-method/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-04-02-head.jpg&#34; alt=&#34;2022 04 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SoDa &lt;em&gt;Software Development Agile&lt;/em&gt; is a homebrew project development method created at the &lt;a href=&#34;https://www.hslu.ch&#34;&gt;technical university of Lucerne&lt;/a&gt;.
It is a mixture of &lt;a href=&#34;https://en.wikipedia.org/wiki/Waterfall_model&#34;&gt;Waterfall&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_Unified_Process&#34;&gt;RUP&lt;/a&gt;
and &lt;a href=&#34;https://en.wikipedia.org/wiki/Scrum_(software_development)&#34;&gt;Scrum&lt;/a&gt; approaches.
It uses a distorted Scrum for the concept and implementation phase&lt;a href=&#34;#detecting-agile-bullshit&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The documentation was not updated the last ten years.
The approach is clinically dead and should not be promoted for active software development efforts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A similar approach exists with the official governmental Swiss project method &lt;a href=&#34;https://www.hermes.admin.ch/en/&#34;&gt;HERMES&lt;/a&gt;.
At least the documentation of &lt;a href=&#34;https://www.hermes.admin.ch/en//starting-page.html&#34;&gt;Hermes&lt;/a&gt; is better than SoDa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Both approaches are quite similar.
They mix a phase-based Waterfall approach with the four phases of the old &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_Unified_Process&#34;&gt;RUP&lt;/a&gt; project life-cycle approach.
RUP belongs to the family of &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Process&#34;&gt;unified process methods&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-04-02-rup-phases.jpg&#34; alt=&#34;2022 04 02 rup phases&#34; width=&#34;640&#34; height=&#34;380&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The four phases or gates are
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Inception&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;approximate vision, business case, scope, and vague estimates.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Elaboration&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;refined vision, iterative implementation of the core architecture, resolution of high risks, identification of most requirements and scope, more realistic estimates.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Construction&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;iterative implementation of the remaining lower risk and easier elements, and preparation for deployment.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Transition&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;beta tests, deployment.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are using &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt; approaches, you certainly do not need an inception or a transition phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These approaches are obsolete.
Almost no industrial service companies are explicitly using Waterfall or unified process approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For most of these organizations that take a hybrid approach, this is an interim step.
They intend to gradually expand their agile activities beyond the development and testing stages to the rest of the software development lifecycle.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Malcom Isaacs
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hermes_swiss_hybrid_method&#34;&gt;HERMES Swiss Hybrid Method&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are forced to use a hybrid method in Switzerland, please use Hermes.
Never try to use SoDa.
It is obsolete and sparingly documented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you want to be a professional developer, please use an agile approach.
Scrum is currently the most used agile approach in the industry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hermes.admin.ch/en/&#34;&gt;HERMES&lt;/a&gt; fulfills the current requirements of federal and state administration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They are mainly organized &lt;strong&gt;hierarchically&lt;/strong&gt; and have to handle projects taking governance into account.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Hermes FAQ
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The major problem is that Hermes is mandatory for a set of governmental projects.
You are forced to use this method as a software company if you want to work on some government initiatives
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The method is Swiss and completely unknown in Europe or abroad.
Swiss commercial or industrial software development initiatives never use Hermes as a development approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why_hybrid_methods_are_hindering&#34;&gt;Why Hybrid Methods are Hindering&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In his mind-expanding book &lt;em&gt;The Beginning of Infinity&lt;/em&gt;, physicist David Deutsch describes science and the enlightenment as the quest for &lt;em&gt;good explanations&lt;/em&gt;.
He explains how various ideas in human history represent a &lt;em&gt;beginning of infinity&lt;/em&gt; that allows us to cope with any conceivable relevant application of these good explanations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This idea of infinite reach or scope is true of an agile approach to development and not true of a waterfall-based approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An agile approach to software development encourages us to start work on solving problems in smaller pieces.
It encourages us to begin work before we know the answer to everything.
This approach allows us to make progress, maybe sometimes in suboptimal or even bad directions, but nevertheless, after each step, we learn something new.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This does not mean that agile thinking is perfect or the final answer.
Rather, it is an important, significant, enabling step in the direction of better performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The software product development method war is won.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile approaches as described in &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; and &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt; are the winners
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.
Eighty percent of all new software development initiatives are based on an agile approach.
The most used agile approach is &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Stop being a laggard.
Start using agile approaches and the Scrum framework.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_future_work&#34;&gt;Future Work&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly advocate discarding all hybrid methods.
No empirical evidence is available that they work is available.
Anecdotal evidence shows that they regularly fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We shall use the Scrum approach as a preferred approach for developing software application &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#professional-scrum-master-guide&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#professional-product-owner&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#mastering-professional-scrum&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.
Scrum and various Scrum scaling frameworks provide approaches for teams up to eighty developers working on the same product.
I strongly state that 99.9% of all software initiatives have smaller teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
One of the founders of Scrum strongly stated the same in a famous post
&lt;a href=&#34;https://kenschwaber.wordpress.com/2013/08/06/unsafe-at-any-speed/&#34;&gt;Unsafe at any Speed&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly recommend avoiding SAFe for the following reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SAFe is complex and less agile.
It contains waterfall elements.
Their approach to software architecture is outdated and does not reflect the findings of OpenGroup, the steward of TOGAF.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.scaledagileframework.com/agile-release-train/&#34;&gt;Agile release trains&lt;/a&gt; should align teams to a shared business and technology mission.
The ideal size of a train is between 50 and 125 people working on the same product family.
Most product development initiatives are smaller.
ALl members of a train shall work on the same products.
Using the same technology stack is not a criteria to belong to the same train.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAFe is not based or using Scrum.
Their definition of Scrum master and product owner is different to the ones in &lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;Scrum Guide&lt;/a&gt;.
Their key roles of a release train engineer &lt;em&gt;RTE&lt;/em&gt; and product management do not exist in Scrum.
They are more traditional project management roles.
All synergy effects are lost.
You must retrain your collaborators into SAFe if you go down this path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The planning and release cycle is a program increment.
The duration is typically 8 to 12 weeks long.
This is too long for agile, DevOps, or Design Thinking approaches.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-04-02-agile-vs-waterfall.png&#34; alt=&#34;2022 04 02 agile vs waterfall&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you have a choice, do not use any hybrid method.
Various studies found out that agile initiatives are three times more successful than Waterfall approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Business agility is not compatible with hybrid approaches.
Use Lean startup or design thinking frameworks to increase your business agility and adapt to market changes.
Design thinking advocates iterations of one week duration.
Therefore, product increments of three months or worst RUP phases over half a year are truly incompatible with weekly cycle-time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We train our students and collaborators in Design Thinking, Lean approaches, and Scrum framework.
We should not force them to use later obsolete methods such as V-Model, RUP, HERMES or unsupported approaches such as SODA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Be responsible.
Train adequately your collaborators&lt;a href=&#34;#scrum-master-formation&#34;&gt;[3]&lt;/a&gt;, &lt;a href=&#34;#product-owner-formation&#34;&gt;[4]&lt;/a&gt;, &lt;a href=&#34;#scrum-developer-formation&#34;&gt;[5]&lt;/a&gt; in the Scrum approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Advocate the &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;agile manifesto&lt;/a&gt; and the &lt;a href=&#34;https://agilemanifesto.org/principles.html&#34;&gt;twelve principles&lt;/a&gt; behind the manifesto.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The majority of hybrid methods I still encounter are bad rehearsal of the RUP development approach.
The unified process was defined in the nineties and is now obsolete.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;detecting-agile-bullshit&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2019/detecting-agile-bullshit/&#34;&gt;Detecting Agile Bullshit&lt;/a&gt;.
Marcel Baumann. 2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-master-formation&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2021/scrum-master-formation&#34;&gt;Scrum Master Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;product-owner-formation&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2021/product-owner-formation&#34;&gt;Product Owner Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-developer-formation&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;../../2021/scrum-developer-formation&#34;&gt;Scrum Developer Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-guide&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;https://scrumguides.org/scrum-guide.html&#34;&gt;Scrum Guide&lt;/a&gt;.
Jeff Sutherland, Ken Schwaber. 2020&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;cargo-cult&#34;&gt;&lt;/a&gt;[7] &lt;a href=&#34;https://en.wikipedia.org/wiki/Cargo_cult&#34;&gt;Cargo Cult&lt;/a&gt;.
Wikipedia&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;devops-sme&#34;&gt;&lt;/a&gt;[8] &lt;a href=&#34;../../2021/devops-for-small-applications/&#34;&gt;DevOps for Small Applications&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;zero-defect&#34;&gt;&lt;/a&gt;[9] &lt;a href=&#34;../../2020/advocate-zero-bug-policy-in-your-projects/&#34;&gt;Advocate Zero Bug Policy in Your Projects&lt;/a&gt;.
Marcel Baumann. 2020&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-software-architecture&#34;&gt;&lt;/a&gt;[10] &lt;a href=&#34;../..//2021/what-i-learnt-teaching-agile-software-architecture/&#34;&gt;What I learnt Teaching Agile Software Architecture&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;professional-scrum-master-guide&#34;&gt;&lt;/a&gt;[1] F. Heath, &lt;em&gt;Professional Scrum Master Guide&lt;/em&gt;. Packt Publishing, Limited, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1800205562&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1800205562&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;professional-product-owner&#34;&gt;&lt;/a&gt;[2] D. McGreal and R. Jocham, &lt;em&gt;The Professional Product Owner&lt;/em&gt;. Addison-Wesley Professional [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07D5ZPJBY&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07D5ZPJBY&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;mastering-professional-scrum&#34;&gt;&lt;/a&gt;[3] S. Ockerman and S. Reindl, &lt;em&gt;Mastering Professional Scrum&lt;/em&gt;. Addison Wesley, 2019 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07XTLNPTC&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07XTLNPTC&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The description Craig Larman book &lt;em&gt;Applying UML and Patterns&lt;/em&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. The fact the method is only used in Switzerland and only when it is a mandatory requirement is a testament to its lack of success.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. &lt;a href=&#34;https://www.pmi.org/&#34;&gt;PMI&lt;/a&gt; has adopted disciplined agile. &lt;a href=&#34;https://www.opengroup.org/&#34;&gt;OpenGroup&lt;/a&gt; has updated TOGAF to support agile approaches. Major certification authorities such as &lt;a href=&#34;https://www.isaqb.org/&#34;&gt;ISAQB&lt;/a&gt;, &lt;a href=&#34;https://www.ireb.org/&#34;&gt;IREB&lt;/a&gt;, &lt;a href=&#34;https://www.istqb.org/&#34;&gt;ISTQB&lt;/a&gt; offer a track of agile certifications. You as a responsible organization shall train your collaborators in agile approaches. Stop clinging to obsolete approaches used in the last millennium.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Immutability in Java</title>
      <link>https://blog.tangly.net/blog/2022/immutability-in-java/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/immutability-in-java/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-02-head.jpg&#34; alt=&#34;2022 01 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Immutable_object&#34;&gt;Immutability&lt;/a&gt; is a powerful and simple concept in programming theory that is strangely underused.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An &lt;a href=&#34;https://en.wikipedia.org/wiki/Immutable_object&#34;&gt;immutable object&lt;/a&gt; is simply a class whose instances cannot be modified.
This is in contrast to a mutable object or changeable object, which can be modified after it is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Immutable objects are also useful because they are inherently thread-safe.
Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All the information contained in each instance is provided when it is created and is fixed for the lifetime of the object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An example of immutable objects in Java is the &lt;em&gt;String&lt;/em&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Why are immutable objects so good?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advantages&#34;&gt;Advantages&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are many reasons for sure, here are the three main ones:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Protection Against Programming Errors&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We can send an immutable object to any class without worrying about it being altered by that class.
We never have to make a defensive copy.
The same applies when we get an instance for local storage in a cache.
We do not have to worry about whether the provider will hold on to a reference and change it later, invalidating our cache without our knowledge.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Performance&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We do not have to make defensive copies all the time.
This means that we save some work on the garbage collector which increases performance and decreases memory overhead.
We all want that, don’t we?&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Thread Safety&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;After creation, any number of threads can access immutable objects simultaneously, without any synchronization mechanism.
It is a huge advantage in the modern world of multicore processors.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_immutable_classes&#34;&gt;Immutable Classes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The class must be declared as &lt;em&gt;final&lt;/em&gt;.
So those mutable child classes cannot be created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data members in the class must be declared as &lt;em&gt;private&lt;/em&gt;.
Direct access to member variables is prohibited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data members in the class must be declared as &lt;em&gt;final&lt;/em&gt;.
We cannot change the value of it after object creation.
Java requires that all final properties must be initialized in the constructor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No setters are provided to change the value of an instance variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A parameterized constructor should initialize all the fields performing a deep copy.
Data members cannot be modified through external object reference.
This is also called reference &lt;a href=&#34;https://en.wikipedia.org/wiki/Aliasing_(computing)&#34;&gt;aliasing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the instance fields include references to mutable objects, do not allow those objects to be changed:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do not provide methods that modify the mutable objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not share references to the mutable objects.
Never store references to external, mutable objects passed to the constructor.
If necessary, create copies, and store references to the copies.
Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java &lt;em&gt;record&lt;/em&gt; construct &lt;a href=&#34;#java-record&#34;&gt;[1]&lt;/a&gt; implements most of the above constraints.
The major limitation is that Java records do not perform any deep copies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Records provide secure serialization and deserialization mechanisms.
Use records as Java DTO objects and automatically improve the security of your application.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Therefore, Java records are shallow immutable objects.
If you pass immutable objects to the constructor, you will achieve deep immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_immutable_api_classes&#34;&gt;Immutable API Classes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java already has an extended and expanding set of immutable classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All wrapper classes in &lt;em&gt;java.lang&lt;/em&gt; package are immutable.
These are String, Character, Boolean, Byte, Short, Integer, Long, Float, Double.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The class java.awt.Rectangle encapsulates the position and dimension of a rectangle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.lang.StackTraceElement (used in building exception stack traces).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most enum classes are immutable, but this in fact depends on the concrete case.
Do not implement mutable enums, this will screw.
All enum classes are immutable in the standard API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.math.BigInteger and java.math.BigDecimal,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.io.File represents a file in a local or remote file system.
A file may or may not exist, and has some methods modifying and querying the state of this external object.
But the File object itself stays immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.util.Locale - representing a specific geographical, political, or cultural region,&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_builder_pattern&#34;&gt;Builder Pattern&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Immutable abstractions have often verbose and cumbersome constructors.
You want to provide a more elegant approach to create instances of your immutable classes.
The builder pattern is ideal for creating immutable instances through legible and maintainable code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Writing builders is a tedious and repetitive activity.
Consider using the &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok Project&lt;/a&gt; to generate builders.
The lombok annotations &lt;em&gt;@Builder&lt;/em&gt; and &lt;em&gt;@Superbuilder&lt;/em&gt; are time savers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Provide factory methods to create often used immutable objects.
Use the builder in the body to write the creation code in one Java statement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_read_only_interface_pattern&#34;&gt;Read-only interface pattern&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read-only interface pattern is an alternative to the Immutable object pattern.
It allows some objects to modify a value object while other objects can only fetch its values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-record&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2020/java-records-are-here-available-in-jdk-14/&#34;&gt;Java Records are Here&lt;/a&gt;.
Marcel Baumann. 2020&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;oracle-record&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://docs.oracle.com/en/java/javase/16/language/records.html&#34;&gt;Record Classes&lt;/a&gt;.
Oracle&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Technical Debt</title>
      <link>https://blog.tangly.net/blog/2022/technical-debt/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/technical-debt/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-03-head.png&#34; alt=&#34;2022 01 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt; or code debt is a concept in software development that reflects the implied cost of additional rework.
The rework is caused by choosing an easy limited solution now instead of using a better approach that would take longer to realize.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another source of technical debt is natural &lt;a href=&#34;https://en.wikipedia.org/wiki/Obsolescence&#34;&gt;technical obsolescence&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As with monetary debt, if technical debt is not repaid, it accumulates &lt;em&gt;interest&lt;/em&gt;, making it harder and harder to implement changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unaddressed technical debt increases software entropy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Spiraling out of control entropy is the death of countless software solutions over the last century.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Similarly to monetary debt, technical debt is not necessarily a bad thing.
Sometimes, as e.g., a proof-of-concept is required to move projects forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some experts claim that the &lt;em&gt;technical debt&lt;/em&gt; metaphor tends to minimize the ramifications, resulting in insufficient prioritization of the necessary work to correct it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Shipping first time code is like going into debt.
A little debt speeds development as long as it is paid back promptly with a rewrite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The danger occurs when the debt is not repaid.
Every minute spent on not-quite-right code counts as interest on that debt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object-oriented or otherwise.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Ward Cunningham&lt;br/&gt;
&lt;cite&gt;1992&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_eliminate_technical_debt&#34;&gt;How to Eliminate Technical Debt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use static analysis tools to detect technical debt in your source code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the features of your IDE
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;
to perform simple refactorings and improve the quality of your code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use your IDE to find all TODO comments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use your IDE to find and remove commented-out lines of code.
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; was created to keep track of your modifications.
Keep your source code free of obsolete and unused code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a gradle plugin
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;
To update your libraries and remove technologically obsolesce.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please use the current version of your technical stack and build toolchain.&lt;br/&gt;
Update your Java version when the next one is coming out.
You have access to better libraries, interfaces, and runtime engines.
Known security flaws were corrected.
Defects were removed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each technological stack is gifted with open source and commercial static analysis tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sonarsource.com/products/sonarlint/&#34;&gt;SonarLint&lt;/a&gt; supports all major languages and development environments.
You will find a &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis&#34;&gt;list of tools for static code analysis&lt;/a&gt; for all major programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A professional software developer shall use these tools to validate and improve her source code.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_should_you_reimburse&#34;&gt;Should You Reimburse?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-03-technical-debt.png&#34; alt=&#34;2022 01 03 technical debt&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We learnt this lesson during our economic training in college.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A little debt is OK.&lt;br/&gt;
Big debts will poison your life and source code.&lt;br/&gt;
Big debts are cumbersome to repay.&lt;br/&gt;
You need efforts and time for a payback.&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The lesson is to close your debts before they are too big to be managed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You will otherwise bankrupt either your bank account or the source code of your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Maintenance&#34;&gt;Preventive maintenance&lt;/a&gt; is a learnt technique for technical products.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_measure_technical_debt&#34;&gt;How to Measure Technical Debt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here are some approaches to quantify the technical debt of a product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;New Bugs versus Closed Bugs&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Every known bug is essentially a tiny sliver of technical debt.
If you want to know your total debt, it is important for your engineers to keep a tally.
Assuming your engineers make a note in git when bugs are fixed, you can calculate how effectively you are managing your technical debt.
If new bugs are outnumbering closed bugs, you need to make some changes.&lt;br/&gt;
&lt;em&gt;Zero bug policy &lt;a href=&#34;#zero-defect&#34;&gt;[1]&lt;/a&gt; nicely reimburse this technical debt.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Code Quality&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Complex code is a sure sign of growing technical debt.
At some point, someone is going to have to unravel that mess.
Code quality is an aggregation of several metrics that quantify the overall quality and complexity of your code:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Smells and potential errors detected through static analysis tools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cyclomatic complexity, method size, class size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Class and package coupling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depth of inheritance&lt;br/&gt;
&lt;em&gt;Continuous fitness functions &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#building-evolutionary-architectures&#34;&gt;1&lt;/a&gt;]&lt;/span&gt; based on static code analyzers are the way to detect this technical debt cite:clean-code,clean-coder,clean-architecture].&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Cycle Time&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This measures the amount of time that passes between the definition of the change, the first commit, and deployment.
You need to study the time it takes to make changes to existing code and to solve problems without using quick fixes.
If your engineers are spending hours fixing small bugs, you know that there is some technical debt lurking in your code.&lt;br/&gt;
&lt;em&gt;Your agile and Scrum tool provides cycle time data &lt;a href=&#34;#metricsandkpi&#34;&gt;[4]&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Code Coverage&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;In a sense, the code coverage metric looks at the same issue from the opposite direction.
In this case, you are measuring how much of your code is executed when you run your testing suite.
The more lines that are unused, the more likely it is that you have poorly written code.&lt;br/&gt;
&lt;em&gt;Code coverage tools such as Jacoco provide these values &lt;a href=&#34;#agilecode&#34;&gt;[3]&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Code Ownership&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;If you get too many people working on the same tasks, you can easily end up with a steaming pile of cruft.
That said, you do not want only one engineer taking ownership of an entire project.
If they get sick or leave your organization, it is game over.&lt;br/&gt;
&lt;em&gt;Social aspects can easily be measured in a code repository &lt;a href=&#34;#codecrimescene&#34;&gt;[2]&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_continuously_improve&#34;&gt;How to Continuously Improve&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A powerful approach is zero defect source code &lt;a href=&#34;#zero-defect&#34;&gt;[1]&lt;/a&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-03-retrospective.png&#34; alt=&#34;2022 01 03 retrospective&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can start very simply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Track locations of technical debts with &lt;em&gt;TODO&lt;/em&gt; and &lt;em&gt;FIXME&lt;/em&gt; comments as a first step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next time you have to modify source code in a package, use your IDE features to find all &lt;em&gt;TODO&lt;/em&gt; in the package you are working on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix at least one such comment and improve the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat and over time, your technical debt will slowly diminish.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fixing technical debt is not rocket science.
It means to have discipline and behave like a professional software developer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Technical debt does not appear overnight.
Debt increases slowly but steadily.
Big debt clearly shows the organization was unprofessional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Investing a small amount for continuously improving your source code base is the most effective approach to avoid technical debt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use an actual version of your technology stack.&lt;br/&gt;
You must anyway upgrade your stack if your product is under active development.
So why do you wait and lose capabilities to improve?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update monthly the libraries you use.
Updates often close security vulnerabilities in your code.
You have a legal responsibility to secure your code and protect your users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the static quality checkers and refactoring features of your development environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only refactor code you have to change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply the boy scout rule &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-coder&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#clean-craftsmanship&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.
Leave the code in a better state as it was when you started.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Train your developer in refactoring and clean code practices &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#refactoring-2nd&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#refactoring-to-patterns&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;6&lt;/a&gt;]&lt;/span&gt;.
Beware technical debt is also created through:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lack of knowledge, when the developer doesn’t know how to write elegant code,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lack of ownership, when outsourced software efforts result of in-house engineering being required to refactor or rewrite outsourced code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Professional software developers deeply understand the impacts of technical debt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Amateurs just ignore the consequences and hop to the next product before they go bankrupt.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;zero-defect&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2020/advocate-zero-bug-policy-in-your-projects/&#34;&gt;Advocate Zero Bug Policy in Your Projects&lt;/a&gt;.
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;codecrimescene&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2019/code-scene-as-crime-scene/&#34;&gt;Code Scene as Crime Scene&lt;/a&gt;.
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agilecode&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2019/agile-code-is-clean-code/&#34;&gt;Agile Code is Clean Code&lt;/a&gt;.
Marcel Baumann, 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;metricsandkpi&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2018/why-do-you-need-metrics-and-kpi-in-agile-product-development/&#34;&gt;Why Do You Need Metrics and KPI in Agile Product Development?&lt;/a&gt;.
Marcel Baumann. 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures&#34;&gt;&lt;/a&gt;[1] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Support Constant Change&lt;/em&gt;, First. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491986360&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491986360&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-craftsmanship&#34;&gt;&lt;/a&gt;[3] R. C. Martin, &lt;em&gt;Clean Craftsmanship&lt;/em&gt;. Addison-Wesley Professional, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B095C16LSW&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B095C16LSW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-2nd&#34;&gt;&lt;/a&gt;[4] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-to-patterns&#34;&gt;&lt;/a&gt;[5] J. Kerievsky, &lt;em&gt;Refactoring to Patterns&lt;/em&gt;. Addison-Wesley Professional, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321213351&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321213351&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[6] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; IDE has a powerful set of functions to detect code smells and perform automatically standard refactoring activities. The &lt;a href=&#34;https://www.sonarlint.org/&#34;&gt;Sonar Lint&lt;/a&gt; plugin for various IDEs to detect quality and security issues in your code.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. I use the &lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin&#34;&gt;com.github.ben-manes.versions&lt;/a&gt; for this purpose. The plugin handles nicely multi-modules projects. The plugin also supports the central declaration of dependencies feature in Gradle.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Improving a Static Web Site Build With Hugo and Docsy</title>
      <link>https://blog.tangly.net/blog/2021/improving-a-static-web-site-build-with-hugo-and-docsy/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/improving-a-static-web-site-build-with-hugo-and-docsy/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-09-02-head.jpg&#34; alt=&#34;2021 09 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The static website build tool &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is awesome.
With the extensive built-in feature set of Hugo and the feature-rich text formatting options that &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; offers, it creates a blogging experience composed of easy content management and fun writing experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In most static site generators including Hugo, &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt; is the one and only first-class citizen when it comes to creating posts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, in recent Hugo versions, external helpers are an official feature.
It calls appropriate external programs to a certain type of files.
Fortunately, &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; based files are automatically compiled with &lt;a href=&#34;https://asciidoctor.org/&#34;&gt;Asciidoctor&lt;/a&gt;, so we do not need to do anything.
Just have it installed and you are ready to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Hugo theme &lt;a href=&#34;https://www.docsy.dev/&#34;&gt;Docsy&lt;/a&gt; is ideal to create a good-looking software documentation site.
This theme is currently the best match I found to combine product documentation with blogging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I love to write my documentation and blogs using &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; notation
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
The official site is &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;.
A major tool chain can be found under &lt;a href=&#34;https://asciidoctor.org/&#34;&gt;Asciidoctor&lt;/a&gt;.].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hugo supports Asciidoctor through external helpers.
External helpers are relatively new and more like an experimental feature.
There is a proposal on improving it by adding user configurations, so at least there is hope for this particular feature to expand.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The features of &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; are equivalent to &lt;a href=&#34;https://en.wikipedia.org/wiki/DocBook&#34;&gt;DocBook&lt;/a&gt;.
The readers with grey hair probably remember &lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language&#34;&gt;SGML&lt;/a&gt;, the ancestor of DocBook.
The librarians could remember &lt;a href=&#34;https://en.wikipedia.org/wiki/LaTeX&#34;&gt;LaTeX&lt;/a&gt; created by &lt;a href=&#34;https://en.wikipedia.org/wiki/Leslie_Lamport&#34;&gt;Leslie Lamport&lt;/a&gt;.
He created it to describe &lt;a href=&#34;https://en.wikipedia.org/wiki/Temporal_logic&#34;&gt;temporal logic&lt;/a&gt; aspects of cluster communication for the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Digital_Equipment_Corporation&#34;&gt;Digital Equipment Corporation&lt;/a&gt; &lt;em&gt;DEC&lt;/em&gt; solution.
These highly qualified experts and their solutions paved the way to legible documentation and professional typography.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_source_code_highlight&#34;&gt;Source Code Highlight&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Asciidoctor supports rouge source code highlighting per default
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.
You do need to add any extension to Hugo.
Just select the style you prefer, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;rouge-style = &amp;#34;github&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_search_function_for_the_website&#34;&gt;Search Function for the Website&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The theme has multiple search solutions to index your static website.
I chose the &lt;a href=&#34;https://lunrjs.com/&#34;&gt;Lunr&lt;/a&gt; approach for our site.
The solution has no strings attached and does not require an external search server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The website and the search functionality are self-contained as a static website should be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_comment_function_for_blog_article&#34;&gt;Comment Function for Blog Article&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The comment feature is somewhat at odds with the concept of static website.
The theme has multiple comment solutions to allow readers to publish a question or a test to our site.
I decided to provide comments only to the blog part of the website.
I chose the &lt;a href=&#34;https://utteranc.es/&#34;&gt;Utterances&lt;/a&gt; approach for our site.
The solution has no strings attached and uses the well-known platform GitHub.
No tracking, no ads and no locking are great.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The comment author must first log in GitHub before adding her comment therefore spamming or flaming are minimized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You have to create a partial in docsy to use Utterances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;page-blank&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;utterancers_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;https://utteranc.es/client.js&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;repo= &lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Site.Params.comments_utterances_repo&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;}}&lt;/span&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;issue-term= &lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Site.Params.comments_utterances_issue_term&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;}}&lt;/span&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;theme= &lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Site.Params.comments_utterances_theme&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;}}&lt;/span&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;crossorigin=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;async&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tag_function_for_blog_article&#34;&gt;Tag Function for Blog Article&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Docsy has finally merged the change request for taxonomies during the first semester of 2021.
Tags for articles are now natively supported without tinkering with the code of the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our &lt;a href=&#34;https://blog.tangly.net/blog/&#34;&gt;blog&lt;/a&gt; displays the tags on the right side of the window.
Give it a try.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_diagrams_in_articles&#34;&gt;Diagrams in articles&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Diagrams in blog articles are currently a more complex issue.
Hugo seems to be quite restrictive which extensions can be loaded when generating a static site
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.
No reasonable reasons exit for the above-mentioned restrictions.
Ongoing pull requests try to improve the situation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I had success with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://plantuml.com/&#34;&gt;plantUML&lt;/a&gt; diagrams&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;See, for example, following blogs &lt;a href=&#34;../../2021/gitlab-for-bachelor-students&#34;&gt;GitLab for Students&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://mermaid-js.github.io/&#34;&gt;mermaid&lt;/a&gt; diagrams&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;See for example following blogs &lt;a href=&#34;../../2021/agile-trends-switzerland-2021&#34;&gt;Agile Trend 2021&lt;/a&gt; or
&lt;a href=&#34;../../2021/agile-trends-switzerland-2020&#34;&gt;Agile Trend 2020&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://plantuml.com/&#34;&gt;plantUML&lt;/a&gt; supports hyperlinks in diagrams.
To use relative links in your site declare a PlantUML variable for the root of your and define links relative to this root.
The declarations for such a diagram could be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;[plantuml,target=dependencies,format=svg, width=&amp;#34;100%&amp;#34;,,opts=&amp;#34;inline&amp;#34;,svg-type=&amp;#34;inline&amp;#34;]     &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

....
@startuml

!$root = &amp;#34;https:/blog.tangly.net&amp;#34;                                              &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

package net.tangly.bdd [[$root/docs/bdd/]] {                                   &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
}

@enduml
....&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Links work only for SVG digrams with the opion inline or interactive.
The value is stated once in &lt;em&gt;opts&lt;/em&gt; and once in &lt;em&gt;svg-type&lt;/em&gt; because plantUML and kroki generators use different options for the same information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define a plantUML variable for the root URL of your site.&lt;br/&gt;
&lt;em&gt;I could not use asciidoc variable in plantUML links because the characters {} are interpreted as caption items&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the variable to define links &lt;em&gt;[[]]&lt;/em&gt; relative to your root.
&lt;a href=&#34;https://plantuml.com/&#34;&gt;plantUML&lt;/a&gt; will expand the link to expected value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The generated HTML code does not respect all AsciiDoc parameters.
Text flow configurations are not enforced.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_layout_and_appearance&#34;&gt;Layout and Appearance&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The docsy theme is regularly improving.
The provided features are good and very stable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Hugo integration of &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; is subpar.
The CSS styling files of &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; are not integrated with Hugo and themes.
Often the appearance of the generated HTML could be improved.
I am currently exploring venues to improve the integration of nice looking asciidoc styling sheets with the docsy universe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_future_features&#34;&gt;Future Features&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have integrated an extension to provide access to static files through a Hugo/Docsy site.
For example the presentation of a speech is made available directly in the static website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This feature is currently experimental and queued as a pull request in the Docsy GitHub repository
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_4&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_4&#34; title=&#34;View footnote.&#34;&gt;4&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;static-website-improvements&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2023/static-website-improvements&#34;&gt;Static Website Improvements&lt;/a&gt;
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;improving-a-static-website&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2021/improving-a-static-web-site-build-with-hugo-and-docsy&#34;&gt;Improving a Static Website Build With Hugo and Docsy&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;support-comments&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2020/support-comments-for-static-hugo-website&#34;&gt;Support Comments for Static Hugo Website&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;creating-technical-website&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2020/creating-a-technical-website-with-hugo-and-asciidoc&#34;&gt;Creating a technical Website with Hugo and Asciidoc&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. If you are new to asciidoc, you can experiment &lt;a href=&#34;https://asciidoclive.com/&#34;&gt;online&lt;/a&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Beware the Hugo documentation stating you have to import an extension for syntax highlighting is plain wrong if you are using &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/syntax-highlighting/rouge/&#34;&gt;rouge&lt;/a&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. The situation was improved with newer releases of hugo. It is now possible to specify the desired options under &lt;em&gt;markup.asciidocExt.extensions&lt;/em&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_4&#34;&gt;
&lt;a href=&#34;#_footnoteref_4&#34;&gt;4&lt;/a&gt;. This feature removed my dependency to Google drive to host downloadable artifacts.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: MicroStream 4.x</title>
      <link>https://blog.tangly.net/blog/2021/microstream-4.x/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/microstream-4.x/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-02-head.jpg&#34; alt=&#34;2021 03 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; approach empowers Java developers.
The library provides a cool and compact approach to persist complex data models.
You can persist your whole data model with less than a hundred lines of code.
The library is efficient and works reliably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern architectures based on bounded domains and &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Design&lt;/a&gt; are supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The company behind the product has promised to open source their product beginning of 2021.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use the library to prototype bounded domain implementations requiring persistent data.
The implementation speed and ease are awesome.
I hope the current flaws of the product will be removed and allow productive use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Saving a Java Object&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The library made some strange design decisions.
If you want to persist an instance having fields based on collections, you must use the &lt;em&gt;eager&lt;/em&gt; mode.
Beware that you must explicitly commit the transaction if using the &lt;em&gt;eager&lt;/em&gt; mode.
The normal mode automatically commits the transaction.
I hope that the API improves, and the behavior is coherent for similar functions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Debugging problems&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The source code is currently obfuscated.
Debugging is difficult and cumbersome because variable names are synthetic and all comments are missing.
The source code documentation is shallow and insufficient to understand the behavior of the library.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Saving a collection&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;If you have access to the collection, just call store on the collection.
If the collection is hidden inside an object, you are forced to use an &lt;em&gt;eager&lt;/em&gt; store.
If you use standard object-oriented practices, you will have to use the less efficient approach of eager write operations.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design&#34;&gt;Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our provider persists instances for all our bounded domains in need of persistence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;net.tangly.core.providers&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;java.util.Collections&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;java.util.List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;one.microstream.storage.types.EmbeddedStorageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;org.jetbrains.annotations.NotNull&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;/**
 * Provider with instances cached in memory and persisted onto the file system or a database.
 * &amp;lt;p&amp;gt;The update method uses an eager storage strategy to insure that all instance variables of a Java object are persisted. This approach is necessary due
 * to the implementation restrictions of MicroStream.&amp;lt;/p&amp;gt;
 *
 * @param &amp;lt;T&amp;gt; type of the instances handled in the provider
 */&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ProviderPersistence&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EmbeddedStorageManager&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Collections&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;unmodifiableList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(!&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storage&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;createEagerStorer&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storage&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storage&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;updateAll&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Iterable&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(!&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;});&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_current_flaws&#34;&gt;Current Flaws&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_in_memory_file_system&#34;&gt;In Memory File System&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In-memory file systems are a must for unit and integration testing.
A continuous integration pipeline does not always have access to a regular file system.
Disk-based file systems are too slow for automatic testing
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We migrate with full success all our unit tests to use in-memory file systems in January 2021.
We use the &lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;Jimfs&lt;/a&gt; library.
When creating a Jimfs file system, you can specify whether it should imitate a UNIX- or Windows-style file system.
They differ in the naming conventions and attribute usage, so choose the one you prefer.
The Windows file system implements some Windows’ quirks, such as not permitting the creation of a file in the root directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The execution speed rocks.
Thanks to the MicroStream developers.
See their &lt;em&gt;file systems&lt;/em&gt; example in their &lt;a href=&#34;https://github.com/microstream-one/examples&#34;&gt;GitHub example repository&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_records&#34;&gt;Java Records&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A field cannot be manipulated anymore in record since Java JDK 1.5.1.
The &lt;em&gt;MicroStream&lt;/em&gt; 4.x releases crash when using record in JDK 15 and JDK 16. It only works with JDK 14.
You are forced to use an obsolete JDK no more supported.
For example, the IntelliJ IDEA stops to provide support for obsolete JDKs as soon as the new official JDK release is available.
It hinders you to use the associated preview features
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have to verify if the library can cope with sealed declarations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_next_steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Wait for the release scheduled for April 2021 and pray they will support the record feature.
Records are an official feature in JDK 16 released in March 2021 and no more a preview feature.
See our &lt;a href=&#34;../../2021/modern-java-development/&#34;&gt;Modern Java Development&lt;/a&gt;
discussion how organizations cope with the Java release cycle or are just laggards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codify a performant approach to save whole instances using eager store operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore the migration features when the data schema is changing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait and see if the promised licensing under an open source copyright will be published.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. I have reported the bug how they used path instances. The developers were very supportive. Version 4.01 supports in-memory file systems such as &lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;Jimfs&lt;/a&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. I have reported the bug in the microstream forum and informed them that their claim they support these JDK is plain wrong. The project sadly does not currently have a bug reporting system. I hope the version promised for April 2021 will finally solve these showstoppers.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. Version 5.0 was released in July 2021 and finally provides support for records. You need to increase access to internal components with the option &lt;em&gt;--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED&lt;/em&gt; to have a working approach.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Meaningful Identifiers</title>
      <link>https://blog.tangly.net/blog/2021/meaningful-identifiers/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/meaningful-identifiers/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-02-head.jpg&#34; alt=&#34;2021 01 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are a key concept to successfully model complex business domains.
They permeate how our modern civilization functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Could you imagine a country without a car registration number of vehicles, internet addresses, postal addresses or social security numbers?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are &lt;strong&gt;identifiers&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers cannot be changed at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Updating identifiers means introducing mapping relations between the old and the new values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In computer science, identifiers &lt;em&gt;IDs&lt;/em&gt; are lexical tokens that name entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are used extensively in virtually all information processing systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifying entities makes it possible to refer to them, which is essential for any kind of symbolic processing.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_external_well_defined_identifiers&#34;&gt;External Well-Defined Identifiers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The best identifiers are externally well-defined identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A unique and well-defined authority is responsible for defining and publishing them.
Ideally, the authorities should only create new identifiers and never delete existing ones.
The published information is available to all interested parties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Examples are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Currency names as defined in &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_4217&#34;&gt;ISO standard 4217&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Country abbreviations as defined in &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes&#34;&gt;ISO standard 3166&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Social security numbers are well documented in the country they are used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Car numbers are well-known and documented.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try to use global externally defined identifiers as much as possible.
Always document the authority in charge to create these identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Examples you are using are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IBAN account numbers are defined worldwide through &lt;a href=&#34;https://en.wikipedia.org/wiki/International_Bank_Account_Number&#34;&gt;ISO 13616&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bank connections are defined as Business Identifier Codes through &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_9362&#34;&gt;BIC ISO 9362&lt;/a&gt;.
The registration authority is &lt;a href=&#34;https://en.wikipedia.org/wiki/Society_for_Worldwide_Interbank_Financial_Telecommunication&#34;&gt;SWIFT&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Car numbers and country acronyms are defined worldwide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passport numbers are defined worldwide.
Each country has its own structure and conventions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Social security numbers are a counter-example.
There are currently only defined locally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_external_managed_identifiers&#34;&gt;External Managed Identifiers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall document the source of truth for all externally defined and managed identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source of truth shall work as a benevolent responsible.
It should support all interested parties and guaranty their identifiers can be trusted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_internal_managed_identifiers&#34;&gt;Internal-Managed Identifiers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One possible approach is to define a naming convention such as&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Year - Acronym - Counter&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An example of such an identifier would be&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;2021-CNT-0001 (Contract number 1 in year 2021)
2020-EVT-0101 (Event number 101 in year 2020)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Variations are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A full date as prefix, our system uses this convention to name invoices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A more readable acronym, our ERP system uses the word invoice to name invoices.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware if you export internal managed identifiers, you become a source of truth.
You are responsible for documenting these identifiers and the process to create new ones.
You shall also guaranty that existing identifiers are never recycled.
If your identifiers are strings, you shall clearly define the supported languages and character sets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_domain_driven_design&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-Driven Design&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain Driven Design &lt;em&gt;DDD&lt;/em&gt; is a powerful and modern approach to define agile software architecture &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.
Some key rules are related to identity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Entity has a well-defined identity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An entity is an object not defined by its attributes, but rather by a thread of continuity and its identity.
Any instance of an entity abstraction must have a unique identifier.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Identify aggregate through identity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An aggregate is a group of objects that are bound together by a root entity, called the aggregate root.
Objects outside the aggregate are allowed to hold references to the root but not to any other object of the aggregate.
The aggregate root is responsible for checking the consistency of changes in the aggregate.&lt;br/&gt;
An aggregate is found and referenced through the identifier of the aggregate root entity.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reference over aggregate through identity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An aggregate shall reference another aggregate through the identity of their root entity instance.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The concept of identity is therefore central to the domain-driven design approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Always try to find an external, well-defined identifier for your entities.
Beware of legal aspects when you are using government defined identifiers such as social security numbers, passport numbers or car numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid by all means to using an internal privately defined identifier as a public one.
You will bear the burden of documenting, manage and evolve the scheme as soon as you do this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Value Objects as Embedded Entities</title>
      <link>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-01-head.png&#34; alt=&#34;2021 01 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This post discusses the value object pattern, and the factory pattern, which are tactical patterns in the domain-driven design
&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-Driven Design&lt;/a&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value objects represent typed values that have no conceptual identity in your domain.
They can help you write better codes that are less error-prone, more performant and more expressive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value objects define the second kind of domain objects besides entities.
Their main characteristic is immutability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Attributes of a value object &lt;strong&gt;never&lt;/strong&gt; change&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A second characteristic is that they do not have external identifiers.
Unlike an entity, two value objects with the exact same properties are considered equal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A third one is they should be self-validating.
A value object shall verify the validity of its attributes when being created.
If any of its attributes are invalid, the object should not be created and an error or exception should be raised.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Immutable value objects are defined as &lt;strong&gt;record&lt;/strong&gt; in Java. Use the constructor to validate your objects.
Throw an &lt;em&gt;IllegalArgumentException&lt;/em&gt; if a validation error occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Value_object&#34;&gt;Value Objects&lt;/a&gt; do have attributes and methods as entities.
Attributes of value objects are immutable.
Methods of value objects can only be queries without side effects.
Operations never command a change to the internal state of a value object.
We can pass value objects to clients without worrying they change them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Many objects can be modeled as value objects instead of entities because they are defined through their attributes.
These objects measure, quantify or describe things in the domain model.
Because they are so easy to handle, we should model domain abstractions as value objects as often as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_addresses_phone_numbers_email_addresses&#34;&gt;Addresses, Phone Numbers, Email Addresses&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some value objects are part of any commercial application domain.
Postal addresses, phone numbers and email addresses are canonical value objects.
Other candidates are bank account IBAN numbers, job titles, job descriptions, company legal status.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This means that these objects do not have an object identifier and should not be stored in a separate table if stored in an SQL database.
Value objects shall be embedded objects and be part of an object such as a person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A person is an entity.
It should have an external identifier and has a postal address, multiple phone numbers, and one or more email addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check your domain model and validate these assumptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Postal address, phone numbers, email addresses are value objects and have no external or internal identifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They are always owned by other value objects or more often by entities such as people, companies, and delivery forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They are immutable objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Business processes can replace such an object with a new instance without impeding other domain instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programmed in modern Java, these value objects should be &lt;strong&gt;records&lt;/strong&gt; to guaranty immutability at the language level.
As a bonus, you get the &lt;strong&gt;hashCode&lt;/strong&gt; and &lt;strong&gt;equals&lt;/strong&gt; methods for free.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A Java record class declaration is very compact.
Often it is a one-liner.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_invoice_lines&#34;&gt;Invoice Lines&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Invoice lines are lines containing details in an invoice.
Invoice lines are always value objects belonging to exactly one invoice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To complicate matter, invoice lines have different types, such as a regular line with a specific article, quantity, unit price and computed price.
Often VAT aspects must be considered and computed for the overall invoice.
An invoice line can also be a subtotal for a set of regular invoice lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;VAT definition and computation is often a murky domain.
The VAT value can be dependent on the article, the company selling it and the client buying it.
When public administration defines a domain and associated business rules, the world often becomes quite complicated and ambiguous.
The VAT administrative laws in Switzerland are more than 2000 pages of an illegible text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The complete definition of this business domain is not part of this article.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following design challenges exist&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Serialization libraries such as JSON Jackson library cannot handle invoice lines with multiple Java class types.
A workable approach is described and implemented with the open source component &lt;a href=&#34;https://blog.tangly.net/docs/gleam/&#34;&gt;Gleam&lt;/a&gt;.
The solution is to define selectors to instantiate the correct Java class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoices are complex objects and ideal candidates for a document-oriented persistent approach.
Invoices should not be stored in a relation-based persistence store, meaning an SQL database.
To store them in a table, you have to model the various types of lines and add a technical identifier to each invoice line instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_factories&#34;&gt;Factories&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The factory pattern in Domain Driven Design &lt;em&gt;DDD&lt;/em&gt; can be seen as a super pattern for the Gang of Four (GoF) creation patterns.
Factories are concerned with creating new entities and value objects.
They also validate the invariants for the newly created objects.
We can place a factory on the entity or value object itself or on an independent object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java &lt;strong&gt;record&lt;/strong&gt; constructs support validation of properties as part of the constructor.
Invalid objects cannot be constructed if the constructor validation detects a violation.
This mechanism ensures only valid instances exist in the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Factories that are declared on the same object they create are either factory methods or prototype methods.
The factory method creates a completely new object from the method parameters.
The prototype method uses an existing instance to derive a new object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The prototype method is supported with the keyword &lt;strong&gt;with&lt;/strong&gt; in C#.
The JEPs for deconstruction and construction of objects in a &lt;strong&gt;switch&lt;/strong&gt; statement could provide a similar approach in the future for Java.
The current version of Java &lt;em&gt;JDK 16&lt;/em&gt; does not support this feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When the creation logic is complex or has dependencies that are not needed by the created object.
It is best to create a separate factory.
This factory could provide multiple ways to create new instances.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_value_objects_in_persistent_store&#34;&gt;Value Objects in Persistent Store&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We encourage experimenting with the &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; approach for small projects footnote:[The Eclipse foundation took over the MicroStream library in 2023 under the new name &lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt;.
The effort to persist a Java object graph is very small.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can always move to a no SQL solution when your application is successful and time comes to harden it.
Another standard but cumbersome approach is to move to JPA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Support Comments for Static Hugo Website</title>
      <link>https://blog.tangly.net/blog/2020/support-comments-for-static-hugo-website/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/support-comments-for-static-hugo-website/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-12-02-head.png&#34; alt=&#34;2020 12 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are times in software when you are facing a problem, you find an off-the-shelf solution, and a few lines of code later it just works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Today I lived one of those moments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The whole configuration of comments and modification of the &lt;a href=&#34;https://www.docsy.dev/&#34;&gt;Docsy&lt;/a&gt; theme took around one hour.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I wanted to add a comment section to this blog for a while.
I was reluctant to implement one myself the classical way, using an external service such as disqus.
This blog is a static website created with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and does not use a database.
All pages are written with &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;, stored in a Git repository and rendered using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.
I wanted to store comments in a personally owned repository and protect my readers from an advertisement and personal information collection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_meeting_utterances&#34;&gt;Meeting Utterances&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some information on the Internet about &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt; is wrong.
Facts are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Utterances library uses a GitHub repository to store comments associated with your website articles and pages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your website can be hosted &lt;strong&gt;anywhere&lt;/strong&gt;.
You do &lt;strong&gt;not&lt;/strong&gt; need to host your static website repository on GitHub, but you can.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Readers wanting to comment &lt;strong&gt;must&lt;/strong&gt; login once with their GitHub account to authorize the &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt; application.
Anonymous commenting is not supported.
&lt;em&gt;This restriction is reasonable for a technical website whose readers are technically affine and already have a GitHub account.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utterance products are free.
It claims to have no tracking, no advertisement, and no lock-in.
The comments are stored in your repository as GitHub issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utterances layout looks nice and can be styled.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Utterances is an open source app built and maintained by Jeremy Danyow.
He announced the project in 2018.
It provides a lightweight web widget &lt;em&gt;&amp;lt;iframe&amp;gt;&lt;/em&gt; to add a comment section to a website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When someone posts a comment, the Utterances bot literally leaves a corresponding comment on the issue.
In other words, each page gets its own issue with a comment feed, and so you benefit from the entire feature set of issues out-of-the-box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comments are stored as issues inside a GitHub repository of your choosing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can edit, report and delete comments.
&lt;em&gt;These functions are great for moderation.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are watching the repository, you will get email notifications when comments are posted to your site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The other wonderful aspect of Utterances is how simple the entire setup really is.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setting_up_utterances&#34;&gt;Setting Up Utterances&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The process is described in details on &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt;.
The steps are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Create a public GitHub repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt; app on the repo you would like to host comments on.
You can use the repository of your blog, or set up a dedicated repository.
This option means your blog or website does not need to be hosted on GitHub.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the code snippet on the &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt; website and copy it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can skip the code snippet step if you are using Docsy and follow the below instructions to configure your theme.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;script
  &lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;async&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;https://utteranc.es/client.js&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;repo=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;&amp;lt;OWNER&amp;gt;/&amp;lt;NAME&amp;gt;&amp;#34;&lt;/span&gt; &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;issue-term=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;theme=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;github-light&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;crossorigin=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;OWNER&amp;gt;/&amp;lt;NAME&amp;gt; is the name of your repository.
In my case, it would be &lt;em&gt;marcelbaumann/tangly-team-comments&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_configure_docsy_theme&#34;&gt;Configure Docsy Theme&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use the Hugo theme &lt;a href=&#34;https://www.docsy.dev/&#34;&gt;Docsy&lt;/a&gt; to style the &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;Open Source Components&lt;/a&gt;.
I put some effort to have a configurable extension through site parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_create_the_comments_partial_for_utterances&#34;&gt;Create the comments partial for utterances&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The partial file contains the code to display for commenting using utterances.
It is a modified version of the snippet you can generate on the &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt; website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a partial in &lt;em&gt;docsy/layout/partial&lt;/em&gt;.
I named my partial &lt;em&gt;comments-utterances.html&lt;/em&gt; and add the following snippet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;page-blank&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;utterancers_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;https://utteranc.es/client.js&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;repo= &lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Site.Params.comments_utterances_repo&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;}}&lt;/span&gt;                   &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;issue-term= &lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Site.Params.comments_utterances_issue_term&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;}}&lt;/span&gt;       &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;theme= &lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Site.Params.comments_utterances_theme&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;}}&lt;/span&gt;                 &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;crossorigin=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color: #116329&#34;&gt;async&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub repository where the issues are stored&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;See &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt; documentation how the reference to a page, or an article can be tailored&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;See &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt; documentation about supported themes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_edit_the_blog_content_file&#34;&gt;Edit the blog content file&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The template &lt;em&gt;docsy/layouts/blog/content.html&lt;/em&gt; is edited to include the above defined partial file.
The original file supports connecting to disqus.
I replaced the disqus specific code with the inclusion of the partial defined above for utterances comment support.
&lt;em&gt;Perhaps &lt;a href=&#34;https://www.docsy.dev/&#34;&gt;Docsy&lt;/a&gt; will introduce a more generic mechanism in the future to integrate commenting systems.
I assume they are waiting on &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to first provide such a mechanism.
Currently, Hugo and Docsy only provide out of the box support for Disqus.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;td-content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
	{{ with .Params.description }}&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;lead&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;{{ . | markdownify }}&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;{{ end }}
	&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;td-byline mb-4&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;
		{{ with .Params.author }}{{ T &amp;#34;post_byline_by&amp;#34; }} &lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ . | markdownify }}&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; |{{ end}}
		&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;time&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;datetime=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;{{  $.Date.Format &amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;2006&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;-01-02&lt;/span&gt;&lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #f6f8fa;background-color: #82071e&#34;&gt;}}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;text-muted&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;&amp;gt;&lt;/span&gt;{{ $.Date.Format $.Site.Params.time_format_blog  }}&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	{{ if (and (not .Params.hide_readingtime) (.Site.Params.ui.readingtime.enable)) }}
	    {{ partial &amp;#34;reading-time.html&amp;#34; . }}
	{{ end }}
	{{ .Content }}
	{{ if (.Site.Params.comments_utterances) }}
		&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;/&amp;gt;&lt;/span&gt;
		{{ partial &amp;#34;comments-utterances.html&amp;#34; . }}
		&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #116329&#34;&gt;/&amp;gt;&lt;/span&gt;
	{{ end }}

	{{ partial &amp;#34;pager.html&amp;#34; . }}
&lt;span style=&#34;color: #116329&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_add_four_site_variables_to_config_toml&#34;&gt;Add four site variables to config.toml&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above changes try to be generic and are configured through site variables in the site configuration file under the &lt;em&gt;[params]&lt;/em&gt; block.
You do not need to edit partial files to tailor them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;# flag indicating if the utterances (https://utteranc.es/) should be displayed&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;comments_utterances&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;# GitHub repository name where all comments are stored. The repository can be the same as the website repository or a different one.&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;comments_utterances_repo&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;marcelbaumann/tangly-team-comments&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;# Encoding used to map a site page to a GitHub issue. See utterances (https://utteranc.es/) documentation.&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;comments_utterances_issue_term&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;pathname&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;# Theme used by utterance on the website. See utterances (https://utteranc.es/) documentation.&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;comments_utterances_theme&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;github-light&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;static-website-improvements&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2023/static-website-improvements&#34;&gt;Static Website Improvements&lt;/a&gt;
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;improving-a-static-website&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2021/improving-a-static-web-site-build-with-hugo-and-docsy&#34;&gt;Improving a Static Website Build With Hugo and Docsy&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;support-comments&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2020/support-comments-for-static-hugo-website&#34;&gt;Support Comments for Static Hugo Website&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;creating-technical-website&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2020/creating-a-technical-website-with-hugo-and-asciidoc&#34;&gt;Creating a technical Website with Hugo and Asciidoc&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Reference Codes</title>
      <link>https://blog.tangly.net/blog/2020/reference-codes/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/reference-codes/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-11-01-head.jpg&#34; alt=&#34;2020 11 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reference codes are an old concept.
They are often used in the relational database schema definition as enumeration values.
The database specialists often call them lookup tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reference codes are dynamic enumeration values.
By dynamic, we mean you can add values without recompiling the source code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In modern DevOps environments where deployment of a new version is performed in minutes, this advantage is somewhat shallow.
We view reference codes more as strongly typed and efficient tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you easily add the concept of reference codes in your application?
We provide an initial setup approach requiring mere minutes to add codes to your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_enumerations_as_codes&#34;&gt;Enumerations as Codes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a professional designer, you have declared sets of fixed values as enumeration in your source code.
Now you can extend your enumeration classes with the code interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional information is available under link:../../../docs/bus/businessmodels/ Below the source code in modern Java is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;isEnabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EnumCode&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_2&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_3&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_4&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_5&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;EnumCode&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;EnumCode&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ordinal&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;isEnabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above approach is a low impact transformation of your application.
Once your enumeration types implement the code interface, you are free to migrate selected types to external persistent and extensible solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_persistent_codes&#34;&gt;Persistent Codes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Codes can be defined and stored as JSON sets or in SQL table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java code for the JSON approach is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;/**
 * Utility method to read all code values from a JSON file using the org.json library.
 *
 * @param clazz   class of the reference code
 * @param factory placeholder to pass the class constructor as lambda expression
 * @param path    path to the JSON file containing the code values
 * @param &amp;lt;T&amp;gt;     class of the reference code
 * @return code type and all its values
 * @throws IOException if a file access error occurred
 */&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeFactory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;IOException&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Reader&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Files&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;newBufferedReader&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;StandardCharsets&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;Iterator&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;iter&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;JSONArray&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;JSONTokener&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reader&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ArrayList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;iter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #953800&#34;&gt;JSONObject&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;JSONObject&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;iter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getBoolean&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The JSON files containing the code values can be stored as resource files and delivered either with application or in a separate jar file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java code for the SQL table is quite similar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;/**
* Utility method to read all code values from a relational database table using Java regular API.
*
* @param clazz class of the reference code
* @param factory placeholder to pass the class constructor as lambda expression
* @param dataSource data source to the database to read from
* @param tableName name of the table containing the code values
* @param &amp;lt;T&amp;gt; class of the reference code
* @return code type and all its values
* @throws SQLException if a database access error occurred */&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeFactory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;DataSource&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dataSource&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tableName&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;SQLException&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;SQL_QUERY&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;SELECT id, code, enabled FROM &amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tableName&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Connection&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dataSource&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Statement&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;statement&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;createStatement&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;ResultSet&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;statement&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;SQL_QUERY&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ArrayList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getBoolean&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At the database level, you can define integrity rules in the schema to increase data quality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design&#34;&gt;Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You have the freedom to model set of values as enumeration, reference codes or tags.
Each approach has specific advantages and tradeoffs.
The costs of moving from one approach to another are quite small.
Just choose one solution, implement it and track its adequacy and user acceptance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We provide a Java library BUS implementing these constructs.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;Open Source Components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The unit tests contain examples for enumeration codes, JSON codes and SQL database stored codes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Creating a technical Website with Hugo and Asciidoc</title>
      <link>https://blog.tangly.net/blog/2020/creating-a-technical-website-with-hugo-and-asciidoc/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/creating-a-technical-website-with-hugo-and-asciidoc/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-10-01-head.jpg&#34; alt=&#34;2020 10 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I hosted my technical blogs on &lt;a href=&#34;https://www.blogger.com/&#34;&gt;blogger&lt;/a&gt; for years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I correctly remember, I started to use blogger ten years ago It was a good choice at that time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I could easily write blogs and publish them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is a great tool with some drawbacks.
Over the years, the deficiencies sting more and more&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The major drawbacks are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Their editor is brittle, with limited functionality and unreliable.
The generated HTML is not legible and does not support concepts such as micro fragments, meta information or simple functions such as source code highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last quarter, they started to tinker with their editor and output format.
My older posts are now a mess and can only be open in the HTML mode.
If I switch to their WYSIWYG editor, the layout is destroyed and random fonts family and sizes are displayed.
Worse, the blogs are also displayed mangled to the readers even if I do not edit them.
This destruction of all older blogs and the missing migration path were killer criteria.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blogger does not support modern markup language such &lt;a href=&#34;https://www.markdownguide.org/&#34;&gt;Markdown&lt;/a&gt; or &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;.
Blogger uses a proprietary and not easy to port format.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is &lt;strong&gt;time&lt;/strong&gt; to find an alternative, and I have to confess I am a huge fan of &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;OK, so why not go with Markdown?
Don’t get me wrong, there is nothing bad with Markdown; except that no one should probably use it when &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; and Asciidoctor are available.
I’m writing all my documents with &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following needs are identified:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;I shall write blogs with the selected solution.
The blogs shall be written in &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;.
The blog platform should support multiple years of publishing and referencing between blogs.
Our projects and our collaborators put effort to regularly publish articles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I shall be able to write technical articles and publish them on the same site.
The articles are naturally written in &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;.
We want professional looking documentation to encourage new users to try our open source components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I shall publish the technical documentation of the open source components I develop on the same site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; was selected as static site generator because its support for &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; is tremendously improving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Static website generators have strong advantages for technical savvy people:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hosting is cheap.
GitHub, GitLab or Bitbucket pages even host static websites for free.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The source files go into &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; for backup and history.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The source files are in plain text:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Changes come in as a &lt;em&gt;Pull Request&lt;/em&gt; for proper review and CI pipeline validation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sources are open in our IDEs, which encourages refactoring them alongside the code.
This results in less stale content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First I used the &lt;a href=&#34;https://github.com/thingsym/hugo-theme-techdoc/&#34;&gt;hugo-theme-techdoc&lt;/a&gt; to customize &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.
It worked great for the technical documentation and technical articles but fell short of my wishes for the blog part.
When I discover the theme &lt;a href=&#34;https://www.docsy.dev/&#34;&gt;Docsy&lt;/a&gt;.
It supports the technical documentation, technical articles, and blogging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The best part is that &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; now supports &lt;a href=&#34;https://asciidoctor.org/&#34;&gt;Asciidoctor&lt;/a&gt; natively.
No more strange manipulation to load &lt;em&gt;gem&lt;/em&gt; modules you need.
And diagrams through asciidoc-diagram and plantUml are generated in the expected folders.
The documentation is still on the light side, but you find the need information on the various pull requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The bonus is that &lt;a href=&#34;https://asciidoctor.org/&#34;&gt;Asciidoctor&lt;/a&gt; newer versions have native support for &lt;em&gt;rouge&lt;/em&gt; syntax highlighter.
It is no more necessary to load &lt;em&gt;pygment&lt;/em&gt; highlighter and configure CSS files.
Another huge gain is that &lt;em&gt;plantuml&lt;/em&gt; and other diagrams are generated at the right location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_install_the_tools&#34;&gt;Install the Tools&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My development platform is a MacBookPro and macOS.
I use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; as a package manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The instructions to install hugo and asciidoctor are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;brew install hugo                         &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

brew install asciidoctor                  &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
gem install asciidoctor-diagram
gem install asciidoctor-rouge
gem install asciidoctor-bibtex
gem install asciimath

brew install plantuml                     &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
brew install graphviz

sudo npm install -D --save autoprefixer   &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
sudo npm install -D --save postcss-cli
sudo npm install -D --save postcss&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Install &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Install &lt;a href=&#34;https://asciidoctor.org/&#34;&gt;asciidoctor&lt;/a&gt; and additional asciidoctor packages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Install &lt;a href=&#34;https://plantuml.com/&#34;&gt;plantuml&lt;/a&gt; and &lt;a href=&#34;https://graphviz.org/&#34;&gt;graphviz&lt;/a&gt; for diagrams, in particular UML sketches&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Install &lt;a href=&#34;https://postcss.org/&#34;&gt;PostCSS&lt;/a&gt; and additional packages used by docsy to generate deployment site.
See also &lt;a href=&#34;https://www.docsy.dev/docs/getting-started/&#34;&gt;docsy documentation&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_asciidoctor_configuration&#34;&gt;Asciidoctor Configuration&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below the configuration of asciidoctor in the &lt;em&gt;config.toml&lt;/em&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;markup.asciidocext&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #0a3069&#34;&gt;extensions = [&amp;#34;asciidoctor-html5s&amp;#34;, &amp;#34;asciidoctor-diagram&amp;#34;]&lt;/span&gt;
  &lt;span style=&#34;color: #0a3069&#34;&gt;workingFolderCurrent = &lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color: #0a3069&#34;&gt;[markup.asciidocext.attributes]&lt;/span&gt;
    &lt;span style=&#34;color: #0a3069&#34;&gt;imagesdir = &amp;#34;../pics&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color: #0a3069&#34;&gt;source-highlighter = &amp;#34;rouge&amp;#34;&lt;/span&gt;            &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&#34;color: #0a3069&#34;&gt;rouge-style = &amp;#34;github&amp;#34;&lt;/span&gt;                  &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&#34;color: #0a3069&#34;&gt;rouge-css = &amp;#34;style&amp;#34;&lt;/span&gt;                     &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span style=&#34;color: #0a3069&#34;&gt;icons = &amp;#34;font&amp;#34;&lt;/span&gt;                          &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &lt;span style=&#34;color: #0a3069&#34;&gt;ref-less = &amp;#34;https://less.works/[LeSS]&amp;#34;&lt;/span&gt;  &lt;i class=&#34;conum&#34; data-value=&#34;5&#34;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Select &lt;a href=&#34;https://rouge-ruby.github.io/docs/&#34;&gt;rouge&lt;/a&gt; as source highlighter.
You should not add it to the extensions because since &lt;a href=&#34;https://asciidoctor.org/&#34;&gt;Asciidoctor&lt;/a&gt; version 2.0 rouge is included.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define the style used to highlight source code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure rouge to generate all formatting data into the generated HTML file, avoiding any CSS file configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Icons provide better looking icons for various &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;} constructs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;5&#34;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define document attributes which are accessible to all processed documents (DRY concepts for the whole site).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;CAUTION&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;exampleblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Newer versions of hugo have stricter security restrictions.
You must explicitly enable asciidoctor support by adding the following statements in your configuration file&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;security&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;security.exec&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #0a3069&#34;&gt;allow = [&amp;#39;^dart-sass-embedded$&amp;#39;, &amp;#39;^go$&amp;#39;, &amp;#39;^npx$&amp;#39;, &amp;#39;^postcss$&amp;#39;, &amp;#39;^asciidoctor$&amp;#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_docsy_configuration&#34;&gt;Docsy Configuration&lt;/h3&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_add_first_level_folders&#34;&gt;Add First Level Folders&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each time you add your own first level folder – meaning at the same level as docs, blog, about, or community, you need to extend the layout to support it.
For example, I store technical articles in the folder ideas and use the standard template.
So I need to add (if not, no items are visible in the sidebar).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;cp -R ./layouts/docs ./layouts/ideas&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_change_layouts&#34;&gt;Change layouts&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We had to change the partial &lt;em&gt;footer.html&lt;/em&gt; to display a better looking copyright clause.
The original version has hard coded text not really compatible with the creative commons license we are using.
The layout is updated by overwriting the involved partial file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;cp $&lt;/span&gt;prjDir/src/site/website/docsy/layouts/partials/footer.html &lt;span style=&#34;color: #0550ae&#34;&gt;$siteDir&lt;/span&gt;/themes/docsy/layouts/partials&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_enable_local_search_engine&#34;&gt;Enable Local Search Engine&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One cool feature of &lt;a href=&#34;https://www.docsy.dev/&#34;&gt;Docsy&lt;/a&gt; is local search support through &lt;a href=&#34;https://lunrjs.com/&#34;&gt;lunrjs&lt;/a&gt; engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;algolia_docsearch = &lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color: #0a3069&#34;&gt;offlineSearch = &lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #0a3069&#34;&gt;offlineSearchSummaryLength = &lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;200&lt;/span&gt;
&lt;span style=&#34;color: #0a3069&#34;&gt;offlineSearchMaxResults = 25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learning&#34;&gt;Learning&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The static website is published under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;Open Source Components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source of the whole website is available under &lt;a href=&#34;https://bitbucket.org/tangly-team/tangly-os/src/master/src/site/website/&#34;&gt;Website Source Code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Printing of a single article is supported through your browser.
You can configure printing a whole section with or without a table of contents through &lt;a href=&#34;https://www.docsy.dev/docs/adding-content/print/&#34;&gt;configuration options&lt;/a&gt;.
For advanced cases, you can define the layout of the printed document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use relative links in your &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; documents.
Beware where the files are located by &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; engine and the naming conventions shall follow &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid the specialized but uncompleted &lt;em&gt;html5s&lt;/em&gt; backend and use instead the &lt;em&gt;html5&lt;/em&gt; backend.
I was not able to find good examples of stylesheets for the semantic backend.
The &lt;em&gt;html5s&lt;/em&gt; backend uses new names for classification and sometimes different HTML structures.
The regular available stylesheets will not style correctly the generated website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Docsy theme does not explicitly support asciidoc documents and the associated stylesheets.
I had to extend the Docsy stylesheets with styling for admonition blocks, quote blocks, and embedded images to improve the quality of the texts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
The Hugo theme community is slow to better support asciidoc documents.
The Hugo developers clearly stated that styling for asciidoc documents is the responsibility of theme authors.
All Hugo users shall be aware that asciidoc is an officially supported input format.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Funny is that the blogger software and the docsy theme are from the same company as &lt;strong&gt;Google&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;This blog article is naturally written in &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; syntax&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;static-website-improvements&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2023/static-website-improvements&#34;&gt;Static Website Improvements&lt;/a&gt;
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;improving-a-static-website&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2021/improving-a-static-web-site-build-with-hugo-and-docsy&#34;&gt;Improving a Static Website Build With Hugo and Docsy&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;support-comments&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2020/support-comments-for-static-hugo-website&#34;&gt;Support Comments for Static Hugo Website&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;creating-technical-website&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2020/creating-a-technical-website-with-hugo-and-asciidoc&#34;&gt;Creating a technical Website with Hugo and Asciidoc&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. You find tutorials how to write asciidoc documentation and how to use the toolchain on YouTube and Udemy.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: The power of Tags and Comments</title>
      <link>https://blog.tangly.net/blog/2020/the-power-of-tags-and-comments/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/the-power-of-tags-and-comments/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-09-01-head.jpg&#34; alt=&#34;2020 09 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A software architect models customer domains and maps them to &lt;em&gt;excellent&lt;/em&gt; software constructs.
The solution shall support future customer groups and expand to store additional information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Tags&lt;/em&gt;, also called labels, provide an informal ontology to classify customer data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags are extensible and are machine-readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Comments&lt;/em&gt; empower users to store relevant unstructured information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Comments are only for human beings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are good approaches to provide searchable tags and labels and avoid wild growth of useless records?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Can you as a designer govern the ontology defined through labels?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tags&#34;&gt;Tags&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags add semantic information to business entities.
Tags are often defined as a crowd ontology without enforced schemas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Invest in domain modeling to define and maintain tags, and you will move tags to full-fledged ontology into your domain models.
This ontology supports meaningful search, segmentation and reporting over historical and geographical raw data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags with associated values are also used to decorate unrelated entities with orthogonal information.
For example, you can associate geographical coordinates – GIS – to pictures, meetings, or addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A tag has three parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;optional namespace&lt;/em&gt; to classify the tag in the overall ontology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;mandatory name&lt;/em&gt; to uniquely identify the tag in the context of its optional namespace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;optional value&lt;/em&gt; providing details to the tag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For example, we could define a tag such as &lt;em&gt;geo:longitude=50.167958&lt;/em&gt; to provide the meta-information of longitude to an entity.
This tag has a namespace &lt;em&gt;geo&lt;/em&gt;, a name &lt;em&gt;longitude&lt;/em&gt; and a double value &lt;em&gt;50.167958&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional information is available under link:../../../docs/core/models/ Below the source code in modern Java is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should strongly consider the introduction of tag types to constrain the possible values of a specific tag.
For example, you can define that the namespace geo contains only the longitude and latitude tags.
Both these tags have mandatory values of type double.
Once your design supports tag types, you can add generic validation rules in the user interface and in business logic for all existing tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The ontology enforcement allows consistent reporting and data drilling over departments in your company and over time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_comments&#34;&gt;Comments&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Comments provide human-readable information and hints for entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An author writes a comment at a specific time.
Comments shall usually be immutable.
To respect human fallibility, a correction mode can be supported.
If changed, the new comment replaces the older one and is marked as edited.
The edition feature is part of the workflow and not part of the domain model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An author can be another computer system.
It can provide information about its actions through comments.
If the deletion of comments is disabled, the comment history is an audit trail documenting what happened over time with an entity instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware that the authors define an external identifier space.
If your application requires a user account, you can connect the author with the user account.
The consequence is that you should only disable these accounts and never delete them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Policy should be defined to handle the fact that collaborators quit the company over time and are no more active users; but they are still referenced as authors.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The code in Java is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Comment&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasTags&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;created&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;// getters and setters&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design&#34;&gt;Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our architecture follows the principles of domain-driven design.
Comments are always associated with a specific bounded domain of the overall application.
For example, we often model the persistence view of a domain through a database schema.
Each bounded domain has an own independent scheme and could have a persistence store for comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags are classification information associated with an instance and should be stored within the entity.
The set of tags is often transformed to a textual representation and stored in a column.
The search features of the underlying database can be applied for selecting instances of interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tag types are a medium to define an ontology and create valid tag instances.
A set of tag types shall always be associated with a specific domain of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We provide a Java library &lt;a href=&#34;https://blog.tangly.net/docs/domains/crm/&#34;&gt;CRM&lt;/a&gt; implementing these constructs.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;tangly open source components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Entities, Identifiers, External identifiers and Names</title>
      <link>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-08-01-head.png&#34; alt=&#34;2020 08 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A software architect models customer domains and maps them to powerful software abstractions &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-storytelling&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.
Soon you correlate internal efficient identifiers, meaningful external identifiers, and domain entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You enjoy long conversations with the enterprise data architect and identify the system owning a specific external identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you relate to external systems and communicate with other companies?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you define internal identifiers, which grow with application success?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you bridge the customer world with your software solution?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are the good practices to create a maintainable, legible and efficient model of your domain model?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_entity_concept&#34;&gt;Entity Concept&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need an approach to model customer domain entities and map them to a legible and maintainable software construct
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An entity is a user domain model abstraction and is mapped to a software type.
The entity has:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;unique mandatory internal&lt;/em&gt; object identifier &lt;strong&gt;&lt;em&gt;oid&lt;/em&gt;&lt;/strong&gt;, we recommend the use of numeric values to improve performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A public and &lt;em&gt;external identifier&lt;/em&gt; &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt;, we recommend the use of text to adequately support various external identification schemes.
An example is the European enterprise identifier EUID identifying a company or a certified natural person in Europe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A human-readable &lt;em&gt;name&lt;/em&gt;.
A name does not need to be unique in the system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A more sophisticated variant provides additional features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A set of tags to classify the instance through a crowd based ontology.
Tags are often called labels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A list of comments to add human-readable information to the instance.
Comments have a timeline and can be sorted by creation date.
The comments can be extended to add audit information such as functional change information or activities related to the instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These entity features should be defined as a set of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mixin&#34;&gt;mixin&lt;/a&gt; interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_internal_object_identifiers_oid&#34;&gt;Internal Object Identifiers &lt;em&gt;oid&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The object identifier &lt;em&gt;oid&lt;/em&gt; uniquely identifies an instance of a specific type or belonging to a specific type hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This identifier shall be a numerical value to increase the performance of persistent solutions.
It is used as an internal identifier in the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It should never be visible outside the system or published through an API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ideally, the identifier is universally valid and uniquely identifies an instance in all contexts.
For example, the concept of UUID tries to provide such an identifier.
The drawback is that the UUID is not a numerical value and cumbersome for a developer or a user to memorize.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An interesting approach is to support unique identifiers in the context of a bounded domain.
All entities of the domain will have unique object identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The implementation can use a sequence from the domain database or schema.
A programmatic identity generator can also be established in the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because the &lt;em&gt;oid&lt;/em&gt; is never exported, the solution is powerful and simple to realize.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;History has taught developers not to spare on the size of identifiers.
Please use a long value meaning 64 bits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid using the internal identifier to communicate with external systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you respect this rule, you are free to migrate your objects to another identification scheme in the future.
New schemes are often helpful when the application grows, or you have later to import and take over a lot of legacy data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_external_object_identifiers_id&#34;&gt;External Object Identifiers &lt;em&gt;id&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The external unique identifier &lt;em&gt;id&lt;/em&gt; shall uniquely identify an entity instance.
It is used as an external identifier to communicate with other systems.
It should always be visible outside the system and is used in any public API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try to have exactly one external identifier per object to communicate with external systems.
This restriction is a corollary of the rule stating an instance is owned by exactly one system.
This system is the one defining and managing the external unique identifiers for the related instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should clearly define the owning system for the external identification scheme.
This information shall be documented and accessible to all involved parties.
This process is part of the enterprise architecture activities of your ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;External identifier ownership is often a murky situation when working with legacy systems.
You often have multiple sources of external identifiers, sometimes overlapping and sometimes not covering all instances.
You have to formulate a long-term strategy to clean up your landscape and handle the problems until these clean-up activities are completed.
By handling, we mean administrative and import rules matching the various external identifiers to the same object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One possible solution is to use tags.
Store externally defined identifiers as tags.
Document these tags as specific for the external system.
This approach scales to multiple external identifiers, and multiple systems managing the same external identifier.
So you have a scalable approach and do not pollute your domain model with spurious information defined in external systems.
Upon completion of the refactoring activities, these tags document historical information and could safely be removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Multiple external object identifiers imply the existence of mapping functions to identify the object referenced.
Because the ownership of external identifiers is outside your system, you are dependent on these systems and have to hope they are good citizens.
The key rule of good systems is that they never change external identifiers.
As soon as you modify identifiers, they are per definition no more real identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_names_name&#34;&gt;Names &lt;em&gt;name&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The entity &lt;em&gt;name&lt;/em&gt; is a human-readable name to distinguish between entity instances.
Ideally, it should be almost unique.
The fallback is to use the external unique identifier &lt;em&gt;id&lt;/em&gt; known to all external systems.
The drawback is that we have no guarantee it is legible for users.
Names are essential for well-designed user interfaces.
Never require from your users memorizing external identifiers, please provide names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For example, the first and last names of a person is the name for a natural entity.
Social security number is a possible external identifier An internal identifier is used as a primary key in the persistence storage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advices&#34;&gt;Advices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Internal object identifiers are identifiers.
An identifier is immutable and should be numerical for performance reasons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;External object identifiers have exactly one application in charge to create them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Names are human-readable and improve the legibility and usability of the user interface and reports.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;External identifiers can be tricky.
In Switzerland, we had an old social security number, which is still referenced in a lot of legal systems.
For example, it is still part of your tax salary yearly form.
This is the reason I strongly advocate internal identifiers.
You have no control over external systems providing accepted external identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are a key element to model entities using the domain driven design &lt;em&gt;DDD&lt;/em&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have a new social security number, which is used in social insurance workflows.
&lt;em&gt;The same number is also used in medical insurance workflows.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also have a federal identity card number, a federal passport number, a federal driver’s license number.
Additional used identifiers are medical card insurance numbers, a state tax personal identification number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All these external identifiers shall reference the same natural person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More interesting is that a tourist living in the European zone has none of these numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please implement the internal identifier feature as an interface marker.
The external identifier and name features can be grouped into one interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional information is available under &lt;a href=&#34;../../../docs/core/models/&#34;&gt;models&lt;/a&gt;.
Below the source code in modern Java is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasId&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We provide a Java library &lt;em&gt;core&lt;/em&gt; implementing these constructs.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;tangly open source components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_extensions&#34;&gt;Extensions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See our blog how to extend the entity concept with the powerful and flexible concepts of tags and comment approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another blog shows a constrained form of tags using the concept of reference codes also called reference tables or lookup tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-storytelling&#34;&gt;&lt;/a&gt;[1] S. Hofer and H. Schwentner, &lt;em&gt;Domain Storytelling&lt;/em&gt;. Pearson Education, Limited, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B099ZNXCJT&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B099ZNXCJT&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[2] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[3] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: A Journey Implementing Digital Invoices</title>
      <link>https://blog.tangly.net/blog/2020/a-journey-implementing-digital-invoices/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/a-journey-implementing-digital-invoices/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-07-01-head.png&#34; alt=&#34;2020 07 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our company has the ambition to digitize all our workflows since our inception.
We proudly state we never bought a printer or a fax machine.
Analog machines should become obsolete in the digital age.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Companies should be more environment-aware and save some trees.
See our blog &lt;a href=&#34;../../2019/a-journey-to-be-a-digital-company-tangly-llc&#34;&gt;A Journey to Be a Digital Company&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Switzerland finally introduced a digital payment slip.
It uses a QR code and still assume you need to print it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The European Union is more innovative and mandates that invoices to government parties must be digital.
Our company exchanges contracts and invoices with partners and customers using the standardized and well-known PDF format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is time to explore extensions to support the new legal requirements in Switzerland and in Europe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We show open source based solutions, and the tradeoffs we had to accept.
Beware our solutions are based on the Java stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_swiss_qr_code&#34;&gt;Swiss QR Code&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-en.pdf&#34;&gt;Swiss QR-bill&lt;/a&gt; standard is based on a 2D barcode and associated human-readable text mirroring the data encoded in the barcode.
The barcode approach assumes the invoice will be printed by the buyer.
The interested parties have to scan the barcode to digitize the invoice information.
This approach clearly breaks digitalization efforts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our approach is to add the barcode to the PDF invoice document.
The workflow can open the digitally received document and parse programmatically the image of the barcode.
The generation of the invoice and associated barcode is fully digital.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach works well only if the issuer fills the so-called SWICO field of the QR code with needed information.
For example, the due date of the invoice and the enumeration of different VAT tax percentages and corresponding VAT taxes are only stored in this field.
In other words, the standard does not foresee that the due date of the invoice should be a mandatory field.
Stated bluntly, the committee in charge of the standard realized they missed and stuck all missing elements in the so-called SWICO field.
It is clear that it is impossible to define a digital payment workflow without information on such a due date, and the VAT percentages and amounts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The library &lt;a href=&#34;https://github.com/manuelbl/SwissQRBill&#34;&gt;Swiss QR Bill&lt;/a&gt; is a mature and easy to use solution to read and to write legal Swiss QR codes.
The library is under MIT license and is available for Java and .NET stacks.
The code is under active development.
The main developer is responsive to suggestions and trouble reports.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_zugferd&#34;&gt;ZUGFeRD&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The ZUGFeRD is a German initiative to promote digital invoices in Germany and in Europe.
The ZUGFeRD approach is to store the invoice data as an XML part in the PDF document of the invoice.
The standard is also called &lt;em&gt;Factur-X&lt;/em&gt; in France.
It is compatible to the European B2G invoices standard, namely &lt;a href=&#34;http://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32014L0055&#34;&gt;EN16931&lt;/a&gt;.
It can also be used for B2B invoices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;XML is not really a human-readable format.
A JSON-based approach would have been more friendly.
The advantage is that the standard contains all relevant information for an invoice and streamline the digital processing of invoices.
You can easily define a workflow extracting and parsing the XML payload from all received invoices, and feeding the information to your ERP system for further processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The library &lt;a href=&#34;https://github.com/ZUGFeRD/mustangproject&#34;&gt;Mustang ZUGFerD&lt;/a&gt; is a mature and usable solution to read and write digital ZUGFeRD invoices.
The library is under Apache 2.0 license.
The current version 2.1 of the standard is fully supported.
ZUGFeRD additionally can transform a PDF/A-1 into a PDF/A-3 format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other similar libraries are also available, but the ones we found have quite restrictive licenses.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pdf_aspects&#34;&gt;PDF Aspects&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The PDF format is universal known.
Special variants such as PDF/A1 and PDF/A3 are defined for archiving purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Apache foundation hosts the library &lt;a href=&#34;https://pdfbox.apache.org/&#34;&gt;PDFBox&lt;/a&gt;.
It provides all low-level functions to create, read and edit PDF documents.
The library is naturally under &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_License&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But no open source products are available for high-level functions.
In particular, support for the creation of archive formats is non-existent.
The famous &lt;em&gt;iText&lt;/em&gt; library provides all these features, but sadly is no more open source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://ghostscript.com/&#34;&gt;Ghostscript&lt;/a&gt; provides command line support to transform a PDF document in a PDF/A version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The online service &lt;a href=&#34;https://www.pdftron.com/pdf-tools/pdfa-converter/&#34;&gt;pdftron&lt;/a&gt; provides free PDF translation to the archive format.
The &lt;a href=&#34;https://www.scribus.net/&#34;&gt;Scribus&lt;/a&gt; application support archive format export.
The drawback is that these approaches are they require manual steps
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Mustang library supports the transformation of a PDF/A1 to a PDF/A3 document.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_approach&#34;&gt;Approach&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We decided to extend our open source library to create digital invoices.
The extensions support the Swiss QR Code and the ZUGFeRD 2.1 standards.
All the information is stored in one PDF document.
This document is sent electronically to the customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our current approach is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code&gt;*Generate* AsciiDoc Invoice from our invoice model (Java source code)
*Generate* PDF version of Invoice using AsciiDocPDF
    *Add* Swiss QR code as last page in the PDF invoice document
    *Add* ZUGFeRD XML payload in the PDF invoice document&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Currently, we do not generate PDF/A1 documents as required in the ZUGFeRD standard.
PDFBox could provide the tool box to generate in this format, but it would be quite an endeavor.
An extension to PDFBox with similar functionality to iText would ideally become available in the future.
Otherwise, we have to write the missing code; in particular the embedding of fonts, pictures and files into the PDF document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We selected the AsciiDoc format to provide a simple approach to custom templates for invoices.
We avoided proprietary solutions based on Microsoft Office templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Feel free to use our library and examples.
They are released under Apache 2.0 license.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learnings&#34;&gt;Learnings&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source code for the invoice component is available as a Java package.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;tangly open source components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The generator code for the Swiss QR bill and ZUGFeRD data is available as Java package.
The developer was very supportive to improve the component.
For example, it is now possible to write unit tests using in-memory file systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Facture-X component also supports unit tests using in-memory file systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Not all Java developers have realized that the Java class &lt;strong&gt;File&lt;/strong&gt; should be deprecated.
&lt;strong&gt;java.io.File&lt;/strong&gt; instances always access the default file system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;java.nio.Path&lt;/strong&gt; instances contain the file system it should use and support in-memory file systems.
Use &lt;strong&gt;java.nio.Files&lt;/strong&gt; to create input streams, output streams, buffered readers, or buffered writers using path instances.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The investment to create the generators and test them against regular invoices of &lt;a href=&#34;https://www.tangly.net&#34;&gt;tangly llc&lt;/a&gt; was around four man-days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find more information about how to digitize your company in a blog describing our journey to a digital company.
We are quite proud no having any Microsoft Office our Outlook tools.
Our whole toolchain is based on open source solutions and performs flawlessly since the foundation of our company.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. &lt;a href=&#34;https://www.onlyoffice.com/&#34;&gt;OnlyOffice&lt;/a&gt; also support PDF/A creation. They provide a free local installation package for Linux, macOS, and Windows
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. LibreOffice can open and manipulate PDF files. You can easily open a PDF file and export it as PDF from LibreOffice. The application supports exporting to PDF/A version 1b, 2b and 3b. It also supports PDF/UA.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Legacy Systems Refactoring</title>
      <link>https://blog.tangly.net/blog/2020/legacy-systems-refactoring/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/legacy-systems-refactoring/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-06-01-head.jpg&#34; alt=&#34;2020 06 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In computer programming and software design, code refactoring is the process of restructuring existing computer code without changing its external behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Refactoring is intended to improve the design, structure, or implementation of the software (its non-functional attributes), while preserving its functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using refactoring, you can take bad design, even chaos software and rework it into well-designed code.
Most often, it is cheaper to refactoring a legacy application instead of rewriting it from scratch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Simply put, refactoring is a way of decreasing &lt;a href=&#34;https://en.wikipedia.org/wiki/Technical_debt&#34;&gt;Technical Debt&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are two general categories of benefits to the activity of refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Maintainability&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It is easier to fix bugs because the source code is easy to read and the intent of its author is easy to grasp.
This might be achieved by reducing large monolithic routines into a set of individually concise, well-named, single-purpose methods.
It might be achieved by moving a method to a more appropriate class, or by removing misleading comments.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Extensibility&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It is easier to extend the capabilities of the application if it uses recognizable design patterns.
It provides flexibility where none before May have existed.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Refactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code.
Yet the internal structure improves.
It is a disciplined way to clean up code that minimizes the chances of introducing bugs.
In essence, when you refactor, you are improving the design of the code after it has been written.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For a developer, new to a legacy software solution, it is often hard to understand the existing application.
He must determine the extent of source code and architectural decay, and identify smells and metric violations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Legacy applications are often critical to business and have been in use for years, sometimes decades.
Since business is evolving, there is constant pressure to support additional requirements.
However, changing these applications is difficult and you end up spending an increasing number of resources maintaining the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are many reasons why maintaining legacy software is a difficult problem.
Often, most, if not all, of the original developers are gone, and no one understands how the application is implemented.
The technologies used in the application are no longer current, having been replaced by newer and more exciting technologies.
Also, software complexity increases as it evolves over time as you add new requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The key to managing the lifecycle of software is to continuously work as a professional and skilled developer.
A professional engineer &lt;a href=&#34;https://martinfowler.com/bliki/OpportunisticRefactoring.html&#34;&gt;opportunistically refactor&lt;/a&gt; each time he modifies source code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_understand_your_product&#34;&gt;Understand Your Product&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Understand how it is used&lt;/em&gt;.
These scenarios define the acceptance tests you need to start creating a set of automated validation criteria.
And you will better understand how your users are working with your product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Understand how it is deployed&lt;/em&gt;.
You need a reproducible and in the long-run automated process to deploy a new version of your application.
We are talking about continuous delivery and even continuous deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Understand how it is build&lt;/em&gt;.
You need a reproducible and automated build process.
This process must be integrated into your continuous integration and delivery pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Understand how it is structured&lt;/em&gt;.
You need a tentative architecture description to start refactoring and to untangle this &lt;a href=&#34;https://en.wikipedia.org/wiki/Big_ball_of_mud&#34;&gt;big ball of mud&lt;/a&gt; into a more modular solution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_refactor_your_product&#34;&gt;Refactor Your Product&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Refactoring is always a successful activity.
You cannot fail.
But you need discipline, continuous involvement, and measurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each refactoring step is simple, even simplistic.
Yet the cumulative effect of these small changes can radically improve the design.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are new to refactoring, it is worth having a coach to smooth the learning curve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Extract one big service, refactor, test, and deploy.
&lt;strong&gt;Iterate&lt;/strong&gt;.
&lt;em&gt;If you are not successful, discard your failure and check out the current working version of git.
You should have learnt enough so that the next try will be successful.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://refactoring.com/&#34;&gt;Refactor code&lt;/a&gt;.
Use static analysis tools to detect the flaws in your source code.
You should only improve live code, meaning code you must correct or extend.
See Agile Code is Clean Code.
&lt;em&gt;Use a modern IDE to automate the smaller refactoring steps, and avoid spurious errors&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resolve design issues.
Your senior design specialists already know the flaws.
Now it is time to correct them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increase code coverage.
Code coverage is the security net when you are refactoring code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slowly add &lt;a href=&#34;https://www.thoughtworks.com/insights/articles/fitness-function-driven-development&#34;&gt;fitness functions&lt;/a&gt; to continuously validate your non-functional requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware of good practices how to write good software products and refactor successfully applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move to &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Design&lt;/a&gt; as an architecture approach.
It works either for micro architecture or for modular monolith approaches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master long live domain driven design and event storming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master your technical stack and use current tools and libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modularize one big service extraction one after the other Avoid using dead architectural techniques.
TOGAF, UML, PMI, CMMI are obsolete - various activities they recommend are good, do them in your sprints.
Avoid a lengthy, slow and expensive review approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Architecture_tradeoff_analysis_method&#34;&gt;ATAM&lt;/a&gt; is dead The quality tree technique is wonderful, use fitness functions to implement your quality tree.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Architecture Tradeoff Analysis Method &lt;em&gt;ATAM&lt;/em&gt; is hosted under the Carnage Mellon University &lt;em&gt;CMU&lt;/em&gt; Software Engineering Institute &lt;em&gt;SEI&lt;/em&gt;.
The latest revision of the method was published in August 2000, almost a quarter of a century.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach relies heavily on human review activities.
The execution of these tasks is expensive and slow.
The time horizon of an ATAM review is between one and two weeks.
The results are heavily document centric.
No formal or programmatic validation of the findings is usually provided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This process is too slow in the context of a DevOps or Scrum development approach.
Agile product development wants to deliver updates with an hourly or daily rhythm.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are running legacy technology, this not only becomes a threat to your business but also to your hiring and employer branding efforts.
As fewer and fewer programmers and operation managers will have the knowledge of those systems, you will face a dwindling talent pool.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ameliorate_your_process&#34;&gt;Ameliorate Your Process&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Applications do not degrade to legacy or geriatric systems overnight.
The organization and development group failed to work professionally over years before the product was ultimately doomed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;By continuously improving the design of code, we make it easier and easier to work with.
This is in sharp contrast to what typically happens: little refactoring and a great deal of attention paid to expediently adding new features.
If you get into the hygienic habit of refactoring continuously, you will find that it is easier to extend and maintain code.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Joshua Kerievsky&lt;br/&gt;
&lt;cite&gt;Refactoring to Patterns&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You must establish a culture of professional software development.
Professional software developers write code which is maintainable and legible.
Only unprofessional organizations create legacy applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Embrace software craftsmanship.
All your developers should have formal software development training and frequent training in new approaches and techniques.
They consistently read books.
Is it not that you expect from your physician or the pilot of the plane you are taking?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_architecture_series&#34;&gt;Agile Architecture Series&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The agile architecture track contains the following blogs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also published our &lt;a href=&#34;https://www.tangly.net/insights/continuous-learning/agile-architecture-course&#34;&gt;agile architecture course&lt;/a&gt; (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Component Design</title>
      <link>https://blog.tangly.net/blog/2020/agile-component-design/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/agile-component-design/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-04-01-head.jpg&#34; alt=&#34;2020 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are an experienced programmer.
You master your primary technology stack and systematically write clean code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your team recognized your merits and asked you to take ownership of whole packages in the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are now responsible for creating or modifying a software component in your current application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is a &lt;strong&gt;design&lt;/strong&gt; activity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you create a good, legible, maintainable component architecture?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you validate your functional and non-functional requirements?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yes, you are right.
You are responsible for &lt;strong&gt;architecture decisions&lt;/strong&gt; at component or subsystem level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below a set of tools to improve the quality of your design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design_approaches&#34;&gt;Design Approaches&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_patterns_and_idioms&#34;&gt;Patterns and Idioms&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The pattern movement was started last millennium.
Very talented and experienced developers have documented how to solve common problems elegantly and effectively.
Depending on the programming language, you are using different idioms are preferred.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The way to solve the same problem is different in Java, Scala, C++, Python or C#.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should know all regular structural, behavioral and creational patterns &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#design-patterns&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.
Explore your programming language and discover how idioms and patterns have evolved between major releases.
For example, lambda expressions and streams introduced in Java 8 - released Spring 2014 - completely transform the solution for regular business logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records introduced in Java 14 - released Spring 2020 - have a huge impact on how your architecture deals with data transfer objects – DTO – and immutability
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_read_open_source_code&#34;&gt;Read Open Source Code&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Stop inventing the wheel again and again.
&lt;a href=&#34;https://en.wikipedia.org/wiki/Not_invented_here&#34;&gt;Avoid Not Invented&lt;/a&gt; Here syndrome.
Your current problem was already solved multiple times.
Explore open source solutions, read posts, study books.
Select the most adequate solution and fill free to adapt and improve it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instead of searching for a solution for days, post your question on an adequate forum or on &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt;.
Fill free to improve the suggested solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Become more efficient and use the wisdom of all these developers accessible through the Internet.
Always verify the quality and adequacy of their proposed solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_standard_api&#34;&gt;Java Standard API&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Know your programming language and the huge associated standard libraries part of your technology stack.
Wisdom is coded in this code.
Standard patterns are implemented in almost all packages.
Idioms are encoded everywhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See how Java deals with human and machine time with &lt;a href=&#34;https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/package-summary.html&#34;&gt;java.time&lt;/a&gt; package.
Decades of trials and errors were needed to finally create a balanced and simple to use time abstractions.
The author of &lt;a href=&#34;https://www.joda.org/joda-time/&#34;&gt;Joda Time&lt;/a&gt; experimented years before he wrote the java time package – JSR 310 – introduced in Java 8.
All these decisions and learning are encoded in this code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_clean_architecture&#34;&gt;Clean Architecture&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_clean_code&#34;&gt;Clean Code&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You want to create a clean architecture &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-architecture&#34;&gt;2&lt;/a&gt;]&lt;/span&gt; you are proud of.
You must first write a clean code &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-code&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.
Clean architecture build up on clean code.
Promote clean code in your agile team.
Agile code is clean code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern integrated development environments &lt;em&gt;IDE&lt;/em&gt; provide static code analysis tools to detect smells in your source code.
&lt;a href=&#34;https://www.sonarlint.org/&#34;&gt;SonarLint&lt;/a&gt; is available for all major integrated development environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use these tools to steadily improve the quality of your code and remove well-known smells.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Do not fall to the fallacy to draw beautiful and useless &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Modeling_Language&#34;&gt;UML&lt;/a&gt; diagram and write thick
&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_architecture_description&#34;&gt;Software Architecture Design&lt;/a&gt; documents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The real architecture is hidden in the source code of your product.
You still document all major &lt;a href=&#34;https://en.wikipedia.org/wiki/Architectural_decision&#34;&gt;Architectural Decisions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_know_your_programming_language&#34;&gt;Know Your Programming Language&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are developing in Java, you should use the current features of the programming language.
For example, with Java 14, you have access to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Try with resources and &lt;em&gt;closeable&lt;/em&gt; resources.
This construct is an implementation of automatic resource management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutable collections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Streams, optionals, filters, and collectors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predicates and functions to define lambda expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Records and immutability for objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pattern matching syntactic sugar as for &lt;em&gt;instanceof&lt;/em&gt; operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch expressions and not only switch statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Text blocks to write legible multi-line text expression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_aggressive_refactoring&#34;&gt;Aggressive Refactoring&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The entropy of the source code increases over time.
Only continuous and aggressive refactoring mitigates the degenerescence of your application &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#refactoring&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#refactoring-2nd&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#refactoring-to-patterns&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#working-effectively-with-legacy-code&#34;&gt;7&lt;/a&gt;]&lt;/span&gt;.
Each time you correct an error or add a new functionality refactor your code.
Remove smells, compiler warnings and migrate older code to use newer and better features of your programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_acceptance_test_driven_development&#34;&gt;Acceptance Test Driven Development&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your users want a working application.
Write acceptance tests insuring all relevant functions are tested through your continuous integration pipeline.
You guarantee your users the application behaves as specified.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_test_driven_development&#34;&gt;Test Driven Development&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Testability and changeability of your application are architectural aspects.
You must have a way to verify these non-functional requirements.
Test driven development is a proven approach to fulfill these requirements and validate them continuously.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_continuous_integration&#34;&gt;Continuous Integration&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Continuous integration and delivery are the mechanisms to continuously validate and verify all functional and non-functional requirements are correctly implemented
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#continuous-delivery-pipelines&#34;&gt;8&lt;/a&gt;]&lt;/span&gt;.
You guarantee your users and customers that any software delivery they get is compliant and correct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each time you find a discrepancy, add a test validating the requirement behind this fault.
The same error will never happen again.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_good_practices&#34;&gt;Good Practices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Publish your components on a central repository such as &lt;em&gt;Maven Central&lt;/em&gt;.
Your users have easy and standardized access to your components and their latest version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Build tools such as &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; and &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; or IDE such as &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; allows potential users to fetch the component without having to install out-of-the-box mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Javadoc is the standard and hugely helpful approach to document classes and component public interfaces in Java.
Similar tools exist for other programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture design records provide hints why specific design decisions were chosen.
Your users can better understand the path you follow and the selected tradeoffs of your design.
They do not have to agree, but they can understand the arguments why you choose so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Static code generator is an actual good practice to provide the current documentation and tutorials for your components.
We write all our documentation in the &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; format - including &lt;a href=&#34;https://plantuml.com/&#34;&gt;plantUML&lt;/a&gt; and highlighted source code - and generate our website using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; tool suite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Start small and improve your approach every day.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_architecture_series&#34;&gt;Agile Architecture Series&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The agile architecture track contains the following blogs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also published our &lt;a href=&#34;https://www.tangly.net/insights/continuous-learning/agile-architecture-course&#34;&gt;agile architecture course&lt;/a&gt; (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.innoq.com/en/blog/is-domain-driven-design-overrated/&#34;&gt;Is Domain Driven Design Overrated?&lt;/a&gt;.
Stefan Tilkov.2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tilkov.com/post/2021/03/01/ddd-is-overrated/&#34;&gt;DDD is overrated&lt;/a&gt;.
Stefan Tilkov. 2021.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;design-patterns&#34;&gt;&lt;/a&gt;[1] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, &lt;em&gt;Design Patterns&lt;/em&gt;. Addison-Wesley Professional, 1995 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B000SEIBB8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B000SEIBB8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[3] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[4] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, First. Addision-Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B004PQQRK2&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B004PQQRK2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-2nd&#34;&gt;&lt;/a&gt;[5] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-to-patterns&#34;&gt;&lt;/a&gt;[6] J. Kerievsky, &lt;em&gt;Refactoring to Patterns&lt;/em&gt;. Addison-Wesley Professional, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321213351&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321213351&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;working-effectively-with-legacy-code&#34;&gt;&lt;/a&gt;[7] M. C. Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;. Prentice Hall, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0131177052&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0131177052&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;continuous-delivery-pipelines&#34;&gt;&lt;/a&gt;[8] D. Farley, &lt;em&gt;Continuous Delivery Pipelines&lt;/em&gt;. 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B096YGZVZ9&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B096YGZVZ9&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Java 17 LTS added full support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;algebraic data types.&lt;/a&gt; with the record and sealed concepts.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Architecture Principles</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-principles/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-principles/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-05-01-head.jpg&#34; alt=&#34;2019 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are applying the agile, lean approach to your software product development.
Your teams use Scrum or Kanban to deliver running software every two weeks.
The product market introduction is a success.
You will successfully sell the solution for the next ten years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How shall you define the software architecture of your product and ensure a long living and high-quality solution?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The experts tell you the design is emergent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What does it mean?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_less_architecture_observations&#34;&gt;LeSS Architecture Observations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following observations are true for any software product.
It is irrelevant if developed using agile approaches or traditional older ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;The sum of all source code artifacts is the true design blueprint or software architecture&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The real software architecture evolves (better or worse) every day of the product, as people do programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;real living architecture needs to be grown every day&lt;/em&gt; through acts of programming by master programmers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A software architect not being in touch with the evolving source code of the product is out of touch with reality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Every programmer is some kind of architect&lt;/em&gt; — whether wanted or not.
Every act of programming is some kind of architectural act — good or bad, small or large, intended or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile architecture comes from the behavior of agile architecting&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hands-on master-programmer architects, a culture of excellence in code,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Van emphasis on pair-programming coaching for high-quality code/design,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile modeling design workshops,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Test-driven development and refactoring&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And other hands-on-the-code behaviors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quality_of_your_architecture&#34;&gt;Quality of Your Architecture&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall measure the quality of your design and produced software artifacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static analysis tools to validate your source code,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test driven development to validate your design,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acceptance test driven development to validate your functional requirements,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fitness functions to validate your non-functional requirements,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pair programming to improve the produced artifacts through wisdom of the crowd,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pair review and pull requests to validate your developers&amp;#39; work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above validation activities are backed through tools.
But these tools can only detect non-quality and never provide a proof you achieved quality.
Qualified and experienced engineers are your best guaranty to achieve and sustain high quality in architecture and software products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement the above measures to gather data and publish the actual state of your source code.
You find further information in Code Scene as Crime Scene, SonarLint for the Impatient, and Pragmatic Craftsmanship articles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://less.works/less/technical-excellence/architecture-design.html&#34;&gt;LeSS architecture page&lt;/a&gt; for a comprehensive discussion of agile architecting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_good_versus_bad_architecture&#34;&gt;Good versus bad architecture&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A good architecture fulfills the specifications and is easy to change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It shall emerge during the development and intentionally implement the known requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your architects are talented developers and are full members of your Scrum teams.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your development teams&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;are experts in the used programming language and stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;understand object-oriented, functional and rule-based programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;know all major patterns and idioms of the used development stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;practice &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development&#34;&gt;ATDD&lt;/a&gt;, clean code, refactoring, embrace CI/CD and DevOps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read source code from open source projects to learn better ways.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;know &lt;a href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;&gt;SMART&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/INVEST_(mnemonic)&#34;&gt;INVEST&lt;/a&gt;,
&lt;a href=&#34;https://de.wikipedia.org/wiki/Solid_(Software)&#34;&gt;SOLID&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&#34;&gt;YAGNI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hold weekly design workshops with huge whiteboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;domain driven design&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34;&gt;event storming&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Big_Design_Up_Front&#34;&gt;BDUF&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall keep it simple, make it valuable, and build it piece by piece.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above hints and practices shall empower your teams to practice successfully agile architecture and timely deliver delightful software solutions.
Your organization shall train your collaborators, see also the &lt;em&gt;Shu Ha Ri&lt;/em&gt; model.
Smart money goes in training your collaborators.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_architecture_series&#34;&gt;Agile Architecture Series&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The agile architecture track contains the following blogs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also published our &lt;a href=&#34;https://www.tangly.net/insights/continuous-learning/agile-architecture-course&#34;&gt;agile architecture course&lt;/a&gt; (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Code Scene as Crime Scene</title>
      <link>https://blog.tangly.net/blog/2019/code-scene-as-crime-scene/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2019/code-scene-as-crime-scene/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-04-01-head.jpg&#34; alt=&#34;2019 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You have a successful product and happy users.
Slowly, the cost of adding new features is creeping up and product margins are shrinking.
Which crimes did put us in this dreaded situation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you analyze the history of your product’s source code?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you explore the social dimension of your product development?
How can you find good approaches to increase time to market and improve development costs?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This article presents a set of tools you can use to better understand the alternatives and select the best approach for your product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our approach is based on the de facto standard for source code version management &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;.
If your development department is using another tool, you should consider moving to another company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_first_steps&#34;&gt;First Steps&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We want to investigate various contexts in our source code history and identify suspects.
A context can be a single file, a class, a package or a module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gather overall information concerning your repository.
Use the optionals --before and --after, to restrict the time range, you are interested in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git log --numstat --pretty=format:&amp;#39;[%h] %an %ad %s&amp;#39; --date=short --before=&amp;#39;YYY-MM-DD&amp;#39; --after=&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Find out which contexts are most often modified&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git log --pretty=format: --name-only | sort | uniq -c | sort -rg | head -100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;or find out which contexts with a specific extension are most often modified&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git log --pretty=format: --name-only | sort | uniq -c | sort -rg | grep -I extension | head -100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Find out how many times a specific context was modified&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git log -- contextPath --pretty=format:&amp;#39;%an&amp;#39; | grep &amp;#39;Author&amp;#39; | sed -e &amp;#39;s/Author: \(.*\) &amp;lt;\(.*\)/\1/&amp;#39; | sort -rg | uniq -c | sort -rg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Find out how many errors were fixed in a specific context – e.g., identified through close #TicketId -&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git log -- contextPath | grep &amp;#39;close #&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39; | wc -l&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_deeper_insights&#34;&gt;Deeper Insights&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image left&#34;&gt;&lt;img src=&#34;../pics/2019-04-01-code-that-matters.png&#34; alt=&#34;2019 04 01 code that matters&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&lt;/span&gt;
Analysis of various products found out that 5% to 10% of the source code is under active development.
It is where your money is spent to make your customers happy.
Put all your refactoring efforts to improve these 10% of your product currently impacting your customer satisfaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Technical debt reduction should always be prioritized to only these hotspots.
Use the above-described approach to identify the most often changed files during a specific time interval.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_identify_team_and_social_metrics&#34;&gt;Identify team and social metrics&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To understand team dynamics, you should group individual developers to their team.
Replace the name of the team member with the team name at the command line using grep or sed.
Now you can analyze the set of files the team mainly modifies and maintains.
If none can be found, you have diffuse code ownership and will have quality issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;domain-driven design&lt;/a&gt; &lt;em&gt;DDD&lt;/em&gt; terminology, bounded domains are developed and maintained through one team.
This approach encourages architectural purity, continuous refactoring, and accountability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_manage_off_boarding_risks&#34;&gt;Manage Off-boarding Risks&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each time you find a set of source code artifacts only modified by a single individual, you have identified a major off-boarding risk.
When this developer leaves the department or the company, all knowledge associated with the development and the maintenance of these components will immediately be lost.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_visualize&#34;&gt;Visualize&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above scripts provide information in textual forms.
Over time, you will become more sophisticated with your inquiries and need better tools.
Either visualize your findings with &lt;a href=&#34;https://d3js.org/&#34;&gt;d3js&lt;/a&gt; or &lt;a href=&#34;https://plot.ly/javascript/&#34;&gt;plotly.js&lt;/a&gt; or buy a commercial tool such as the &lt;a href=&#34;https://codescene.io/&#34;&gt;code scene&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another approach is to write a small framework to analyze the data and to implement more complex queries in your preferred environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_next_steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above techniques are part of the toolbox of professional development departments.
Establish a software craftsmanship culture in your company.
It helps you to avoid the invasion of gangs and eradicate crime in your neighborhood.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Find similar ideas in our blogs Pragmatic Craftsmanship, SonarLint for the impatient, and You need an Engineering Culture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Two books published in the pragmatic programmer’s series are a wonderful deep analysis of source code as a crime scene &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#your-code-as-crime-scene&#34;&gt;1&lt;/a&gt;]&lt;/span&gt; and scanning your application source code &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#software-design-x-rays&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;your-code-as-crime-scene&#34;&gt;&lt;/a&gt;[1] A. Tornhill, &lt;em&gt;Your Code as a Crime Scene&lt;/em&gt;. O’Reilly Media [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00ZB5XWBI&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00ZB5XWBI&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;software-design-x-rays&#34;&gt;&lt;/a&gt;[2] A. Tornhill, &lt;em&gt;Software Design X-Rays&lt;/em&gt;. Pragmatic Bookshelf [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07BVRLZ87&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07BVRLZ87&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: You Need an Engineering Culture</title>
      <link>https://blog.tangly.net/blog/2019/you-need-an-engineering-culture/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2019/you-need-an-engineering-culture/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-03-01-head.jpg&#34; alt=&#34;2019 03 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile approaches are not enough.
You need a strong engineering culture to achieve quality and lasting success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Often, coaches and Scrum masters tinker with the processes and invest effort and blood to improve the ceremonies and the company structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But at the end of the day, the success of your application is defined by its adequacy to customer needs and its overall quality.
You need a solid and professional engineering culture to produce high-quality products and release them at a high rate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If not, you just release a new set of defects to your paying customers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you establish and nurture a professional and effective engineering culture?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_live_and_breathe_your_values&#34;&gt;Live and breathe Your Values&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Values drive your culture and the daily behavior of all your collaborators.
But even if you have invested time and blood to identify the right values and put all the mechanisms in place, it might still not have the desired results.
Culture is something that happens daily through personal interactions.
Putting the right values and mechanisms in place will help move your company in the right direction, but it’s not a guaranty for success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To increase your odds for success, you need to live and breathe your values.
You need to truly believe at all levels in the organization and not compromise on them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advocate for build-in quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support employees first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promote technical excellence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not be penny wise and pound foolish.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_communicating&#34;&gt;Communicating&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Make sure that people know the values.
It should be part of every on-boarding.
It is one of the first things that new people need to learn.
But also make sure to remind people as often as possible, e.g., in employee guidelines, during appraisals and town hall meetings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_eat_your_own_dog_food&#34;&gt;Eat Your Own Dog Food&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;People look up to you.
They will imitate your behavior.
So make sure that you and all members of the leadership team are the evangelists and provide at all times the right example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read our blog post Pragmatic Craftsmanship for hints what a technical excellence culture should be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Learn from the &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt;] community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find an initial list of questions in our blog post Company Culture Check.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_validating&#34;&gt;Validating&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Validate that all teams are living up to their values.
Find a way to measure it.
Identify and put actions in place in case you need to improve.
If a value does not make sense, e.g., the value was defined early on, but in hindsight it doesn’t fit with your company, then get rid of it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_last_thoughts&#34;&gt;Last Thoughts&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Building a great engineering culture is not something that you do.
You cannot cheat.
It will not automatically happen by copying the values and organization structure from another company such as Spotify.
You need to really invest in creating a culture that works for your company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can look at organizational structures, values and principles from other companies to get inspired.
Sit down with your people and decide together what is important for your company.
Put mechanisms in place that will support the concepts, allow them to grow.
Then live and breathe it within all levels of your company.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Architectural Decision Records ADR</title>
      <link>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/architectural-decision-records-adr/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-07-01-head.jpg&#34; alt=&#34;2018 07 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture Decision Record ADR is compact and traceable documents of all important decisions taken during the realization of a product.
Use &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt; and Git to have agile and lean documentation of your major decisions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The huge advantage of Architecture Design Record &lt;em&gt;ADR&lt;/em&gt; is the timeline of the decisions.
It tremendously helps to understand the technical changes during the product lifecycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please try architecture design records to document your key decisions when developing your software product.
Feel free to identify better approaches&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_definition&#34;&gt;Definition&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An Architectural Decision (AD) is a software design choice that addresses a functional or non-functional requirement that is architecturally significant.
A decision can be documented in an architecture design record (ADR).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In each ADR file, write these sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Title&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;short present tense imperative phrase, less than 50 characters, like a git commit message.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Status&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;proposed, accepted, rejected, deprecated, superseded&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Context&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;what is the issue that we’re seeing that is motivating this decision or change?&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Decision&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;what is the change that we’re actually proposing or doing?&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Consequences&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;what becomes easier or more difficult to do because of this change.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; format to write all our architecture design records.
You can add to the same git repository as the product, visualize differences and if desired, generate a nice looking document.
And my IDE IntelliJ IDEA has a nice plugin for this format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before using ADR, I documented the decision changes as footnote in a Microsoft Word document.
The ADR approach is way more legible and easier to trace with the help of git repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_title&#34;&gt;Title&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These documents have names that are short noun phrases.
For example, &amp;#34;ADR 1: Deployment on Ruby on Rails 3.0.10&amp;#34; or &amp;#34;ADR 9: LDAP for Multiple tenant Integration&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_context&#34;&gt;Context&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This section describes the forces at play, including technological, political, social, and product local.
These forces are probably in tension, and should be called out as such.
The language in this section is value-neutral.
It is simply describing facts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_decision&#34;&gt;Decision&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This section describes our response to these forces.
It is stated in full sentences, with active voice.
&amp;#34;We will …​&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_status&#34;&gt;Status&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A decision may be &amp;#34;proposed&amp;#34; if the product stakeholders haven’t agreed with it yet, or &amp;#34;accepted&amp;#34; once it is agreed.
If a later ADR changes or reverses a decision, it may be marked as &amp;#34;deprecated&amp;#34; or &amp;#34;superseded&amp;#34; with a reference to its replacement(s).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The status and the graph of related decisions can be tracked and visualized using tools.
You can also track your decisions without any tools, a regular product has often less than a hundred decisions.
And you can always write a small parse utility to extract your dependency graph.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_consequences&#34;&gt;Consequences&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This section describes the resulting context, after applying the decision.
All consequences should be listed here, not just the &amp;#34;positive&amp;#34; ones.
A particular decision may have positive, negative, and neutral consequences, but all of them will affect the team and product in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_tips_and_tricks&#34;&gt;Tips and Tricks&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The whole document describing an ADR should be one or two pages long.
We will write each ADR as if it is a conversation with a future developer.
This requires good writing style, with full sentences organized into paragraphs.
Bullets are acceptable only for visual style, not as an excuse for writing sentence fragments (Bullets kill people, even PowerPoint bullets).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The cost of undocumented decisions is hard to measure, but the effects usually include duplicated efforts.
Other engineers try to solve the same problems or competing solutions (two third-party libraries that do the same thing).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach is very similar to how you would document a software pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Believe and respect is the prime directive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Norman Kerth
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: How to Reach the Software Quality Graal?</title>
      <link>https://blog.tangly.net/blog/2018/how-to-reach-the-software-quality-graal/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/how-to-reach-the-software-quality-graal/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-06-01-head.jpg&#34; alt=&#34;2018 06 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Lately I was asked how many bugs and smells detected through SonarQube were acceptable for a software product.
And a Scrum master inquired which organizational changes are necessary to empower software developers to write good code.
Speechless and dumbfounded, I was unable to answer these questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After some time, I realized these people believe tools can measure the quality of software.
But tools can only measure &lt;em&gt;non-quality&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They tell you when you are doing it wrong, only your heart can tell you when you are doing it right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But first that does it mean to have a quality software product?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A high-quality software product has no catastrophic failures, and seldom bad behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is maintainable and extendable with new technologies and new features.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first part is called extrinsic quality and is why customers buy your product.
The second part is called intrinsic quality and is why customers buy your product again and recommend it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Criteria such as test code coverage, static analyzers, coding guidelines are just tools to detect missing quality.
They help your team produce higher quality and nothing else.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I encounter organizations stating that zero defects as measured with SonarQube is the ultimate goal.
And they find normal to have thousands of smells.
Time for a reality check.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tools such as SonarQube, unit test coverage are just instruments to support your teams to detect &lt;em&gt;known non-quality&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_find_the_quality_graal&#34;&gt;How to find the Quality Graal?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below, I provide a set of established, old techniques to eliminate non-quality.
Most of them are around for at least twenty years.
I encourage you to extend your practices with additional procedures based on your measurements and findings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_extrinsic_quality_product_quality&#34;&gt;Extrinsic Quality - Product Quality&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Is why you buy a specific car&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Acceptance criteria and behavior test-driven development ATDD – You ensure through automatic tests that the feature behaves how your customer requested.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defect driven development – You ensure through automatic tests your customer will never encounter this exact error again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast release and deployment cycle.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You give your customer a way to detect bad behavior early and have an opportunity to ask for improvement.
By fast, we mean daily or perhaps weekly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_intrinsic_quality_technical_quality&#34;&gt;Intrinsic Quality – Technical Quality&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Is why you can daily drive your car and not have to weekly repair it.
And, later be able to add a charger for your mobile phone without spending a fortune.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static code analysis - Known weaknesses are removed from your source code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test driven development TDD – You can change the code without changing the behavior or outputs, see also ATDD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean code – You guarantee the source code is maintainable &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-code&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean architecture and domain driven development - You guarantee the product is extendable &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-architecture&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;5&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_accountability&#34;&gt;Accountability&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Scrum Team - Development Team, Product Owner and Scrum Master - are responsible and accountable for the intrinsic and extrinsic quality of the delivered products &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-agile&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#succeeding-with-agile&#34;&gt;7&lt;/a&gt;]&lt;/span&gt;.
Insufficient quality is always a collective failure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Truly, if the intrinsic quality of the source code is low, it is undeniably a failure.
A failure of the development team and of each software developer writing the code; and a failure of the Scrum master holding and teaching agile and Scrum values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When there is high pressure on delivery, people tend to pay less attention to processes and standards.
That is one of the reasons why in Scrum we have the role of Scrum master responsible for understanding and enacting agile practices and rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And no physician will ever cut corners just because he is in a stressful situation.
So please be a professional and read again the principles of the &lt;a href=&#34;http://agilemanifesto.org/principles.html&#34;&gt;agile manifesto&lt;/a&gt; such as&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Continuous attention to technical excellence and good design enhances agility.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Agile Manifesto
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Developers please read the seminal book &lt;em&gt;Clean Coder&lt;/em&gt; from Robert Martin &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-coder&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.
As a professional, you are responsible and accountable for the quality of the software you produce.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I find it intolerable to hear software professionals stating they are not in charge of the intrinsic quality of the product they write.
They cowardly try to push the responsibility to the internal quality assurance department or to the whole organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above ideas are keys to &lt;a href=&#34;https://tangly-blog.blogspot.com/2018/04/pragmatic-craftsmanship-professional.html&#34;&gt;Software Craftsmanship&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_kaizen_small_steps_bring_first_successes&#34;&gt;Kaizen - Small Steps bring First Successes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first steps to improve your product are quite simple are around for at least twenty years &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#pragmatic-programmer-2nd&#34;&gt;8&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eliminate all compiler errors and warnings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use static checkers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activate the checkers of the IDE you are working with.
For example, I am using IntelliJ IDEA.
They have extensive checkers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If using &lt;a href=&#34;https://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt;, download link:../../2018/blog-2018-05-01]SonarLint plugin and simply use it.
This tool is best of breed, do not argument and just use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write tests with JUnit5, Mockito, AssertJ, Cucumber.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I am &lt;em&gt;ashamed&lt;/em&gt; to see software developers not implementing the above measures on a daily basis.
I &lt;em&gt;despair&lt;/em&gt; of encountering Scrum masters who tolerate the situation.
These techniques cost nothing, &lt;em&gt;are installed in a few minutes and support incremental improvement of your source code&lt;/em&gt;.
See also
&lt;a href=&#34;https://www.leadingagile.com/2018/09/software-developers-dont-need-permission-or-forgiveness/&#34;&gt;Why software developers do not need to ask for permission or forgiveness&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your goal is simply zero warnings at the end of the spring.
Later tighten it to zero warnings in the trunk of your &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; repository.
Just do it – and stop arguing about the merits and costs -!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And if you do not agree with one of the warnings, just disable the rule and document the reason for an architecture design record ADR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile and Scrum are all about learning and continuous improvement.
Please stop talking about quality.
Just start improving it!
I do not want to hear any lame excuses why a software developer is not continuously doing the above activities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;I acknowledge I am emotionally involved and not fully objective.
Lately, I saw a Java code of three different commercial products.
I am still recovering from the missing quality.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[1] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[3] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[4] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[5] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-agile&#34;&gt;&lt;/a&gt;[6] R. C. Martin, &lt;em&gt;Clean Agile&lt;/em&gt;. Prentice Hall, 2020 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0135781868&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0135781868&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;succeeding-with-agile&#34;&gt;&lt;/a&gt;[7] M. Cohn, &lt;em&gt;Succeeding with agile&lt;/em&gt;. Addison-Wesley, 2010 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321579364&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321579364&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;pragmatic-programmer-2nd&#34;&gt;&lt;/a&gt;[8] D. Thomas and A. Hunt, &lt;em&gt;The Pragmatic Programmer - 20th Anniversary Edition&lt;/em&gt;, Second. Addison Wesley, 2020 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0135957052&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0135957052&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Sonar Lint for the Impatient</title>
      <link>https://blog.tangly.net/blog/2018/sonar-lint-for-the-impatient/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/sonar-lint-for-the-impatient/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-05-01-head.png&#34; alt=&#34;2018 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Remove issues before they reach customer sites.
No quality problems shall reach your Git master branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt; is a central server that processes full analyses (triggered by the various SonarQube Scanners).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Its purpose is to give a 360° vision about the quality of your code base.
For this, it analyzes all the source lines of your product on a regular basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It should be added that SonarQube also performs scans with well-known third party analyzers (&lt;a href=&#34;https://spotbugs.github.io/&#34;&gt;SpotBugs&lt;/a&gt; - previously FindBugs -,
&lt;a href=&#34;http://checkstyle.sourceforge.net/&#34;&gt;Checkstyle&lt;/a&gt;, &lt;a href=&#34;https://pmd.github.io/&#34;&gt;PMD&lt;/a&gt;) whereas SonarLint does not include those.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I think the reason is a prioritization on performance and findBugs relying on java byte-code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_is_sonarlint&#34;&gt;What is SonarLint?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SonarLint lives only in your IDE (IntelliJ, Eclipse, or Visual Studio).
Its purpose is to give instantaneous feedback as you type your code.
For this, it concentrates on what code you are adding or updating.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Findings are displayed in the source code with information such as rule violation, rating of the rule and explanation.
You have a window where all findings are displayed to provide an overview and navigation support.
You are free to analyze a single file, a package, or the whole product; you can also exclude files or packages from the analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Connect SonarLint to your preferred code quality application.
It then uses the same code analyzers, rules and settings locally that are used on the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Issues marked as Won’t Fix or False Positive in SonarQube or SonarCloud disappear from your IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Both SonarLint and SonarQube rely on the same static source code analyzers – most of them being written using SonarSource technology.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_use_it&#34;&gt;How to use It?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;the SonarLint in your favorite IDE&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;configure the SonarCube instance to synchronize the rule set used in your product.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the plugin to access your SonarCube instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run it.&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;See the messages in the next few seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jump to the source and correct the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate until all issues are solved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run your unit tests and acceptance tests – TDD and ATDD -.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit your changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach guarantees you always release source code with less SonarCube issues.
SonarCube always shows no findings for new code and for refactored code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And you have made a step to the journey to become a professional software developer and achieve
&lt;a href=&#34;../../2018/pragmatic-craftsmanship-professional-software-developer/&#34;&gt;craftsmanship&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Pragmatic Craftsmanship - Professional Software Developer</title>
      <link>https://blog.tangly.net/blog/2018/pragmatic-craftsmanship-professional-software-developer/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/pragmatic-craftsmanship-professional-software-developer/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-04-01-head.png&#34; alt=&#34;2018 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The last months I was often confronted with software products having insufficient quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Insufficient means late delivery, and few new features.
The effort to correct errors in the field eats &lt;strong&gt;30% to 50%&lt;/strong&gt; away from the development budget.
How can such a dreadful situation occur?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One root cause is the low quality of the source code and ignorance of basic coding design approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We are not talking about complex design activities or complex patterns; we are discussing basic approaches how to write correct and maintainable code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_master_your_technology_stack&#34;&gt;Master Your Technology Stack&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most of the programmers have no formal training in the technology stack they are using daily.
Their best friend is the Internet.
And as a consequence, many agile projects steadily and iteratively produce mediocre software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall be a proud software craftsman &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#software-craftsman&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.
You shall work as a professional and deliver professional results.
I recommend any Java developer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Have formal training in the Java language and library &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-puzzlers&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.
For example, you should consider a Java Programmer certification for the current JDK you are working daily with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn the new features in Java e.g. Streams, Lambdas, Reactive Programming, LocalDate, Modules, packaging with jlink.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read and understand &lt;em&gt;Effective Java&lt;/em&gt; &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#effective-java-2nd&#34;&gt;3&lt;/a&gt;]&lt;/span&gt; from Joshua Bloch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read and understand the clean series &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-code&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#clean-agile&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;#clean-craftsmanship&#34;&gt;8&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read and understand &lt;em&gt;Refactoring&lt;/em&gt; from Martin Fowler &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#refactoring-2nd&#34;&gt;9&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And read &lt;a href=&#34;https://ronjeffries.com/xprog/articles/refactoring-not-on-the-backlog/&#34;&gt;Refactoring not in the backlog&lt;/a&gt; article from Ron Jeffries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn modern practices such as logging with &lt;a href=&#34;https://www.slf4j.org/&#34;&gt;slf4j&lt;/a&gt;, TDD with &lt;a href=&#34;https://junit.org/junit5/&#34;&gt;JUnit5&lt;/a&gt;, &lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt; and &lt;a href=&#34;http://joel-costigliola.github.io/assertj/&#34;&gt;AssertJ&lt;/a&gt;, ATDD with &lt;a href=&#34;https://cucumber.io/&#34;&gt;Cucumber&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lean DevOps, continuous integration, continuous delivery, continuous deployment, monitoring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be aware of famous Java libraries such as &lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava&lt;/a&gt;, &lt;a href=&#34;https://commons.apache.org/&#34;&gt;Apache Commons&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href=&#34;https://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt; and the &lt;a href=&#34;https://www.sonarlint.org/&#34;&gt;SonarLint&lt;/a&gt; plugin for your preferred IDE to catch well-known weaknesses in your source code and improve your coding skills.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A software developer not knowing the above items is almost certainly not a professional person, just a more or less talented amateur &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-code&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;5&lt;/a&gt;]&lt;/span&gt;.
For a similar point of view, see the blog of Mike Cohn
&lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/the-difference-between-a-professional-and-an-amateur&#34;&gt;the difference between a professional and an amateur&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_improve_continuously_you_shall_strive_for_mastery&#34;&gt;Improve Continuously You shall strive for mastery.&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The feeling having reached a certain mastery level is truly awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read a technical book each quarter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lean a new language or framework every two years.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read books such as The pragmatic Programmer &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#pragmatic-programmer-2nd&#34;&gt;10&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Know approaches such &lt;a href=&#34;http://www.extremeprogramming.org/&#34;&gt;eXtreme Programming&lt;/a&gt;, and read the book &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#extreme-programming-explained&#34;&gt;11&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with &lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;Scrum&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Kanban&#34;&gt;Kanban&lt;/a&gt;, &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt;.
Agile approaches are definitively state of the industry techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master container approaches with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; - containers are here to stay and will replace virtual machines -.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall write good enough software without errors and using the best practices of the industry.
If not, consider changing your profession.
See my blog post about technical debt discussing the consequences of missing mastery.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_software_craftsmanship&#34;&gt;Software Craftsmanship&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_craftsmanship&#34;&gt;Software craftsmanship&lt;/a&gt; is an initiative to improve the professionalism of software developers.
You do not have to agree with them, look what they are doing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For a detailed discussion, read the book The Software Craftsman: Professionalism, Pragmatism, Pride by Sandro Mancuso.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Don’t discuss practices, discuss value&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Their manifesto is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Craftsmanship is not enough to guarantee the success of a product, but the lack of it can be the main cause of its failure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile and Craftsmanship complement each other and both are necessary &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-agile&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;#clean-craftsmanship&#34;&gt;8&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile processes assume technical excellence and a professional attitude&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Software craftsmanship takes technical excellence and professionalism to a whole new level &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#pragmatic-programmer-1st&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;#pragmatic-programmer-2nd&#34;&gt;10&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Take everything you read with a grain of salt.
Software craftsmanship is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Not a church, trying to convert all developers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;About leading by example and showing how we can be better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;About well-written and designed code and the customer stays in the center.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;About continuously delivering value not writing crap code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your goal shall to become a professional developer and reach mastery.
How you do it is up to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An extensive list of books can be found under &lt;a href=&#34;../../../ideas/learnings/books/&#34;&gt;Books&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;software-craftsman&#34;&gt;&lt;/a&gt;[1] S. Mancuso, &lt;em&gt;The Software Craftsman&lt;/em&gt;. Prentice Hall, 2015 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134052501&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134052501&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-puzzlers&#34;&gt;&lt;/a&gt;[2] J. Bloch and N. Gafter, &lt;em&gt;Java™ Puzzlers&lt;/em&gt;. Addison-Wesley Professional, 2005 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/032133678X&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/032133678X&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-2nd&#34;&gt;&lt;/a&gt;[3] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Second. Addison-Wesley Professional, 2008 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[4] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[5] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[6] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-agile&#34;&gt;&lt;/a&gt;[7] R. C. Martin, &lt;em&gt;Clean Agile&lt;/em&gt;. Prentice Hall, 2020 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0135781868&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0135781868&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-craftsmanship&#34;&gt;&lt;/a&gt;[8] R. C. Martin, &lt;em&gt;Clean Craftsmanship&lt;/em&gt;. Addison-Wesley Professional, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B095C16LSW&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B095C16LSW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-2nd&#34;&gt;&lt;/a&gt;[9] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;pragmatic-programmer-2nd&#34;&gt;&lt;/a&gt;[10] D. Thomas and A. Hunt, &lt;em&gt;The Pragmatic Programmer - 20th Anniversary Edition&lt;/em&gt;, Second. Addison Wesley, 2020 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0135957052&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0135957052&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;extreme-programming-explained&#34;&gt;&lt;/a&gt;[11] K. Beck and C. Andres, &lt;em&gt;Extreme Programming Explained&lt;/em&gt;, Second. Addison-Wesley Professional, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321278658&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321278658&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;pragmatic-programmer-1st&#34;&gt;&lt;/a&gt;[12] D. Thomas and A. Hunt, &lt;em&gt;The Pragmatic Programmer&lt;/em&gt;, First. Addison Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B003GCTQAE&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B003GCTQAE&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Why Use Current Software Components?</title>
      <link>https://blog.tangly.net/blog/2017/why-use-current-software-components/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2017/why-use-current-software-components/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2017-12-02-head.jpg&#34; alt=&#34;2017 12 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Often, teams discuss if their digital product should upgrade to the current version of open-source or commercial used components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The same discussion arises for development tools and programming language versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have a &lt;strong&gt;strong opinion&lt;/strong&gt; about upgrades.
You should always use the current version of all components included in your product.
The only discussion is the timely &lt;strong&gt;when&lt;/strong&gt; and never the &lt;strong&gt;if&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Be realist, if your product is successful, you have to upgrade before the components are obsolete.
Otherwise, your application will become a geriatric solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Organizations often forget the liability of using older versions of components with known and published security flaws
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below, I provide you with arguments why you should always update all components in a timely fashion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_security_and_governance&#34;&gt;Security and Governance&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Social responsibility and liability considerations require your product to be immune to published attacks.
Your company shall provide reasonable protection to all your customers.
Therefore, you always include security patches in your product in a timely manner.
Other approaches are deeply unprofessional and unethical.
In some countries, you are liable if you do not update your software to avoid known security attacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should use actual Java JDK and JVM version because the community is concentrating their effort on the latest version.
Oracle only provides public support for the latest two Java versions, e.g., in January 2018, Java 9 and Java 8 are officially supported.
Java 8 support will stop at the end of September 2018, older versions are no more publicly maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If, for some reason, you are using an older commercially but no more publicly supported JDK, you must sign a support contract with the Oracle company and pay for it.
You cannot use deprecated JDK versions because nobody provides security fixes on these versions, e.g. Java 6 commercial support ended in December 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you include a deprecated JDK / JVM in your product, you willingly endanger your users and shall be liable for their losses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Governments started to realize how unprofessional organizations are working.
Recommendations and laws are grafted to force better security
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_upgrades_and_genuine_improvements&#34;&gt;Upgrades and Genuine Improvements&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The component developers put tremendous effort to improve the non-functional aspects of their products.
Performance and scalability improvements between Java versions are impressive.
You shall not hinder your own customers to rip these low-hanging fruits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Actual versions of standards - Unicode, HTTP protocol, time zones - help eliminate incompatibilities and subtle errors from use cases.
Having older versions will hinder you to support actual timezone changes or extensions in the Unicode standard.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_training_and_community_support&#34;&gt;Training and Community Support&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good training and associated certification are only available for actual versions of languages, frameworks or library.
You will not find any training for Ada, Apache server 1.x, or any object-oriented database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The articles in Stack Overflow and the community always cover the current version of components.
So you are on your own for support or code examples for older versions of libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hidden_cost_of_backport&#34;&gt;Hidden Cost of Backport&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Writing code for older versions of libraries, frameworks or runtimes means &lt;a href=&#34;https://en.wikipedia.org/wiki/Backporting&#34;&gt;backporting&lt;/a&gt; to older application interfaces and features.
For example, if you do not have access to auto-closable resources, you have to write your own framework and software checks guarantying closing system resources.
You should always free system resources in your application.
The literature states this is neither straightforward nor error free.
It is the root reason why such a feature was added to Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Teams often forget the consequences of back porting.
Later, when you adopt a more modern version of your dependencies, you have to remove all this now spurious code and migrate to the build-in concept.
Otherwise, the code is no more maintainable and changes are error-prone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In other words, you have to twice work when backporting, once to build it in, and a second time to later remove it.
This solution is certainly not the most economical one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_motivation_of_team&#34;&gt;Motivation of Team&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;No professional developer wants to write source code using JDK 7 or older versions.
They want to develop using modern and powerful constructs such as lambda, modules, HTTP/2.
I would state that not using such constructs disqualifies you as a professional engineer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We observed how whole teams become demotivated because a huge part of their daily work was backporting to old environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I understand that geriatric software solutions do not allow you to use the latest versions.
It is time to bury such products and to go on.
The only open question is the date of the burial.
Do not wait too long, decomposition is never nice to smell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maintaining or extending software based on old versions of libraries is just throwing money out the window.
You need a solid basement to build on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Data privacy and protection laws were established in Europe in 2018 and in Switzerland in 2020. Companies and executives can be sued, sentenced to pay huge fines, and in the worst case, C-level managers get a criminal record entry. Such an entry can destroy your career potential. For example, you are banned from becoming a board of directors members of a lot of companies.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. The White House in the USA initiated an &lt;em&gt;Executive Order on Improving the Nation’s Cyber-security&lt;/em&gt; in 2021. The goal seems to be the definition of minimal rules for software products to minimize known security risks.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
