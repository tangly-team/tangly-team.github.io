<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Series-Agile-Design on tangly Components</title>
    <link>https://blog.tangly.net/tags/series-agile-design/</link>
    <description>Recent content in Series-Agile-Design on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/tags/series-agile-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Legacy Systems Refactoring</title>
      <link>https://blog.tangly.net/blog/2020/legacy-systems-refactoring/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/legacy-systems-refactoring/</guid>
      <description>In computer programming and software design, code refactoring is the process of restructuring existing computer code without changing its external behavior.&#xA;Refactoring is intended to improve the design, structure, or implementation of the software (its non-functional attributes), while preserving its functionality.&#xA;Using refactoring, you can take bad design, even chaos software and rework it into well-designed code. Most often, it is cheaper to refactoring a legacy application instead of rewriting it from scratch.</description>
    </item>
    <item>
      <title>Agile Component Design</title>
      <link>https://blog.tangly.net/blog/2020/agile-component-design/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/agile-component-design/</guid>
      <description>You are an experienced programmer. You master your primary technology stack and systematically write clean code.&#xA;Your team recognized your merits and asked you to take ownership of whole packages in the application.&#xA;You are now responsible for creating or modifying a software component in your current application.&#xA;This is a design activity.&#xA;How can you create a good, legible, maintainable component architecture?&#xA;How can you validate your functional and non-functional requirements?</description>
    </item>
    <item>
      <title>How Agile Collaborators Learn</title>
      <link>https://blog.tangly.net/blog/2020/how-agile-collaborators-learn/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/how-agile-collaborators-learn/</guid>
      <description>Most products are developed by a team, and these achievements are the fruit of teamwork.&#xA;Software product development is now agile, and most often uses the Scrum approach.&#xA;Just putting a bunch of people together in the same open office will not produce a high performance agile team. Quite a few companies find that out the hard way.&#xA;How can you increase the odds to create an environment where agile teams bloom and perform?</description>
    </item>
    <item>
      <title>Agile Architecture within Scrum</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-within-scrum/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-within-scrum/</guid>
      <description>You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks.&#xA;Agile architecture is a key element to improve the quality of your solution and reduce the overall cycle-time of your product delivery.&#xA;Your journey toward greater business agility starts by identifying what outcomes are most important to your companyâ€™s success.&#xA;Outcomes are codified in functional and non-functional requirements your product shall fulfill.</description>
    </item>
    <item>
      <title>Agile Code is Clean Code!</title>
      <link>https://blog.tangly.net/blog/2019/agile-code-is-clean-code/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/agile-code-is-clean-code/</guid>
      <description>You are applying the agile, lean approach to your software product development.&#xA;Congratulations, you are applying state of the industry good practices.&#xA;Your teams use Scrum or Kanban to deliver running software every two weeks.&#xA;To create an agile architecture, you must write agile worthy code. Agile code is always clean code.&#xA;Start early, do it continuously and soon your code will be clean, legible and free of known defects.</description>
    </item>
    <item>
      <title>Agile Architecture Principles</title>
      <link>https://blog.tangly.net/blog/2019/agile-architecture-principles/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2019/agile-architecture-principles/</guid>
      <description>You are applying the agile, lean approach to your software product development. Your teams use Scrum or Kanban to deliver running software every two weeks. The product market introduction is a success. You will successfully sell the solution for the next ten years.&#xA;How shall you define the software architecture of your product and ensure a long living and high-quality solution?&#xA;The experts tell you the design is emergent.</description>
    </item>
  </channel>
</rss>
