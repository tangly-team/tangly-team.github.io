<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tangly Components – Java</title>
    <link>https://blog.tangly.net/tags/java/</link>
    <description>Recent content in Java on tangly Components</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 May 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://blog.tangly.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: How to Document Your Software Architecture</title>
      <link>https://blog.tangly.net/blog/2024/how-to-document-your-software-architecture/</link>
      <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2024/how-to-document-your-software-architecture/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-05-01-head.png&#34; alt=&#34;2024 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are creating the next digital software masterpiece.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you document your software architecture in a way that is useful for your team and stakeholders?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A software architecture document &lt;em&gt;SAD&lt;/em&gt; is a document that describes the structure of a software solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It includes the architecture of its components, the relationships between those components, and the principles that guide its design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The solution architecture document is typically used as a reference for designing, building, and maintaining a software system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Developers, architects, and other stakeholders use it to understand the overall design of the system and how it fits into the larger business or technical environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below an example of a software architecture document content
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph text-center&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;../pics/2024-05-01-architecture-doc.png&#34; alt=&#34;2024 05 01 architecture doc&#34; width=&#34;640&#34; height=&#34;360&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_modern_approaches&#34;&gt;Modern Approaches&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern software development practices, such as &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt;, have changed the way we think about software architecture
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#modern-software-engineering&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#effective-java-3rd&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#building-evolutionary-architectures-2nd&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#building-evolutionary-architectures&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#large-scale-scrum&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#practices-for-scaling-lean-and-agile-development&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#scaling-lean-and-agile-development&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;#documenting-software-architectures&#34;&gt;8&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tooling and practices have evolved to support the creation of lightweight, agile software architecture documentation.
The &lt;a href=&#34;https://arc42.org/&#34;&gt;arc42&lt;/a&gt; approach natively supports &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; and &lt;a href=&#34;https://www.markdownguide.org/&#34;&gt;Markdown&lt;/a&gt; based documentation
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.
All documents are stored as text artifacts in a git repository.
The documentation is generated as static website &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.
Diagrams with &lt;a href=&#34;https://c4model.com/&#34;&gt;C4 Model&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Modeling_Language&#34;&gt;UML&lt;/a&gt;, &lt;a href=&#34;https://adr.github.io/&#34;&gt;Architecture Design Records ADR&lt;/a&gt; are linked to source code documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The architecture documents shall be online, searchable and actual.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The artifacts shall be versioned to support documenting various releases of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The documents shall be created as part of a continuous integration pipeline.
This approach eliminates the need for manual documentation generation.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_architecture_documentation_goals&#34;&gt;Architecture Documentation Goals&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Software architecture documentation creates a common understanding of the solution behind the system for various stakeholders.
The documentation makes it possible to evaluate the software architecture from the perspective of the various stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Software architecture documentation supports architectural work and guides the development team in implementing new product features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph text-center&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image text-center&#34;&gt;&lt;img src=&#34;../pics/2024-05-01-C4-5-things.png&#34; alt=&#34;2024 05 01 C4 5 things&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should as a software architect understand:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is the essence of &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_architecture&#34;&gt;Software architecture&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why should the software architecture role include coding, coaching and collaboration?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are the  things that you really need to think about before coding?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to visualize your software architecture using &lt;a href=&#34;https://c4model.com/&#34;&gt;C4 Model&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to document your application with a lightweight and collaborative approach?.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why there is no conflict between agile and architecture?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What does &lt;em&gt;just enough&lt;/em&gt; upfront design mean?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to identify risks with risk-storming?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_documentation_rules&#34;&gt;Documentation Rules&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These are the rules for any technical documentation, including software architecture documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Write documentation from the reader’s point of view.
Embrace approaches such as &lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javadoc.html&#34;&gt;JavaDoc&lt;/a&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_4&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_4&#34; title=&#34;View footnote.&#34;&gt;4&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Document that you have realized, not your wishes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid unnecessary repetition.
Reference and link to information, do not copy it.
Minimalism is key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid ambiguity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a standard structure such as &lt;a href=&#34;https://arc42.org/&#34;&gt;arc42&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Record rationale and decisions with &lt;a href=&#34;https://adr.github.io/&#34;&gt;Architecture Design Records ADR&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep documentation current but not too current.
Generate your documentation as a static website.
Avoid manual steps when updating your documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review documentation for fitness of purpose.
A new collaborator in the team is the optimal guinea pig to test the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is far better to be explicit and wrong than to be vague.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Frederick Brooks jr.&lt;br/&gt;
&lt;cite&gt;1995&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_possible_pitfalls&#34;&gt;Possible Pitfalls&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph text-center&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image left&#34;&gt;&lt;img src=&#34;../pics/2024-05-01-arc42-c4.png&#34; alt=&#34;2024 05 01 arc42 c4&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Upfront document everything&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Do not document everything in advance.
Think of the arc42 template as a cabinet for documentation.&lt;br/&gt;
You put something on a shelf as you work on it.
This is how software architecture documentation emerges, evolves, and stays current.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Do not include tutorials or Q&amp;amp;A sections&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The most important thing in arc42 is the structure.
The structure does not provide a space for guides or Q&amp;amp;A sections.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Do not put any specific things like customer names or similar&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Do not write customer-specific things in the software architecture documentation unless your building blocks are structured in a customer-oriented way.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Do not generate documentation site&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Manual activities to generate the product documentation are a waste of time.
Modern approaches are documentation as code and static site generators.&lt;br/&gt;
&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; provide the &lt;em&gt;pages&lt;/em&gt; feature to host your documentation as static website.
The generation can be integrated into the CI/CD pipeline.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;why-enterprise-architecture&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2021/why-enterprise-architecture/&#34;&gt;Why Enterprise Architecture?&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-achitecture-is-main-stream&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2021/agile-software-architecture-is-mainstream/&#34;&gt;Agile Architecture is Mainstream&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-architecture-principles&#34;&gt;&lt;/a&gt;[3]  &lt;a href=&#34;../../2019/agile-architecture-principles/&#34;&gt;Agile Architecture Principles&lt;/a&gt;.
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-architecture-with-scrum&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture Within Scrum&lt;/a&gt;.
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;adr&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;../../2018/architectural-decision-records-adr/&#34;&gt;Architecture Decision Records ADR&lt;/a&gt;.
Marcel Baumann. 20218.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;what-i-learnt-teaching-agile-software-engineering&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;../../2021/what-i-learnt-teaching-agile-software-architecture/&#34;&gt;What I Learnt Teaching Agile Software Architecture&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;modern-software-engineering&#34;&gt;&lt;/a&gt;[1] D. Farley, &lt;em&gt;Modern Software Engineering&lt;/em&gt;. Pearson Education, Limited, 2022 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B09GG6XKS4&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B09GG6XKS4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[2] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures-2nd&#34;&gt;&lt;/a&gt;[3] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Automated Software Governance&lt;/em&gt;, Second. O’Reilly Media, 2023 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0BN4T1P27&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0BN4T1P27&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures&#34;&gt;&lt;/a&gt;[4] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Support Constant Change&lt;/em&gt;, First. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491986360&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491986360&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;large-scale-scrum&#34;&gt;&lt;/a&gt;[5] C. Larman, &lt;em&gt;Large-scale scrum&lt;/em&gt;. 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321985710&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321985710&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;practices-for-scaling-lean-and-agile-development&#34;&gt;&lt;/a&gt;[6] C. Larman, &lt;em&gt;Practices for scaling lean &amp;amp; agile development&lt;/em&gt;. Addison-Wesley, 2010 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321636406&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321636406&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;scaling-lean-and-agile-development&#34;&gt;&lt;/a&gt;[7] C. Larman, &lt;em&gt;Scaling lean &amp;amp; agile development&lt;/em&gt;. Addison-Wesley, 2008 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321480961&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321480961&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;documenting-software-architectures&#34;&gt;&lt;/a&gt;[8] P. Clements, &lt;em&gt;Documenting software architectures views and beyond&lt;/em&gt;. Addison-Wesley, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321552687&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321552687&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. I add a chapter describing the user manual and user interface when document our applications.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. The worst solution is to write Microsoft Word documents and store them in a SharePoint site. Such documents can neither be searched nor archived. Jira wiki documentation has similar drawbacks.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. I love &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to create technical static website. I use &lt;a href=&#34;https://plantuml.com/&#34;&gt;plantUML&lt;/a&gt; and &lt;a href=&#34;https://mermaid.js.org&#34;&gt;Mermaid&lt;/a&gt; to create diagrams.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_4&#34;&gt;
&lt;a href=&#34;#_footnoteref_4&#34;&gt;4&lt;/a&gt;. JavaDoc lately added support to Markdown syntax and code snippets. It markantly simplifies the redaction of quality documentation.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Modern Java Rant</title>
      <link>https://blog.tangly.net/blog/2024/modern-java-rant/</link>
      <pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2024/modern-java-rant/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-04-02-head.jpg&#34; alt=&#34;2024 04 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java community releases a new version every six months.
This is a good thing, it means that the language is evolving at a steady pace.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;New language features are added in each release.
Much effort is put into improving the performance of the JVM and solving small issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The community provides beta releases for developers to test and provide feedback during the six months before the next release.
You have the possibility and time to migrate and test your code before the official release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Security vulnerabilities are patched every three months.
This is a dream for agile and DevOps teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sadly, many developers are still using outdated versions of Java, which can lead to security vulnerabilities and other issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I try to always work with the current release of Java, but I have to admit that it is not always easy.
Below a rant about some of the issues I have encountered.
Solving these issues or finding workarounds cost me quite some hours of my time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_intellij_idea_slow_approach&#34;&gt;IntelliJ IDEA Slow Approach&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I love &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;, but it is slow to support new Java versions.
I have an ultimate license for decades and never give up the hope that they will improve their release cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They almost always release a new version of IntelliJ IDEA weeks after the official release of Java.
I do not understand why they could not switch their release date to match the Java release date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The early access program for Java should empower them to test their IDE with the new Java version before the official release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;At least they provide preview support for some of the new JDK features in the current version of IntelliJ IDEA.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_gradle_collapse&#34;&gt;Gradle Collapse&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; is my preferred build tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle community is not capable of delivering a new version of Gradle supporting the current JDK version for months after the official release.
The reason is they use old versions of Groovy and Kotlin instead of regularly updating with the current stable versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Yes, you can run Gradle with an older version of Java and compile the code with a newer version of Java.&lt;/em&gt;
&lt;em&gt;It makes your GitHub actions more complex and brittle.&lt;/em&gt;
The standard GitHub scripts do not support installing multiple JDK versions in the image building your application
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;._&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_jpms_laggards&#34;&gt;JPMS Laggards&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I cannot fully modularize my applications due to the lack of support for JPMS in many libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Platform_Module_System&#34;&gt;Java Platform Module System&lt;/a&gt; is available since Java 9. This version was released on September 21, 2017.
Maintainers had &lt;strong&gt;seven&lt;/strong&gt; years to migrate their code to JPMS.
The minimal effort is to provide an automatic name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;You have to write one line in your manifest file of your jar file to support JPMS.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctorj/latest/&#34;&gt;AsciidoctorJ&lt;/a&gt; package has still no automatic name.
Some Apache libraries have no automatic names.
A lot of well-known libraries do not document the automatic name in their documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_javalin_debacle&#34;&gt;Javalin Debacle&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I like the &lt;a href=&#34;https://javalin.io/&#34;&gt;Javalin&lt;/a&gt; REST framework.
It is a small and lightweight web framework and uses the &lt;a href=&#34;https://eclipse.dev/jetty/&#34;&gt;Jetty&lt;/a&gt; as embedded server.
It has build-in support for &lt;a href=&#34;https://www.openapis.org/&#34;&gt;OpenAPI&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The team quite screwed up the migration to the current Jetty version released more than one year ago.
&lt;em&gt;Developers should not use internal Jetty classes in their code
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I develop applications with &lt;a href=&#34;https://vaadin.com/&#34;&gt;Vaadin&lt;/a&gt; and &lt;a href=&#34;https://javalin.io/&#34;&gt;Javalin&lt;/a&gt;.
A cool developer Martin Vysny has created a nice library &lt;a href=&#34;https://github.com/mvysny/vaadin-boot&#34;&gt;vaadin-boot&lt;/a&gt; to integrate both frameworks.
The &lt;a href=&#34;https://vaadin.com/&#34;&gt;Vaadin&lt;/a&gt; application uses an embedded &lt;a href=&#34;https://eclipse.dev/jetty/&#34;&gt;Jetty&lt;/a&gt; server and can be deployed as a single jar file.
The whole setup is about 20 lines of code.
It is a pleasure to work with this library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now Javalin hinders the use of the current Jetty version
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_good_practices&#34;&gt;Good Practices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I understand that open source developers have limited resources to migrate their code to the current Java version.
I find the practice advocated by Brian Goetz ideal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Support the latest LTS version of Java in your stable release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All new development and improvements should be done with the current Java version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not support any other Java versions.
Provide a package for the current Java version and a package for the latest LTS version.
Do not backport any new features to the LTS version.
Remember, a new LTS version is released every two years.
Just fix painful bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have no excuse not to define an automatic name for your library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Today you shall only support JDK 21 LTS and JDK 22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The early access program for JDK 23 is available.
You can already test your code with JDK 23.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The huge advantage is that you only have to maintain two versions of your code.
You focus on developing new features only with the current Java version.
No need to backport any new features to the LTS version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because all new features are only available with the current Java version, your users have a strong motivation to migrate to the current Java version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;As a developer, it is more fun to write code with the latest Java version and use the latest features.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Please remember never to use internal classes of a library in your code&lt;/em&gt;.
&lt;em&gt;It will bite you&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Update your JDK every three months to install the latest security patches.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Continuously update your dependencies to the latest stable version.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; has plugins and &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; has dependabot to simplify or automate the work.&lt;/em&gt;
&lt;em&gt;You need a continuous integration pipeline and sufficient automatic tests to validate your code with the latest dependencies.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. If you have a code snippet to install multiple JDKs, run Gradle with an older version and let Gradle toolchain find the current JDK to build, let me know. I will add your solution with name in this blog.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. If &lt;a href=&#34;https://eclipse.dev/jetty/&#34;&gt;Jetty&lt;/a&gt; would use JPMS, they could hide these classes inside a module. No external developers could use them.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. Martin has found a workaround, but the drawback is that we have to use a quite older version of Javalin.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Structure Your Concurrency</title>
      <link>https://blog.tangly.net/blog/2024/structure-your-concurrency/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2024/structure-your-concurrency/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-04-01-head.png&#34; alt=&#34;2024 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Writing concurrent software is one of the greatest challenges for software developers &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#modern-software-engineering&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#effective-java-3rd&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A professional software developer must understand the principles of concurrent programming and the tools available to write concurrent software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Only concurrent applications can access all cores of modern multicore processors and provide the best performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java thread model makes it a strong contender among concurrent languages, but multithreading has always been inherently tricky.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The introduction of &lt;em&gt;virtual threads&lt;/em&gt; empowered Java to provide a unique and highly-optimized threading system that is also easy to understand.
You can now create millions of threads without the overhead of creating a native operating system thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now you need mechanisms to manage this huge number of threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Virtual threads, now an official feature of Java, create the possibility of cheaply spawning threads to gain concurrent performance.
As a result, Java now has a unique and highly-optimized threading system that is also easy to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Application designers often face the following questions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How do you cope with a huge number of threads?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you process huge collections?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you process data flows with back pressure?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you design distributed and reactive systems?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_structured_concurrency&#34;&gt;Structured Concurrency&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Structured concurrency enhances the maintainability, reliability, and observability of multithreaded code.
It adopts a concurrent programming style that reduces the likelihood of thread leaks and cancellation delay.
These are common risks associated with cancellation and shutdown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As the JEP for structured concurrency says, &lt;em&gt;If a task splits into concurrent subtasks, then they all return to the same place, namely the task’s code block&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Structured concurrency is a programming paradigm that provides a way to write concurrent software using familiar program flows and constructs.
It guarantees that all concurrent tasks are properly managed and cleaned up when leaving the scope of the &lt;em&gt;try with resources&lt;/em&gt; block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;StructuredTaskScope&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ShutdownOnFailure&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Shelter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;shelter&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fork&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getShelter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Dog&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dogs&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fork&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getDogs&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Response&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;shelter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;resultNow&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dogs&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;resultNow&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #6e7781&#34;&gt;// ...&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When exiting the try-with-resources block, the structured concurrency framework ensures that all concurrent tasks are properly managed and cleaned up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java programmers never create threads directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Complex or slow algoritms shall be parallelized using structured concurrency to exploit modern multicore processors.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_concurrent_stream_processing&#34;&gt;Concurrent Stream Processing&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-04-01-parallel-stream.png&#34; alt=&#34;2024 04 01 parallel stream&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 8 introduced the Stream API, which provides a way to process data in a declarative manner &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#functional-programming-java&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java Streams support parallel processing, but the parallelism is not structured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The parallelism is processing bound and not I/O bound.
Therefore, the maximum number of active threads should be limited to the number of available processor cores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The parallel stream is cleanup upon completion of the terminal operation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Integer&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;listOfNumbers&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Arrays&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;listOfNumbers&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;parallelStream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;Integer:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java streams library provides a rich set of functionalities that can work with any stream.
The approach is similar to the sequence library in functional programming languages such as Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java cpde processeses any collection through sreams.
Huge collections are very efficiently processed in parallel streams on modern multicore processors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach transforms imperative code into a declarative style, which is easier to read and maintain.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_concurrent_data_flow_processing&#34;&gt;Concurrent Data Flow Processing&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-04-01-reactive.png&#34; alt=&#34;2024 04 01 reactive&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Concurrent data flow processing is based on the Reactive Streams API.
It is a specification for asynchronous stream processing with non-blocking back pressure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;On one side, functional programming is the process of building software by composing pure functions, avoiding shared state, mutable data, and side effects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;On the other side, reactive programming is an asynchronous programming paradigm concerned with data streams and the propagation of change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Together, functional reactive programming forms a combination of functional and reactive techniques that can represent an elegant approach to event-driven programming.
Values change over time and where the consumer reacts to the data as it comes in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The processing pipeline is composed of a source, a set of operators, and a sink.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;letters&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #953800&#34;&gt;Observable&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;observable&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Observable&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;letters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;observable&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;
  &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt;                                        &lt;span style=&#34;color: #6e7781&#34;&gt;//OnNext&lt;/span&gt;
  &lt;span style=&#34;color: #0550ae&#34;&gt;Throwable:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt;                              &lt;span style=&#34;color: #6e7781&#34;&gt;//OnError&lt;/span&gt;
  &lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;_Completed&amp;#34;&lt;/span&gt;                             &lt;span style=&#34;color: #6e7781&#34;&gt;//OnCompleted&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertTrue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;abcdefg_Completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The reactive library takes care of the threading and back pressure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_distributed_and_reactive_systems&#34;&gt;Distributed and Reactive Systems&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-04-01-actor.png&#34; alt=&#34;2024 04 01 actor&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The actor model is a programming model for concurrency in a distributed system.
It is based on the concept of actors, which are independent entities that communicate with each other by sending messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each actor has its own mailbox and processes messages one at a time.
An actor only accesses its own state and does not share state with other actors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An actor is an active object that encapsulates state and behavior and is implemented as a concurrent process.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly recommend using the actor model when designing distributed and reactive systems.
Avoid low-level concurrency primitives and thread pools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Design your system as a set of actors that communicate with each other by sending messages.
Eliminate shared mutable state and use message passing to communicate between actors.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Between virtual threads and structured concurrency, Java developers have a compelling new mechanism for breaking up almost any code into concurrent tasks without much overhead.
An application developer almost never uses concurrency primitives or thread pools directly.
Beware of these design approaches and select wisely based on the requirements of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Library developers can use the new concurrency primitives to build high-performance libraries that are easy to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use parallel streams when processing huge collections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use reactive programming when processing data flows with back pressure, different sampling rates, and complex event processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use the actor model when designing distributed and reactive systems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-algebric-data-types&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2024/data-classes-sealed-types-and-pattern-matching&#34;&gt;Data Classes, Sealed Types and Pattern Matching&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-advanced-streams&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2024/advanced-streams&#34;&gt;Advanced Streams&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-modules&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2024/java-modules&#34;&gt;Java Modules&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-structured-concurency&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2024/structure-your-concurrency&#34;&gt;Structure Your Concurrency&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;modern-software-engineering&#34;&gt;&lt;/a&gt;[1] D. Farley, &lt;em&gt;Modern Software Engineering&lt;/em&gt;. Pearson Education, Limited, 2022 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B09GG6XKS4&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B09GG6XKS4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[2] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;functional-programming-java&#34;&gt;&lt;/a&gt;[3] V. Subramaniam, &lt;em&gt;Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions&lt;/em&gt;. The Pragmatic Programmers, 2014 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0CJL7VKFL&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0CJL7VKFL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Java Modules</title>
      <link>https://blog.tangly.net/blog/2024/java-modules/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2024/java-modules/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-03-01-head.png&#34; alt=&#34;2024 03 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 9 introduces a new level of abstraction above packages, known as the Java Platform Module System &lt;em&gt;JPMS&lt;/em&gt;, or &lt;em&gt;Modules&lt;/em&gt; for short &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-9-modularity&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modules emphasize at compilation time modern software engineering principles such as encapsulation, and modularity
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#modern-software-engineering&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#effective-java-3rd&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#building-evolutionary-architectures-2nd&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 9 was released in September 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most Java developers are still not using this powerful and elegant construct to modularize their applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_modules&#34;&gt;Modules&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A &lt;em&gt;module&lt;/em&gt; is a group of closely related Java packages and resources along with a new module descriptor file.
A module is distributed as a regular jar file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each module is responsible for its resources, like media or configuration files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Previously, we put all resources into the root level of our project.
We manually manage which resources belonged to different parts of the application.
It works, but it is not really a good way to define modular systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With modules, we can ship required images and XML files with the module that needs it, making our projects much easier to manage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_module_descriptor&#34;&gt;Module Descriptor&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we create a module, we include a descriptor file that defines several aspects of our new module:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Name&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;the name of our module.
&lt;em&gt;Please use the same conventions as for package names&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a list of other modules that this module depends on.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Public Packages&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a list of all packages we want accessible from outside the module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Services Offered&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;we can provide service implementations that can be consumed by other modules.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Services Consumed&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;allows the current module to be a consumer of a service.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reflection Permissions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;explicitly allows other classes to use reflection to access the private members of a package.
&lt;em&gt;Please minimize the use of reflection&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The module naming rules should be similar to how we name packages.
It is common to do Reverse-DNS &lt;em&gt;net.tangly.mymodule&lt;/em&gt; style names.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_module_directives&#34;&gt;Module Directives&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need to list all packages we want to be public because by default, all packages are module private.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Used Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We can declare dependencies on other modules.&lt;/p&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;requires &lt;em&gt;module list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;depends on the named module&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;requires static &lt;em&gt;module list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;depends on the named module, but that users of our library will never want to use.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;requires transitive &lt;em&gt;module list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;depends on the named module and makes it available to users of our module.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Provided Abstractions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;By default, a module does not expose any of its API to other modules.&lt;/p&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;exports &lt;em&gt;package list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We use the &lt;em&gt;exports&lt;/em&gt; directive to expose all public members of the named package.
&lt;em&gt;The export quantum is a package, not a class or interface&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;exports &lt;em&gt;package list&lt;/em&gt; to &lt;em&gt;module list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Similar to the exports directive, we declare a package as exported.
We additionally list which modules we are allowing to import this package as required.
&lt;em&gt;This mechanism is similar to the friend concept in C++&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Services&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A service is an implementation of a specific interface or abstract class that can be consumed by other classes.&lt;/p&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;uses &lt;em&gt;classname&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We designate the services our module consumes with this directive.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;provides &lt;em&gt;service name&lt;/em&gt; with &lt;em&gt;class list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A module can also be a service provider that other modules can consume.
The first part of the directive is the &lt;em&gt;provides&lt;/em&gt; keyword.
Here is where we put the interface or abstract class name.
Next, we have the &lt;em&gt;with&lt;/em&gt; directive where we provide the implementation class name that either implements the interface or extends the abstract class.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reflection&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;open&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;If we want to continue to allow full reflection as older versions of Java did, we can simply open the entire module up to reflection.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;opens &lt;em&gt;package list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;If we need to allow reflection of private types, but we do not want all of our code exposed, we can use the opens directive to expose specific packages.
But remember, this will open the package up to the entire world, so be careful with this directive.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;opens &lt;em&gt;package list&lt;/em&gt; to &lt;em&gt;module list&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We can selectively open our packages to a pre-approved list of modules, in this case, using the opens…to directive.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;dsl&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;utilities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;apache&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;logging&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;log4j&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;transitive&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;jetbrains&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;annotations&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_module_types&#34;&gt;Module Types&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are four types of modules in the new module system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;System Modules&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;These are the modules listed when we run the list-modules command above.
They include the Java SE and JDK modules.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Application Modules&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;These modules are what we usually want to build when we decide to use Modules.
They are named and defined in the compiled module-info.class file included in the assembled JAR.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Automatic Modules&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We can include unofficial modules by adding existing JAR files to the module path.
The name of the module will be derived from the name of the JAR.
Automatic modules will have full read access to every other module loaded by the path.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Unnamed Module&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;When a class or JAR is loaded onto the classpath, but not the module path, it is automatically added to the unnamed module.
It is a catch-all module to maintain backward compatibility with previously written Java code.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_services&#34;&gt;Services&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java services are used to do something like a plug-in to the core application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Service Interface&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It is an interface or abstract class that a Service defines.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Service Provider&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Has specific implementations of a service interface.
A Service could have zero, one, or many service providers.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;ServiceLoader&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The main class used to discover and load a service implementation.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;services&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                        &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;serviceSwiss&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                    &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;provides&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Service&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;serviceSwiss&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ServiceSwiss&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;locator&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                         &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;uses&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Service&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;locator&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;consumer&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                        &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ch&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hslu&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;pcp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;locator&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Export the package containing the interface describing the service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Implement the service and provide it to interested parties&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Optional locator responsible to find all implementations of a specific service interface&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Consumer calling an implementation of the service.
If you do not implement an explicit locator, the consumer is responsible to find a suitable implementation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_migration_strategy&#34;&gt;Migration Strategy&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A sore point of the Java module is the abysmal slow adoption of modules in Java applications.
Projects of the Apache foundation needed years to support at least automatic module names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You have two migration strategies.
Either top-down or bottom-up.
In both cases, it can only be nicely completed if the used libraries have an automatic module name or a module descriptor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before starting the migration process, you should create the dependency graph for all modules and library &lt;em&gt;jar&lt;/em&gt; files used in the application.
Beware that the same package name cannot be declared in multiple jar files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use the &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; or &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; mechanisms to create the transitive dependency graph of your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The module approach does not work with cyclic dependencies.
If your dependency graph has cyclic dependencies, you need to refactor your code to remove the cycles.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_top_down&#34;&gt;Top-Down&lt;/h3&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Place all projects on the module path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pick the highest-level project that has not yet been migrated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a module-info file to that project to convert the automatic module into a named module.
Again, remember to add any exports or requires directives.&lt;br/&gt;
You can use the automatic module name of other modules when writing the &lt;em&gt;requires&lt;/em&gt; directive since most of the projects on the module path do not have names yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat with the next-lowest-level project until you are done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_bottom_up&#34;&gt;Bottom-Up&lt;/h3&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Pick the lowest-level project that has not yet been migrated.
Do you remember the way we ordered them by dependencies in the previous section?
Use that order to identify the lowest-level project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a module-info.java file to that project.
Be sure to add any exports to expose any package used by higher-level JAR files.
Also, add a &lt;em&gt;requires&lt;/em&gt; directive for any modules it depends on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move this newly migrated named module from the classpath to the module path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure any projects that have not yet been migrated stay as unnamed modules on the classpath.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat with the next-lowest-level project until you are done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-algebric-data-types&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2024/data-classes-sealed-types-and-pattern-matching&#34;&gt;Data Classes, Sealed Types and Pattern Matching&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-advanced-streams&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2024/advanced-streams&#34;&gt;Advanced Streams&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-modules&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2024/java-modules&#34;&gt;Java Modules&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-structured-concurency&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2024/structure-your-concurrency&#34;&gt;Structure Your Concurrency&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-9-modularity&#34;&gt;&lt;/a&gt;[1] S. Mak, &lt;em&gt;Java 9 Modularity&lt;/em&gt;. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491954167&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491954167&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;modern-software-engineering&#34;&gt;&lt;/a&gt;[2] D. Farley, &lt;em&gt;Modern Software Engineering&lt;/em&gt;. Pearson Education, Limited, 2022 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B09GG6XKS4&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B09GG6XKS4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[3] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures-2nd&#34;&gt;&lt;/a&gt;[4] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Automated Software Governance&lt;/em&gt;, Second. O’Reilly Media, 2023 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0BN4T1P27&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0BN4T1P27&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Advanced Streams</title>
      <link>https://blog.tangly.net/blog/2024/advanced-streams/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2024/advanced-streams/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-02-01-head.png&#34; alt=&#34;2024 02 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java Stream API is a powerful and simple to understand set of tools for processing sequences of elements.
The standard collections were retrofitted with the &lt;em&gt;stream()&lt;/em&gt; method, which allows us to convert any collection to a stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java code has almost no loops and conditional statements.
It relies on the Stream API and the functional programming style to implement algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When used properly, it allows us to reduce a huge amount of boilerplate code, create more readable programs, and improve productivity &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#modern-software-engineering&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#effective-java-3rd&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The majority of Java developers I encountered are still not familiar with how to apply the Stream API when writing code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Introductory Java courses do not extensively cover the Stream API.
Most code examples are still written in an ancient imperative style.
The usage of the Stream API and Optional is not covered in detail.
Too much time is used to explain the basics of the various loops and conditional statements instead of teaching modern concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java developers should never return null from a method.
Instead, they should return an empty collection or an optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are truly using functional programming style if some of your methods have lambda expressions as parameters or return values.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_creating_streams&#34;&gt;Creating Streams&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are many ways to create a stream instance of different sources.
Once created, the instance will not modify its source, therefore allowing the creation of multiple instances from a single source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;streamOf&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;empty&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;                 &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;streamOf&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;empty&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Arrays&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;      &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #953800&#34;&gt;IntStream&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;intStream&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;IntStream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;                                                &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&lt;span style=&#34;color: #953800&#34;&gt;LongStream&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;longStream&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LongStream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;rangeClosed&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #953800&#34;&gt;StreamSupport&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;iterable&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;spliterator&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;                                        &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;stream()&lt;/em&gt; method is used to convert a collection to a stream.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Arrays.stream()&lt;/em&gt; method is used to convert an array to a stream.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;range()&lt;/em&gt; method is used to create a stream of integer or long values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;StreamSupport.stream()&lt;/em&gt; method is used to convert an iterable to a stream.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_map_and_filter&#34;&gt;Map and Filter&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-02-01-flatmap.jpg&#34; alt=&#34;2024 02 01 flatmap&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;em&gt;map()&lt;/em&gt; method is used to transform one object into another by applying a transformation function.
It produces a new stream after applying the function to each element of the original stream.
The new stream could be of different type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;em&gt;filter()&lt;/em&gt; method is used to eliminate elements based on a condition.
It produces a new stream that contains elements of the original stream that pass a given test specified by a &lt;em&gt;Predicate&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;em&gt;flatMap()&lt;/em&gt; method is used to transform one object into another by applying a function that returns a stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A stream can hold complex data structures like &lt;em&gt;Stream&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/em&gt;.
In cases like this, &lt;em&gt;flatMap()&lt;/em&gt; helps us to flatten the data structure to simplify further operations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_collectors&#34;&gt;Collectors&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are three variations of this method, which differ by their signatures and returning types.
They can have the following parameters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Identity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;the initial value for an accumulator, or a default value if a stream is empty and there is nothing to accumulate&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Accumulator&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a function which specifies the logic for the aggregation of elements.
As the accumulator creates a new value for every step of reducing, the quantity of new values equals the stream’s size and only the last value is useful.
This is not very good for the performance.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Combiner&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a function which aggregates the results of the accumulator.
We only call combiner in a parallel mode to reduce the results of accumulators from different threads.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The reduction of a stream can also be executed by another terminal operation, the collect() method.
It accepts an argument of the type Collector, which specifies the mechanism of reduction.
There are already created, predefined collectors for most common operations.
They can be accessed with the help of the Collectors type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this section, we will use the following List as a source for all streams:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;// Copy Converting a stream to the Collection (Collection, List or Set):&lt;/span&gt;
&lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;productList&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;potatoes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt;
                        &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;lemon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;bread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;sugar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;// Copy Reducing to String:&lt;/span&gt;
&lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;collectorCollection&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;productList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;Product:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Collectors&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;toList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;());&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;// Copy The joiner() method can have from one to three parameters (delimiter, prefix, suffix):&lt;/span&gt;
&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;listToString&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;productList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;Product:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
                                          &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Collectors&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;joining&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most convenient thing about using joiner() is that the developer does not need to check if the stream reaches its end to apply the suffix and not to apply a delimiter.
Collector will take care of that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Processing the average value for all numeric elements of the stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;// Copy Processing the sum of all numeric elements for the stream:&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;averagePrice&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;productList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Collectors&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;averagingInt&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;Product:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getPrice&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;// Copy The methods averagingXX(), summingXX() and summarizingXX() can work with primitives&lt;/span&gt;
&lt;span style=&#34;color: #6e7781&#34;&gt;// (int, long, double) and with their wrapper classes (Integer, Long, Double).&lt;/span&gt;
&lt;span style=&#34;color: #6e7781&#34;&gt;// One more powerful feature of these methods is providing the mapping.&lt;/span&gt;
&lt;span style=&#34;color: #6e7781&#34;&gt;// As a result, the developer does not need to use an additional map() operation before the collect() method.&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;summingPrice&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;productList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Collectors&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;summingInt&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;Product:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getPrice&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;// Grouping of stream’s elements according to the specified function:&lt;/span&gt;
&lt;span style=&#34;color: #6e7781&#34;&gt;// Copy In the example above, the stream was reduced to the Map, which groups all products by their price.&lt;/span&gt;
&lt;span style=&#34;color: #953800&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Integer&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;collectorMapOfLists&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;productList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt;
                                &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Collectors&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;groupingBy&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;Product:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getPrice&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;em&gt;Collectors&lt;/em&gt; class provides a set of predefined collectors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To iterate over a collection and apply a function to each element, use the forEach() convenience method.
You do not need to create a stream for this purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_gatherers&#34;&gt;Gatherers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java Stream API was released with Java 8 in March 2014 and has given us a fundamentally new tool for processing data streams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, the limited set of intermediate operations – &lt;em&gt;filter&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;flatMap&lt;/em&gt;, &lt;em&gt;mapMulti&lt;/em&gt;, &lt;em&gt;distinct&lt;/em&gt;, &lt;em&gt;sorted&lt;/em&gt;, &lt;em&gt;peak&lt;/em&gt;, &lt;em&gt;limit&lt;/em&gt;, &lt;em&gt;skip&lt;/em&gt;, &lt;em&gt;takeWhile&lt;/em&gt;, and &lt;em&gt;dropWhile&lt;/em&gt; – means that the Stream API cannot express more complex data transformations&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A set of default gatherers are provided in the &lt;em&gt;java.util.stream.Gatherers&lt;/em&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;fold&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;is a stateful many-to-one gatherer which constructs an aggregate incrementally and emits that aggregate when no more input elements exist.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;mapConcurrent&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;is a stateful one-to-one gatherer which invokes a supplied function for each input element concurrently, up to a supplied limit.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;scan&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;is a stateful one-to-one gatherer which applies a supplied function to the current state and the current element to produce the next element, which it passes downstream.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;windowFixed&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;is a stateful many-to-many gatherer which groups input elements into lists of a supplied size, emitting the windows downstream when they are full.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;windowSliding&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;is a stateful many-to-many gatherer which groups input elements into lists of a supplied size.
After the first window, each subsequent window is created from a copy of its predecessor by dropping the first element and appending the next element from the input stream.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gatherers support composition via the &lt;em&gt;andThen(Gatherer)&lt;/em&gt; method, which joins two gatherers where the first produces elements that the second can consume.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This enables the creation of sophisticated gatherers by composing simpler ones, just like function composition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Semantically, &lt;em&gt;source.gather(a).gather(b).gather(c).collect(…​)&lt;/em&gt; is equivalent to  &lt;em&gt;source.gather(a.andThen(b).andThen(c)).collect(…​)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_parallel_streams&#34;&gt;Parallel Streams&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before Java 8, parallelization was complex.
The emergence of the &lt;em&gt;ExecutorService&lt;/em&gt; and the &lt;em&gt;ForkJoin&lt;/em&gt; simplified a developer’s life a little bit, but it was still worth remembering how to create a specific executor and how to run it.
Java 8 introduced a way of accomplishing parallelism in a functional style.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The API allows us to create parallel streams, which perform operations in a parallel mode.
When the source of a stream is a Collection or an array, it can be achieved with the help of the &lt;em&gt;parallelStream()&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Under the hood, Stream API automatically uses the &lt;em&gt;ForkJoin&lt;/em&gt; framework to execute operations in parallel.
By default, the common thread pool will be used, and there is no way to assign some custom thread pool to it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java applications extensively use streams.
Beware modern Java code is quite different from Java code written beginning of this millennium
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#functional-thinking&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#functional-programming-java&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source code is almost free of loops and conditional statements.
The code is more readable and maintainable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new gatherers simplify this functional and declarative programming style.
Custom gatherers and collectors are seldom written.
Most of the time, the predefined gatherers and collectors are sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This extension of the Stream API allows experienced Java developers to write custom gatherers and collectors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern IDE like IntelliJ provides reasonable support to debug complex stream expressions.
I seldom need to activate the debugger.
The declarative style tremendously reduces the risks of errors in the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The IDE provides refactoring support to convert loops to streams.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-algebric-data-types&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2024/data-classes-sealed-types-and-pattern-matching&#34;&gt;Data Classes, Sealed Types and Pattern Matching&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-advanced-streams&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2024/advanced-streams&#34;&gt;Advanced Streams&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-modules&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2024/java-modules&#34;&gt;Java Modules&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-structured-concurency&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2024/structure-your-concurrency&#34;&gt;Structure Your Concurrency&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;jep-gatherers&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;https://openjdk.org/jeps/461&#34;&gt;JEP 461: Stream Gatherers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;modern-software-engineering&#34;&gt;&lt;/a&gt;[1] D. Farley, &lt;em&gt;Modern Software Engineering&lt;/em&gt;. Pearson Education, Limited, 2022 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B09GG6XKS4&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B09GG6XKS4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[2] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;functional-thinking&#34;&gt;&lt;/a&gt;[3] N. Ford, &lt;em&gt;Functional Thinking: Paradigm Over Syntax&lt;/em&gt;. O’Reilly Media [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00LEX6SP8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00LEX6SP8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;functional-programming-java&#34;&gt;&lt;/a&gt;[4] V. Subramaniam, &lt;em&gt;Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions&lt;/em&gt;. The Pragmatic Programmers, 2014 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0CJL7VKFL&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0CJL7VKFL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: EclipseStore</title>
      <link>https://blog.tangly.net/blog/2024/eclipsestore/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2024/eclipsestore/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-01-02-head.png&#34; alt=&#34;2024 01 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;
is a Java-native persistence layer built for cloud-native microservices and serverless systems.
EclipseStore is the only data storage solution that uses the native Java object model instead of database-specific structure or format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It enables storing any Java object graph of any size and complexity transaction-safe into any binary data storage such as plain files, persistent volumes, or cloud object storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Snapshots of the object graph differences are regularly saved to the storage.
ACID transaction journal guarantees full consistency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each diff is stored as a bytecode representation appended to the storage using Eclipse Serializers optimized byte format.
Objects are retrieved from the storage and restored in memory fully automated by just accessing the objects in your object graph via getter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Lazy-Loading enables to run EclipseStore also with low memory capacity even lower than 1 GB.
At system start, only object IDs are loaded into RAM.
Related object reference subgraphs are restored in memory on-demand only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_eclipsestore_hello_world&#34;&gt;EclipseStore Hello World&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using &lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt; is really simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First you have to add the dependency to your &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; build file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;org.eclipse.store:storage-embedded:&amp;lt;current-version&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;                    &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;org.eclipse.serializer:persistence-binary-jdk8:&amp;lt;current-version&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;org.eclipse.serializer:persistence-binary-jdk17:&amp;lt;current-version&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This dependency is required for the embedded storage manager.
The other dependencies are optimizations for modern Java versions.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Second, you create a storage manager and store a string as the root object to write the canonical Hello World example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;EmbeddedStorageManager&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EmbeddedStorage&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;                          &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;setRoot&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;                                                    &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;storeRoot&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;                                                               &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Start the database manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the entity (graph) as root&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Store root to persistent storage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_entities_and_aggregates&#34;&gt;Entities and Aggregates&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design promotes the concept of entities and aggregates.
EclipseStore optimally supports the storage and retrieval of aggregates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The provider abstraction is a data access objects for a collection of aggregates with the same type for the root entity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Long&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Optional&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;findByOid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;findBy&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;E:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasId&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Optional&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;findBy&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;E:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Return a list containing all known instances of the entity type.
     *
     * @return list of all instances
     */&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Update the data associated with the entity. If the entity is new, the update is handled
     * as a create operation. The update is transitive and all referenced entities are also
     * updated. The entity given as parameter becomes the instance managed through the provider.
     *
     * @param entity entity to update
     */&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Delete the data associated with the entity. The object identifier is invalidated.
     *
     * @param entity entity to delete
     */&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Delete all the entities managed by the provider.
     */&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;deleteAll&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;


    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Replace an existing value with a new one. A null value is ignored.
     *
     * @param oldValue remove the old value if not null
     * @param newValue add the new value if not null
     */&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oldValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;newValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Objects&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;nonNull&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oldValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oldValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Objects&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;nonNull&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;newValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;newValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Update the data associated with all entities.
     *
     * @param items entities to update
     */&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;updateAll&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Iterable&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;


    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Return the first entity which property matches the value.
     *
     * @param getter getter to retrieve the property
     * @param value  value to compare with
     * @param &amp;lt;U&amp;gt;    type of the property
     * @return optional of the first matching entity otherwise empty
     */&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Optional&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;findBy&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;U&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;apply&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;findAny&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Transactions must be realized at the provider level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Created aggregates only need transactional integrity when added to the provider.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deleted aggregates only need transactional integrity when removed from the provider.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modified aggregates need transaction integrity when updating entities and value objects of the aggregate and persisting the changes to the provider.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read aggregates only need transactional integrity when the aggregate is retrieved from the provider.
Potential changes to the aggregate initiated by another client can be propagated to all clients by using an event bus.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The root object for a complete bounded domain would be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;DomainEntities&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Data&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                                                   &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Lead&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;leads&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NaturalEntity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;naturalEntities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color: #953800&#34;&gt;Data&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;leads&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ArrayList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;naturalEntities&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ArrayList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Data&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Lead&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;leads&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NaturalEntity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;naturalEntities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;DomainEntities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Data&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EmbeddedStorage&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;                               &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;leads&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ProviderPersistence&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;leads&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;                       &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;naturalEntities&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ProviderPersistence&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;naturalEntities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Lead&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;leads&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                                       &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;leads&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NaturalEntity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;naturalEntities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;naturalEntities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The data class contains all the data of the bounded domain.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The storage manager is initialized with the data instance and the path to the storage.
The instance is populated with the persistent data if the storage exists.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The provider is initialized with the storage manager and the list of entities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The provider interface is accessible through a getter.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advanced_considerations&#34;&gt;Advanced Considerations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For a huge set of aggregates, you should introduce a sharding concept to distribute the aggregates over multiple providers.
For example, accounting transactions can be shard by the year of the transaction date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware that if an accounting transaction needs one KB of storage, a million transactions need one GB of storage.
Few companies have more than a million transactions per year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If your bounded domain runs as a separate Java virtual machine, you should limit your memory consumption to around 32 GB.
This restriction covers a lot of concrete use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Almost all internal management systems of a company can be realized within these memory limits.
You do not need to implement sophisticated sharding concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_migration_tangly_erp&#34;&gt;Migration tangly ERP&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We migrated our open source components from &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; to &lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt; as soon as the first stable release was available.
The migration was straight forward and took only a few hours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We did not use the provided migration assistant and instead use the refactoring tools of our &lt;em&gt;IntelliJ IDEA&lt;/em&gt; IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All unit tests passed without any changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The situation is more complicated if you have to migrate a production system with persistent data.
Our application has an export and import capability to CVS formatted files for all bounded domains
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.
We used this capability to export the data, migrate the application, and import the data again with the new version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;EclipseStore is a great persistence layer for Java applications.
The effort to persist complex bounded domain object graphs is minimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Especially in the early phases of a project, you can focus on the domain entities and not on the persistence layer.
The integration of the &lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt; persistence layer is straightforward and takes only a few hours.
You can postpone the decision for the persistence layer to a later phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach is optimal for domain-driven design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We combine EclipseStore with an in-memory file system &lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;jimfs&lt;/a&gt; to create extensive integration tests with synthetic data.
The execution speed of the tests is great.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;eclipsestore&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2024/eclipsestore/&#34;&gt;EclipseStore&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;microstream&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. &lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt; was previously called &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt;. The Java frameworks &lt;a href=&#34;https://helidon.io/&#34;&gt;Helidon&lt;/a&gt; and &lt;a href=&#34;https://micronaut.io/&#34;&gt;Micronaut&lt;/a&gt; support natively EclipseStore for their persistence layer.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. We use the &lt;a href=&#34;https://commons.apache.org/proper/commons-csv/&#34;&gt;Apache Commons CSV&lt;/a&gt; library for the export and import operations.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Data Classes, Sealed Types and Pattern Matching</title>
      <link>https://blog.tangly.net/blog/2024/data-classes-sealed-types-and-pattern-matching/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2024/data-classes-sealed-types-and-pattern-matching/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2024-01-01-head.png&#34; alt=&#34;2024 01 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records, sealed types, enumerations are the key language features for &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;Algebraic Data Types&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The features have been available since Java 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Latter JDK releases provide additional capabilities and syntactic sugar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Based on the features of JDK 22, we are still missing &lt;em&gt;with constructors&lt;/em&gt; for records and primitive support for pattern matching
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pattern matching capabilities empower the developer to implement complex algorithms in a compact and legible way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Patterns such as visitor pattern are obsolete.
You can write the same functionality with one pattern matching switch case, and the compiler would validate completeness for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The compiler checks the exhaustiveness of the pattern matching.
Source code is more maintainable and less error-prone.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_records&#34;&gt;Records&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records are shallow immutable data classes that require only the type and name of fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The developer has to take care of the deep immutability of the properties.
But you are on your own.
The compiler does not provide any support for deep immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The compiler generates constructor, getters, equals, hashCode and toString.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;firstname&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;lastname&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Address&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The notation is compact and all properties are final.
This approach provides shallow immutability.
The developer has to take care of the immutability of the properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An additional capability of records is secure serialization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_sealed_hierarchies&#34;&gt;Sealed Hierarchies&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Design idiom Pattern matching Compiler checks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;permits&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ConstantExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;PlusExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;TimesExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;NegExpr&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;ConstantExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;PlusExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;TimesExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;NegExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;                                             &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;ConstantExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;PlusExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;TimesExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;NegExpr&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Expr&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;No need for a default case because the compiler verifies the exhaustiveness of the pattern matching.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The evaluation method is implemented using pattern matching.
It replaces a complex visitor pattern implementation distributed over multiple classes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_enumerations&#34;&gt;Enumerations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Enumerations have been available since Java 5.
Enumerations are a powerful language feature to define immutable objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock caution&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-caution&#34; title=&#34;Caution&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The developer is responsible for creating immutable enumeration objects.
It is possible to create mutable enumeration objects in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They provide secure serialization and a perfect implementation for singletons.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;No more loops in Modern Java.
&lt;em&gt;Use Streams&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;No more tests on null in Modern Java.
&lt;em&gt;Use optional monad&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid Map and prefer records.
&lt;em&gt;Embrace immutable structures&lt;/em&gt;.
&lt;em&gt;Beware of shallow immutability versus deep immutability&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pattern implementation in the functional world.
No more visitor pattern.
&lt;em&gt;Use pattern matching&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These programming idioms are compliant with seminal books on software engineering &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#modern-software-engineering&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#effective-java-3rd&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The next JDK releases will provide additional capabilities for pattern matching.
Draft JEP for primitive types in patterns, instanceof, and switch was published and accepted in January 2024.
Draft JEP for with constructors for records was also published in January 2024.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Step by step, the language is evolving to a more functional programming language.
Syntax sugar for pattern matching is on the way and reduces boilerplate code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-algebric-data-types&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2024/data-classes-sealed-types-and-pattern-matching&#34;&gt;Data Classes, Sealed Types and Pattern Matching&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-advanced-streams&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2024/advanced-streams&#34;&gt;Advanced Streams&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-modules&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2024/java-modules&#34;&gt;Java Modules&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-structured-concurency&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2024/structure-your-concurrency&#34;&gt;Structure Your Concurrency&lt;/a&gt;
Marcel Baumann. 2024&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;algebraic-data-types&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;Algebraic Data Types&lt;/a&gt;
Wikipedia&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;modern-software-engineering&#34;&gt;&lt;/a&gt;[1] D. Farley, &lt;em&gt;Modern Software Engineering&lt;/em&gt;. Pearson Education, Limited, 2022 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B09GG6XKS4&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B09GG6XKS4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[2] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Primitive types in patterns, instanceof, and switch shall be provided as preview in JDK 23. A draft proposal for with constructors was published in the JEP list in January 2024.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Command Interpreter</title>
      <link>https://blog.tangly.net/blog/2023/command-interpreter/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/command-interpreter/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-12-03-head.jpg&#34; alt=&#34;2023 12 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most digital products have a command interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;External systems send requests to the system and often await an answer.
A command interpreter can model this behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The channels used to transmit requests and return answers are variable.
Messages can be transmitted other various buses and protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An operator can send a command over a &lt;a href=&#34;https://en.wikipedia.org/wiki/CAN_bus&#34;&gt;CAN bus&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&#34;&gt;Serial Peripherical Interface&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Ethernet&#34;&gt;Ethernet&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Bluetooth&#34;&gt;Bluetooth&lt;/a&gt; connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A regular command line interpreter inputs commands as a string containing a request and associated parameters.
The answer is displayed as a string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The processed commands are the instructions executed on the machine.
They are independent of the transmission layer and communication protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How could you design such a versatile interface using modern software constructs from Java or C++?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Which design delegates most of the validation to the compiler
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_command_descriptors_and_commands&#34;&gt;Command Descriptors and Commands&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A description of a command could be encoded in a set of classes defining a bounded domain.
This approach is often used in command line interpreters.
It works well, but the compiler will not validate the descriptors.
The solution does not well integrate with modern communication protocols such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_Buffers&#34;&gt;Protocol Buffers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modern approach would be to encode the command universe as a sealed class hierarchy in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A similar approach could be based on a variant template instance in C++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The key concept is to encode the command structure into declarations instead of defining a domain model to describe them.
The sole drawback of this approach is that you cannot dynamically add a command type.
You have to declare a new class and compile the program
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center kroki-format-svg kroki&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://kroki.io/plantuml/svg/eNqVUktLAzEQvu-vGHpSwQWvtiy0CiL0Vm_iYZpM22AyKUlEofjfTbIPd2tX2j3sbmaS7zVRHMhtUBA8GAlwKCA-igMoeXU9zatVcIq3wGioLa2t1YQMO_Rz9p_kUuO7KFSHtiS5JZcwZzNPqElWFdBXIJY-Ux3idqHR59XC2vcXh-xRBGU5nnEkrEtnlNlrMsTB9zBrmXMh7AeHZwkbZ830qBZsXVlagfoRA4GMr2aXSZsA82fgMkSN2UqtLQlL5Z6gmhs7nubvQuDG9GqvVbjceSPr9a3n_Lc25jySj9GWZdUCtAqbJBeokeNAz03gn7jXNdQwhScK40xnDf8kPQ48_yW5uYXJ3eTY5D1gvs5dUIPRlGUSPJphr3_CVN38ASioHqU=&#34; alt=&#34;commands&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The sealed class hierarchy defines the command types and their parameters.
Each command type is defined through a class definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instances of a command type are commands.
Each command is defined through an instance of a class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The sealed structure guarantees that the compiler will mark all code segments needing edition when a new command type is added.
The sealed class structure and the pattern matching approach is a compiler-validated visitor pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We decided to store the result of a query into an answer object.
A computed answer can have a reference to the query initiating the processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can pack the result into a future wrapper to support asynchronous command processing.
The interpreter itself behaves as a synchronous command processor matching answers to the related query command.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_interpreters_and_dispatcher&#34;&gt;Interpreters and Dispatcher&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The interpreter is quite simple to realize.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It processes all commands it is in charge of.
An interpreter is in charge of one or more command sets with a specific group identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A second responsibility is to build a command object based on input data.
It parses the input and generates the command instance representing the received data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Object-oriented approach states that you should not mix the received data with the internal command classes.
Do not inherit from any classes defined in the channel abstraction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design approach clearly states the channels are interfaces to a bounded domain.
No abstraction defined in the interface layer should pollute the domain model.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The dispatcher delegates the processing to multiple interpreters.
Each subsystem can provide their interpreter to execute commands specific to the bounded domain.
The dispatching criteria is either a group identifier or an interface marker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center kroki-format-svg kroki&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://kroki.io/plantuml/svg/eNp9UU1PwzAMvedXWDulaJs4w7ET0m5IcEMcvNTrIrVJ5YQvVfvvOF3L2lLIIZHz7OdnP-si8RENQV4X-xQ0THIDtArkHLyvCB0YdI_sDYWgrYtQsn9rMtWlSCE0yIH0U2TrypdXiPQZsxl4-IokUIER-8JrOqMLR8-1TummLi61fcUC2sHv3gp3L6qDfF2jK9apaX5C56gCc3kzdVbKVBhCAnc2NBjNScZsr1RMpQ0yup5uYg2jgReT86HHL1kC6j_ETGXcbDawut1u3Wruw11qP0RBKTs2bCBux_tiwmInW9YjuR9sI3WfExsE_hnuwfN_HiXWZ7FVZ_cz2u53wfoJ8ww_fwPMxtBc&#34; alt=&#34;command-interpreter&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A channel receives and transmits command data.
The channel should be able to extract the message group from a raw message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Why should we support multiple channels to propagate commands?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An operator would input commands as text on a command line.
An external software system would send commands through a bus such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Ethernet&#34;&gt;Ethernet&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/CAN_bus&#34;&gt;CAN bus&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&#34;&gt;Serial Peripherical Interface&lt;/a&gt;.
Multiple channels are a requirement for a versatile command interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I recommend &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_Buffers&#34;&gt;Protocol Buffers&lt;/a&gt; for binary encoding of commands, queries, and answers.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_channels&#34;&gt;Channels&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The channel decodes all commands send through it into a command instances.
The channel has knowledge of the command structure.
This is needed to decode the command and dispatch it to the right interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach delegates the encoding and decoding of commands to messages to the channel.
This approach is the standard one for bus communication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;exampleblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can implement a two-step decoding process for maximum flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first step is to decode the message type and encoding format before dispatching the message to the right interpreter.
The interpreter will decode the message payload and transform it into a command instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach shall only be used if you need to support multiple complex encoding formats due to its complexity.
Most decoding libraries for JSON, proto buffers, or command line parsers are ill-suited for this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The payload of the message does not need to be interpreted by the channel.
This activity can be delegated to the interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Consider using a factory pattern for the decoding operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are using the Google &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_Buffers&#34;&gt;Protocol Buffers&lt;/a&gt; library, you will have to describe the structure of all messages send over the channel.
The library will generate the code to encode and decode the messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The same can be said if your transmission format is &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34;&gt;JSON&lt;/a&gt; and you want to validate the structure of the messages with a &lt;a href=&#34;https://json-schema.org&#34;&gt;JSON Schema&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above describes constraints are in line with how major encoding approaches are designed.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This design approach is almost codified as a design pattern.
The solution is constrained by the decision to use the compiler toolchain to validate the command types and to program the processing with a pattern matching approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach melts object-orientation with functional aspects.
It reflects the evolution of modern programming languages blending object-orientation and functional approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. A powerful software quality approach is to delegate validation activities to the compiler.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Agile and DevOps approaches mitigate the problem. You should be able to generate a new version of your application in at most a few minutes without manual activities.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Gradle Good Practices</title>
      <link>https://blog.tangly.net/blog/2023/gradle-good-practices/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/gradle-good-practices/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-12-01-head.png&#34; alt=&#34;2023 12 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; is a fast, dependable, and adaptable open-source build automation tool with an elegant and extensible declarative build language.
Java is the primary supported programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; is a popular build system for the JVM and is the default system for Android and Kotlin Multi-Platform projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It has a rich community plugin ecosystem.
&lt;a href=&#34;https://groovy-lang.org&#34;&gt;Groovy&lt;/a&gt;, &lt;a href=&#34;https://kotlinlang.org&#34;&gt;Kotlin&lt;/a&gt;, C++, and &lt;a href=&#34;https://swift.org&#34;&gt;Swift&lt;/a&gt; stacks are well-supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle is fast, scalable, and can build projects of any size and complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Long ago I migrated all my projects from &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; to &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the first years, I sometimes regretted this decision due to missing or faulty plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The plugins have now reached a level of maturity that you can do everything with Gradle
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pros_and_cons&#34;&gt;Pros and Cons&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_advantages&#34;&gt;Advantages&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Great Flexibility&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You can do everything within the build script as you write them with the full-fledged programming language Groovy or Kotlin based DSL.&lt;br/&gt;
XML is a data modeling language and probably the worst programming language ever used.
The &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; approach to declarative builds is a reasonable idea, but the XML syntax is a nightmare.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Great Performance&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Gradle does an awesome job in speeding up your builds with features like incremental builds, daemons, and clustered builds.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Great IDE Support&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Jetbrains IntelliJ IDE has extensive Gradle support.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_drawbacks&#34;&gt;Drawbacks&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Steep learning curve&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Moreover, the whole team has to learn Gradle or you will be depending on the single Gradle ninja in your team.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Groovy or Kotlin DSL&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The dynamic Groovy DSL and the heterogeneous plugin APIs will make you google everything.
Unexpected side effects, behavior, and interdependencies between plugins often feel like magic.
As Groovy is dynamically typed, it is really hard for IDEs to provide good and fast tooling.
Contrarily, parsing and interpreting Maven’s XML is dead simple.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Breaking Changes&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;New Gradle versions are often breaking existing plugins, and the poor maintainer of these one-man-open-source-projects cannot keep up with this speed.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Best practices how &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; scripts should be structured have quite changed over the years.
The &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; team has learned a lot and has impressively improved the tooling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a drawback, I had to regularly refactor my scripts to keep them up to date with best practices.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_maintain_your_build&#34;&gt;Maintain Your Build&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Build rot is the silent degradation of your build system’s effectiveness.
It is a result of poor practices, neglect, or simply the passage of time.
It is like rust corroding a piece of machinery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this case, it gradually eats into the heart of your build system, causing it to slow down, become unpredictable, or become more challenging to maintain.
This phenomenon can manifest within any build tool, but for our exploration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are the most common sources of build rot?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Poorly managed dependencies are one characteristic of build rot common to Maven and Gradle.
Both build systems offer powerful dependency management capabilities.
But neglecting regular updates to these dependencies can add vulnerable libraries to your build, directly impact build speed, and introduce compatibility issues.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An overly complex Gradle &lt;em&gt;build.gradle&lt;/em&gt; or maven &lt;em&gt;pom.xml&lt;/em&gt; file, cluttered with unnecessary dependencies or outdated plugins, can significantly extend build times and become a maintenance nightmare.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Use the &lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin&#34;&gt;Versions Plugin&lt;/a&gt; to identify outdated dependencies and plugins.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Define all your dependencies in a central &lt;a href=&#34;https://docs.gradle.org/current/userguide/platforms.html&#34;&gt;version catalog&lt;/a&gt; configuration file.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check your dependencies once a week and systematically update them.
Use the latest version and run your unit and integration tests.
If everything is green, you are good to go.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Over-customization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Gradle’s flexibility is one of its strong suits and yet it can ironically invite build rot.
Over-customization, while seemingly advantageous in the short run, can result in a convoluted build.gradle files.
These scripts can become so complicated that they require more effort to first comprehend and then maintain.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Define standard build processes as plugins in your &lt;a href=&#34;https://docs.gradle.org/current/userguide/organizing_gradle_projects.html&#34;&gt;buildSrc&lt;/a&gt;.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Eliminate all imperative logic from regular build.gradle scripts.&lt;/em&gt;
&lt;em&gt;Better follow the conventions and processes of standard plugins instead of creating custom logic.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We use this approach in our projects and &lt;a href=&#34;https://github.com/tangly-team/tangly-os/&#34;&gt;Open Source Components&lt;/a&gt; to ensure a consistent build process across all projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Redundant tasks and misconfigured scripts&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Moreover, this complexity can have a significant impact on build speed.
If scripts include redundant tasks, or simply take a long time to execute your Groovy or Kotlin configuration, the build speed can slow to a frustrating crawl.
Misconfigured scripts can also lead to extended test times, further exacerbating the build rot.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Always prefer standard plugins to build artifacts.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Suboptimal parallelization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Another silent perpetrator of build rot is the under-utilization of parallel execution capabilities offered by both Maven and Gradle.
Both support parallel builds.
Not taking advantage of this feature can lead to unnecessarily long build times.
Similarly, not properly organizing your project into modules can result in unnecessary rebuilds of unchanged code, further slowing down your build process.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Modern software engineering practices promote modularity and low coupling between components.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Deprecated features and APIs&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Sticking with deprecated features or APIs in your build scripts can also contribute to build rot.
These deprecated features might be less efficient than their newer counterparts and might be removed in future build tool versions.
The time and effort needed to refactor your scripts, once these features are eventually removed, add to the maintenance burden and deepen the build rot.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Refactoring is a mandatory practice to integrate improvements of your build tool into your scripts.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Developers must understand the intricacies of these tools to use build systems like &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; and &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; to the greatest effect.
By promoting a learning culture, you equip your team with the knowledge they need to best leverage these tools.
Regular training and knowledge-sharing sessions can help reduce build rot and enhance productivity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each team of developers should have one savvy build tool expert.
Do not rely on external consultants or the build tool vendor to solve your problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Update regularly your tools, plugins, and dependencies ensures you are leveraging the most efficient, optimized versions of libraries.
This practice mitigates potential security issues and prevents the accumulation of &lt;em&gt;update debt&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I mean it.
Update &lt;strong&gt;every&lt;/strong&gt; week.
Run your continuous delivery pipeline to validate your changes.
You reduce the risk of breaking changes and can react immediately.
The updates remove known bugs and security issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Observability is critical in managing build rot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Track your build and test times, identify trends, and analyze the impact of changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Last millennium I had to migrate all my projects from &lt;a href=&#34;https://ant.apache.org/&#34;&gt;Apache Ant&lt;/a&gt; to &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. I had to wait until {ref-vaadin} provided an official supported &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; plugin.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Java Certification</title>
      <link>https://blog.tangly.net/blog/2023/java-certification/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/java-certification/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-11-01-head.png&#34; alt=&#34;2023 11 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java expertise is in high demand for all kinds of projects, ranging from big enterprise software implementations down to little web projects.
A huge number of enterprise applications are developed in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But will those employers want you to have related certifications?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Even if you are not looking to move any time soon, getting certified boosts the value that you can bring to your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Certifications can be a great bargaining chip when it comes to negotiating a raise or a promotion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_preparing_for_the_certification&#34;&gt;Preparing for the certification&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The current &lt;a href=&#34;https://education.oracle.com/java-se-17-developer/pexam_1Z0-829&#34;&gt;Java SE 17 Developer&lt;/a&gt; examination process and examination goals are well-documented.
Beware that only one examination exists.
The same certification applies for developers pursuing a first certification, and for the developers upgrading to the current LTS version.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Exam Details&lt;/th&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Syllabus&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Code: 1Z0-829&lt;/p&gt;
&lt;p class=&#34;tableblock&#34;&gt;Duration: 90 minutes&lt;/p&gt;
&lt;p class=&#34;tableblock&#34;&gt;Passing score: 68%&lt;/p&gt;
&lt;p class=&#34;tableblock&#34;&gt;Prerequisites: None&lt;/p&gt;
&lt;p class=&#34;tableblock&#34;&gt;Number of questions: 50&lt;/p&gt;
&lt;p class=&#34;tableblock&#34;&gt;Type: multiple choice&lt;/p&gt;
&lt;p class=&#34;tableblock&#34;&gt;Cost: $244 - CHF 225&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Controlling program flow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilizing Java object-oriented approach&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Managing concurrent code execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Java I/O API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessing databases using JDBC&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your preparation approach shall be tailored to how you prefer to learn.
You can attend a course or read a book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.amazon.com/dp/B09WJP11JL/&#34;&gt;OCP Oracle Certified Professional Java SE 17 Developer Study Guide: Exam 1Z0-829&lt;/a&gt; is a great and cost-effective resource.
You have access to all materials for less than forty dollars.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The book provides a registration to a wiley account where you will have access to a test bank.
Once activated, access to the test questions is available for one year for free
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This book is for anyone from high school students to those beginning their programming journey to experienced professionals who need a review for the certification.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_mockup_questions&#34;&gt;Mockup Questions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try the various online mockup questions to get a grasp of the certification examination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The OCP book contains a full set of questions and answers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You will often find answers to Java questions on &lt;a href=&#34;https://coderanch.com/&#34;&gt;Code Ranch&lt;/a&gt;.
The authors of the book are providing hints on the discussion panel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_taking_the_examination&#34;&gt;Taking the examination&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly recommend attending an onsite examination.
The setup is more convenient than the online version of the test.
The cost of the test in Switzerland is around CHF 225.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You will receive a public badge upon successful completion.
Interested parties can confirm your certification when provided with the link.
You can, for example, publish your certification badge on the LinkedIn platform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read all chapters of the book to prepare for the examination.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Train with mock questions.
Do not focus on memorizing the questions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try to relax during the examination.
Do not stay too long on one question.&lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each question has the same weight for passing the examination.
Answer first the questions you find easier.&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At the end of the test, reconsider the answered questions and either find or guess an answer.
With some luck, you get a few more points.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are a senior Java developer, you probably do not need to renew your credentials.
You already have shown you reached the expected level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The value of taking the updated examination each time a new Java LTS version is released is not clear for me.
Investing in the certification every two years has no measurable return on investment.
You will not get a salary increase in Europe for a renewal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Find a more effective approach to learning the new features of the Java language and environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;ocp-study-guide-java-17&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;https://www.amazon.com/dp/B09WJP11JL/&#34;&gt;OCP Oracle Certified Professional Java SE 17 Developer Study Guide: Exam 1Z0-829&lt;/a&gt;
Scott Selikoff, Jeanne Boyarsky.
Sybex. 2022&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;certification-java-11&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2021/certified-java-developer/&#34;&gt;Certified Java 11 Developer&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;certifications-useful&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2023/are-certifications-useful/&#34;&gt;Are Certifications Useful?&lt;/a&gt;
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The registration process will verify that you own a copy of the book.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 20th Devoxx Belgium Conference 2023</title>
      <link>https://blog.tangly.net/blog/2023/20th-devoxx-belgium-conference-2023/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/20th-devoxx-belgium-conference-2023/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-10-03-head.png&#34; alt=&#34;2023 10 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I attended the highly anticipated 20th edition of Devoxx Belgium 2023.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Building on the success of the previous year, which attracted over 3,200 attendees, this five-day technology conference is set to exceed expectations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The fresh release of Java 21 is a hot topic.
Renowned speakers share their knowledge and discuss the enhancements that this new version brings, providing a valuable learning opportunity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Attending Devoxx Belgium presents a remarkable opportunity to broaden your knowledge, refine your skills, and gain firsthand experience with the most recent technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Session recordings are available on YouTube under the &lt;a href=&#34;https://www.youtube.com/@DevoxxForever/videos&#34;&gt;Devoxx Channel&lt;/a&gt;.
The videos are published on the same day the talk was held.
Congratulations to the Devoxx committee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most of the talks were good.
A few were excellent such as &lt;a href=&#34;#awesome-speech-llm&#34;&gt;Java Meets AI: A Hands-On Guide to Building LLM-Powered Applications with LangChain4j&lt;/a&gt;.
The Oracle Java architects are doing a stunning job.
They are very professional, polite, and their talks are of high-quality.
Brian Goetz and Per Minborg made a big impression on how competent they are
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My favorite tool companies &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;Jetbrains&lt;/a&gt;, &lt;a href=&#34;https://vaadin.com/&#34;&gt;vaadin}&amp;gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.oracle.com/java/&#34;&gt;Oracle Java&lt;/a&gt; were exhibitors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_day_one&#34;&gt;Day One&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The train ride from Brussels airport to Antwerp is around half an hour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The venue is easy to find and has splendid public transportation connections.
The registration was straightforward and fast.
Wireless is working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It was saddening that most attendees are white male engineers.
Perhaps the conference committee should more actively pursue diversity.
Other conferences try very hard to attract less represented groups in particular women.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The coffee was lousy as usual at a software conference
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.
The danish pastries were welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_test_containers_needed_simple_powerful&#34;&gt;Test Containers: Needed, Simple, Powerful&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Integration tests verify your application is working as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Test containers is a powerful wrapper around docker.
You can create the integration environment and the continuous delivery pipeline in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
Test containers seem to lower the anxiety how to set up an integration environment and deploy the application on it.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you prefer to write and debug your integration setup in Java, test containers are useful.
The demonstration highlighted you have anyway to learn the subtleties of Docker.
You can write your setup code in Java, but it requires quite knowledge about the underlying tooling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A cool hint was &lt;a href=&#34;https://github.com/shopify/toxiproxy&#34;&gt;toxiproxy&lt;/a&gt; to simulate network delays and errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Alternative approaches are docker compose or plugins such as jib.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;I am still not convinced the gains using test containers are worth learning a new library.&lt;/em&gt;
&lt;em&gt;The assumption is that you are already proficient with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/em&gt;
&lt;em&gt;Test containers are certainly useful when you have a complex ecosystem with databases, servers, and a lot of microservices.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;I often have a modular monolithic application.&lt;/em&gt;
&lt;em&gt;I use &lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt; and embedded &lt;a href=&#34;https://hsqldb.org/&#34;&gt;HyperSQL&lt;/a&gt; for persistence.&lt;/em&gt;
&lt;em&gt;I use &lt;a href=&#34;https://flywaydb.org/&#34;&gt;Flyway&lt;/a&gt; to populate the database.&lt;/em&gt;
&lt;em&gt;My docker compose file is simple and straightforward.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Why should I add the complexity of test containers?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_21&#34;&gt;Java 21&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The introduction was well-done.
Honestly, if you read the JSR and articles during the early-adopter phase, you did not get new information during the presentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;The presentation is for Java developers lagging behind the latest Java LTS release.&lt;/em&gt;
&lt;em&gt;Modern developers evaluate a new Java version before it is officially released.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_value_types_and_patterns_matching&#34;&gt;Value Types and Patterns Matching&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Data oriented programming separate data and code.
This approach is against core concepts of object-oriented programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speakers talked about the disadvantages of recompiling code when changing an interface.
But honestly what are the costs of compiling in a modern &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt; environment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The advantage of declaring a static method instead of a default method in the interface is not visible to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use sealed class hierarchies, pattern matching in switch expressions to delegate complex business logic inside business classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Consider using records to write less code and move in the direction of immutable instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Deconstruction patterns and unnamed variables make the algorithms more legible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Anemic_domain_model&#34;&gt;Anemic Domain Model&lt;/a&gt;.
I acknowledge there is a tension between behavior which should be part of a class and complex business logic which should be defined separately from the core domain abstractions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock caution&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-caution&#34; title=&#34;Caution&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are not the owner of the code, you want to extend it using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Polymorphism&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You can add new subtypes and cannot create new operations.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Functional&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You can add new operations but cannot create new subtypes.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above constraint clearly defines the tension in designing the abstractions for a bounded domain.
Both variants are mutually exclusive in modern programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An experienced architect with domain knowledge should hint which functionalities belong to a class and which ones are better located in business logic abstractions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Future constructs were also presented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Named patterns is a discussion theme in the community.
They support the deconstruction of regular classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value classes as potential first preview of the &lt;a href=&#34;https://openjdk.org/projects/valhalla/&#34;&gt;Valhalla&lt;/a&gt; project.
Value instances have no identity anc can be stored on the stack.
Interestingly, the optimization is only done at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They stated discussions is under to integrate null annotation in the language as discussed in &lt;a href=&#34;https://jspecify.dev/&#34;&gt;JSpecify&lt;/a&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java programmers implement the &lt;em&gt;equals(Object obj)&lt;/em&gt; method with &lt;em&gt;instanceof&lt;/em&gt; and not &lt;em&gt;if&lt;/em&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The statement &lt;em&gt;if (this == obj)&lt;/em&gt; is a performance killer when compared with the modern approach.
Stop using conditional statements when implementing &lt;em&gt;equals&lt;/em&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_getting_started_with_the_structurizr_dsl&#34;&gt;Getting Started with the Structurizr DSL&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Simon Brown provided a nice introduction to &lt;a href=&#34;https://c4model.com/&#34;&gt;C4 Model&lt;/a&gt;: Context, Container, Component, and Code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The explanations of Structurizr DSL and examples were interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Multiple diagrams can be defined in &lt;em&gt;views&lt;/em&gt;.
The types are &lt;em&gt;systemContext&lt;/em&gt;, &lt;em&gt;container&lt;/em&gt;, and &lt;em&gt;component&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can manipulate the diagrams with scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The model stores semantic relations between the various elements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use the command line to generate all views as regular or C4 plantUML diagrams.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The examples showed that often you start programming diagram items and contents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;The major drawback is that &lt;a href=&#34;https://structurizr.com/&#34;&gt;Structurizr&lt;/a&gt; wants to be the ruler of your documentation.&lt;/em&gt;
&lt;em&gt;You cannot create a static website with the diagrams and the links between them.&lt;/em&gt;
&lt;em&gt;The tool plantUML supports such features through the SVG output.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Instead &lt;a href=&#34;https://structurizr.com/&#34;&gt;Structurizr&lt;/a&gt; requires that your &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; or &lt;a href=&#34;https://arc42.org/&#34;&gt;arc42&lt;/a&gt; documents are integrated into it.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can export the content of a model to an HTML page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is not the same as generating a static website with a static generator and theme.
Generators such as &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; provides mechanisms to generate links and cross-references to link various parts of your documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The idea to add a semantic abstraction layer to diagramming tools is brilliant.
I think the current solution should be improved to simplify diagram handling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_day_two&#34;&gt;Day Two&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I found a nice coffee shop in town to get a real coffee and a cinnamon roll.
Loaded with caffeine and sugar, I am ready to tackle the second conference day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_know_your_java&#34;&gt;Know Your Java?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Entertaining and professional presentation of Java quirks.
The examples show Java software archeology.
Old coding and naming decisions coming back to bite you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Don’t Walk Away From Complexity, Run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Speed without Discipline: a Recipe for Disaster.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Venkat Subramaniam
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;New features have sometimes strange impacts on existing code, often due to bad naming or interface segregation troubles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Learn the language and the standard API.
Stop programming &lt;em&gt;for&lt;/em&gt; instructions to iterate through collections.
Use the &lt;em&gt;streams&lt;/em&gt; API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Study functional programming, pure function, and immutable data structure concepts.
Java mixes object-orientation and functional programming.
The compiler performs limited checks if your functional code behaves correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a young developer, consider taking the Java developer certification examination.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_test_driven_insights_10_hints_you_were_missing&#34;&gt;Test-Driven Insights: 10 Hints You Were Missing&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Funny examples of how to write unit tests for crap code.
The end of the talk presented good design approaches and the need to refactor.
The speaker Victor Rentea outed himself as a clean-code advocate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Rely on the language and not on tests to detect errors is a profound advice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The C++ bashing was surprising.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The attendees hinted that a lot of legacy code exists.
Developers are under the yoke of maintaining and extending geriatric solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;I rather advocate performing refactoring to remove technical debt before trying to add functionality.&lt;/em&gt;
&lt;em&gt;I fully agree that there are rare exceptions due to important business deadlines.&lt;/em&gt;
&lt;em&gt;Here you could use the tricks with mocks, partial mocks, breaking information hiding to test legacy code.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Be honest.&lt;/em&gt;
&lt;em&gt;I would never work on a crap software code application.&lt;/em&gt;
&lt;em&gt;Either the company is resolute with professionalism and supports refactoring.&lt;/em&gt;
&lt;em&gt;Or I would look out for a serious development environment.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_microservices_got_talent_the_event_driven_beautiful_dance&#34;&gt;Microservices Got Talent: The Event-Driven Beautiful Dance&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Event-first design is another approach to look at your domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ensures there are event handlers for all emitted events before they are effectively persisted.
The event sourcing runtime should ensure the approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Validate the command.
Execute the commands sequentially on your model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutate the state by applying the events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Persist the events Do not use Java serialization.
Think about schema evolution.
JSON is fine, but you have to manually implement schema changes.&lt;br/&gt;
Performant approaches are &lt;a href=&#34;https://avro.apache.org/&#34;&gt;Avro&lt;/a&gt; or &lt;a href=&#34;https://protobuf.dev/&#34;&gt;ProtoBuf&lt;/a&gt; which support schema evolution.&lt;br/&gt;
&lt;a href=&#34;https://eclipsestore.io/&#34;&gt;Eclipse Store&lt;/a&gt; is a potential candidate.
The event sourcing runtime is responsible to load events into memory and removes them from memory for a specific instance in the domain model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Projections are used to process events and create a query optimized views on the model.
The concept is similar to a materialized view in a relational database.
Events are sent at least once to projection event handlers
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_4&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_4&#34; title=&#34;View footnote.&#34;&gt;4&lt;/a&gt;]&lt;/sup&gt;.
Scalability is realized through slicing of the event store.
The slicing property is the stable identifier of the entity referenced in the event.
Design your system accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Choreography sagas are completely based on events and projections.
Once triggered, it moves like a wave until completion.
Therefore, no error should block the flow and they are hard to debug.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use complex sagas with orchestration tools such as &lt;a href=&#34;https://temporal.io/&#34;&gt;Temporal&lt;/a&gt; or &lt;a href=&#34;https://camunda.com/&#34;&gt;Camunda&lt;/a&gt;.
A trend is to offer PaaS solutions built around a kubernetes cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_with_java_21_your_code_runs_even_faster_but_how_is_that_possible&#34;&gt;With Java 21, Your Code Runs Even Faster. But How is that Possible?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The presentation was fun, instructive and well-done.
The details were inspiring and of high-quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker showed multiple areas where the JVM was locally massively improved through clever refactoring.
Worth every second and a nice way to complete the day.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_day_three&#34;&gt;Day Three&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_keynote&#34;&gt;Keynote&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The themes are Java and AI.
Artificial intelligence is a hot topic with few concrete scenarios.
The three most cited areas are personal assistant, coding assistant, and image generator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;A good coding copilot would be a great use case.&lt;/em&gt;
&lt;em&gt;Jetbrains and other companies solutions are still work in progress and often not released to the public.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And two talks about physics and quantum computing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Brian Goetz presented the new features of Java 21.
An alluring idea was presented.
Library owners should follow a similar release strategy as Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LTS releases are delivered every two years.
Once released, only security problems and bugs are corrected in the LTS releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New features are only implemented for the current Java release.
Use the newest Java features.
You do not have to provide backward compatibility for older versions.
Your users can use your LTS release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The idea is so cool.
I will advocate the approach and try it on my open-source projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You have only to support two versions of your library.
You can use old the cool new features in the newest version without stressing about backward compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_unlocking_the_potential_of_bits_and_bytes_reducing_data_footprint_for_cost_and_eco_efficiency&#34;&gt;Unlocking the Potential of Bits and Bytes: Reducing Data Footprint for Cost and Eco-Efficiency&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beginner introduction of byte encoding for the payload.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker advocates the use of cheap raspberry boards to experiment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Smaller data packages reduce energy consumption, network traffic, and surprisingly also latency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://protobuf.dev/&#34;&gt;ProtoBuf&lt;/a&gt; is a good compromise to encode payloads.
Hand coded structures are still factors more compact but require code to encode and decode the payload.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_postgresql_the_time_series_database_you_actually_want&#34;&gt;PostgreSQL, The Time-Series Database You Actually Want&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker shows a demonstration of time series in &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;postgreSQL&lt;/a&gt;.
Nice to learn the database supports the feature, and I missed concrete examples why should I use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_project_leyden&#34;&gt;Project Leyden&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Brian Goetz explained the various mechanisms to speed startup time and increase performance.
In the end, Java programs should be more cloud-friendly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use AppCDS to improve the startup performance of your application.
It should be a standard step in your deployment before packaging your application into a Docker image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;java -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=tangly-os-archive.jsa  &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Since JDK 19, the CDS archive file is created automatically as a dynamic archive if it is missing.
If the file exists, the JVM will use it.
CDS is active per default &lt;em&gt;-Xshare:auto&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ideally, some improvements shall be delivered with JDK 22.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_at_aws_lessons_learned_from_upgrading_and_modernizing_a_massive_jvm_codebase&#34;&gt;Java at AWS: Lessons Learned from Upgrading and Modernizing a Massive JVM Codebase&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Speakers presented the huge gains moving from JDK 8 to JDK 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They had a few regression cases when doing such a huge jump in versions.
The troubles were methods or classes no more accessible in the newer version.
Just read the log files; the encountered restriction always generates a log describing the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware that more threads can be active in garbage collection in newer versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They provided an interesting argumentation why they will wait with the update to Java 21.
The known bugs are too critical to update such a huge installed base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;James Gosling was interesting and getting older.
He had a point that multiple libraries implementing the same functions are eating away your memory.
A Java application should have one JSON transformer, one serializer, and one HTTP protocol stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Limit the number of libraries you are using.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The biggest inhibitors for updates are test mocks and Lombok.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instead of forking an open-source library, write a change request first.
Prefer pull requests over forks.
Sharing source code is more toxic than sharing binaries.
Long live maven central.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_on_arm_new_horizons&#34;&gt;Java on Arm. New horizons&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It was a boring presentation.
I know a little about ARM processor architecture.
The speaker just presented the different processors available on the market.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;No real presentation how Java is optimized for ARM architecture.
He could have presented intrinsics, SIMD support and other architecture optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Cloud companies provide ARM-based solutions with tens or hundreds of cores.
All Apple computers are running on ARM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One clear statement was we will run our applications on a platform with a lot of ARM or X86 cores in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_coding_your_documentation&#34;&gt;Coding Your Documentation&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hubert Klein also known as &lt;em&gt;mrhaki&lt;/em&gt; is an advocate of &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;.
He has a cool &lt;a href=&#34;https://blog.mrhaki.com/&#34;&gt;blog&lt;/a&gt;.
I am also a fan of &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;, &lt;a href=&#34;https://asciidoctor.org/&#34;&gt;Asciidoctor&lt;/a&gt;, and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The presentation was interesting and professional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
I am an absolute fan of &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt;, &lt;a href=&#34;https://plantuml.com/&#34;&gt;plantUML&lt;/a&gt; and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.
I enjoyed seeing how he solved similar problems with the same toolchains.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_day_four&#34;&gt;Day Four&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Surprise, Surprise&lt;/strong&gt;.
The public transportation went on strike today.
I had a nice stroll along the harbor to reach the conference venue.
The weather was fine and I achieved my daily sport quota.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the evening, I discovered that the strike is going on.
I got my second walk and enjoyed the sunset over the harbor and the old city.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It was the first day with fall temperatures.
The previous days had summer temperatures.
You still could have dinner outside on a terrace.
It was a little chilly, but locals enjoyed the last warm days of this season.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_open_telemetry_and_continuous_feedback_things_you_need_to_know_about_your_java_code_at_runtime&#34;&gt;Open Telemetry and Continuous Feedback. Things you need to know about your Java code at runtime&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker favors integration and production feedbacks how the application behaves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;He advocates &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; because it is an industrial standard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
An introduction how to use &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; can be found under &lt;a href=&#34;http://continuousfeedback.org/&#34;&gt;Continuous Feedback&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://digma.ai/&#34;&gt;Digma&lt;/a&gt; plugin is an approach to support developers.
Observability metrics are provided during development and testing directly in your &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Jetbrains IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Cool plugin providing developer functionality without having to install multiple docker images as with regular DevOps tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_lessons_learned_using_machine_learning_in_java&#34;&gt;Lessons learned using Machine Learning in Java&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Funny presentation how to classify Lego bricks using machine learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker is not a machine learning &lt;em&gt;ML&lt;/em&gt; specialist and had a steep learning curve.
All packages are available as open source packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java ecosystem is smaller and less well documented.
He used &lt;a href=&#34;https://docs.djl.ai/&#34;&gt;Deep Java Library&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One important finding was &lt;em&gt;use real images, do not create them mechanically&lt;/em&gt;.
The difference is tremendous.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
Tutorials how to set up a machine learning environment, train the models, and process application data are sorely missing.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;awesome-speech-llm&#34;&gt;Java Meets AI: A Hands-On Guide to Building LLM-Powered Applications with LangChain4j&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;This presentation was the coolest of the whole Devoxx 2023&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker is an active developer of &lt;a href=&#34;https://github.com/langchain4j/langchain4j&#34;&gt;LangChain4J&lt;/a&gt;.
Her approach solves the troubles described in the previous talk for LLM models.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
If you are a beginner, go to &lt;a href=&#34;https://huggingface.co/&#34;&gt;HuggingFace&lt;/a&gt; and &lt;a href=&#34;https://localai.io/&#34;&gt;localAI&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The code examples show how little code you need to set up a chat agent backed with a LLM model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can define your own tools to compute values instead of asking the model to guess them.
Better than you can ask your model to generate a tool because models can also write source code.
This is awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
I have to test chat with documents.
Train with your documents, for example, your blog.
After training, the chat can answer questions about your own documents or source code.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_debugging_with_intellij_idea&#34;&gt;Debugging with IntelliJ IDEA&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Solid presentation of &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Jetbrains IntelliJ IDEA&lt;/a&gt; debugger features with hands-on examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;I seldom use the debugger.&lt;/em&gt;
&lt;em&gt;The tips were good but not really relevant for me.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_grpc_supercharged_with_armeria&#34;&gt;gRPC Supercharged with Armeria&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker presented a solid introduction to &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt; and &lt;a href=&#34;https://armeria.dev/&#34;&gt;Armeria&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The frameworks provide needed services for highly scalable applications based on microservices.
&lt;a href=&#34;https://armeria.dev/&#34;&gt;Armeria&lt;/a&gt; industrializes &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt; services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The concepts are clean and well-implemented.
The decorator pattern is used to add functionality to services.
I seldom have non-functional requirements requiring such complex architectures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
The &lt;a href=&#34;https://armeria.dev/&#34;&gt;Armeria&lt;/a&gt; framework provides the equivalent of &lt;a href=&#34;https://www.openapis.org/&#34;&gt;OpenAPI&lt;/a&gt; for &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt;.
Beware that &lt;a href=&#34;https://armeria.dev/&#34;&gt;Armeria&lt;/a&gt; is a framework which again implemented an HTTP engine.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_building_and_deploying_java_client_desktop_applications_with_jdk_21_and_beyond&#34;&gt;Building and Deploying Java Client Desktop Applications With JDK 21 and Beyond&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A solid presentation about Swing and JavaFX.
You can use both libraries in the same application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The demonstration of an email client was solid.
I got the impression that not a lot of innovations are happening in the Swing or JavaFX landscapes
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_5&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_5&#34; title=&#34;View footnote.&#34;&gt;5&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
Use &lt;em&gt;jpackage&lt;/em&gt; to create a native installer
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_6&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_6&#34; title=&#34;View footnote.&#34;&gt;6&lt;/a&gt;]&lt;/sup&gt;.
For example, it creates a &lt;em&gt;dmg&lt;/em&gt; installer for the macOS platform.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_open_standards_for_building_event_driven_applications_in_the_cloud&#34;&gt;Open standards for building event-driven applications in the cloud&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The speaker provided a good introduction to &lt;a href=&#34;https://www.asyncapi.com/&#34;&gt;Async API&lt;/a&gt; and &lt;a href=&#34;https://cloudevents.io/&#34;&gt;cloudevents&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
Funny to have a speaker at a Java conference stating he did not install Java on his notebook and showing C# examples.
It is a proof the speaker did not prepare for this talk.
It felt like disrespect to the conference attendees.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_day_five&#34;&gt;Day Five&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The last conference day.
I am surprised how tiring it was to listen to so many presentations and trying to memorize interesting concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I decided to leave earlier to be sure to catch my flight.
The yesterday experience with the strikes worried me.
It worked well, and I was ahead on time at the airport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
I decided to enjoy the digital nomad feeling.
I published this blog at the airport while waiting to board my plane.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_the_developers_guide_to_making_money_in_the_open_source_galaxy&#34;&gt;The developer’s guide to making money in the open-source galaxy&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An entertaining presentation about entrepreneurship.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;He had tribulations between Java and .NET projects.
I finally got the courage to realize a product idea I had long ago and implement it as an open-source Java.
&lt;a href=&#34;https://www.jobrunr.io/en/&#34;&gt;JobRunr&lt;/a&gt; was born as a port of .NET Hangfire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;He used redIT to market his product.
He enjoys working with the Java community and Java champions.
They are very supportive and kind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The commercial model is &lt;a href=&#34;https://www.jobrunr.io/en/&#34;&gt;JobRunr&lt;/a&gt; as open-source application and a paid professional version.
The first license is a permanent license to a French company priced 400 EUR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The breakthrough was a talk in May 2022 at the Spring I/O conference.
The ThoughtWorks technology radar mentioned &lt;a href=&#34;https://www.jobrunr.io/en/&#34;&gt;JobRunr&lt;/a&gt; and increased the exposure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;He made 90&amp;#39;000 EUR in 2022.
The forecast for 2023 is around 260&amp;#39;000 EUR.
He hired his first employee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The whole approach is cute, hands-on, and most importantly working.
He is able to live from an open-source product.
This is an impressive and sadly seldom achievement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_the_panama_dojo_black_belt_programming_with_java_21_and_the_ffm_api&#34;&gt;The Panama Dojo: Black-Belt Programming with Java 21 and the FFM API&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Per Minborg provided again a cool high-quality talk about {ref-panama and &lt;a href=&#34;https://openjdk.org/jeps/454&#34;&gt;Foreign Function and Memory API&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An arena models the lifecycle of one or more memory segments.
All segments allocated in the arena share the same lifetime.
Multiple arena types are provided for different scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Memory layouts describe the contents of a memory region programmatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
With &lt;a href=&#34;https://openjdk.org/projects/panama/&#34;&gt;Panama&lt;/a&gt;, it is again good and easier to call C libraries from Java applications.
JNI is now officially an obsolete technology.
Use &lt;a href=&#34;https://openjdk.org/jeps/454&#34;&gt;Foreign Function and Memory API&lt;/a&gt; to call external libraries.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learnings&#34;&gt;Learnings&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please use the &lt;strong&gt;current&lt;/strong&gt; release of Java.
Most speakers rightly make fun of organizations still using Java 8 or older versions.
They seriously asked why you are not yet on the Java LTS 21 version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Embrace &lt;strong&gt;functional programming&lt;/strong&gt;.
Conquer streams and lambda expressions defined as pure functions.
Promote immutable objects and collections in your source code.
These design solutions naturally scale with more processing cores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Virtual threads&lt;/strong&gt; are here.
Use them.
Concurrent collections shall be used to implement back pressure with virtual thread designs.
The performance of concurrent collections will be fabulous with Java 22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Advanced discussions were heard in some talks.
How should and would Java evolve in the next years?
Current &lt;a href=&#34;https://openjdk.org/&#34;&gt;openJDK&lt;/a&gt; projects cover all ideas I heard during the conference.
The exception is how to support ML and AI approaches.
I am only aware of &lt;a href=&#34;https://www.jcp.org/en/jsr/detail?id=381&#34;&gt;JSR 381&lt;/a&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_7&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_7&#34; title=&#34;View footnote.&#34;&gt;7&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Green IT is regularly cited.
I am not sure organizations take the initiative seriously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Speakers are professional engineers.
Almost all of them have Apple notebooks.
Professional Java developers are using &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Jetbrains IntelliJ IDEA&lt;/a&gt; from &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;Jetbrains&lt;/a&gt;.
More than 80% of conference participants use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I love the modern connected world.
I hold video conferences with my daughters and wife every day without trouble.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I was pleased that no customers called me during the conference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;certifications-useful&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2023/are-certifications-useful/&#34;&gt;Are Certifications Useful?&lt;/a&gt;
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-certification&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2023/java-certification/&#34;&gt;Java Certification&lt;/a&gt;
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-developer-11&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2021/certified-java-developer/&#34;&gt;Java Certified Developer Java 11&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-constructs&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2022/modern-java-constructs/&#34;&gt;Modern Java Constructs&lt;/a&gt;
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. I still think that Oracle Java license conditions are lunatic. You have to pay 250 USD per collaborator. Nothing to do with how many developers you have or how many applications you are running.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Agile conferences have often a real coffee machine and a barista. I promise it is not the reason why I also attend agile congresses.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. The restriction is that the community agrees upon the check definitions.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_4&#34;&gt;
&lt;a href=&#34;#_footnoteref_4&#34;&gt;4&lt;/a&gt;. Exactly once is only available for local services using a transactional backend.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_5&#34;&gt;
&lt;a href=&#34;#_footnoteref_5&#34;&gt;5&lt;/a&gt;. I do not care too much about the inertia. I am mainly developing web-based applications with &lt;a href=&#34;https://vaadin.com/&#34;&gt;vaadin}&amp;gt;&lt;/a&gt;. &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;Jetbrains&lt;/a&gt; is doing an incredible job to update Swing and Java 2D subsystems to changes. The &lt;a href=&#34;https://openjdk.org/projects/lanai/&#34;&gt;Lanai&lt;/a&gt; and &lt;a href=&#34;https://openjdk.org/projects/wakefield/&#34;&gt;Wakefield&lt;/a&gt; projects are awesome.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_6&#34;&gt;
&lt;a href=&#34;#_footnoteref_6&#34;&gt;6&lt;/a&gt;. You can only create an installer for the platform where you are running &lt;em&gt;jpackage&lt;/em&gt;. Use a continuous delivery platform to build installer for all the platforms you want to support.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_7&#34;&gt;
&lt;a href=&#34;#_footnoteref_7&#34;&gt;7&lt;/a&gt;. I have the impression that JSR approach is dead. Oracle architects stated the goal is to make Java a friendly environment for all important trends. Project &lt;a href=&#34;https://openjdk.org/projects/panama/&#34;&gt;Panama&lt;/a&gt; is an approach to better integrate ML and AI libraries with Java. &lt;a href=&#34;https://openjdk.org/projects/panama/&#34;&gt;Panama&lt;/a&gt; is available in curren Java versions. Project &lt;a href=&#34;https://openjdk.org/projects/valhalla/&#34;&gt;Valhalla&lt;/a&gt; would allow more performant implementation of computation algorithms in Java. It is a pity that we are still waiting on a fist release of the project.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Java 21</title>
      <link>https://blog.tangly.net/blog/2023/java-21/</link>
      <pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/java-21/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-09-02-head.jpg&#34; alt=&#34;2023 09 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 21 LTS was released on time to the public.
The release has been available for download since 21&lt;sup&gt;st&lt;/sup&gt; September 2023.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pattern matching is maturing nicely.
The hope is that more solutions will more advanced data stream manipulation and functional programming algorithms.
Complex inheritance structure are no more considered as good practices in regular application.
The pattern matching extensions nicely provide idioms to solve similar design problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The support for virtual threads is reaching full integration in the official Java distribution.
Extensions such as scoped values are available as preview feature.
The tail-call optimization for recursive calls is sadly still missing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_amber_project&#34;&gt;Amber Project&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://openjdk.org/projects/amber/&#34;&gt;amber&lt;/a&gt; initiative is completing the changes with pattern matching.
Start adapting your coding idioms and use pattern matching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The visitor pattern can simply be implemented as switch expression with pattern matching.
As a bonus, the compiler will verify completeness if your class hierarchy uses sealed inheritance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/440&#34;&gt;Record Patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/441&#34;&gt;Patten Matching for switch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/443&#34;&gt;Unnamed Patterns and Variables (Preview)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The syntactic improvements initiated by Amber and core group are;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/430&#34;&gt;String Templates&lt;/a&gt; &lt;em&gt;Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/431&#34;&gt;Sequenced Collections&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The string template feature is worth the effort to study the provided functions.
My code could be considerably simplified when using this functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_loom_project&#34;&gt;Loom Project&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://openjdk.org/projects/loom/&#34;&gt;loom&lt;/a&gt; initiative is completing the major changes associated with virtual threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/444&#34;&gt;Virtual Threads&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/446&#34;&gt;Scoped Values&lt;/a&gt; &lt;em&gt;Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/453&#34;&gt;Structured Concurrency&lt;/a&gt; &lt;em&gt;Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Virtual threads are now official part of the Java universe.
Your design can create as many threads as you want without restrictions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Most of the Java developers never create directly thread instances.&lt;/em&gt;
&lt;em&gt;The feature is useful for library and framework creators.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_panama_project&#34;&gt;Panama Project&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The panama initiative is iterating through their interfaces.
They synchronize as much as possible their interfaces with the Valhalla and Lilliput activities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/448&#34;&gt;Vector API&lt;/a&gt; &lt;em&gt;Sixth Incubator&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/442&#34;&gt;Foreign Function &amp;amp; Memory API&lt;/a&gt; &lt;em&gt;Third Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_valhalla_project&#34;&gt;Valhalla Project&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As usual, the &lt;a href=&#34;https://openjdk.org/projects/valhalla/&#34;&gt;Valhalla&lt;/a&gt; initiative did not release any improvements in the current release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;It is time that value objects are proposed in the near future.&lt;/em&gt;
&lt;em&gt;The project is going for ten years.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lilliput_and_leyden_projects&#34;&gt;Lilliput and Leyden Projects&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://openjdk.org/projects/lilliput/&#34;&gt;lilliput&lt;/a&gt; initiative aims to reduce memory usage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_miscellaneous_improvements&#34;&gt;Miscellaneous Improvements&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Obsolete features are removed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/449&#34;&gt;Deprecate the Windows 32-bit x86 Port for Removal&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/451&#34;&gt;Prepare to Disallow the Dynamic Loading of Agents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Extensions to existing features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/439&#34;&gt;Generational ZGC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/445&#34;&gt;Unnamed Classes and Instance Main Methods (Preview)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/452&#34;&gt;Key Encapsulation Mechanism API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_stumbling_blocks&#34;&gt;Stumbling Blocks&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once again &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; up to version 1.18.28 is not working with JDK 21
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
The project uses internal unsafe functions, which are no more supported in this Java release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The edge snapshot release has experimental support for JDK 21.
You need the following additions in your &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add the repository &lt;em&gt;maven { url &amp;#34;https://projectlombok.org/edge-releases&amp;#34; }&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use the dependency &lt;em&gt;org.projectlombok:lombok:edge-SNAPSHOT&lt;/em&gt; for the library and the annotation processor&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All other libraries and tools I am using worked without troubles.
Major libraries test their current release with early-access and solve the problems before the official release of a new Java version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle toolchain feature simplifies experimenting with a new Java version.
The current version of &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; runs under Java 21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;IntelliJ IDE provides support for newer JDK before their official release.
It tremendously simplifies exploration of new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Often you can use the continuous integration pipelines of &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; platforms.
No virtual machines with an experimental Java version are available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use different distributions to harden your code and explore alternative solutions.
The &lt;a href=&#34;https://www.eclipse.org/&#34;&gt;Eclipse&lt;/a&gt; foundation &lt;a href=&#34;https://adoptium.net/temurin/&#34;&gt;temurin&lt;/a&gt; distribution is very nice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Migrate all your active products to the new Java version.
Invest effort to enhance source code and use the new features.
So, you will avoid technical obsolesce and geriatric applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-20&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2023/java-20/&#34;&gt;Java 20&lt;/a&gt;.
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;vaadin&#34;&gt;&lt;/a&gt;[2]  &lt;a href=&#34;../../2022/vaadin/&#34;&gt;Vaadin&lt;/a&gt;.
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-19&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2021/jdk-17/&#34;&gt;Java 17&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-16&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2021/jdk-16/&#34;&gt;Java 16&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-10&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;../../2018/java-10-aka-18.3-changes/&#34;&gt;Java 10 aka 18.3 Changes&lt;/a&gt;.
Marcel Baumann. 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-immutability&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;../../2022/immutability-in-java/&#34;&gt;Immutability in Java&lt;/a&gt;.
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-construcdts&#34;&gt;&lt;/a&gt;[7] &lt;a href=&#34;../../2022/modern-java-constructs/&#34;&gt;Modern Java Constructs&lt;/a&gt;.
Marcel Baumann. 2022&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-development&#34;&gt;&lt;/a&gt;[8] &lt;a href=&#34;../../2021/modern-java-development/&#34;&gt;Modern Java Development&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Version 1.18.30 was released in 2023-09-20 and provides initial support for JDK 21. Late but it still saves the day.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Onboarding Software Developers in Your agile Team</title>
      <link>https://blog.tangly.net/blog/2023/onboarding-software-developers-in-your-agile-team/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/onboarding-software-developers-in-your-agile-team/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-07-01-head.png&#34; alt=&#34;2023 07 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now that you have gone through the long and tedious process of hiring a talented developer with vetting and interview activities, it is easy to think that the hard part is done
&lt;a href=&#34;#evaluate-cv&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;#technical-interviews&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There is no doubt that hiring good people is challenging and competitive, but it is a mistake to think that the challenge ends when you hired a new collaborator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Onboarding software developers is just as important for getting the most out of the hiring process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Too many companies neglect this phase to their own detriment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why_onboarding_matters&#34;&gt;Why onboarding matters?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Onboarding, the process of bringing new employees to a point where they are fully integrated into the company and working at full capacity is a &lt;em&gt;make it or break it&lt;/em&gt; process for companies wanting to compete in the tech world.
Whether you are a startup with only a few employees, or an established company with hundreds of employees, the onboarding process is the first opportunity you have to set up new employees for long-term success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It can cost employers anywhere from 30–50% of an employee’s yearly salary to replace a developer that leaves.
So when an organization loses employees to a bad onboarding process, the company feels it.
And if there is an insufficient onboarding process, new hires will leave.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the most important aspects of onboarding is the timeline.
On the one hand, the practical aspects of onboarding should happen pretty quickly, as outlined below.
On the other hand, it is important to understand that onboarding an employee meaning getting them to a place where they feel fully immersed and capable at your company takes months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock caution&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-caution&#34; title=&#34;Caution&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your organization is serious about professional onboarding if you have a formal process description and checklists for the whole onboarding process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each phase is described, and each new collaborator has a contact person for onboarding questions.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So what is a realistic expectation for how long it takes to onboard a software engineer?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_long_should_it_take&#34;&gt;How long should it take?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before diving into how long the onboarding process should take, it is important to note that there are different types of onboarding and each requires a different approach and timeline.
There is practical, cultural, and skill onboarding.
All are necessary to successfully onboard a software developer into your company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_practical_onboarding_1_week&#34;&gt;Practical onboarding (1 week)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Practical onboarding involves things like benefits signups, company-wide training videos, HR requirements, equipment setup and account access
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-07-01-software-engineer.jpg&#34; alt=&#34;2023 07 01 software engineer&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anything essential for the new employee to get paid, access benefits, and function as an employee in the company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This onboarding should happen anywhere from a day to a week of being hired, depending on the size of the company and the complexity of the practical requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This part may seem obvious as a part of onboarding, but this is often the first impression a new employee has of your company, so the way it happens matters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Do everything you can to make the practical aspect of onboarding seamless, efficient, and even fun &lt;a href=&#34;#macbook&#34;&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If there is a way to gather information from the employee before their start date, even better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_skill_onboarding_3_6_months&#34;&gt;Skill onboarding (3 – 6 months)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just like the practical side of onboarding, skill onboarding should start on the first day for a new employee.
You want the software developer to be well versed in your code base, processes, and systems, so the earlier they can get access to it, the better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the best ways to do this is to require new employees to push out an actual piece of code within the first week of being hired.
Make sure there are safeguards in place, so they cannot do any damage to the code itself, but make sure it is significant enough to give them a complete look at the codebase and the process in place for pushing out code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is also a great opportunity to employ pair programming.
Pair programming sets a new developer up with an experienced developer within the company to work together to complete tickets.
Although the entire team should be available to answer questions, this will give the new employee a single point of contact as they are getting up to speed on how your company works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For larger companies, this process should involve multiple points of contact, from a senior managerial level to a peer.
Even smaller companies should try and pair new employees with a few different colleagues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If there are any step-by-step processes expected for developers for coding, communication, and workflow, be sure to have them in writing and readily available.
New employees should not need to go searching for the same information over and over again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Skill onboarding should take anywhere from 3 to 6 months, with monthly reviews every month to gauge progress
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_cultural_onboarding_6_months_1_year&#34;&gt;Cultural onboarding (6 months – 1 year)&lt;/h3&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-07-01-cultural-onboarding.jpg&#34; alt=&#34;2023 07 01 cultural onboarding&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Cultural onboarding is often the most overlooked aspect of onboarding, but arguably the most important piece &lt;a href=&#34;#agile-company&#34;&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Developers that stick around do so because they enjoy their work environment, believe in what they are doing, and feel like they belong and matter to the overall company
&lt;a href=&#34;#detecting-agile-bullshit&#34;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course, some aspects of cultural onboarding will happen in tandem with skill onboarding, as the new employee is working directly with teams and individuals within the company to accomplish a common goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, that in and of itself is not enough to truly translate company culture to a new employee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Within the first week, there should be some form of communication from the executive management on the larger values of the organization.
The big picture of what the company is trying to accomplish, and a way to interact with the team members should be discussed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are a small company, this can be as simple as a lunch or coffee with the founder.
For mid-size or large companies, it may need to be more formal
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#corporate-culture-and-perfromance&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#corporate-culture-survival-guide&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#organizational-culture-and-leadership&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.
However, if at all possible, this should happen in person, even for remote workers &lt;a href=&#34;#agile-company&#34;&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We always suggest that new employees do their first two to four weeks of employment on site, if possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are working with a near source team and flying them up to headquarters is not realistic, then make a plan to spend a week or two with the new employees.
Cultural onboarding is about relationship building, and doing so in-person makes a difference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_best_practices_for_onboarding&#34;&gt;Best practices for onboarding&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a rule, companies of any size should see the first six months as an employees onboarding period.
Helping employees get acclimated is a necessary step to seeing the return on the sizable investment made in hiring a software developer in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here are a few simple practices for successful onboarding:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Give them an early coding assignment that matters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give them access to process, practices, systems, and people right away.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get them connected to peers through pair programming, mob programming, and coding dojos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give them a feedback loop through regular reviews.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give them time to reach their potential.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Train your collaborators.
Our company is an agile software boutique with Java and C++ technical stacks.
Our collaborators shall be experts in Scrum &lt;a href=&#34;#scrum-master-formation&#34;&gt;[6]&lt;/a&gt; &lt;a href=&#34;#product-owner-formation&#34;&gt;[7]&lt;/a&gt; &lt;a href=&#34;#scrum-developer-formation&#34;&gt;[8]&lt;/a&gt; and Java &lt;a href=&#34;#java-certification&#34;&gt;[9]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is a benefit for us if the collaborator is also a professional C++ developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Walk the talk.
Be an agile company &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#agile-management&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;.
Competent engineers find out early if you are really being agile or just pretending to do agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Advanced approaches can reduce training and improve cultural match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;InnerSource &lt;a href=&#34;#inner-source&#34;&gt;[10]&lt;/a&gt; &lt;a href=&#34;#inner-source-patterns&#34;&gt;[11]&lt;/a&gt; is a software development strategy that applies open-source best practices to proprietary code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;InnerSource can help establish an open-source culture within an organization while retaining software for internal use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Teams use InnerSource to increase visibility, strengthen collaboration, and break down silos.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;evaluate-cv&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2022/evaluate-technical-cvs/&#34;&gt;Evaluate Technical CVs&lt;/a&gt;.
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;technical-interviews&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2023/technical-interviews/&#34;&gt;Technical Interviews&lt;/a&gt;.
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;macbook&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2023/my-new-macbookpro/&#34;&gt;My New MacBook Pro&lt;/a&gt;.
Marcel Baumann. 2023.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-company&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2016/what-is-an-agile-company/&#34;&gt;What is an Agile Company?&lt;/a&gt;.
Marcel Baumann. 2016.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;detecting-agile-bullshit&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;../../2019/detecting-agile-bullshit/&#34;&gt;Detecting Agile Bullshit&lt;/a&gt;.
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-master-formation&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;../../2021/scrum-master-formation&#34;&gt;Scrum Master Formation&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;product-owner-formation&#34;&gt;&lt;/a&gt;[7] &lt;a href=&#34;../../2021/product-owner-formation&#34;&gt;Product Owner Formation&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-developer-formation&#34;&gt;&lt;/a&gt;[8] &lt;a href=&#34;../../2021/scrum-developer-formation&#34;&gt;Scrum Developer Formation&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-certification&#34;&gt;&lt;/a&gt;[9] &lt;a href=&#34;../../2021/certified-java-developer/&#34;&gt;Certified Java Developer&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;inner-source&#34;&gt;&lt;/a&gt;[10] &lt;a href=&#34;https://about.gitlab.com/topics/version-control/what-is-innersource/&#34;&gt;What is Inner Source?&lt;/a&gt;.
Gitlab. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;inner-source-patterns&#34;&gt;&lt;/a&gt;[11] &lt;a href=&#34;https://patterns.innersourcecommons.org/&#34;&gt;Inner Source Patterns&lt;/a&gt;.
Gitlab. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;corporate-culture-and-perfromance&#34;&gt;&lt;/a&gt;[1] J. P. Kotter, &lt;em&gt;Corporate Culture and Performance&lt;/em&gt;. Simon &amp;amp; Schuster, Limited, 2008 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0033C58EU&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0033C58EU&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;corporate-culture-survival-guide&#34;&gt;&lt;/a&gt;[2] E. H. Schein and P. Schein, &lt;em&gt;Corporate Culture Survival Guide&lt;/em&gt;. Wiley &amp;amp; Sons, Incorporated, John, 2019 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1119212286&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1119212286&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;organizational-culture-and-leadership&#34;&gt;&lt;/a&gt;[3] E. H. Schein, &lt;em&gt;Organizational Culture and Leadership&lt;/em&gt;. Jossey-Bass, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01MSYH6K8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01MSYH6K8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;agile-management&#34;&gt;&lt;/a&gt;[4] A. Medinilla, &lt;em&gt;Agile Management&lt;/em&gt;. Springer London, Limited, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/3642289088&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/3642289088&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Invest in a smooth IT setup. I too often encounter organizations needing months until the new collaborator can finally access all needed applications and resources. Such a cumbersome process demotivates your employees. I am a professional software developer. I really love to have a 4K display, a US keyboard, a quality mouse, and a fast SSD. I will use these tools 8 hours a day for the next years.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Skill onboarding can require formal training. Budget shall be available for books, online and classroom courses.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Java 20</title>
      <link>https://blog.tangly.net/blog/2023/java-20/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/java-20/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-05-01-head.png&#34; alt=&#34;2023 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 20 was released on time to the public.
The release has been available for download since 21&lt;sup&gt;st&lt;/sup&gt; March 2023.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interestingly, the new Java release contains only incubating or preview &lt;a href=&#34;https://openjdk.org/jeps/0&#34;&gt;JEP&lt;/a&gt; proposals.
No final improvements are part of this version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are a Java developer, you should always install the latest JDK and try it out.
Most of the time, all your products will compile and run on the new release without any changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You get new features, performance improvements, and better security for free.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As soon as you have to write code, you will enjoy higher productivity thanks to the new features.
Your source code will be quite different from functional equivalent source code written with an older Java version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The projects Amber, Loom and Panama provide the improvements provided in JDK 20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The project &lt;a href=&#34;https://openjdk.org/projects/amber/&#34;&gt;Amber&lt;/a&gt; provided improvements in pattern matching features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/432&#34;&gt;Record Patterns&lt;/a&gt; &lt;em&gt;Second Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/433&#34;&gt;Pattern Matching for Switch&lt;/a&gt; &lt;em&gt;Fourth Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The project &lt;a href=&#34;https://openjdk.org/projects/loom/&#34;&gt;Loom&lt;/a&gt; provided refinements in virtual threads and structured concurrency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/429&#34;&gt;Scoped Values&lt;/a&gt; &lt;em&gt;Incubator&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/436&#34;&gt;Virtual Threads&lt;/a&gt; &lt;em&gt;Second Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/437&#34;&gt;Structured Concurrency&lt;/a&gt; &lt;em&gt;Second Incubator&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The project &lt;a href=&#34;https://openjdk.org/projects/panama/&#34;&gt;Panama&lt;/a&gt; refined the access to functions and data provided by external libraries written in non-JVM languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/434&#34;&gt;Foreign Functions and Memory API&lt;/a&gt; &lt;em&gt;Second Preview&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/438&#34;&gt;Vector API&lt;/a&gt; &lt;em&gt;Fifth Incubator&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_algebraic_types_and_pattern_matching&#34;&gt;Algebraic Types and Pattern Matching&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Brian Goetz and his team are adding syntactic sugar constructs to the language.
Step by step the &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;algebraic data types&lt;/a&gt; with records &lt;a href=&#34;#java-immutability&#34;&gt;[5]&lt;/a&gt; and sealed types and the pattern matching tools move Java to more complete functional programming approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The sum of small improvements finally empowers us to write more legible source code.
The switch expression is an elegant and compact solution for conditional selection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The next JDK will hopefully again improve the legibility of the code.
The proposed improvements are anonymous variables in deconstruction expressions and support of primitive types in switch expressions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_virtual_threads_and_structured_concurrency&#34;&gt;Virtual Threads and Structured Concurrency&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Death to complex asynchronous programming and nightly debugging sessions.
The structure of the code visualizes the concurrency flow in your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Loom project is the kid on the block.
The &lt;a href=&#34;https://en.wikipedia.org/wiki/Structured_concurrency&#34;&gt;structured concurrency&lt;/a&gt; approach has the promise to tremendously simplify concurrent programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Work is under way to provide &lt;a href=&#34;https://openjdk.org/jeps/446&#34;&gt;scoped values&lt;/a&gt; and deprecate thread local storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I hope that Loom will deliver another promise and give us optimized tail recursion in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_interfaces_to_external_libraries_and_memory_structures&#34;&gt;Interfaces to external libraries and memory structures&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java is &lt;strong&gt;not&lt;/strong&gt; an island.
We want to interface to external digital systems and powerful libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Native_Interface&#34;&gt;JNI&lt;/a&gt; solution is obsolete.
Panama project provides way better approaches to interface with external libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java is steadily improving &lt;a href=&#34;#modern-java-development&#34;&gt;[7]&lt;/a&gt; if sometimes slowly
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The project &lt;a href=&#34;https://openjdk.org/projects/amber/&#34;&gt;amber&lt;/a&gt; is a powerful driver for regular Java improvements.
The next goodies for JDK LTS 21 should be &lt;a href=&#34;https://openjdk.org/jeps/431&#34;&gt;Sequenced Collections&lt;/a&gt; and &lt;a href=&#34;https://openjdk.org/jeps/430&#34;&gt;String Templates&lt;/a&gt;.
Especially the string templates will simplify quite a few lines of our code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The tools are also getting better.
For example, IntelliJ IDEA and Gradle provide timely updates for newer Java versions&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Support for newer features in regular libraries is catastrophic.
The Java community emphasizes backward compatibility and sacrifices elegance
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Seminal works &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#effective-java-3rd&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#functional-programming-java&#34;&gt;2&lt;/a&gt;]&lt;/span&gt; provides examples how to write modern and expressive Java code.
Cool products &lt;a href=&#34;#vaadin&#34;&gt;[1]&lt;/a&gt; allow the creation of digital products and user interfaces using only the Java stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An introductory book &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-by-comparison&#34;&gt;3&lt;/a&gt;]&lt;/span&gt; helps newcomers to the Java language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The diagram shows the hot topics in the Java ecosystem.
The adoption takes time before a majority of development organizations jump on the train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The adoption of the Java 17 LTS edition is still in the early adoption phase after two years, as stated in the below diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We should rather state that the majority of Java teams are laggards, also called more politely &lt;em&gt;late majority&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-05-01-java-trends.png&#34; alt=&#34;2023 05 01 java trends&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;vaadin&#34;&gt;&lt;/a&gt;[1]  &lt;a href=&#34;../../2022/vaadin/&#34;&gt;Vaadin&lt;/a&gt;.
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-19&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2021/jdk-17/&#34;&gt;Java 17&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-16&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2021/jdk-16/&#34;&gt;Java 16&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-10&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2018/java-10-aka-18.3-changes/&#34;&gt;Java 10 aka 18.3 Changes&lt;/a&gt;.
Marcel Baumann. 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-immutability&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;../../2022/immutability-in-java/&#34;&gt;Immutability in Java&lt;/a&gt;.
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-construcdts&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;../../2022/modern-java-constructs/&#34;&gt;Modern Java Constructs&lt;/a&gt;.
Marcel Baumann. 2022&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;modern-java-development&#34;&gt;&lt;/a&gt;[7] &lt;a href=&#34;../../2021/modern-java-development/&#34;&gt;Modern Java Development&lt;/a&gt;.
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[1] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;functional-programming-java&#34;&gt;&lt;/a&gt;[2] V. Subramaniam, &lt;em&gt;Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions&lt;/em&gt;. The Pragmatic Programmers, 2014 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0CJL7VKFL&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0CJL7VKFL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-by-comparison&#34;&gt;&lt;/a&gt;[3] S. Harrer, J. Lenhard, and L. Dietz, &lt;em&gt;Java By Comparison&lt;/em&gt;. Pragmatic Bookshelf, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07CLFTVZS&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07CLFTVZS&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. I am waiting since 2018 that Brian Goetz proposal of concise method bodies is implemented in a JDK.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. I advocate that libraries should target the latest LTS version of Java. This approach ensures that a library is at most two years behind the latest Java release.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Software Developer Assumptions</title>
      <link>https://blog.tangly.net/blog/2023/software-developer-assumptions/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2023/software-developer-assumptions/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2023-04-01-head.jpg&#34; alt=&#34;2023 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here are some software development topics I have learnt to like after 40 years in the industry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I worked at quite a few industrial and commercial digital product development initiatives.
I truly enjoyed creating successful solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Over the years, I encountered similar architecture and design patterns when creating source code for these applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I started programming with languages such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_(programming_language)&#34;&gt;Ada&lt;/a&gt;, Portal, and &lt;a href=&#34;https://en.wikipedia.org/wiki/C_(programming_language)&#34;&gt;C&lt;/a&gt;.
I embraced object-oriented languages with first &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B&#34;&gt;C++&lt;/a&gt; and later &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_(programming_language)&#34;&gt;Java&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The rise of agile approaches quite increased the fun and motivation in digital product development.
The &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; and the cited &lt;a href=&#34;https://agilemanifesto.org/principles.html&#34;&gt;12 Agile Manifesto Principles&lt;/a&gt; still ring as worthy ideas to create better products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Again and again, our teams had to find ways to learn, tackle complexity, improve cohesion, and master coupling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern engineers create increasingly complex and sophisticated systems.
So as well as focusing on learning and modern engineering, we need to focus on managing complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need to focus our tools, techniques and mindset on dealing with the complexity
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#modern-software-engineering&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#building-evolutionary-architectures-2nd&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_strongly_agree&#34;&gt;Strongly Agree&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly agree with these statements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Typed languages are better when you are working on a team of people with various experience levels.
The bigger your application, the more helpful is compiler support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stand-ups are actually useful for keeping an eye on the newbies.
They help to detect a team member stuck in a loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sprint retrospectives have their place so long as they are for actual improvements.
They are the &lt;em&gt;holy shit, well, that went poorly!&lt;/em&gt;, and not some awful scrum master driven waste of everyone’s time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developers should not be isolated or left to just code.
Bypassing traditional product managers and agile product owners, they should talk directly to the customer.
It always reveals more about the problem, in less time, and with higher accuracy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software architecture matters probably more than anything else.
A shitty implementation of a good abstraction causes no net harm to the code base.
A bad abstraction or missing layer causes everything to rot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java is quite a cool language.
Modern Java with streams, modules, pattern matching, or structured concurrency is fun to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clever code is not usually good code.
Clarity trumps all other concerns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad code can be written in any paradigm. Programmers steadily writing bad code should be fired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So-called &lt;em&gt;best practices&lt;/em&gt; are contextual and not broadly applicable.
Call them &lt;em&gt;good practices&lt;/em&gt;.
Blindly following them makes you a fool.
The agile community recognized the dangers.
They only advocate &lt;em&gt;good practices&lt;/em&gt; and emphasize the importance of the context in which they are applied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Designing scalable systems when you do not need to make you a bad engineer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static analysis is actually useful.
Scanners like SpotBugs or SonarLint regularly find errors and smells.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; is about avoiding a specific problem, not an end goal unto itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In general, RDBMS are better and simpler than NoSql solutions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functional programming is another tool, not a panacea.
The real world has objects and often classes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_positive_experiences&#34;&gt;Positive Experiences&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I learnt to appreciate these approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&#34;&gt;YAGNI&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID&#34;&gt;SOLID&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pencil and paper are the best design and programming tools and vastly underused.
Better are whiteboards to exchange ideas in a team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trading purity in exchange for practicality is usually a good call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding more technology in response to a minor problem is rarely a good call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design is driven from requirements &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;.
Building anything beyond those requirements puts you into the world of speculative, self-indulgent invention.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;90%, maybe 95%, of project managers, could probably disappear tomorrow to either no effect or a net gain in efficiency &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#large-scale-scrum&#34;&gt;5&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After performing over 2000 interviews, I can say that standard human resources interviewing is thoroughly broken.
Technical interviewing and peer interviewing work way better and are more accurate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile approaches are more successful and more fun.
Waterfall approaches suck
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevOps advantages are worth the effort.
Deliver frequently and automate.
Each project should have a continuous integration, continuous delivery, and continuous deployment pipeline.
The deployment can also be triggered manually.
The deployment steps shall still be fully automated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static websites written in &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; and using site generators such as &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; are the solution how to document your architecture and technical product
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_old_beliefs&#34;&gt;Old Beliefs&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I still think these statements should be applied in current teams:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A software developer shall have formal training in computer science and software engineering.
She should hold at least a bachelor’s degree.
A software developer should understand theory such as e.g., &lt;a href=&#34;https://en.wikipedia.org/wiki/CAP_theorem&#34;&gt;CAP theorem&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Big_O_notation&#34;&gt;big O notation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A junior Java developer shall pursue a formal Java programmer certification.
The learning effect is not always huge, but as a team member, I have security that they know all basic concepts.&lt;br/&gt;
Modern Java supports such concepts as &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;algebraic data types&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Monad_(functional_programming)&#34;&gt;monads&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Structured_concurrency&#34;&gt;structured concurrency&lt;/a&gt;.
A professional developer shall apply them in her daily work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People who stress over code style, linting rules, or another minutia are insane weirdos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code coverage has absolutely nothing to do with code quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monoliths are pretty good in most circumstances.
The key is to write &lt;strong&gt;modular&lt;/strong&gt; monoliths.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Micro-services require justification.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;modern-software-engineering&#34;&gt;&lt;/a&gt;[1] D. Farley, &lt;em&gt;Modern Software Engineering&lt;/em&gt;. Pearson Education, Limited, 2022 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B09GG6XKS4&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B09GG6XKS4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures-2nd&#34;&gt;&lt;/a&gt;[2] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Automated Software Governance&lt;/em&gt;, Second. O’Reilly Media, 2023 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0BN4T1P27&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0BN4T1P27&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[3] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[4] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;large-scale-scrum&#34;&gt;&lt;/a&gt;[5] C. Larman, &lt;em&gt;Large-scale scrum&lt;/em&gt;. 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321985710&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321985710&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. It is time to retire the V-Model, Hermes method, and similar geriatric methodologies. They have served their time. They can rest in peace. The same could be said about SAFe.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. The huge gain is always current documentation and free versioning of the documentation with the source code.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. The spring framework finally recognized that with &lt;a href=&#34;https://spring.io/projects/spring-modulith&#34;&gt;Modulith&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Multi-Module Test Reporting with Gradle 7.x</title>
      <link>https://blog.tangly.net/blog/2022/multi-module-test-reporting-with-gradle-7.x/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/multi-module-test-reporting-with-gradle-7.x/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-11-02-head.jpg&#34; alt=&#34;2022 11 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I love Gradle as the building tool for all my Java projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But sometimes I was discouraged about how spotty or cumbersome the support for multi-module project is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I struggled for years to generate test and code overage reports over modules included in a &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle finally provides a better approach to generate aggregated test and code coverage reports over multiple modules belonging to the same project.
The solution is a huge improvement against the previous quite cumbersome approach described in &lt;a href=&#34;#gradle-7&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Two plugins nicely solve this daunting problem for all Java developers preferring &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; over &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I hope similar solutions will be provided for static code analysers such as SpotBugs, PMD or Checkstyle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_selected_approach&#34;&gt;Selected Approach&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We use the documented approach to define a separate module to generate the aggregation reports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;plugins&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                           &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;test-report-aggregation&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;jacoco-report-aggregation&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dependencies&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                      &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testReportAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.bdd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testReportAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.commons&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testReportAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.core&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testReportAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.dev&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jacocoAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.bdd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jacocoAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.commons&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jacocoAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.core&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jacocoAggregation&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;:net.tangly.dev&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
 &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reporting&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                                         &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reports&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testAggregateTestReport&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;AggregateTestReport&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testType&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;TestSuiteType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;UNIT_TEST&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testCodeCoverageReport&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;JacocoCoverageReport&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testType&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;TestSuiteType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;UNIT_TEST&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Load the plugin for test aggregation report and the test coverage aggregation report.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declare the modules which results should be aggregated. We have to declare the same subprojects for each plugin separately.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure the aggregation reports.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We call the following goals to generate the aggregation results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;shell&#34;&gt;./gradlew testAggregateTestReport &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
./gradlew testCodeCoverageReport  &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Generates an aggregate report over all unit tests. Run before the gradle test.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Generates a code coverage aggregate report over all unit tests. Run first gradle jacocoTestReport.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learnings&#34;&gt;Learnings&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle provides test results aggregation and test coverage aggregation as two separate plugins.
The drawback is that we have to configure both plugins with the same information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The plugins make the assumption that modules are called from an application subproject.
The scenario of a mono repository containing a set of libraries is not covered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock caution&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-caution&#34; title=&#34;Caution&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We would encourage the plugin authors to provide a default configuration option based on the gradle settings defined in &lt;em&gt;settings.gradle&lt;/em&gt;.
The modules are defined in the file and could be retrieved by the plugin using the Gradle API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Apply the cardinal rule of good user interface design.
Do not ask the user to give information already available to the application.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new plugins are a huge simplification over the cumbersome and almost magic statements we needed before to create these reports.
Gradle ecosystem is still work in progress to support multi-module Java projects &lt;a href=&#34;#gradle-7&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;#gradle-6&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;gradle-7&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2021/gradle-7/&#34;&gt;Gradle 7 Goodies&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;gradle-6&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2020/gradle-6.4-finally-supports-java-modules/&#34;&gt;Gradle 6.4 Finally Supports Java Modules&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Behavior Driven Design</title>
      <link>https://blog.tangly.net/blog/2022/behavior-driven-design/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/behavior-driven-design/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-11-01-head.jpg&#34; alt=&#34;2022 11 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-Driven Design&lt;/a&gt; &lt;em&gt;DDD&lt;/em&gt; has been around since Eric Evans published his book about the subject in 2003
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vernon Vaugh published powerful approaches how to implement DDD concepts into a software solution &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you validate and test your DDD digital solutions?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Behavior-driven_development&#34;&gt;Behavior Driven Development&lt;/a&gt; &lt;em&gt;BDD&lt;/em&gt; is an inversion how systems are often developed.
In some ways, it is an extension of Test Driven Development &lt;em&gt;TDD&lt;/em&gt; approach to the whole application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Acceptance criteria are coded as automated acceptance tests.
The software is written to fulfill these acceptance tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach integrates well with agile frameworks.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
The product owner can accept the story based on the test description enforcing his acceptance criteria.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The documentation describing the acceptance tests is automatically generated.
These documented acceptance tests are the requirements of the application.
This approach is often called specification by example &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#bridging-communication-gap&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly advocate that the developers write the acceptance tests and generate the legible description of the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-11-01-ddd-clean-architecture.png&#34; alt=&#34;2022 11 01 ddd clean architecture&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The BDD approach works well when &lt;a href=&#34;https://martinfowler.com/bliki/DomainDrivenDesign.html&#34;&gt;Domain Driven Design&lt;/a&gt; is applied as described in the seminal reference texts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The acceptance tests are often specified against a &lt;a href=&#34;https://martinfowler.com/bliki/BoundedContext.html&#34;&gt;Bounded Context&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is cumbersome and difficult to test &lt;a href=&#34;https://martinfowler.com/bliki/AnemicDomainModel.html&#34;&gt;Anemic Domain Model&lt;/a&gt;.
Rich Domains are models that have full control of their data and do not rely on external objects to manipulate them.
Anemic Domains are models that rely on other classes to validate their data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An elegant design approach such as &lt;a href=&#34;https://martinfowler.com/bliki/CQRS.html&#34;&gt;CQRS&lt;/a&gt; hugely simplifies the definition and implementation of acceptance tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I want to keep the understanding of the strategies simple.
The Domain Events strategy is nothing more than an event fired from a Context X microservice with information that may interest other contexts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This strategy is used when we would like to have asynchronous behavior between our contexts, since the context responsible for publishing the message will not expect a return.
For instance, the action that the consumer will take based on this event does not matter to him.
For it is always important to think about notifying past actions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_evolution&#34;&gt;Evolution&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A tension exists who is in charge to write the acceptance tests.
Experts initially advocated that the product owner or the business analysts should write the tests to validate the work of the development team.
Solutions such as Gherkin and Fitnesse were developed to support this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Experience showed the difficulty of maintaining and refactor test sets written by non-developers.
I strongly advocate product owners shall formulate the acceptance criteria.
Developers shall always write the acceptance tests and guarantee a reasonable quality of the created code.
Use frameworks based on a programming language instead of structured text approaches.
Modern development platforms provide powerful refactoring tools for source code but almost none for a regular text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Refactoring and clean code principles shall permeate a modern software development approach.
Avoid archaic solutions requiring expensive manual activities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_experiments&#34;&gt;Experiments&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We are using a small framework to write acceptance criteria automated tests and create the associated documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The library is available as a Java &lt;em&gt;net.tangly:bdd:&amp;lt;version&amp;gt;&lt;/em&gt; Java distribution.
It is published on maven central.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A documentation is available under &lt;a href=&#34;../../../docs/bdd/&#34;&gt;BDD Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A test uses the &lt;em&gt;given, when, then&lt;/em&gt; structure and has the following form:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@Scenario&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Sell some black sweaters in stock to a customer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;sellBlackSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Scene&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;scene&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;NrBlueSweaters&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;NrBlackSweaters&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;NrSoldBlackSweaters&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;scene&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;given&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;The store is stocked with sweaters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt;
                                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;NrBlackSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;NrBlueSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;has 5 black sweaters in stock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertThat&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;blacks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Store should carry 5 black sweaters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NrBlackSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)).&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;4 blue sweaters in stock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertThat&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;blues&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Store should carry 4 blue sweaters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NrBlueSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)).&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;The customer buys 3 black sweaters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;sellBlack&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NrSoldBlackSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;then&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;The store should have 2 black sweaters in stock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt;
                                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertThat&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;blacks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Store should carry 1 black sweaters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
                                &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NrBlackSweaters&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;NrSoldBlackSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;4 blue sweaters in stock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertThat&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;blues&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Store should carry 4 blue sweaters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;NrBlueSweaters&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tests are executed as regular JUnit tests.
You can easily integrate them in your CI/CD pipeline as integration tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The generated documentation is
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 100%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a store owner, I want to update the stock when I am selling sweaters to customers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;tags:&lt;/strong&gt; &amp;#39;Release 1.0&amp;#39;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Scenario: Sell some blue sweaters in stock to a customer&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;given&lt;/strong&gt; The store is stocked with sweaters &lt;strong&gt;and&lt;/strong&gt; has 5 black sweaters in stock &lt;strong&gt;and&lt;/strong&gt; 4 blue sweaters in stock&lt;br/&gt;
&lt;strong&gt;when&lt;/strong&gt; The customer buys 3 blue sweaters&lt;br/&gt;
&lt;strong&gt;then&lt;/strong&gt; The store should have 5 black sweaters in stock &lt;strong&gt;and&lt;/strong&gt; 1 blue sweater in stock.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A report example is available under &lt;a href=&#34;../../../docs/bdd/bdd-report/&#34;&gt;Report Example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We are experimenting with projects to find out if this approach nurtures legibility and conversation between developers and users.
The results are mixed.
The integration tests are not easier to write with the library instead of regular &lt;a href=&#34;https://junit.org/junit5/&#34;&gt;JUnit 5&lt;/a&gt; tests.
The generated documentation and available JSON reports are valuable.
The question is how valuable are they?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We still try to define metrics to valuate the usefulness of living documentation describing the requirements of the product.
The usual approach is either to write a huge Microsoft Word document or use a specification tool storing the information in a database.
The advantages of living documentation still need to be quantified.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[1] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[2] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[3] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;bridging-communication-gap&#34;&gt;&lt;/a&gt;[4] G. Adzic, &lt;em&gt;Bridging the Communication Gap&lt;/em&gt;. Neuri Limited, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B008YZ993W/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B008YZ993W/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Scrum advocates recognize the compatibility with their framework. Each story in the product backlog shall have acceptance criteria defined under the product owner’s responsibility. The key is to formulate the acceptance criteria so that they can be coded as automated tests.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. A JSON export is also available to tailor the generated documentation to your project needs.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Modern Java Constructs</title>
      <link>https://blog.tangly.net/blog/2022/modern-java-constructs/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/modern-java-constructs/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-10-02-head.jpg&#34; alt=&#34;2022 10 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Modern Java&lt;/strong&gt; is quite a departure from the traditional Java available at the beginning of the millennium.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most visible change is certainly lambda expressions and stream, enabling a more functional programming approach in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Functional programming is a paradigm that supports developers to think in terms of functions instead of classes.
Functions are stateless and without side effects.
Avoiding state can lead to better software, especially in high-performance, concurrent applications
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
Functional programming is also a natural fit for multicore parallel programming.
The paradigm is the best way to squeeze more performance out of modern CPUs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;em&gt;Java Streams&lt;/em&gt; library allows algorithms to be coded declaratively meaning the developer specifies what they want, not how they want it.
This improves code quality because all the plumbing code is handled by the library itself.
The fluent interface style is just a way to express streams algorithm in one continuous line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional modern constructs reduce boiler code and often eliminate known potential errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here a set of extensions we use daily in our code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find additional examples in the introductory book &lt;em&gt;Java by Comparison&lt;/em&gt; &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-by-comparison&#34;&gt;1&lt;/a&gt;]&lt;/span&gt; and the more advanced &lt;em&gt;Effective Java&lt;/em&gt; &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#effective-java-3rd&#34;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_try_with_closeable_resources&#34;&gt;Try with Closeable Resources&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Automatic resource management was introduced in Java 7 in 2011.
Better handling of final variables was added in Java 9 in 2017.
Local variable type inference with the &lt;em&gt;var&lt;/em&gt; keyword was added to Java 10 in March 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;em&gt;AutoCloseable&lt;/em&gt; interface is the API extension you should use to declare any resource type in your solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A nice feature of the solution is the support of suppressed exception hierarchy to access all exceptions potentially thrown during the closing operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color: #cf222e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Writer&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Files&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;newBufferedWriter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;StandardCharsets&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;   &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;features&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;                                                                               &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declares an auto-closeable resource in the block context.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The auto-closeable resource is closed by Java runtime when leaving the block either through regular flow or when an exception is thrown.
The programmer can never forget to close the resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_streams&#34;&gt;Streams&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall always use streams to manipulate data collections.
Stream operators support similar functionality as SQL dialects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;firstname&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;card&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getProperties&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Property&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;FN&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;Property:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;])&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;findAny&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;orElse&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sequences of values are also streams.
Simply use the &lt;em&gt;Stream.iterate(…​)&lt;/em&gt; method.
Therefore, a &lt;em&gt;for&lt;/em&gt; loop is easily transformed into a stream of operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most imperative operations, such as conditional and loop statements, can be rewritten as stream operators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Streams are often more legible and compact.
The approach moves the developers from imperative programming to a more functional programming style.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java code has seldom loops and conditional statements.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_functional_programming&#34;&gt;Functional Programming&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Null values are acknowledged as a language design fault in modern software engineering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should never return a null value from any method.
Either you give back an empty collection or an optional object for single values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;Optional&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Organization&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;findOrganizationById&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;identifier&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                            &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;identifier&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;?&lt;/span&gt;
                &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;realm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;organizations&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;identifier&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Optional&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;empty&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #953800&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Split&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;splites&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;splits&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;splits&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;copyOf&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;splits&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Collections&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;     &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns an optional with a value if found or an empty optional.
The optional can be processed as a stream instead of using a conditional statement.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns either a list of items or an empty list.
The result can be processed as a stream instead of using a conditional statement.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Streams provide the &lt;em&gt;flatmap&lt;/em&gt; operator to elegantly handle optional values in collection processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Remember that &lt;em&gt;Optional&amp;lt;T&amp;gt;&lt;/em&gt; is almost an implementation of a monad.
Time to study the concepts of functional programming and lambda calculus &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#functional-programming-java&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are really starting to program using functional programming idioms if you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pass lambda expressions or single abstract method &lt;em&gt;SAM&lt;/em&gt; instances as parameters of some methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return lambda expressions or single abstract method &lt;em&gt;SAM&lt;/em&gt; instances in some methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just scan your code and find out how often you write such constructs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Explore the &lt;em&gt;java.util.function&lt;/em&gt; package to increase your functional programming skills.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pattern_matching&#34;&gt;Pattern Matching&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pattern matching is another approach for functional programming.
New versions of Java support more related constructs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The extension of the &lt;em&gt;switch&lt;/em&gt; statement into a powerful &lt;em&gt;switch&lt;/em&gt; &lt;strong&gt;expression&lt;/strong&gt; was a game changer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pattern matching supports:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select a transformation based on the variable type using the &lt;em&gt;instanceof&lt;/em&gt; operator.
The simplified and type-aware variable declaration is provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refine the selection though &lt;em&gt;when&lt;/em&gt; clause to differentiate the transformation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Record deconstruction gives access to field variables without having to call accessor methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_records_and_sealed_types&#34;&gt;Records and Sealed Types&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sealed types perfectly model a closed inheritance hierarchy.
You can control your bounded domain and inhibit any client to change it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records are immutable objects.
Records are the perfect construct to implement value objects as described in domain-driven design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Business logic is implemented as additional methods.
The fact that the value objects are also immutable makes the business operations both thread-safe and side effect free.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;permits&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Nil&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ImmutableList&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ImmutableList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;rest&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Factory methods can automatically be created using &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_modules&#34;&gt;Modules&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modules were introduced with Java 9, which was released in September 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A module is a group of closely related packages and resources along with a new module descriptor file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we create a module, we include a descriptor file that defines several aspects of our new module &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-9-modularity&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Name&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;the name of our module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a list of other modules that this module depends on.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Public Packages&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a list of all packages we want accessible from outside the module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Services Offered&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;we can provide service implementations that can be consumed by other modules.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Services Consumed&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;allow the current module to be a consumer of a service.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reflection Permissions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;explicitly allows other classes to use reflection to access the private members of a package.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach describes in plain Java the coupling and cohesion principles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;dsl&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;utilities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;eventbus&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;eventbus&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;imp&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;apache&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;logging&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;log4j&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;transitive&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;jetbrains&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;annotations&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_goodies&#34;&gt;Goodies&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/projects/loom//&#34;&gt;Loom&lt;/a&gt; Threads&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Java 19 introduces lightweight threads in the library.
You can now program massively multithreaded applications with hundreds of thousands of threads without taxing the JVM or the operating system.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/413&#34;&gt;JavaDoc code snippets&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Code examples in your java documentation are declared as a code snippet in a regular Java class.
Your unit tests ensure that all your documented code snippets compile and run without trouble.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;JShell&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You have access to a Read-Evaluate-Print Loop &lt;em&gt;REPL&lt;/em&gt; to test new Java code.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/426&#34;&gt;Vector Optimizations&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You have access to the SIMD modules in your CPU directly from your Java code.
Speed-ups can be tremendous.
The code is still portable for all supported Java platforms.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-by-comparison&#34;&gt;&lt;/a&gt;[1] S. Harrer, J. Lenhard, and L. Dietz, &lt;em&gt;Java By Comparison&lt;/em&gt;. Pragmatic Bookshelf, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07CLFTVZS&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07CLFTVZS&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[2] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;functional-programming-java&#34;&gt;&lt;/a&gt;[3] V. Subramaniam, &lt;em&gt;Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions&lt;/em&gt;. The Pragmatic Programmers, 2014 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0CJL7VKFL&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0CJL7VKFL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-9-modularity&#34;&gt;&lt;/a&gt;[4] S. Mak, &lt;em&gt;Java 9 Modularity&lt;/em&gt;. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491954167&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491954167&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The &lt;em&gt;record&lt;/em&gt; construct was added to Java 15 in March 2020. Records are shallow immutable objects. You can use them in pure functions to avoid unwanted side effects.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Vaadin</title>
      <link>https://blog.tangly.net/blog/2022/vaadin/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/vaadin/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-10-01-head.jpg&#34; alt=&#34;2022 10 01 head&#34; width=&#34;200&#34; height=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://vaadin.com/&#34;&gt;Vaadin&lt;/a&gt; is an ideal solution if you are a Java developer and wants to provide a user interface for your product.
Vaadin is a framework to create graphical user interfaces using plain Java, or any JVM-based language for that matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You develop in Java, and the framework takes care of all the rest.
It generates the client-side code, and the communication between the client-side code in the browser and the backend code on the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your team only needs to program in the Java stack
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
Your developers focus on their key competencies.
This is a huge advantage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Proficiency is difficult in one technology stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Only exceptional individuals really master multiple development environments.
You can probably not afford to hire them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Vaadin framework is optimal for internal applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It scales up to a few thousands of active users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_progressive_web_applications_pwa&#34;&gt;Progressive Web Applications &lt;a href=&#34;https://en.wikipedia.org/wiki/Progressive_web_app&#34;&gt;PWA&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;User interfaces shall accommodate various screen resolutions.
Ideally, you should support phone displays, tablets, and high-resolution workstations.
Progressive Web applications provide the functionalities to realize such solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin provides first-level support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Progressive_web_app&#34;&gt;PWA&lt;/a&gt; functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The regular Vaadin distribution provides the expected regular visual components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://vaadin.com/directory/search?author=Vaadin+++ComponentFactory&#34;&gt;Vaadin Component Factory&lt;/a&gt; distributes more specialized components.
These components were before created for a particular customer and later released to the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use the &lt;a href=&#34;https://vaadin.com/directory/component/so-charts&#34;&gt;SO-Charts&lt;/a&gt; components to draw various charts.
This library is a thin wrapper for the Apache project &lt;a href=&#34;https://echarts.apache.org/en/index.html&#34;&gt;ECharts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_developing_with_vaadin&#34;&gt;Developing with Vaadin&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most popular IDE for Java is currently the &lt;em&gt;IntelliJ IDEA&lt;/em&gt; tool.
You develop Vaadin applications just as regular Java applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; as build tool.
This approach is well-supported in the IDE.
The Vaadin company still seems to prefer &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; as build tool.
You find Gradle examples created by the developer of the Karibu library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I prefer to deploy Vaadin application with an embedded Web Server.
The approach has two advantages.
First, debugging the application is easier and snappier.
Second, the modern production environment builds on Docker images and Kubernetes.
You will never deploy more than one solution on a container instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin components do not hinder domain-driven design approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_testing_with_karibu&#34;&gt;Testing with &lt;a href=&#34;https://github.com/mvysny/karibu-testing/&#34;&gt;Karibu&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Digital solutions are developed using agile approaches.
They are often deployed multiple times every week in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The unit and integration tests are run automatically before each deployment.
The successful execution of the test suite guarantees no known errors are deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/mvysny/karibu-testing/&#34;&gt;Karibu&lt;/a&gt; test library efficiently supports developers writing Vaadin integration or end-to-end automated tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Karibu testing is here to perform:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Containerless testing&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You do not need to launch the servlet container.
Karibu creates a &lt;em&gt;Vaadin Session&lt;/em&gt;, the UI and other necessary Vaadin classes straight in the JVM, which runs your JUnit tests.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Browserless testing&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You look up components straight from &lt;em&gt;UI.getCurrent()&lt;/em&gt;, bypassing the browser and the JavaScript bridge completely.
You directly call methods on your server-side &lt;em&gt;View&lt;/em&gt; classes and on the server-side Java Vaadin components.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learning_vaadin&#34;&gt;Learning Vaadin&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin provides &lt;a href=&#34;https://vaadin.com/learn/training/&#34;&gt;training videos&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A &lt;a href=&#34;https://vaadin.com/learn/training/&#34;&gt;certification program&lt;/a&gt; validates your learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://vaadin.com/docs/latest/&#34;&gt;Extensive documentation&lt;/a&gt; and tutorials are published on their website.
The current examples emphasize the usage of &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; as a build tool.
I prefer &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; and had to search the Internet to find clues how to build the examples with Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Concrete examples of how to realize specific functions with Vaadin are collected in the &lt;a href=&#34;https://cookbook.vaadin.com/&#34;&gt;cookbook&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware of selecting examples using the current version of the framework.
Legacy code uses Vaadin 8 and is useless for modern solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Very cool is the &lt;a href=&#34;https://vaadin.com/student-program/&#34;&gt;student program&lt;/a&gt;.
I am currently trying to introduce computer science bachelor students to the advantages of Vaadin.
Students are bombarded with various technology stacks.
Java and Vaadin is a single Java-based approach to write more easily semester and bachelor development assignments.
The drawback is it is less sexy than &lt;em&gt;React&lt;/em&gt;, &lt;em&gt;VueJS&lt;/em&gt;, or perhaps &lt;em&gt;Angular&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vaadin supports the latest version of Java in a timely manner
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.
I acknowledge that the Vaadin company is rather slow to adopt newer Java standards.
It took them years to acknowledge the Jakarta renaming scheme
footnot:[The renaming was necessary because Oracle screwed up. The delaying of Vaadin means you cannot use the latest version of Jetty or similar frameworks].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.frankel.ch/why-love-vaadin/&#34;&gt;Why I (still) love Vaadin&lt;/a&gt;.
Nicolas Fränkel. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ankurmans/an-open-letter-to-all-enterprise-level-business-web-application-decision-makers-446527292627&#34;&gt;5 Reasons Why Enterprises Use Vaadin For Their Web Application UI Needs&lt;/a&gt;.
Ankurman Shrestha .2018.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://vaadin.com/accessibility&#34;&gt;Vaadin Accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. It is a modern user interface framework and uses Modern Java as a programming language. It easily superseeds old 4GL approaches such as dBase, Clipper, FileMaker, Visual Fox Pro, PowerBuilder, Borland Paradox, 4th Dimension, or Oracle Forms.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. The same can be said for the &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; since it supports toolchains configuration.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Modular Monoliths are the new Graal</title>
      <link>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-02-head.svg&#34; alt=&#34;2022 06 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith is a software design approach in which a monolith is designed with an emphasis on interchangeable and potentially reusable modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith can be split in the future into a set of microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Delay the split as long as you can.
Microservices have a steep price tag during operations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith provides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Independent and parallel development approach&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diminish coupling and improve cohesion.
The interfaces are better documented and thinner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better observability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_benefits_of_modular_monoliths&#34;&gt;Benefits of Modular Monoliths&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Adopting the modular approach for monolithic applications can have benefits in a few key areas, including better-organized dependencies, increased &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_reuse&#34;&gt;code reusability&lt;/a&gt;, and increased code observability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Reusability&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;For large development teams, developing modular components of an application helps to increase reusability.
Modular components can be reused and repurposed and can help teams establish a single source of truth.
This can lead to faster and more consistent development.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Better-Organized Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Because modular monoliths make individual functions more independent, they, by nature, make dependencies more organized and visible.
This makes it easier for developers to easily assess which parts of the application require which dependencies.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Observability&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Developing with modularity in mind means code is more accessible to developers.
For Java developers in particular, interface classes and their requisite javadoc comments help to enhance accessibility and interoperability for developers who may need to work with the modularized function.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Monolith Benefits&lt;/th&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Modular Monolith Benefits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Low operational complexity.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Low operational complexity.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Can be more secure than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Can be more secure than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Easy to manage database consistency.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Easy to manage database consistency.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Less complex than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Less complex than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Monoliths are usually a nightmare to maintain.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Developed code is reusable.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Often called big ball of mud.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Has better-organized dependencies than a standard monolith.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Observability is often low.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Better code observability than a standard monolith.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_when_to_use_a_modular_monolith&#34;&gt;When to Use a Modular Monolith&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Any time a developer is working on a monolithic application, using principles of modularity can help them to improve the processes for their team.
Whether that means making dependencies more manageable within the application, improving developer interoperability on the modular components of that application, or adding modular components to the house repository, embracing modularity can have a positive impact on teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For the application itself, embracing modularity can help to organize dependencies, making it easier and less time-consuming to change components within the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good practices shall be applied to refactor the application &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-code&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_when_not_to_use_a_modular_monolith&#34;&gt;When Not to Use a Modular Monolith&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course, just as microservices are not one size fits all solutions, neither is modularity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For developers working on small projects with small development teams, developing their code in a modular way may not be worth the added time or formality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_final_thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture approach for modular monoliths or microservices is &lt;em&gt;Domain Driven Design&lt;/em&gt;
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;7&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are like many Java developers who are still working on a monolithic application, then employing modularization best practices can help make your application achieve some benefits of microservices without the associated cost of refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, modular monoliths have significant shortcomings when compared to microservices — especially in terms of continuous testing, integration, and deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;software-structure-with-ddd&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2022/software-structure-with-ddd/&#34;&gt;Software Structure with DDD&lt;/a&gt;
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[1] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[3] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, First. Addision-Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B004PQQRK2&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B004PQQRK2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[4] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[5] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[6] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[7] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Software Structure with DDD</title>
      <link>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-01-head.jpg&#34; alt=&#34;2022 06 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Development&lt;/a&gt; &lt;em&gt;DDD&lt;/em&gt; is the preferred software architecture approach for designing digital products.
The method nicely matches with the operational concepts of microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design is a holistic approach to understanding, designing and building software applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Seminal books &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;3&lt;/a&gt;]&lt;/span&gt; describes the approach and key concepts defining the development method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Concrete recipes and examples of code structure are still sparse.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How should you structure your namespaces and modules?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We propose a simple and adequate code structure for implementation using modern Java constructs.
The approach builds on the strengths of the Java packages and modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The language visibility rules enforce cohesion and minimize coupling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The described approach is ideal for small to medium software solutions.
The source code size of a bounded domain is often less than 50&amp;#39;000 lines of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The heart of software is its ability to solve domain-related problems for its user.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Eric Evans&lt;br/&gt;
&lt;cite&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_history&#34;&gt;History&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It originated in the 1980s and 1990s, with Richard P. Gabriel being an early pioneer who introduced &lt;em&gt;domain models&lt;/em&gt; as mental models of the business guiding software and digital product development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Eric Evans further developed DDD in the late 1990s and early 2000s.
His book &lt;em&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/em&gt; &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;
defined DDD as creating software based on a deep understanding of the business domain.
It outlined principles for creating domain models, including using object-relational mapping (ORM) tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Today, DDD is widely accepted and applied across various domains like financial services, healthcare, and e-commerce.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_layers_in_ddd&#34;&gt;Layers in DDD&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-01-layers.png&#34; alt=&#34;2022 06 01 layers&#34; width=&#34;360&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design &lt;em&gt;DDD&lt;/em&gt; has four layers in the architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Interface
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;This layer is in charge of the interaction with the user, whether software presents information to the user or receives information from the user.&lt;br/&gt;
&lt;em&gt;I use vaadin to increase productivity.
Vaadin allows us to use the single technology stack Java to develop all backend and frontend functionalities.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Application
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;This is a thin layer between the interface and the domain, it could call domain services to serve the solution purposes.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Domain
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;At The heart of the software, this layer holds domain logic and business knowledge.&lt;br/&gt;
&lt;em&gt;A major goal is to avoid any tainting of the core domain model from other layers.&lt;/em&gt;
&lt;em&gt;Try to avoid extending domain entities with implementation-specific root classes or to a lesser degree annotations.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Infrastructure
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;A supporting layer for the other layers.
This layer contains supporting libraries or external services like a database or UI supporting library.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;I use libraries to minimize effort in support functions such as persistence, JSON transformation, archiving, and reporting.
The microstream library is a good example of this approach.
The persistence capability is less than fifty lines of code.
No changes in the domain model were necessary.
We did not have to add a root persistent class or use annotations.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_package_structure&#34;&gt;Package Structure&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bounded domain shall be configured as a Java module &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-9-modularity&#34;&gt;4&lt;/a&gt;]&lt;/span&gt;.
The exported services and entities are explicitly listed with the &lt;em&gt;exports&lt;/em&gt; directive.
A huge advantage is the obligation to list all dependencies with the &lt;em&gt;requires&lt;/em&gt; directive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-01-hexagonal-architecture.png&#34; alt=&#34;2022 06 01 hexagonal architecture&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java compiler validates the module dependencies and interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Services
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;defines the bounded domain context.
The domain uses the library to implement a bounded domain.
The ports, handlers, and realms are declared in the context package for small bounded domains.
Complex domains can declare these interfaces in separate packages for legibility.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Logic
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains common business logic and features.
Elaborate domains can contain more business features.
Use a package structure increasing legibility and enforcing separation of concerns.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Ports
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the services receiving data and events from the environment.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Handlers
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the services providing data and events to the environment and to other applications.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Realm
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the repository functions to persist and create domain entities and object values.
The current approach uses the &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; library.
The amount of code to persist the domain model is minimal and non-intrusive
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Domain
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the abstraction describing the bounded domain.
Care is taken to define resilient and legible domain abstractions.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center kroki&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://kroki.io/plantuml/svg/eNqNkUEKwkAMRfc9xaxbbK9QRMGFCxEvkM7EGphmZJIKUry7Yyu4EFvJJiQv-T-kFoWoAl6zIRtOWWEYtVTg1t_LPG9Czw7dyoUOiPM8KxaAckoSV5iqsh5EUIxDsZEa4tboBQ00ohGsUmAx4TzWprmqWla4hmT4LfDdXm1ZSQllXPWD2Tn_j5JgvJHFGbHNx_UPYt0LMYrsQ0t21hOw8xjnkEO6fK5_RPBdAh4pamT3eusToIuaUw==&#34; alt=&#34;bounded-domain-structure&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above diagram shows the package structure for a bounded domain named &lt;strong&gt;bounded-domain&lt;/strong&gt;.
The names with the regular font are package names, the ones in italics are class names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The infrastructure supports classes are not part of this structure.
These classes shall be defined in a separate Java module and imported with regular dependency declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We use the &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; tool to ensure the expected structure is provided for each bounded domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The user interface for a bounded domain is stored in a separate package and often in its own Java module.
The bounded domain implementation shall not constrain the technologies used to provide a user interface.
Different approaches for user interface realization are available and no clear winner can currently be identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I mainly use &lt;a href=&#34;https://vaadin.com&#34;&gt;Vaadin&lt;/a&gt; to realize browser- or mobile-first internal applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_java_considerations&#34;&gt;Java Considerations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Entities shall have well-documented internal or external identifiers.
Entities visible to other bounded domains shall always have an external identifier.
Identifiers are always immutable objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Objects that have a distinct identity that runs through time and different representations.
You also hear these called &lt;em&gt;reference objects&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value objects shall be expressed as Java value types.
Record construct is the preferred way to model a value object in Java.
The record concept provides the expected &lt;em&gt;equals(Object)&lt;/em&gt; behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Objects that matter only as the combination of their attributes.
Two value objects with the same values for all their attributes are considered equal.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An aggregate is a set of Entities and Value Objects that do not make sense alone.
Every aggregate has a root entity, which will be responsible for providing all methods involving business rules that will modify its child entities.
The first rule is that aggregates reference each other by identity instead of object references.
Aggregates shall be constructed with the help of factory patterns such as factory method, abstract factory, or builder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A DDD aggregate is a cluster of domain objects that can be treated as a unit.
An example may be an order and its line-items, these will be separate objects.
Tt is useful to treat the order together with its line items as a single aggregate.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Rich domains are models that have full control of their data and do not rely on external objects to manipulate them.
Anemic domains are models that rely on other classes to validate their data.
Anemic domains are a smell in the domain-driven design world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Services should be pure functions and be stateless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pure functions are functions (or methods) that do not change the value of any object outside it.
It avoids side effects and guarantees the same output for certain inputs, meaning it needs to be completely deterministic.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Spring project has added support for bounded domain in their framework with the &lt;a href=&#34;https://github.com/spring-projects/spring-modulith&#34;&gt;Modulith&lt;/a&gt; extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle modules are a natural mapping for bounded domains.
Use either Java modules or archUnit to enforce that communication always goes through bounded domain interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_architecture_integrity&#34;&gt;Architecture Integrity&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A Bounded Context is a logical boundary of a domain where particular terms and rules apply consistently.
Inside this boundary, all terms, definitions and concepts form the Ubiquitous Language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good practices shall be applied to ensure the quality of the bounded domain software architecture &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-architecture&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;7&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java Platform Module System (JPMS) encourages us to build more reliable and strongly encapsulated modules.
As a result, these features can help to isolate our contexts and establish clear boundaries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bounded domain is implemented as a Java module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The domain internal layered architecture is verified with &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; custom validation rules.
The rules are coded as unit tests and are processed in the continuous integration pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The advantages of the architecture are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The whole company talking the same ubiquitous language, reduced risk of misunderstandings.
Everyone needs to be aligned, both in vocabulary and ownership of the components.
The engineers have common understanding and coding guidelines to realize the layers inside a bounded domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have a segregated architecture defining a modular monolith application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smaller and well-defined components are easier to maintain.
Your services are independent and can more easily be refactored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Development scalability is implicitly provided.
Teams can develop simultaneous and independently bounded domain features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_bounded_domain_relations&#34;&gt;Bounded Domain Relations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are five main types of relationships between Bounded Contexts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Partnership
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a relationship between two contexts that cooperates to align the two teams with dependent goals.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Shared Kernel
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a kind of relationship when common parts of several contexts are extracted to another context/module to reduce code duplication.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Customer-supplier
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a connection between two contexts, where one context (upstream) produces data, and the other (downstream) consumes it.
In this relationship, both sides are interested in establishing the best possible communication.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Conformist
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;this relationship also has upstream and downstream, however, downstream always conforms to the upstream’s APIs.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Anti-corruption layer
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;this relationship kind is widely used for legacy systems to adapt them to a new architecture and gradually migrate from the legacy codebase.
The protection layer acts as an adapter to translate data from the upstream and protect from undesired changes&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Great technologies, programming languages and tools are used when building software applications.
That is good and right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But unfortunately, it is often lost that the decisive factor for the success of a project is not technology, but the solution.
In order to understand the subject matter or domain, we need a common language with the domain experts and users.
If we do not map the technical model in the software and its architecture, it will not help our users in their work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a computer scientist, it is easy to fall into the trap of focusing on technology instead of specialist knowledge
footnoote:[In the modern trend of technology driven curriculum this dreadful approach is often encountered].
The principle of bounded contexts from DDD can help us here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design (DDD) is a useful approach that provides excellent guidelines for modeling and building systems, but it is a means to an end, not an end in itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While the concepts are valid, you lose a lot if you limit yourself to using them only: There actually is a life beyond DDD.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Stefan Tilkov&lt;br/&gt;
&lt;cite&gt;2021&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The DDD approach emphasizes systematic refactoring and code improvements &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#refactoring-2nd&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;#clean-code&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;5&lt;/a&gt;]&lt;/span&gt;.
It recommends test driven approach for bounded domain development &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#agile-testing&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;#more-agile-testing&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;#bridging-communication-gap&#34;&gt;13&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[1] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[2] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[3] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-9-modularity&#34;&gt;&lt;/a&gt;[4] S. Mak, &lt;em&gt;Java 9 Modularity&lt;/em&gt;. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491954167&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491954167&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[5] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[6] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, First. Addision-Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B004PQQRK2&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B004PQQRK2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[7] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-2nd&#34;&gt;&lt;/a&gt;[8] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[9] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[10] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;agile-testing&#34;&gt;&lt;/a&gt;[11] L. Crispin, &lt;em&gt;Agile testing&lt;/em&gt;. Addison-Wesley, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321534468&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321534468&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;more-agile-testing&#34;&gt;&lt;/a&gt;[12] J. G. Gregory and L. Crispin, &lt;em&gt;More Agile Testing&lt;/em&gt;. Addison-Wesley Professional [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321967054&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321967054&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;bridging-communication-gap&#34;&gt;&lt;/a&gt;[13] G. Adzic, &lt;em&gt;Bridging the Communication Gap&lt;/em&gt;. Neuri Limited, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B008YZ993W/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B008YZ993W/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. You do &lt;strong&gt;not&lt;/strong&gt; need to modify your domain model. No inheritance from a special persistence class, no annotations are required.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Measurements and Units</title>
      <link>https://blog.tangly.net/blog/2022/measurements-and-units/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/measurements-and-units/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-05-01-head.png&#34; alt=&#34;2022 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JSR-385 could have saved Mars Climate Orbiter&lt;a href=&#34;#mars-climate-orbiter&#34;&gt;[2]&lt;/a&gt; in year 1999.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Accidents in computer applications happen again and again due to calculation errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The International System of Units &lt;em&gt;SI&lt;/em&gt;, commonly known as the metric system, is the international standard for measurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Metre_Convention&#34;&gt;International Treaty of the Mete&lt;/a&gt; was signed in Paris on May 20, 1875, by seventeen countries, including the United States.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In May 2019, the system of units was updated.
All units are defined by constants of nature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Still, various countries use alternate conventions to complicate our lives.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here some well-documented and expensive catastrophes originating from wrong approaches to measurements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Patriot Missile&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The cause here was an inaccurate calculation of the time that has passed since the start due to arithmetic errors in the computer system.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Ariane 5 Explosion&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A floating point number was converted, which then had a larger value than could be stored using the available 16-bit signed integer value.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;US Air Machine&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A US airliner nearly crashed on a flight between the United States and Canada, in the Great Lakes area and the greater Chicago area.
Here, when refueling the machine, the US gallon and British gallon volume units for liquid and fuel were mixed up.
The actual amount of kerosene available was significantly reduced.
The machine ending up on the holding pattern on approach without sufficient fuel.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Numerous, sometimes fatal, incorrect dosages of medication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-05-01-si-units.png&#34; alt=&#34;2022 05 01 si units&#34; width=&#34;200&#34; height=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java classes defined in the &lt;a href=&#34;https://unitsofmeasurement.github.io/&#34;&gt;JSR-385&lt;/a&gt; specification are not limited to science, physics or math alone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a result, the terms quantity and unit of measure should be used in their general terminology, such as physical quantity or physical unit of measure, unless otherwise specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This generalization holds true even if the Units of Measurement API was originally designed with scientific or physical quantities as the primary goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The names and terms used in the specification are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Dimension&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Dimension is one of the fundamental aspects of quantity, including length, mass, time or combinations thereof.
The concept of measure expresses a characteristic without any concept of size.
So we can talk about length without any implication.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Quantity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Any kind of quantitative property or attribute of a thing.
Mass, time, distance, heat, longitude or latitude are among the familiar examples of quantitative properties.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No unit of measure is required to express a quantity, nor does one need specific arithmetic to do so.
Alice can quantify the size of her shoes by picking them up.
Alice can add the mass of her left shoe and the mass of her right shoe by placing them both in the bowl of a scale.
Quantities can be measurable or dimensionless: the number of Alice’s shoes is a dimensionless quantity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Units of measure are required to represent measurable quantities on a computer, on paper, on a network, device, etc.
Two or more of these specifications do not mandate the use of a particular quantity as a standard unit of measure.
Therefore, SI (System-International) is usually used so that the standard system of units of measurement is suitable for most applications.
According to the JSR-385 API specification, 7 quantities should be acceptable if they have the same dimensions so that they can be compared with one another in a meaningful way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Unit&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A unit, or unit of measure, is a quantity that is assumed to be the standard with a unique value that can be used to express.
The same type units of measurement are used as a comparison value.
For example, one foot corresponds to a quantity of 0.3048 meters.
Regardless of how this came about, a unit of measure can be expressed as the quantity of other units of measure of the same kind.&lt;/p&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Base-Unit&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The base unit is a well-defined unit of measurement that is defined as being dimensionally independent of other basic units of measurement.
The SI system defines only 7 basic units of measurement (including meters, kilograms and seconds) from which all other SI units of measurement are derived.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Derived-Unit&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Derived-Unit is a unit of measurement formed as the product of the results of basic units of measurement.
Some derived units of measurement have been given a special name and a symbol for convenience and ease of use.
In the SI system, special name derived units of measurement include &lt;a href=&#34;https://en.wikipedia.org/wiki/Hertz&#34;&gt;Hertz&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Newton_(unit)&#34;&gt;Newtons&lt;/a&gt;
and &lt;a href=&#34;https://en.wikipedia.org/wiki/Volt&#34;&gt;Volts&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;System-of-Units&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A system of units is a set of basic and derived units of measure chosen as standards for specifying measures.
Examples are the SI (metric) and the imperial (English) system.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Prefix (multiplier)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A prefix is a leading word that can be applied to a unit of measure to form a decimal multiplication or decrease of the unit of measure.
Prefixes are used in the SI system, which includes kilo-, centi-, mili- etc.
Other cultures and regions use multiplier systems of a similar type, some of which differ from the SI system.
Examples are the separate use of multipliers such as Lakh- (100,000) or Crore- (10 million) in countries like India or parts of the Middle East.
This can be attributed to the fact that different currency systems exist.
It can also be traced back to historical number systems, which differ from the Latin or Arabic origin of today’s western systems in some areas or are absent in these in the same form.
On the other hand, the use of others, such as a dozen, is almost unknown there.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_measurement&#34;&gt;Measurement&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In May 2019, all units are defined by constants of nature in the world-wide &lt;a href=&#34;https://en.wikipedia.org/wiki/International_System_of_Units&#34;&gt;international system of units&lt;/a&gt;.
These changes are incorporated in the newer version of the RFC and the reference implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_use_the_api&#34;&gt;How to Use the API&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JSR-385 defines the API 2.x.
Historically, JSR-363 defined the API 1.0 and is now superseded by the newer definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt;    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;javax.measure:unit-api:2.1.3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;tech.units:indriya:2.1.3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;implementation&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;tec.units:unit-ri:1.0.3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_examples&#34;&gt;Examples&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color: #953800&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Length&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;distance&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;MILLI&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;METRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;cubicMetre&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;CUBIC_METRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;litres&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;ComparableQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;cubicMetre&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;CUBIC_METRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;ComparableQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;litres&lt;/span&gt;  &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertTrue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;cubicMetre&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;compareTo&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;litres&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Speed&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;velocity&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;METRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
                                         &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;divide&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Units&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;SECOND&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt;
                                         &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;asType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Speed&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The power of the approach is in the object-oriented abstractions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;WaterTank&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;setCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;capacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;WaterTankTest&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8250df&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;givenQuantity_whenGetUnitAndConvertValue_thenSuccess&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;WaterTank&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterTank&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;WaterTank&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterTank&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;setCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Quantities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getQuantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;9.2&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertEquals&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterTank&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getUnit&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;());&lt;/span&gt;

        &lt;span style=&#34;color: #953800&#34;&gt;Quantity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Volume&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterCapacity&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterTank&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getCapacityMeasure&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;volumeInLitre&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterCapacity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;doubleValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertEquals&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;9.2&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;volumeInLitre&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;0.0f&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;conversionTest&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;volumeInMilliLitre&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterCapacity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;MILLI&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt;
                                                 &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;doubleValue&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;assertEquals&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;9200.0&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;volumeInMilliLitre&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;0.0f&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The abstractions allow compilation time detection of errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;waterCapacity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;MILLI&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;KILOGRAM&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;         &lt;span style=&#34;color: #6e7781&#34;&gt;// compilation error&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Length&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Kilometer&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;KILO&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;METRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Length&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Centimeter&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;MetricPrefix&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;CENTI&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;LITRE&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color: #6e7781&#34;&gt;// compilation error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep your unit definitions in a single place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulate your own &lt;em&gt;Quantities&lt;/em&gt; by delegation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create converters when storing units into a JPA-based persistent store.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In any case, if a unit does not exist in the system of units, you can create new units with new symbols: — &lt;em&gt;AlternateUnit&lt;/em&gt; is a new unit with the same dimension but different symbol and nature. — &lt;em&gt;ProductUnit&lt;/em&gt; is a new unit created as the product of rational powers of other units.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;units-of-measurement&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;https://unitsofmeasurement.github.io/&#34;&gt;Units of Measurement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;mars-climate-orbiter&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://en.wikipedia.org/wiki/Mars_Climate_Orbiter&#34;&gt;Mars Climate Orbiter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Yet Another Hybrid Method</title>
      <link>https://blog.tangly.net/blog/2022/yet-another-hybrid-method/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/yet-another-hybrid-method/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-04-02-head.jpg&#34; alt=&#34;2022 04 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SoDa &lt;em&gt;Software Development Agile&lt;/em&gt; is a homebrew project development method created at the &lt;a href=&#34;https://www.hslu.ch&#34;&gt;technical university of Lucerne&lt;/a&gt;.
It is a mixture of &lt;a href=&#34;https://en.wikipedia.org/wiki/Waterfall_model&#34;&gt;Waterfall&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_Unified_Process&#34;&gt;RUP&lt;/a&gt;
and &lt;a href=&#34;https://en.wikipedia.org/wiki/Scrum_(software_development)&#34;&gt;Scrum&lt;/a&gt; approaches.
It uses a distorted Scrum for the concept and implementation phase&lt;a href=&#34;#detecting-agile-bullshit&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The documentation was not updated the last ten years.
The approach is clinically dead and should not be promoted for active software development efforts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A similar approach exists with the official governmental Swiss project method &lt;a href=&#34;https://www.hermes.admin.ch/en/&#34;&gt;HERMES&lt;/a&gt;.
At least the documentation of &lt;a href=&#34;https://www.hermes.admin.ch/en//starting-page.html&#34;&gt;Hermes&lt;/a&gt; is better than SoDa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Both approaches are quite similar.
They mix a phase-based Waterfall approach with the four phases of the old &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_Unified_Process&#34;&gt;RUP&lt;/a&gt; project life-cycle approach.
RUP belongs to the family of &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Process&#34;&gt;unified process methods&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-04-02-rup-phases.jpg&#34; alt=&#34;2022 04 02 rup phases&#34; width=&#34;640&#34; height=&#34;380&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The four phases or gates are
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Inception&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;approximate vision, business case, scope, and vague estimates.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Elaboration&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;refined vision, iterative implementation of the core architecture, resolution of high risks, identification of most requirements and scope, more realistic estimates.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Construction&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;iterative implementation of the remaining lower risk and easier elements, and preparation for deployment.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Transition&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;beta tests, deployment.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are using &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt; approaches, you certainly do not need an inception or a transition phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These approaches are obsolete.
Almost no industrial service companies are explicitly using Waterfall or unified process approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For most of these organizations that take a hybrid approach, this is an interim step.
They intend to gradually expand their agile activities beyond the development and testing stages to the rest of the software development lifecycle.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Malcom Isaacs
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hermes_swiss_hybrid_method&#34;&gt;HERMES Swiss Hybrid Method&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are forced to use a hybrid method in Switzerland, please use Hermes.
Never try to use SoDa.
It is obsolete and sparingly documented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you want to be a professional developer, please use an agile approach.
Scrum is currently the most used agile approach in the industry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hermes.admin.ch/en/&#34;&gt;HERMES&lt;/a&gt; fulfills the current requirements of federal and state administration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They are mainly organized &lt;strong&gt;hierarchically&lt;/strong&gt; and have to handle projects taking governance into account.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Hermes FAQ
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The major problem is that Hermes is mandatory for a set of governmental projects.
You are forced to use this method as a software company if you want to work on some government initiatives
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The method is Swiss and completely unknown in Europe or abroad.
Swiss commercial or industrial software development initiatives never use Hermes as a development approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why_hybrid_methods_are_hindering&#34;&gt;Why Hybrid Methods are Hindering&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In his mind-expanding book &lt;em&gt;The Beginning of Infinity&lt;/em&gt;, physicist David Deutsch describes science and the enlightenment as the quest for &lt;em&gt;good explanations&lt;/em&gt;.
He explains how various ideas in human history represent a &lt;em&gt;beginning of infinity&lt;/em&gt; that allows us to cope with any conceivable relevant application of these good explanations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This idea of infinite reach or scope is true of an agile approach to development and not true of a waterfall-based approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An agile approach to software development encourages us to start work on solving problems in smaller pieces.
It encourages us to begin work before we know the answer to everything.
This approach allows us to make progress, maybe sometimes in suboptimal or even bad directions, but nevertheless, after each step, we learn something new.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This does not mean that agile thinking is perfect or the final answer.
Rather, it is an important, significant, enabling step in the direction of better performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The software product development method war is won.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile approaches as described in &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; and &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt; are the winners
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.
Eighty percent of all new software development initiatives are based on an agile approach.
The most used agile approach is &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Stop being a laggard.
Start using agile approaches and the Scrum framework.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_future_work&#34;&gt;Future Work&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly advocate discarding all hybrid methods.
No empirical evidence is available that they work is available.
Anecdotal evidence shows that they regularly fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We shall use the Scrum approach as a preferred approach for developing software application &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#professional-scrum-master-guide&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#professional-product-owner&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#mastering-professional-scrum&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.
Scrum and various Scrum scaling frameworks provide approaches for teams up to eighty developers working on the same product.
I strongly state that 99.9% of all software initiatives have smaller teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
One of the founders of Scrum strongly stated the same in a famous post
&lt;a href=&#34;https://kenschwaber.wordpress.com/2013/08/06/unsafe-at-any-speed/&#34;&gt;Unsafe at any Speed&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I strongly recommend avoiding SAFe for the following reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SAFe is complex and less agile.
It contains waterfall elements.
Their approach to software architecture is outdated and does not reflect the findings of OpenGroup, the steward of TOGAF.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.scaledagileframework.com/agile-release-train/&#34;&gt;Agile release trains&lt;/a&gt; should align teams to a shared business and technology mission.
The ideal size of a train is between 50 and 125 people working on the same product family.
Most product development initiatives are smaller.
ALl members of a train shall work on the same products.
Using the same technology stack is not a criteria to belong to the same train.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAFe is not based or using Scrum.
Their definition of Scrum master and product owner is different to the ones in &lt;a href=&#34;https://scrumguides.org/&#34;&gt;Scrum Guide&lt;/a&gt;.
Their key roles of a release train engineer &lt;em&gt;RTE&lt;/em&gt; and product management do not exist in Scrum.
They are more traditional project management roles.
All synergy effects are lost.
You must retrain your collaborators into SAFe if you go down this path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The planning and release cycle is a program increment.
The duration is typically 8 to 12 weeks long.
This is too long for agile, DevOps, or Design Thinking approaches.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-04-02-agile-vs-waterfall.png&#34; alt=&#34;2022 04 02 agile vs waterfall&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you have a choice, do not use any hybrid method.
Various studies found out that agile initiatives are three times more successful than Waterfall approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Business agility is not compatible with hybrid approaches.
Use Lean startup or design thinking frameworks to increase your business agility and adapt to market changes.
Design thinking advocates iterations of one week duration.
Therefore, product increments of three months or worst RUP phases over half a year are truly incompatible with weekly cycle-time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We train our students and collaborators in Design Thinking, Lean approaches, and Scrum framework.
We should not force them to use later obsolete methods such as V-Model, RUP, HERMES or unsupported approaches such as SODA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Be responsible.
Train adequately your collaborators&lt;a href=&#34;#scrum-master-formation&#34;&gt;[3]&lt;/a&gt;, &lt;a href=&#34;#product-owner-formation&#34;&gt;[4]&lt;/a&gt;, &lt;a href=&#34;#scrum-developer-formation&#34;&gt;[5]&lt;/a&gt; in the Scrum approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Advocate the &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;agile manifesto&lt;/a&gt; and the &lt;a href=&#34;https://agilemanifesto.org/principles.html&#34;&gt;twelve principles&lt;/a&gt; behind the manifesto.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The majority of hybrid methods I still encounter are bad rehearsal of the RUP development approach.
The unified process was defined in the nineties and is now obsolete.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;detecting-agile-bullshit&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2019/detecting-agile-bullshit/&#34;&gt;Detecting Agile Bullshit&lt;/a&gt;.
Marcel Baumann. 2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-master-formation&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2021/scrum-master-formation&#34;&gt;Scrum Master Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;product-owner-formation&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2021/product-owner-formation&#34;&gt;Product Owner Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-developer-formation&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;../../2021/scrum-developer-formation&#34;&gt;Scrum Developer Formation&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;scrum-guide&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;https://scrumguides.org/scrum-guide.html&#34;&gt;Scrum Guide&lt;/a&gt;.
Jeff Sutherland, Ken Schwaber. 2020&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;cargo-cult&#34;&gt;&lt;/a&gt;[7] &lt;a href=&#34;https://en.wikipedia.org/wiki/Cargo_cult&#34;&gt;Cargo Cult&lt;/a&gt;.
Wikipedia&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;devops-sme&#34;&gt;&lt;/a&gt;[8] &lt;a href=&#34;../../2021/devops-for-small-applications/&#34;&gt;DevOps for Small Applications&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;zero-defect&#34;&gt;&lt;/a&gt;[9] &lt;a href=&#34;../../2020/advocate-zero-bug-policy-in-your-projects/&#34;&gt;Advocate Zero Bug Policy in Your Projects&lt;/a&gt;.
Marcel Baumann. 2020&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agile-software-architecture&#34;&gt;&lt;/a&gt;[10] &lt;a href=&#34;../..//2021/what-i-learnt-teaching-agile-software-architecture/&#34;&gt;What I learnt Teaching Agile Software Architecture&lt;/a&gt;.
Marcel Baumann. 2021&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;professional-scrum-master-guide&#34;&gt;&lt;/a&gt;[1] F. Heath, &lt;em&gt;Professional Scrum Master Guide&lt;/em&gt;. Packt Publishing, Limited, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1800205562&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1800205562&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;professional-product-owner&#34;&gt;&lt;/a&gt;[2] D. McGreal and R. Jocham, &lt;em&gt;The Professional Product Owner&lt;/em&gt;. Addison-Wesley Professional [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07D5ZPJBY&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07D5ZPJBY&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;mastering-professional-scrum&#34;&gt;&lt;/a&gt;[3] S. Ockerman and S. Reindl, &lt;em&gt;Mastering Professional Scrum&lt;/em&gt;. Addison Wesley, 2019 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07XTLNPTC&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07XTLNPTC&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The description Craig Larman book &lt;em&gt;Applying UML and Patterns&lt;/em&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. The fact the method is only used in Switzerland and only when it is a mandatory requirement is a testament to its lack of success.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. &lt;a href=&#34;https://www.pmi.org/&#34;&gt;PMI&lt;/a&gt; has adopted disciplined agile. &lt;a href=&#34;https://www.opengroup.org/&#34;&gt;OpenGroup&lt;/a&gt; has updated TOGAF to support agile approaches. Major certification authorities such as &lt;a href=&#34;https://www.isaqb.org/&#34;&gt;ISAQB&lt;/a&gt;, &lt;a href=&#34;https://www.ireb.org/&#34;&gt;IREB&lt;/a&gt;, &lt;a href=&#34;https://www.istqb.org/&#34;&gt;ISTQB&lt;/a&gt; offer a track of agile certifications. You as a responsible organization shall train your collaborators in agile approaches. Stop clinging to obsolete approaches used in the last millennium.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Modern Java with Spring</title>
      <link>https://blog.tangly.net/blog/2022/modern-java-with-spring/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/modern-java-with-spring/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-03-02-head.png&#34; alt=&#34;2022 03 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; and &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt; frameworks are the standard for enterprise Java applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Spring Boot makes it easy to create stand-alone, production-grade Spring-based Applications that you can just run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They take an opinionated view of the Spring platform and third-party libraries, so you can get started with minimum fuss.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most Spring Boot applications need minimal Spring configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_minimize_boilerplate_code&#34;&gt;Minimize Boilerplate Code&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the key reasons for the success of Spring is the approach of &lt;em&gt;convention over configuration&lt;/em&gt;.
You want to minimize boilerplate code and never have to write XML configuration files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A lot of approaches, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_transfer_object&#34;&gt;DTO&lt;/a&gt; force developers to write useless boilerplate code.
Try to avoid these cumbersome tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; to create Java bean accessors methods and provide a builder to create instances.
Always consider using modern constructs such as &lt;em&gt;record&lt;/em&gt; and &lt;em&gt;sealed class&lt;/em&gt; to improve the legibility of your design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Transform your objects with &lt;a href=&#34;https://mapstruct.org/&#34;&gt;MapStruct&lt;/a&gt; library or similar ones.
Better minimize the usage of &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_transfer_object&#34;&gt;data transfer objects&lt;/a&gt; &lt;em&gt;DTO&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Deploy as an executable application.
You do not need an application server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Package the whole application in a docker image for integration and testing activities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lightweight_database&#34;&gt;Lightweight Database&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your services need to store persistent information in a database.
Spring framework promotes an SQL database and JPA as object mapper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A lightweight approach simplifies local development and speed-up the integration testing through your CI/CD pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our current approach is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;use &lt;a href=&#34;http://hsqldb.org/&#34;&gt;HyperSQL&lt;/a&gt; embedded database for local development and continuous integration pipeline.
No need to install database software and fast turnaround during development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isolate domain persistent data in separate databases or schemas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;control your persistent design using the Spring &lt;em&gt;schema.sql&lt;/em&gt; and &lt;em&gt;data.sql&lt;/em&gt; description files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use views for read-only complex models.
Always implement business logic in Java.
Prohibit integrity constraints between schemas to respect the principles of domain-driven design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;a href=&#34;https://flywaydb.org/&#34;&gt;Flyway&lt;/a&gt; to update database schema and migrate persistent information into the new database schema.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use Spring mechanisms to load technical test data into the database before running automated integration tests.
Professional software development requires the creation and maintenance of a technical test database.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Define a schema per domain to isolate your domain model in the database.
Use the Spring files &lt;em&gt;schema.sql&lt;/em&gt; to define a clean database model.
Do not define any integrity rules between schemas to insure modularity of your bounded domains down to the persistence layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JPA supports schemas through a standard annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;javax.persistence.Entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;javax.persistence.Table&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #8250df&#34;&gt;@Entity&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@Table&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Appointments&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Calendar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Appointments&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The name field defines the name of the table for all appointments, the schema field defines the schema containing the table.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Views for read-only objects Business logic should be in services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_fluent_getter_and_setter&#34;&gt;Fluent Getter and Setter&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Spring Persistence and JPA Extends persistence to support Java abstractions such as enumeration sets&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use record construct for immutable entities&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Configure Jackson&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;com.fasterxml.jackson.annotation.JsonAutoDetect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;com.fasterxml.jackson.annotation.JsonIgnoreProperties&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;lombok.Data&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;lombok.NoArgsConstructor&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #8250df&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@JsonIgnoreProperties&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;hibernateLazyInitializer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@JsonAutoDetect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fieldVisibility&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;JsonAutoDetect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Visibility&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ANY&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Appointments&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Configure lombok through &lt;em&gt;lombok.config&lt;/em&gt; configuration file at the root of your project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code&gt;lombok.accessors.chain=false &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
lombok.accessors.fluent=true &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
config.stopBubbling = true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;traditional accessors without a chaining feature.
It is fully compatible with the approach provided by records.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;discard legacy get and set verbs for getters and setters&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Libraries such as Lombok, Jackson, JOOQ, Hibernate, MapStruct, Spring, Spring Boot have support for abstractions using the fluent approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fluent getters are standard with the official Java record feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_eliminate_dto&#34;&gt;Eliminate DTO&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JSON objects are your data transfer objects JSON schema define the data model and validate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use annotation to remove AOT artifacts generated through JPA enhancements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use annotation to coerce Jackson to not request old fashion property getters and setters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure Jackson to support records.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use plain old Java objects &lt;em&gt;POJO&lt;/em&gt; to exchange information between layers inside a Java application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you have to return complex aggregated objects for a persistence store, use views, persistent layer queries to populate read-only objects.
Java provides the &lt;em&gt;record&lt;/em&gt; construct for such situations.
The need to define frequent queries to generate aggregate views are a smell that your design has flaws.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_schedulers_in_spring&#34;&gt;Schedulers in Spring&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Scheduled jobs are easy to defined and use with Spring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please do not use homebrew solutions or cron jobs.
The Spring scheduler component is powerful enough for most of the scenarios.
It builds up on the features of &lt;em&gt;ScheduledExecutorService&lt;/em&gt; provided in the standard Java API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@Slf4j&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@Service&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@Transactional&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;AppointmentScheduler&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;AppointmentService&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;service&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;AppointmentScheduler&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;AppointmentService&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;service&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;service&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;service&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Scheduled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fixedDelay&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;sendAppointmentRatingEmails&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Scheduled task to send appointment rating emails {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LocalDateTime&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;service&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;sendRatingPendingEmails&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_user_interface&#34;&gt;User Interface&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use Vaadin for internal applications and B2B applications.
Vaadin is a good approach up to a few thousand active users.
Vaadin is a Java solution based on the same technology stack used in Spring.
Support libraries and tutorials are provided by Vaadin to integrate the Spring framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use Thymeleaf and Bootstrap for B2C applications.
These frameworks introduce new technologies.
Developers shall be trained to avoid bad solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use AngularJS or VueJS if you have a lot of budget.
These frameworks introduced a technology stack based on JavaScript or ideally on Typescript.
New versions of the Typescript language and of the user interface framework are released every few months.
Experience shows that a major rework of the source code and design decisions is necessary at least every eighteen months.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_master_advanced_jpa_concepts&#34;&gt;Master Advanced JPA Concepts&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We had to find ways to support standard API classes in the Spring and JPA worlds.
We had an enumeration set property we needed to persist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@Entity&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@Table&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Ratings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;Calendar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@JsonIgnoreProperties&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;hibernateLazyInitializer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@JsonAutoDetect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fieldVisibility&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;JsonAutoDetect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;Visibility&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ANY&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Rating&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Serializable&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8250df&#34;&gt;@Converter&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;RatingTagsConverter&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EnumSetConverter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;RatingTags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;RatingTags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;RatingTags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Column&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #8250df&#34;&gt;@Convert&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;converter&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;RatingTagsConverter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EnumSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;RatingTags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The generic converter for the regular enumeration set Java class is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;/**
* Provides an enumeration set converter to enable storing and retrieving enumeration sets for the persistent store.
*
* @param &amp;lt;T&amp;gt; Enumeration type of the set
*/&lt;/span&gt;
&lt;span style=&#34;color: #8250df&#34;&gt;@Converter&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EnumSetConverter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;AttributeConverter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;EnumSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;SEPARATOR&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;convertToDatabaseColumn&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;EnumSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;Enum:&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Collectors&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;joining&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;SEPARATOR&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EnumSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;convertToEntityAttribute&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Strings&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;isBlank&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;?&lt;/span&gt;
                &lt;span style=&#34;color: #953800&#34;&gt;EnumSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;noneOf&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #953800&#34;&gt;Arrays&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;SEPARATOR&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;trim&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()))&lt;/span&gt;
                &lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Collectors&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;toCollection&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EnumSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;noneOf&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())));&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;/**
     * Return the class of the enumeration type stored in the enumeration set.
     * The method is necessary due to type erasure in Java generics.
     *
     * @return class of the enumeration type
     */&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Different approaches found on Stackoverflow or Spring blogs did not work.
I was stunned by the amount of code that I needed to write to persist a standard Java API collection class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tips_and_tricks&#34;&gt;Tips and Tricks&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use the Spring mechanisms to streamline unit and integration tests.
Please, write unit and integration tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Train all the developers in Spring framework
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
The organization shall encourage certification in key technologies used in their mission-critical applications.
You need at least one professional Spring developer to smooth the learning curve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the latest Java version.
Motivate your experts and allow them to work with current environments and libraries.
Professional developers do not like to work with obsolete tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; as an integrated development environment.
The environment increases the productivity of your development teams.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. &lt;a href=&#34;https://spring.io/&#34;&gt;Spring organization&lt;/a&gt; provides &lt;a href=&#34;https://spring.academy/courses&#34;&gt;certification path&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Immutability in Java</title>
      <link>https://blog.tangly.net/blog/2022/immutability-in-java/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/immutability-in-java/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-02-head.jpg&#34; alt=&#34;2022 01 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Immutable_object&#34;&gt;Immutability&lt;/a&gt; is a powerful and simple concept in programming theory that is strangely underused.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An &lt;a href=&#34;https://en.wikipedia.org/wiki/Immutable_object&#34;&gt;immutable object&lt;/a&gt; is simply a class whose instances cannot be modified.
This is in contrast to a mutable object or changeable object, which can be modified after it is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Immutable objects are also useful because they are inherently thread-safe.
Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All the information contained in each instance is provided when it is created and is fixed for the lifetime of the object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An example of immutable objects in Java is the &lt;em&gt;String&lt;/em&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Why are immutable objects so good?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advantages&#34;&gt;Advantages&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are many reasons for sure, here are the three main ones:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Protection Against Programming Errors&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We can send an immutable object to any class without worrying about it being altered by that class.
We never have to make a defensive copy.
The same applies when we get an instance for local storage in a cache.
We do not have to worry about whether the provider will hold on to a reference and change it later, invalidating our cache without our knowledge.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Performance&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We do not have to make defensive copies all the time.
This means that we save some work on the garbage collector which increases performance and decreases memory overhead.
We all want that, don’t we?&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Thread Safety&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;After creation, any number of threads can access immutable objects simultaneously, without any synchronization mechanism.
It is a huge advantage in the modern world of multicore processors.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_immutable_classes&#34;&gt;Immutable Classes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The class must be declared as &lt;em&gt;final&lt;/em&gt;.
So those mutable child classes cannot be created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data members in the class must be declared as &lt;em&gt;private&lt;/em&gt;.
Direct access to member variables is prohibited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data members in the class must be declared as &lt;em&gt;final&lt;/em&gt;.
We cannot change the value of it after object creation.
Java requires that all final properties must be initialized in the constructor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No setters are provided to change the value of an instance variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A parameterized constructor should initialize all the fields performing a deep copy.
Data members cannot be modified through external object reference.
This is also called reference &lt;a href=&#34;https://en.wikipedia.org/wiki/Aliasing_(computing)&#34;&gt;aliasing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the instance fields include references to mutable objects, do not allow those objects to be changed:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do not provide methods that modify the mutable objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not share references to the mutable objects.
Never store references to external, mutable objects passed to the constructor.
If necessary, create copies, and store references to the copies.
Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java &lt;em&gt;record&lt;/em&gt; construct &lt;a href=&#34;#java-record&#34;&gt;[1]&lt;/a&gt; implements most of the above constraints.
The major limitation is that Java records do not perform any deep copies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Records provide secure serialization and deserialization mechanisms.
Use records as Java DTO objects and automatically improve the security of your application.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Therefore, Java records are shallow immutable objects.
If you pass immutable objects to the constructor, you will achieve deep immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_immutable_api_classes&#34;&gt;Immutable API Classes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java already has an extended and expanding set of immutable classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All wrapper classes in &lt;em&gt;java.lang&lt;/em&gt; package are immutable.
These are String, Character, Boolean, Byte, Short, Integer, Long, Float, Double.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The class java.awt.Rectangle encapsulates the position and dimension of a rectangle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.lang.StackTraceElement (used in building exception stack traces).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most enum classes are immutable, but this in fact depends on the concrete case.
Do not implement mutable enums, this will screw.
All enum classes are immutable in the standard API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.math.BigInteger and java.math.BigDecimal,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.io.File represents a file in a local or remote file system.
A file may or may not exist, and has some methods modifying and querying the state of this external object.
But the File object itself stays immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.util.Locale - representing a specific geographical, political, or cultural region,&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_builder_pattern&#34;&gt;Builder Pattern&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Immutable abstractions have often verbose and cumbersome constructors.
You want to provide a more elegant approach to create instances of your immutable classes.
The builder pattern is ideal for creating immutable instances through legible and maintainable code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Writing builders is a tedious and repetitive activity.
Consider using the &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok Project&lt;/a&gt; to generate builders.
The lombok annotations &lt;em&gt;@Builder&lt;/em&gt; and &lt;em&gt;@Superbuilder&lt;/em&gt; are time savers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Provide factory methods to create often used immutable objects.
Use the builder in the body to write the creation code in one Java statement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_read_only_interface_pattern&#34;&gt;Read-only interface pattern&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read-only interface pattern is an alternative to the Immutable object pattern.
It allows some objects to modify a value object while other objects can only fetch its values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-record&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2020/java-records-are-here-available-in-jdk-14/&#34;&gt;Java Records are Here&lt;/a&gt;.
Marcel Baumann. 2020&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;oracle-record&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://docs.oracle.com/en/java/javase/16/language/records.html&#34;&gt;Record Classes&lt;/a&gt;.
Oracle&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Technical Debt</title>
      <link>https://blog.tangly.net/blog/2022/technical-debt/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/technical-debt/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-03-head.png&#34; alt=&#34;2022 01 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt; or code debt is a concept in software development that reflects the implied cost of additional rework.
The rework is caused by choosing an easy limited solution now instead of using a better approach that would take longer to realize.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another source of technical debt is natural &lt;a href=&#34;https://en.wikipedia.org/wiki/Obsolescence&#34;&gt;technical obsolescence&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As with monetary debt, if technical debt is not repaid, it accumulates &lt;em&gt;interest&lt;/em&gt;, making it harder and harder to implement changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unaddressed technical debt increases software entropy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Spiraling out of control entropy is the death of countless software solutions over the last century.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Similarly to monetary debt, technical debt is not necessarily a bad thing.
Sometimes, as e.g., a proof-of-concept is required to move projects forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some experts claim that the &lt;em&gt;technical debt&lt;/em&gt; metaphor tends to minimize the ramifications, resulting in insufficient prioritization of the necessary work to correct it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Shipping first time code is like going into debt.
A little debt speeds development as long as it is paid back promptly with a rewrite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The danger occurs when the debt is not repaid.
Every minute spent on not-quite-right code counts as interest on that debt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object-oriented or otherwise.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Ward Cunningham&lt;br/&gt;
&lt;cite&gt;1992&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_eliminate_technical_debt&#34;&gt;How to Eliminate Technical Debt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use static analysis tools to detect technical debt in your source code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the features of your IDE
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;
to perform simple refactorings and improve the quality of your code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use your IDE to find all TODO comments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use your IDE to find and remove commented-out lines of code.
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; was created to keep track of your modifications.
Keep your source code free of obsolete and unused code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; plugin
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;
To update your libraries and remove technical obsolescence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please use the current version of your technical stack and build toolchain.&lt;br/&gt;
Update your Java version when the next one is coming out.
You have access to better libraries, interfaces, and runtime engines.
Known security flaws were corrected.
Defects were removed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each technological stack is gifted with open source and commercial static analysis tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sonarsource.com/products/sonarlint/&#34;&gt;SonarLint&lt;/a&gt; supports all major languages and development environments.
You will find a &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis&#34;&gt;list of tools for static code analysis&lt;/a&gt; for all major programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A professional software developer shall use these tools to validate and improve her source code.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_should_you_reimburse&#34;&gt;Should You Reimburse?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-03-technical-debt.png&#34; alt=&#34;2022 01 03 technical debt&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We learnt this lesson during our economic training in college.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A little debt is OK.&lt;br/&gt;
Big debts will poison your life and source code.&lt;br/&gt;
Big debts are cumbersome to repay.&lt;br/&gt;
You need efforts and time for a payback.&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The lesson is to close your debts before they are too big to be managed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You will otherwise bankrupt either your bank account or the source code of your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Maintenance&#34;&gt;Preventive maintenance&lt;/a&gt; is a learnt technique for technical products.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_measure_technical_debt&#34;&gt;How to Measure Technical Debt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here are some approaches to quantify the technical debt of a product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;New Bugs versus Closed Bugs&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Every known bug is essentially a tiny sliver of technical debt.
If you want to know your total debt, it is important for your engineers to keep a tally.
Assuming your engineers make a note in git when bugs are fixed, you can calculate how effectively you are managing your technical debt.
If new bugs are outnumbering closed bugs, you need to make some changes.&lt;br/&gt;
&lt;em&gt;Zero bug policy &lt;a href=&#34;#zero-defect&#34;&gt;[1]&lt;/a&gt; nicely reimburse this technical debt.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Code Quality&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Complex code is a sure sign of growing technical debt.
At some point, someone is going to have to unravel that mess.
Code quality is an aggregation of several metrics that quantify the overall quality and complexity of your code:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Smells and potential errors detected through static analysis tools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cyclomatic complexity, method size, class size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Class and package coupling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depth of inheritance&lt;br/&gt;
&lt;em&gt;Continuous fitness functions &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#building-evolutionary-architectures&#34;&gt;1&lt;/a&gt;]&lt;/span&gt; based on static code analyzers are the way to detect this technical debt cite:clean-code,clean-coder,clean-architecture].&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Cycle Time&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This measures the amount of time that passes between the definition of the change, the first commit, and deployment.
You need to study the time it takes to make changes to existing code and to solve problems without using quick fixes.
If your engineers are spending hours fixing small bugs, you know that there is some technical debt lurking in your code.&lt;br/&gt;
&lt;em&gt;Your agile and Scrum tool provides cycle time data &lt;a href=&#34;#metricsandkpi&#34;&gt;[4]&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Code Coverage&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;In a sense, the code coverage metric looks at the same issue from the opposite direction.
In this case, you are measuring how much of your code is executed when you run your testing suite.
The more lines that are unused, the more likely it is that you have poorly written code.&lt;br/&gt;
&lt;em&gt;Code coverage tools such as Jacoco provide these values &lt;a href=&#34;#agilecode&#34;&gt;[3]&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Code Ownership&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;If you get too many people working on the same tasks, you can easily end up with a steaming pile of cruft.
That said, you do not want only one engineer taking ownership of an entire project.
If they get sick or leave your organization, it is game over.&lt;br/&gt;
&lt;em&gt;Social aspects can easily be measured in a code repository &lt;a href=&#34;#codecrimescene&#34;&gt;[2]&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_continuously_improve&#34;&gt;How to Continuously Improve&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A powerful approach is zero defect source code &lt;a href=&#34;#zero-defect&#34;&gt;[1]&lt;/a&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-01-03-retrospective.png&#34; alt=&#34;2022 01 03 retrospective&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can start very simply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Track locations of technical debts with &lt;em&gt;TODO&lt;/em&gt; and &lt;em&gt;FIXME&lt;/em&gt; comments as a first step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next time you have to modify source code in a package, use your IDE features to find all &lt;em&gt;TODO&lt;/em&gt; in the package you are working on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix at least one such comment and improve the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat and over time, your technical debt will slowly diminish.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fixing technical debt is not rocket science.
It means to have discipline and behave like a professional software developer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Technical debt does not appear overnight.
Debt increases slowly but steadily.
Big debt clearly shows the organization was unprofessional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Investing a small amount for continuously improving your source code base is the most effective approach to avoid technical debt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use an actual version of your technology stack.&lt;br/&gt;
You must anyway upgrade your stack if your product is under active development.
So why do you wait and lose capabilities to improve?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update monthly the libraries you use.
Updates often close security vulnerabilities in your code.
You have a legal responsibility to secure your code and protect your users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the static quality checkers and refactoring features of your development environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only refactor code you have to change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply the boy scout rule &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-coder&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#clean-craftsmanship&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.
Leave the code in a better state as it was when you started.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Train your developer in refactoring and clean code practices &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#refactoring-2nd&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#refactoring-to-patterns&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;6&lt;/a&gt;]&lt;/span&gt;.
Beware technical debt is also created through:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lack of knowledge, when the developer doesn’t know how to write elegant code,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lack of ownership, when outsourced software efforts result of in-house engineering being required to refactor or rewrite outsourced code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Professional software developers deeply understand the impacts of technical debt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Amateurs just ignore the consequences and hop to the next product before they go bankrupt.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;zero-defect&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2020/advocate-zero-bug-policy-in-your-projects/&#34;&gt;Advocate Zero Bug Policy in Your Projects&lt;/a&gt;.
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;codecrimescene&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;../../2019/code-scene-as-crime-scene/&#34;&gt;Code Scene as Crime Scene&lt;/a&gt;.
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;agilecode&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;../../2019/agile-code-is-clean-code/&#34;&gt;Agile Code is Clean Code&lt;/a&gt;.
Marcel Baumann, 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;metricsandkpi&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;../../2018/why-do-you-need-metrics-and-kpi-in-agile-product-development/&#34;&gt;Why Do You Need Metrics and KPI in Agile Product Development?&lt;/a&gt;.
Marcel Baumann. 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures&#34;&gt;&lt;/a&gt;[1] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Support Constant Change&lt;/em&gt;, First. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491986360&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491986360&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-craftsmanship&#34;&gt;&lt;/a&gt;[3] R. C. Martin, &lt;em&gt;Clean Craftsmanship&lt;/em&gt;. Addison-Wesley Professional, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B095C16LSW&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B095C16LSW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-2nd&#34;&gt;&lt;/a&gt;[4] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-to-patterns&#34;&gt;&lt;/a&gt;[5] J. Kerievsky, &lt;em&gt;Refactoring to Patterns&lt;/em&gt;. Addison-Wesley Professional, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321213351&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321213351&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[6] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; IDE has a powerful set of functions to detect code smells and perform automatically standard refactoring activities. The &lt;a href=&#34;https://www.sonarlint.org/&#34;&gt;Sonar Lint&lt;/a&gt; plugin for various IDEs to detect quality and security issues in your code.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. I use the &lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin&#34;&gt;com.github.ben-manes.versions&lt;/a&gt; for this purpose. The plugin handles nicely multi-modules projects. The plugin also supports the central declaration of dependencies feature in Gradle.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Gradle 7</title>
      <link>https://blog.tangly.net/blog/2021/gradle-7/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/gradle-7/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-11-02-head.png&#34; alt=&#34;2021 11 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; is my preferred build tool for all Java applications I am developing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Google chose Gradle as the official build tool for Android.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Not only because build scripts are code, but because Gradle is modeled in a way that is extensible in the most fundamental ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle’s model also allows it to be used for native development with C/C++ and can be expanded to cover any ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For example, Gradle is designed with embedding in mind using its Tooling API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are my preferred goodies with the major version 7?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_java_module_native_support&#34;&gt;Java Module Native Support&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java modules were introduced with Java 9 in September 2017.
Adoption was slow.
Developers needed time to understand the tremendous advantages of language and compiler support of modules.
Tooling was also a problem.
It was cumbersome and error-prone to create Java modules either using the command line and experimental plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; version 7 finally supports Java modules natively.
Just use the &lt;em&gt;java-library&lt;/em&gt; plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The plugin will detect the presence of a &lt;em&gt;module-info.java&lt;/em&gt; module declaration file and transparently switch to module compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_dependencies_semantic_declaration&#34;&gt;Dependencies Semantic Declaration&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Gradle team has decided to introduce semantic support for the declaration of dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All dependencies of a multi-module Java application are declared in a central file.
The &lt;em&gt;libs.versions.toml&lt;/em&gt; file under the gradle subdirectory of the root build can contain all plugin and library dependencies.
The declarations can be used in all subprojects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Support is provided to group a set of related dependencies and use the alias in the various Gradle modules.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_intellij_support&#34;&gt;IntelliJ Support&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Jetbrains has improved support of Gradle in their new releases of IntelliJ.
The 2021 versions offer native support of Gradle.
Native support means IntelliJ finally uses Gradle for compilation and unit testing inside the IDE.
You just need to take care of one build configuration and no more need to delve in the mysteries of IntelliJ build process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The only glitch is that IntelliJ has its own concept of modules and are not synchronized with the Gradle modules.
You have to be careful to align both structures to avoid surprises.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_jacoco_aggregated_test_coverage_reports&#34;&gt;Jacoco Aggregated Test Coverage Reports&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The support for coverage reports over multiple gradle subprojects is still limited.
I use the following configuration to generate aggregated coverage report over all gradle modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;jacoco&amp;#39;&lt;/span&gt;      &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jacoco&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;                    &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;toolVersion&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;0.8.7&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jacocoTestReport&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;          &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dependsOn&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;test&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reports&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;xml&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;jacocoRootReport&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;JacocoReport&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;      &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;subprojects&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;subproject&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;subproject&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;plugins&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;withType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;JacocoPlugin&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;configureEach&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;subproject&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;matching&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;extensions&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;findByType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;JacocoTaskExtension&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;configureEach&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testTask&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;sourceSets&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;subproject&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;sourceSets&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;main&lt;/span&gt;
                &lt;span style=&#34;color: #8250df&#34;&gt;executionData&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;testTask&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;subproject&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;matching&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;extensions&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;findByType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;JacocoTaskExtension&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;forEach&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;rootProject&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;jacocoRootReport&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;dependsOn&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reports&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;xml&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;withType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;Test&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;finalizedBy&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jacocoTestReport&lt;/span&gt;        &lt;i class=&#34;conum&#34; data-value=&#34;5&#34;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    &lt;span style=&#34;color: #8250df&#34;&gt;useJUnitPlatform&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jvmArgs&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;--enable-preview&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;-XX:+ShowCodeDetailsInExceptionMessages&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reports&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;junitXml&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;mergeReruns&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;setExcludeTags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;integration&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;maxParallelForks&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;failFast&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Import the Jacoco plugin in the project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Allows the selection of the Jacoco version.
I found it useful when using the latest JDK version.
JaCoCo developers have a slow release rhythm.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure JaCoCo to generate a html and an XML report.
The binary report is no more supported by external tool.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;5&#34;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure JaCoCo test report to be generated after the running of a test task&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle has finally new plugins to better generate unit tests and test coverage reports for a multi-module project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;test-report-aggregation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jacoco-report-aggregation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new approach to create aggregated reports is described in &lt;a href=&#34;../../2022/multi-module-test-reporting-with-gradle-7.x/&#34;&gt;Multi-module Test Reporting with Gradle 7&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_wishes&#34;&gt;Wishes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I would greatly appreciate if the JaCoCo Gradle plugin is improved and align with the features of the Maven plugin.
The process to aggregate the coverage reports on a multi-module project is cumbersome and brittle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I am waiting for the Gradle 7.3 release to have native support of JDK 17.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;
The tool chain supports the newer JDKs without trouble but Gradle can only run with JDK 16 or older versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Gradle 7.3 was released in the first half of November 2021. JDK 17 is now natively supported. As usual the early version of the next JDK - in this case JDK 18 - is only currently supported through the toolchain feature.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: JDk 17</title>
      <link>https://blog.tangly.net/blog/2021/jdk-17/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/jdk-17/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-10-02-head.png&#34; alt=&#34;2021 10 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I truly love the new release rhythm of the Java ecosystem.
Every six months a new JDK is delivered.
Being able to use new features every six months is awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new release JDK 17 &lt;a href=&#34;#jdk-17&#34;&gt;[3]&lt;/a&gt; is the next long term support &lt;em&gt;LTS&lt;/em&gt; release.
The migration overhead is held to a minimum thanks to the incredible backward compatibility.
The early-access builds give you more than enough opportunities and time to migrate all your applications on time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new features greatly simplify existing code and tremendously increase code legibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;Algebraic data types&lt;/a&gt; are now complete with the official release of &lt;em&gt;records&lt;/em&gt; and &lt;em&gt;sealed types&lt;/em&gt;.
The advanced &lt;a href=&#34;https://en.wikipedia.org/wiki/Pattern_matching&#34;&gt;pattern matching&lt;/a&gt; constructs enhance the functional programming capabilities in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Polishing of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt; approach improved my source code quite stupendously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why_should_you_upgrade&#34;&gt;Why Should You Upgrade?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Be honest.
It is more a question of &lt;strong&gt;when&lt;/strong&gt;, rather than &lt;strong&gt;if&lt;/strong&gt; you will upgrade.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Why should you actually upgrade your application?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every Java version, even minor versions offer performance benefits, but also &lt;em&gt;security fixes&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other useful extras that make your application more robust and better maintainable are often part of a new release,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It includes cool features.
For instance, the recently released Java records, sealed types, or the pattern matching functionality,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduce attack surface by updating project dependencies proactively,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduce technical debt and most importantly, prepare your project for the new and dynamic modern Java world,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take advantage of &lt;em&gt;performance improvements&lt;/em&gt; on new JVM version,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take advantage from improvements of Java as programming language,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sleep better by having a more secure, efficient and quality product.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have noticed that a lot of applications are still on Java 8.
Java 8 was released in March 2014.
Businesses often say, we do not have time to invest now. &lt;em&gt;They are saying we prefer to accumulate technical debt&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Non-experts often estimate that it is a lot of work, maybe even weeks or months of work to upgrade from one LTS version to the next LTS version of Java.
It is seen as a challenge difficult to estimate, and is automatically postponed.
That is not a good approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are still on Java 8, the licensing situation is may be problematic.
Like all JDKs past their end of public updates, you now have to pay for support, or you must use a free OpenJDK 8u build which&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;only contains backport patches that do not cover the entire JDK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;predates the full open-sourcing, so is not identical to the old Oracle JDK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So not only is the license for versions starting with 11 better than ever in Java’s history, the licensing situation for 8 is not that good.
Java 8 is well past its free support period.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Licensing alone is a reason to update.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I try to make it more practical.
Actually, in the case of the weeks to months&amp;#39; estimation, I often managed to migrate the application in a couple of days.
It is often a matter of simply trying it, and if you are lucky, you manage to upgrade it quite easily.
Depending on what dependencies you use, or what code bases you use, it might be a bigger challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The usual discussion about Oracle Java licensing is the typical &lt;a href=&#34;https://en.wikipedia.org/wiki/Fear,_uncertainty,_and_doubt&#34;&gt;FUD&lt;/a&gt; regarding Java and Oracle.
OpenJDK and Oracle Java are as different as Red Hat Fedora and Red Hat Enterprise Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you do not want to pay for Red Hat Enterprise Linux support, just go with Fedora, or any other Linux distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is exactly the same with Java distributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_should_you_migrate_everytime&#34;&gt;Should You Migrate Everytime?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Should we stick to using LTS versions, or should we use the latest versions of Java
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;?
If you have the time available, I would recommend using the latest version of Java because you can use the new features and improvements.
It always increases developer productivity and application reliability
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.
You have to do it every six months, because you cannot use the new minor versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you do not have that time available to upgrade every six months, you might opt to using only the long term support versions.
However, then, each time you need to upgrade your long term support version, that actually might take quite a bit more time as well.
In the end, I think staying on long term support versions or using the latest version should not differ much in the investment in upgrading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-important&#34; title=&#34;Important&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JDK 17 &lt;strong&gt;is&lt;/strong&gt; a LTS version.
You must anyway migrate to JDK 17.
The only discussion point is &lt;strong&gt;when&lt;/strong&gt; and certainly &lt;strong&gt;not if&lt;/strong&gt;.
Decide&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;You are a laggard organization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Start to plan your migration and allocate needed resources and budget to the migration.
You should hope your competition will not release new features and beat you.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;You are a modern organization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You are already migrating to JDk 17 and will complete it in the next months.
The discussion is moot.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;You are a DevOps organization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You have already completed migration.
Congratulations, you can focus on business value and beat your competitors.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_big_is_the_migration_effort&#34;&gt;How Big is the Migration Effort?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we start developing against the new Java version, it’s recommended to start with your local machine, get that up and running first.
Then upgrade your build environment, so it supports the latest version of Java.
Get everything built and tested over there.
Then at the end, release it to the other environments, including the production environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When upgrading Java, you might upgrade from 8 to 17 at once.
If you have encountered any issues, it might be hard to pinpoint what’s caused the exact issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Therefore, it might be better to do the migration, step by step.
Maybe you migrate from 8 to 11 first, or maybe from 8 to 9.
If you encounter any issues, you can easily see what’s changed in that Java version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Answers can often be found through Google or StackOverflow.
That way, it is easier to get the upgrades done instead of in one big bang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, even after years of experience, I cannot estimate how long an upgrade will take without having in-depth information about the project.
A lot depends on how many dependencies your application has.
Often, upgrading your dependencies to the latest version resolves many of the issues that would occur during a Java upgrade.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do we move forward?
Now we start by compiling the source code on the new Java version, we run it.
If that succeeds, and we make the necessary fixes, we go to running the unit tests.
If we fix that as well, we can package the application, and in the end, we can run the application.
Based on the nice ingredients, we should get a nice result.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_new_features&#34;&gt;New Features&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The official list of new features is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/306&#34;&gt;JEP 306&lt;/a&gt; - Restore Always-Strict Floating-Point Semantics&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Very useful if you are a mathematical library developer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/356&#34;&gt;JEP 356&lt;/a&gt; - Enhanced Pseudo-Random Number Generators&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Simpler usage of random generators in the API&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/382&#34;&gt;JEP 382&lt;/a&gt; - New macOS Rendering Pipeline&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Support of Metal graphics API on &lt;a href=&#34;https://en.wikipedia.org/wiki/MacOS&#34;&gt;macOS&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/391&#34;&gt;JEP 391&lt;/a&gt; - macOS/AArch64 Port&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Support of Apple proprietary processors based on the ARM architecture&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/398&#34;&gt;JEP 398&lt;/a&gt; - Deprecate the Applet API for Removal&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Applets are dead for years, now the associated API is deprecated and will be removed in the future&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/403&#34;&gt;JEP 403&lt;/a&gt; - Strongly Encapsulate JDK Internals&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Stop using unsafe operations in your libraries.
Use the JDK tools to identify suitable supported classes with the same functionality&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/406&#34;&gt;JEP 406&lt;/a&gt; - Pattern Matching for switch (Preview)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Pattern matching is the new kid on the block.
We have now nice features for the switch expression.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/407&#34;&gt;JEP 407&lt;/a&gt; - Remove RMI Activation&lt;/dt&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/409&#34;&gt;JEP 409&lt;/a&gt; - Sealed Classes&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Sealed class release completes the implementation of &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;algebraic data types&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/410&#34;&gt;JEP 410&lt;/a&gt; - Remove the Experimental AOT and JIT Compiler&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Nobody uses them.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/411&#34;&gt;JEP 411&lt;/a&gt; - Deprecate the Security Manager for Removal&lt;/dt&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/412&#34;&gt;JEP 412&lt;/a&gt; - Foreign Function &amp;amp; Memory API (Incubator)&lt;/dt&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/414&#34;&gt;JEP 414&lt;/a&gt; - Vector API (Second Incubator)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Cool feature supporting &lt;a href=&#34;https://en.wikipedia.org/wiki/SIMD&#34;&gt;SIMD&lt;/a&gt; hardware.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;&lt;a href=&#34;https://openjdk.org/jeps/415&#34;&gt;JEP 415&lt;/a&gt; - Context-Specific Deserialization Filters&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Increase security.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new features you should use on a daily basis are described bellow.
They will impact the appearance and legibility of your source code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_algebraic_types&#34;&gt;Algebraic Types&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records &lt;a href=&#34;#java-records&#34;&gt;[1]&lt;/a&gt; are immutable classes.
A record and all associated operations are defined in one statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;lastname&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;firstname&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LocalDate&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;birthday&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sealed classes are a powerful constructs to constrain your inheritance hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pattern_matching_for_switch&#34;&gt;Pattern Matching for Switch&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A preview of pattern matching for switch extends the language of patterns in Java.
It allows switch expressions and statements to be tested against a number of patterns, each with a specific action.
This enables complex data-oriented queries to be expressed concisely and safely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Among the goals of this feature include expanding the expressiveness and application of switch expressions and statements by enabling patterns to appear for labels, relaxing the historical null-hostility of switch when desired, and introducing two kinds of patterns: guarded patterns, which allow pattern matching logic to be refined with arbitrary Boolean expressions, and parenthesized patterns, which resolve some parsing ambiguities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In JDK 16 &lt;a href=&#34;#jdk-16&#34;&gt;[2]&lt;/a&gt;, the &lt;em&gt;instanceof&lt;/em&gt; operator was extended to take a type pattern and perform pattern matching.
The modest extension proposed allows the familiar instanceof-and-cast idiom to be simplified.
The implementation of the &lt;em&gt;boolean equals(Object o)&lt;/em&gt; method is reduced to one expression without any conditional statement.
&lt;em&gt;Try the new implementation in your code&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should use &lt;em&gt;Streams&lt;/em&gt; in all your code fragments.
Stream concepts were introduced with Java 8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The majority of your loops and conditional statements shall be replaced with stream pipelines and operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your methods should not return null values.
The specialized stream &lt;em&gt;Optional&amp;lt;T&amp;gt;&lt;/em&gt; was added to provide a better approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;java-records&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2020/java-records-are-here-available-in-jdk-14/&#34;&gt;Java Records Are Here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;jdk-16&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://openjdk.org/projects/jdk/17/&#34;&gt;Open JDK 16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;jdk-17&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;https://openjdk.org/projects/jdk/17/&#34;&gt;Open JDK 17&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Beware the Java architects announced with the release of Java 17 that LTS releases will be released every two years. Until now the release cycle was three years
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Do not underestimate how more motivated developers are if they can use actual techniques and language features.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Technical Team Lead</title>
      <link>https://blog.tangly.net/blog/2021/technical-team-lead/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/technical-team-lead/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-07-03-head.png&#34; alt=&#34;2021 07 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I lately had to explain to customers what are the responsibilities of a technical team lead.
Managers often grasp the people aspects embedded in the words &lt;strong&gt;team lead&lt;/strong&gt;.
The understanding of the word &lt;strong&gt;technical&lt;/strong&gt; is strangely often missing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A technical team leads coaches and teaches the subtleties of the used technology stack to his team and organization.
This person should be able to create or review a software architecture.
He has a deep understanding of technological concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More importantly, he can write productive source code.
Ideally, she should &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;Pair Program&lt;/a&gt; with team members or
&lt;a href=&#34;https://en.wikipedia.org/wiki/Mob_programming&#34;&gt;Mob Program&lt;/a&gt; with her whole team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph text-center&#34;&gt;
&lt;p&gt;&lt;em&gt;A technical team lead must be technically savvy&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_job_description&#34;&gt;Job Description&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here is a standard &lt;a href=&#34;https://en.wikipedia.org/wiki/Job_description&#34;&gt;Job Description&lt;/a&gt; for a Java technical team lead as often published on job platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We are looking for an experienced Java technical lead to be responsible for providing solutions for technical issues which may affect product delivery.
The Java technical lead will facilitate requirement analyzes, conduct peer reviews and provide feedback, and enhance frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To be successful as a Java technical lead, you should demonstrate sound knowledge of industry best practices, good organizational and leadership skills, and proficiency in Java technologies.
A top-notch Java technical lead should have good analytical skills, the ability to anticipate issues and frame remedial actions, and excellent teamwork skills.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_java_technical_lead_responsibilities&#34;&gt;Java Technical Lead Responsibilities&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performing requirement analyzes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developing high-quality and detailed designs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conducting unit testing using automated unit test frameworks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identifying risk and conducting mitigation action planning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conducting configuration of your own work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reviewing the work of other developers and providing feedback.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using coding standards and best practices ensuring quality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_java_technical_lead_requirements&#34;&gt;Java Technical Lead Requirements&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The candidate has a bachelor or master degree in engineering, information systems or related.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extensive experience in the IT industry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sound knowledge of estimation techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Excellent knowledge of Java and web services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sound knowledge of Java technologies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good understanding of unit testing methodologies and agile approaches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Excellent analytical skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exceptional communication skills.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As an Internet example, please see &lt;a href=&#34;https://www.betterteam.com/java-technical-lead-job-description&#34;&gt;Java Technical Lead Job Description&lt;/a&gt;.
You can also find job descriptions under &lt;a href=&#34;https://www.indeed.com&#34;&gt;Indeed&lt;/a&gt; and &lt;a href=&#34;https://www.glassdoor.com&#34;&gt;Glassdoor&lt;/a&gt;.
Similar examples can also be found under &lt;a href=&#34;https://www.linkedin.com&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_responsibilities&#34;&gt;Responsibilities&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below a description of the responsibilities for a technical lead.
A technical lead is responsible for the following tasks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hiring and training technical personnel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delegating work to team members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborating with their team to identify and fix technical problems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analyzing users&amp;#39; needs and then finding applications to serve them&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating end goals for their team&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checking that software and applications are updated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supervising system modifications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conducting security and governance audits to identify areas of improvement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guiding their team through technical issues and challenges&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A technical lead is responsible for helping their team members with the technical aspects of their jobs, such as coding and programming.
They may also explain new projects to their team and troubleshoot any problems that occur.
In comparison, an engineering manager is more focused on managing their employees.
They are responsible for business growth and team deadlines, and they typically serve as their team’s representative to the rest of the company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As an engineering manager, you need to have excellent people management skills and be able to assess your team’s long-term goals.
While you are more likely to work hands-on and focus on day-to-day tasks as a technical lead.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Certified Java Developer</title>
      <link>https://blog.tangly.net/blog/2021/certified-java-developer/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/certified-java-developer/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-05-02-head.png&#34; alt=&#34;2021 05 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java is celebrating 25 years of existence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I discovered the anniversary offer to certify for Java SE 11 Developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This special certification has a cool logo with the remainder of the Java 25-year anniversary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Oracle offers this certification for only 25 dollars &lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt; and provides free access to their learning platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The offer and logo availability are time limited.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The free learning subscription includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Java Explorer learning path for basic Java skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Java SE 11 Developer OCP – Java 25 Years&lt;/em&gt; learning path for advanced programming skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Practice questions for customers to review as they prepare for the exam.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I could not resist and decided to get the cool logo and the associated certification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_certification_goals&#34;&gt;Certification goals&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The official goals of the certification cover:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Working with Java data types&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use primitives and wrapper classes.
This includes operators, parentheses, type promotion and casting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handle text using String and StringBuilder classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use local variable type inference, including lambda parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Controlling Program Flow&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create and use loops, if/else, and switch statements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Java Object-Oriented Approach&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Declare and instantiate Java objects including nested class objects.
Explain the lifecycle of an object (including creation, dereferencing by a reassignment and garbage collection).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define and use fields and methods, including instance, static and overloaded methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize objects and their members using instance and static initializer statements and constructors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand variable scopes, apply encapsulation and make objects immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and use subclasses and superclasses, including abstract classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilize polymorphism and casting to call methods, differentiate an object type versus a reference type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and use interfaces, identify functional interfaces, and utilize private, static and default methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and use enumerations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Exception Handling&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Handle exceptions using try/catch/finally clauses, try-with-resource, and multi-catch statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and use custom exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Working with Arrays and Collections&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use generics, including wildcards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a Java array and List, Set, Map and Deque collections, including convenience methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sort collections and arrays using Comparator and Comparable interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Working with Streams and Lambda expressions&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement functional interfaces using lambda expressions, including interfaces from the java.util.function package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Java Streams to filter, transform and process data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perform decomposition and reduction, including grouping and partitioning on sequential and parallel streams.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Java Platform Module System&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deploy and execute modular applications, including automatic modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Declare, use, and expose modules, including the use of services.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Concurrency&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create worker threads using Runnable and Callable, and manage concurrency using an ExecutorService and java.util.concurrent API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Develop thread-safe code, using different locking mechanisms and java.util.concurrent API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Java I/O API&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read from and write to the console and file data using I/O Streams.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement serialization and deserialization techniques on Java objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handle file system objects using java.nio.file API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Secure Coding in Java SE Application&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Develop code that mitigates security threats such as denial of service, code injection, input validation and ensure data integrity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secure resource access including filesystems, manage policies and execute privileged code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Database Applications with JDBC&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Connect to and perform database SQL operations, process query results using JDBC API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Localization&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement localization using Locale class, resource bundles, and Java APIs to parse and format messages, dates, and numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Annotations&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create, apply and process annotations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_e_learning_platform&#34;&gt;E-learning Platform&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I gave a try to the Oracle online training platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The provided material is basic and does not always reflect the current state of the Java ecosystem.
The questionnaire at the end of each lecture is fun to test your understanding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At the end, I skipped most of the recordings and just answered the questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I would &lt;strong&gt;not&lt;/strong&gt; recommend the learning platform as an efficient learning approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_book&#34;&gt;Book&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I used the book &lt;a href=&#34;https://www.amazon.com/dp/B08DF4R2V9&#34;&gt;OCP Oracle Certified Professional Java SE 11 Programming Study Guide&lt;/a&gt;
written by Scott Selikoff and Jeanne Boyarsky.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The book contains questions at the end of each chapter.
The authors also offer a practice examination of their platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I found all needed the information, and the practice questions were a good drill.
The material is terse to read.
This should be expected from such material but makes concentration more challenging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Invest time for lambdas, streams, annotations and the module system.
I was surprised how many questions about these themes I needed to answer during the examination.
The questions sometimes asked details you are not aware when writing regular Java code in regular products
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_practice_examinations&#34;&gt;Practice Examinations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Udemy provides &lt;a href=&#34;https://www.udemy.com/course/java-se-11-certification-exam-1z0-819-practice-tests/&#34;&gt;practice tests&lt;/a&gt;.
The set contains 250 questions and costs between 15 and 90 dollars.
Just look for rebates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find a set of links to &lt;a href=&#34;https://blogs.oracle.com/oracleuniversity/post/test-your-java-knowledge-with-free-sample-questions&#34;&gt;free sample questions&lt;/a&gt; in an Oracle blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A lot of resources are available online.
Here is an
&lt;a href=&#34;https://javarevisited.blogspot.com/2019/07/top-4-java-11-certification-free-mock-exams-practice-tests-ocajp11-ocpjp11-1z0-815-16-questions.html&#34;&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I only used free offering in addition to the practice questions of the bought book.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_examination&#34;&gt;Examination&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The examination was acceptable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I decided to pass the examination at an accredited partner site.
I read quite a few posts how challenging it is to use the online examination mode and did not want to be stressed with trivialities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock caution&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-caution&#34; title=&#34;Caution&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Do not forget to bring two identification documents.
Regulations are tailored for the USA and do not consider that any European citizen has a legal identification document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your second document can be a driver’s license or a credit card.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I passed the examination in April during Corona restrictions.
I had to wear a mask during the whole time.
It did not really improve my concentration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check if writing material is available in your seat.
Otherwise, request a pen and something to write on.
Regulations officially allow it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Writing down ideas or which options are plausible as an answer helps me a lot.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The rules I use are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Manage and track time&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The examination is time limited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to steadily progress and answer the questions in 90 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The number of questions is 50.
You have &lt;strong&gt;less&lt;/strong&gt; than 2 minutes for each question.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Do not get stuck in one question&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each question has the same weight for the result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provided program has a function to identify unanswered questions or questions you would like to look at again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;If you do not know an answer, mark the question and go to the next one&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Answer all questions&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No penalty exists if you answer a question wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The passing rate for the examination is 68%.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I hope you interesting learning and successful certification.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. The regular price is around 250 dollars.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Regular developers seldom define their own annotations. I need to know the details of how to declare annotations to answer examination questions.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Self-Service for Developer Game Changer</title>
      <link>https://blog.tangly.net/blog/2021/self-service-for-developer-game-changer/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/self-service-for-developer-game-changer/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-04-02-head.jpg&#34; alt=&#34;2021 04 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Often, I hear complain that the IT department is not reacting to developer’s needs.
They are slow, clumsy and too administrative.
Harsher words state they are incompetent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have observed a clear trend in Switzerland since around 2015 to solve these tensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Standard IT services such as docker images, database instances or internal domain names are provided through self-service kiosks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are the advantages of this approach?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advantages&#34;&gt;Advantages&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The advantages to providing a self-service kiosk for users in an academical or industrial environment are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improving data quality and strongly reducing the error rate.
Kiosk services must be standardized before being offered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improving response time and access to resources outside regular office hours without additional human resources,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Saving of costs,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relieving the personnel of the IT department of repetitive and mundane tasks,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increased capacity for working on strategic tasks,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Involvement of employees in human resource management processes.
The kiosk solution must be connected to the on-boarding and off-boarding processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increased personal responsibility and independence of employees,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transparency and traceability of the approval channels,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access to the system independent of time and place,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contribution to employer branding,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduction of printing costs as processes are handled digitally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Similar gains are achievable for employees working for smaller or bigger commercial companies.
The real gains are less animosity and more respect for the IT professionals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_challenges&#34;&gt;Challenges&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The provided self-service products shall cover at least 80% of customer’s needs.
The products must be standardized and do not require manual actions for setup and deployment.
This quality of service is achieved through tracking of requests through a ticketing system and application of the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Pareto_distribution&#34;&gt;Pareto distribution&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You must track and document all requests for services.
Avoid fulfilling all requests and concentrate on optimizing the most often requested services.
You still need to provide a workable approach for special requests.
The simplest solution is to advocate using a commercial offering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_approaches&#34;&gt;Approaches&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I am working with teams developing software products in academic and small-company environments.
The needs boil down to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide docker images to developers.
The images shall be accessible from the company Intranet and often from the Internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide virtual images only exceptionally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide git repositories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide development tools such as GitHub, GitLab or Bitbucket solutions including Pages for documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most often, virtual images are only needed when the user needs a Microsoft or macOS environment.
All Unix related requests are serviced through docker images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A need trend is the need to provide GPU capabilities for machine learning, artificial intelligence and visualization products.
The image approach is still working.
The current major challenge is the immaturity of the software solutions to share efficiently physical GPU.
I expect viable standard solutions will be available in the next two years.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_next_steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement a kiosk self-service solution for all regular requests of collaborators and students.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement a prototype for self-service access to GPU capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Track acceptance of provided approaches and implement improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: JDk 16</title>
      <link>https://blog.tangly.net/blog/2021/jdk-16/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/jdk-16/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-04-01-head.png&#34; alt=&#34;2021 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I truly love the new release rhythm of the Java ecosystem.
It is awesome to be able to use new features every six months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The migration overhead is held to a minimum thanks to incredible backward compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new features greatly simplify the existing code and tremendously increase legibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Features like &lt;em&gt;records&lt;/em&gt;, &lt;em&gt;sealed types&lt;/em&gt;, or &lt;em&gt;switch expressions&lt;/em&gt; are wonderful.
The promise of advanced pattern matching constructs is sweet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Polishing of functional programming approach improved my source code quite stupendously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_new_features&#34;&gt;New Features&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 16 fully supports &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;Algebraic Data Types&lt;/a&gt; with the &lt;a href=&#34;https://openjdk.org/jeps/395&#34;&gt;record&lt;/a&gt; and
&lt;a href=&#34;https://openjdk.org/jeps/397&#34;&gt;sealed types&lt;/a&gt; features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An immutable data class including a constructor, getters, &lt;em&gt;equals(Object o)&lt;/em&gt;, &lt;em&gt;hashCode()&lt;/em&gt;, and &lt;em&gt;toString()&lt;/em&gt; can be declared in one line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;firstname&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;lastname&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first step with modern pattern matching constructs was provided with &lt;a href=&#34;https://openjdk.org/jeps/394&#34;&gt;Pattern Matching for Instanceof&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a small but nice gain of pattern matching, you can now implement the &lt;em&gt;boolean equals(Object o)&lt;/em&gt; method in Java in one statement and without if clause.
An example would be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Key&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Arrays&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;ptypes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ptypes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The other new features are more of internal nature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Notice that &lt;a href=&#34;https://openjdk.org/jeps/386&#34;&gt;Alpine Unix&lt;/a&gt; is now officially supported.
This port is great new to shrink the size of docker images containing a Java runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_troubles_with_some_packages&#34;&gt;Troubles With Some Packages&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;MicroStream&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; persistence library crashes if you are using records.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;ArchUnit&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; crashes if you are using records.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Jacoco&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eclemma.org/jacoco/index.html&#34;&gt;Jacoco&lt;/a&gt; has trouble handling records and generating spurious error messages.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Gradle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; still does not work natively with JDK 16.
They at least provide a well-documented and workable approach.
You can run the tool with JDK 15 and compile your components with JDK 16.
Use the instruction &lt;em&gt;toolchain { languageVersion = JavaLanguageVersion.of(16) }&lt;/em&gt;.
One of the cool stable features of the Gradle release 7.0 is the full support for the Java module system.
You can now build, test, and run Java modules via Gradle with the &lt;em&gt;java library&lt;/em&gt; plugin.
The mere presence of &lt;em&gt;module-info.java&lt;/em&gt; will let Gradle infer that your jar is a module and has to be put on the &lt;em&gt;module path&lt;/em&gt;.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The huge drawback of the Gradle workaround is that you need two installed JDKs in your CI image.
Standard images do not support this configuration.
You have to create your own images if you are running gradle with a Java version and compiling your application with another one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records were announced more than a year ago.
It is a wake-up call to maintainers of Java libraries such as ArchUnit, SonarLint or Jacoco.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please do not be laggards.
Do not force us to work with legacy Java programming paradigms.
Support modules, auto-closeable resources, records, sealed classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a maintainer of a successful component or application, you should represent modern Java approaches.
Did you realize that since Java 8, a new version is released every six months?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_next_changes_i_am_dreaming_of&#34;&gt;The Next Changes I am Dreaming Of&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Concise Method Body&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Syntactic sugar to write compact delegation classes.
It provides the same mechanisms for method overwriting as for lambda declarations
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Switch Type Selection&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We can already chain &lt;em&gt;if else if&lt;/em&gt; statements with &lt;strong&gt;instanceof&lt;/strong&gt; operator and variable declarations.
I want to do the same in a &lt;em&gt;switch&lt;/em&gt; statement.&lt;br/&gt;
I have good news.
The JEP for pattern matching for switch statements (JEP 406) and for record and array patterns (JEP 405) have candidate status in April 2021
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_4&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_4&#34; title=&#34;View footnote.&#34;&gt;4&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;More Packages Support Modules&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Java modules were introduced with Java 8.
I really, really, really want to use modules in Java 16.
Therefore, I need a module version for all mainstream Java libraries.
Until now, the Java developers&amp;#39; community has failed us; support for modules is abysmal.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_important_remainder&#34;&gt;Important Remainder&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The next long term supported Java shall be published in September 2021.
The evolution between LTS 11 and LTS 17 is huge.
Quite a lot of companies are still stocked with LTS 8.
Modern Java code written with the current Java version is very different to older coding paradigms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Companies must now implement modernization approaches if they want to survive in the business world.
A security flaw with an older Java version moves on thin ice if your customers sue your company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Especially if you do not have one of these &lt;strong&gt;expensive support and security&lt;/strong&gt; packages sold by Oracle for legacy Java versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It should be a strategic goal for every company to have a clear migration concept for all Java applications to be ported to LTS Java version 17.
This LTS version should be removed in September 2021.
Early releases are already available to support migration initiatives.
This migration shall be implemented through teams until the end of year 2021.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. ArchUnit 0.18.0 was released on 14 April 2021. Records are now supported. They are still working on supporting sealed types.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. Gradle 7.0 was released 09 April 2021. JDK 16 is now supported as runtime for Gradle. You can have a regular build for your application with JDK 16 and Gradle in your CI pipeline. Gradle engine has been upgraded to using Groovy 3 in Groovy based DSL build scripts to fully support JDK 16.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. I had to accept that this feature will not be part of the LTS release Java 17.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_4&#34;&gt;
&lt;a href=&#34;#_footnoteref_4&#34;&gt;4&lt;/a&gt;. First extensions for pattern matching will be part as preview functionality of the LTS release Java 17.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Software Architecture is Mainstream</title>
      <link>https://blog.tangly.net/blog/2021/agile-software-architecture-is-mainstream/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/agile-software-architecture-is-mainstream/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-head.jpg&#34; alt=&#34;2021 03 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Slowly, slowly major actors in the software architecture landscape acknowledge agile development is state of the industry approach to building software products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They are still struggling to integrate their older views in a faster, iterative, incremental development approach.
The duration of a regular Scrum sprint is usually two weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More important, they have discovered we build products because no customers buy projects.
They buy solutions and products.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I am relieved I need less fight to convince enterprise architects that agile is the way.
The big names &lt;a href=&#34;https://www.pmi.org/&#34;&gt;&lt;em&gt;Project Management Institute&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.opengroup.org/&#34;&gt;&lt;em&gt;Open Group&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.isaqb.org/&#34;&gt;&lt;em&gt;iSAQB&lt;/em&gt;&lt;/a&gt;
have at last an agile architecture offering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If pushed, they acknowledge agile development is mainstream and used in the overwhelming majority of complex product development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have learnt it is difficult to concede and congratulate the winning party.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Look at the president of the United States of America &lt;a href=&#34;https://en.wikipedia.org/wiki/Donald_Trump&#34;&gt;Donald Trump&lt;/a&gt; to have a well-documented case of a loser trying all lies and tricks to avoid reality.
Not long ago, the tobacco industry did the same as professional liars.
And we still have climate change deniers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We show mercy to all the software architecture and designer traditionalists who needed almost twenty years to acknowledge the supremacy of agile approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Laggards, please bow and embrace modern software development approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pmi_and_disciplined_agile_delivery&#34;&gt;PMI and Disciplined Agile Delivery&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-dad.jpg&#34; alt=&#34;2021 03 03 dad&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;PMI realized a few years ago, their standard approach to project management was losing ground in the software industry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first step was the &lt;em&gt;PMI Agile Certified Practitioner&lt;/em&gt; certification to test what agile is.
They never really integrated it with their other certifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The coup was their acquisition of &lt;em&gt;Disciplined Agile Delivery&lt;/em&gt; in the second half of 2019.
The &lt;a href=&#34;https://en.wikipedia.org/wiki/Disciplined_agile_delivery&#34;&gt;DAD&lt;/a&gt; approach has been around since 2015 and had some success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The framework has a complexity sympathetic to PMI.
The roots of a lot of DaD concepts can be found in &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_Unified_Process&#34;&gt;Rational Unified Process&lt;/a&gt; &lt;em&gt;RUP&lt;/em&gt;.
It is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Iterative_and_incremental_development&#34;&gt;Iterative and Incremental Development&lt;/a&gt; methodology.
RUP is certainly not agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The founder of DAD &lt;a href=&#34;https://en.wikipedia.org/wiki/Scott_Ambler&#34;&gt;Scott W. Ambler&lt;/a&gt; has a long history with the Unified Modeling Language and CMM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anyway, it is a huge step for PMI to move away from traditional heavy project development methods and embrace somehow agile product development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_open_group_and_the_open_agile_architecture_initiative_togaf&#34;&gt;Open Group and The Open Agile Architecture Initiative TOGAF&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-open-group-agile.png&#34; alt=&#34;2021 03 03 open group agile&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The open group has stewardship for the TOGAF enterprise architecture standard and training.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The open group has started to discuss the future of software architecture and agile approaches with a white paper second half of 2019.
They published a first potential approach to &lt;a href=&#34;https://pubs.opengroup.org/architecture/o-aa-standard-single/&#34;&gt;agile software architecture&lt;/a&gt; the end of 2020.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach is quite rough.
It is more a collection of ideas available in various approaches and ideas picked from the Internet.
The fact they recognized the necessity to have an agile solution is encouraging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Open Group Architecture Framework TOGAF is the industrial standard for enterprise software and digital architecture.
TOGAF provides techniques to model and analyze the various aspects such as enterprise architect, business architect, data architect, application architect, and technology architect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Open Group has started to integrate agile paradigms into their approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-open-agile-architecture.png&#34; alt=&#34;2021 03 03 open agile architecture&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The open agile architecture shows they are at the very beginning of their journey.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They will have to compromise and find a way to integrate TOGAF ideas with agile concepts.
I am not sure the result will be pretty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The concepts and techniques defined in TOGAF are reasonable.
The official process how to implement them is flawed.
You cannot work with short iterations and incrementally improve your solution upon discovering new facts in a timely and efficient manner.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_isaqb_agile_software_architecture&#34;&gt;iSAQB Agile Software Architecture&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-03-isaqb.jpg&#34; alt=&#34;2021 03 03 isaqb&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The German software architecture bastion has finally fallen.
&lt;a href=&#34;https://www.isaqb.org/&#34;&gt;iSAQB&lt;/a&gt; provides an
&lt;a href=&#34;https://www.isaqb.org/certifications/cpsa-certifications/cpsa-advanced-level/agila-agile-software-architecture/&#34;&gt;advanced level module&lt;/a&gt; for agile software architecture.
Their proposal of the module is described below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The participants learn how to design, develop and further develop software systems and architectures in accordance with agile principles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On one hand, the module covers the application of agile principles and concepts to architecture work.
On the other hand, expedient anchoring of architecture practices in an agile approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The development of architectures in projects with self-sufficient teams or shared responsibilities demands new skills and capabilities on the part of developers and architects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We cover technical as well as methodical and also communicative aspects, which are addressed here all theoretically and in practical exercises.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above statements are quite shallow.
I hope they will add more material in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_requirements_engineering&#34;&gt;Agile Requirements Engineering&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interestingly, the requirement community is further on the path to agility.
The most relevant organization is Europe is the &lt;a href=&#34;https://www.ireb.org/&#34;&gt;International Requirements Engineering Board&lt;/a&gt; &lt;em&gt;IREB&lt;/em&gt;.
The organization offers two certifications with emphasis on agile approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RE@Agile Primer to Bridge the gap between RE and Agile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Level RE@Agile is part of the advanced CPRE AL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_testing_engineering&#34;&gt;Agile Testing Engineering&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interestingly, the quality insurance and testing community are further on the path to agility.
The most relevant organization is Europe is the &lt;a href=&#34;https://www.istqb.org/&#34;&gt;International Software Testing Qualifications Board&lt;/a&gt; &lt;em&gt;ISTQB&lt;/em&gt;.
The organization offers a whole set of certifications with emphasis on agile approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Foundation Level Agile Tester&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Level Agile Test Leadership at Scale&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Level Agile Technical Tester&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A nice bonus is that &lt;em&gt;IREB&lt;/em&gt; and &lt;em&gt;ISTQB&lt;/em&gt; work together to align their terminology and approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: MicroStream 4.x</title>
      <link>https://blog.tangly.net/blog/2021/microstream-4.x/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/microstream-4.x/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-02-head.jpg&#34; alt=&#34;2021 03 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; approach empowers Java developers.
The library provides a cool and compact approach to persist complex data models.
You can persist your whole data model with less than a hundred lines of code.
The library is efficient and works reliably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern architectures based on bounded domains and &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Design&lt;/a&gt; are supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The company behind the product has promised to open source their product beginning of 2021.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use the library to prototype bounded domain implementations requiring persistent data.
The implementation speed and ease are awesome.
I hope the current flaws of the product will be removed and allow productive use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Saving a Java Object&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The library made some strange design decisions.
If you want to persist an instance having fields based on collections, you must use the &lt;em&gt;eager&lt;/em&gt; mode.
Beware that you must explicitly commit the transaction if using the &lt;em&gt;eager&lt;/em&gt; mode.
The normal mode automatically commits the transaction.
I hope that the API improves, and the behavior is coherent for similar functions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Debugging problems&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The source code is currently obfuscated.
Debugging is difficult and cumbersome because variable names are synthetic and all comments are missing.
The source code documentation is shallow and insufficient to understand the behavior of the library.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Saving a collection&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;If you have access to the collection, just call store on the collection.
If the collection is hidden inside an object, you are forced to use an &lt;em&gt;eager&lt;/em&gt; store.
If you use standard object-oriented practices, you will have to use the less efficient approach of eager write operations.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design&#34;&gt;Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our provider persists instances for all our bounded domains in need of persistence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;net.tangly.core.providers&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;java.util.Collections&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;java.util.List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;one.microstream.storage.types.EmbeddedStorageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;org.jetbrains.annotations.NotNull&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;/**
 * Provider with instances cached in memory and persisted onto the file system or a database.
 * &amp;lt;p&amp;gt;The update method uses an eager storage strategy to insure that all instance variables of a Java object are persisted. This approach is necessary due
 * to the implementation restrictions of MicroStream.&amp;lt;/p&amp;gt;
 *
 * @param &amp;lt;T&amp;gt; type of the instances handled in the provider
 */&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ProviderPersistence&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EmbeddedStorageManager&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Collections&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;unmodifiableList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(!&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storage&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;createEagerStorer&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storage&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storage&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;updateAll&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Iterable&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(!&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;});&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;storageManager&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_current_flaws&#34;&gt;Current Flaws&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_in_memory_file_system&#34;&gt;In Memory File System&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In-memory file systems are a must for unit and integration testing.
A continuous integration pipeline does not always have access to a regular file system.
Disk-based file systems are too slow for automatic testing
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We migrate with full success all our unit tests to use in-memory file systems in January 2021.
We use the &lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;Jimfs&lt;/a&gt; library.
When creating a Jimfs file system, you can specify whether it should imitate a UNIX- or Windows-style file system.
They differ in the naming conventions and attribute usage, so choose the one you prefer.
The Windows file system implements some Windows’ quirks, such as not permitting the creation of a file in the root directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The execution speed rocks.
Thanks to the MicroStream developers.
See their &lt;em&gt;file systems&lt;/em&gt; example in their &lt;a href=&#34;https://github.com/microstream-one/examples&#34;&gt;GitHub example repository&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_records&#34;&gt;Java Records&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A field cannot be manipulated anymore in record since Java JDK 1.5.1.
The &lt;em&gt;MicroStream&lt;/em&gt; 4.x releases crash when using record in JDK 15 and JDK 16. It only works with JDK 14.
You are forced to use an obsolete JDK no more supported.
For example, the IntelliJ IDEA stops to provide support for obsolete JDKs as soon as the new official JDK release is available.
It hinders you to use the associated preview features
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_3&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_3&#34; title=&#34;View footnote.&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have to verify if the library can cope with sealed declarations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_next_steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Wait for the release scheduled for April 2021 and pray they will support the record feature.
Records are an official feature in JDK 16 released in March 2021 and no more a preview feature.
See our &lt;a href=&#34;../../2021/modern-java-development/&#34;&gt;Modern Java Development&lt;/a&gt;
discussion how organizations cope with the Java release cycle or are just laggards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codify a performant approach to save whole instances using eager store operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore the migration features when the data schema is changing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait and see if the promised licensing under an open source copyright will be published.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. I have reported the bug how they used path instances. The developers were very supportive. Version 4.01 supports in-memory file systems such as &lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;Jimfs&lt;/a&gt;.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. I have reported the bug in the microstream forum and informed them that their claim they support these JDK is plain wrong. The project sadly does not currently have a bug reporting system. I hope the version promised for April 2021 will finally solve these showstoppers.
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_3&#34;&gt;
&lt;a href=&#34;#_footnoteref_3&#34;&gt;3&lt;/a&gt;. Version 5.0 was released in July 2021 and finally provides support for records. You need to increase access to internal components with the option &lt;em&gt;--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED&lt;/em&gt; to have a working approach.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Modern Java Development</title>
      <link>https://blog.tangly.net/blog/2021/modern-java-development/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/modern-java-development/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-03-01-head.jpg&#34; alt=&#34;2021 03 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java development activities have won traction since the decision to release a new version to the community every six months.
Preview and incubator features promote feedback from the community and users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some tool builders, such as &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; are working proactively and provide support for JDK in developments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other tool maintainers such as &lt;a href=&#34;https://www.eclemma.org/jacoco/&#34;&gt;JaCoCo&lt;/a&gt;  are dreadfully behind the release cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We learnt to deal with the new speed and how to tackle the laggards.
Some experiences were quite painful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below our findings and our current focus on developing software products.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_legibility_matters&#34;&gt;Legibility Matters&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Programmers learnt the last decade that legibility and brevity of programming languages matter.
The Java &lt;a href=&#34;https://openjdk.org/projects/coin/&#34;&gt;Coin&lt;/a&gt; and &lt;a href=&#34;https://openjdk.org/projects/amber/&#34;&gt;Amber&lt;/a&gt;
projects were initiated to reduce the verbosity of the Java language mainly through syntactic sugar.
A programmer should not be forced to write statements the compiler could infer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Examples of improvements are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Diamond operators &lt;em&gt;to avoid writing two times the same generic parameter declarations&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try with resources &lt;em&gt;to avoid complicated finally blocks to close resources&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple catch of exceptions &lt;em&gt;to avoid writing multiple times the same error handling block&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;var&lt;/strong&gt; local variables &lt;em&gt;to avoid complex declarations of local variables&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;default&lt;/strong&gt; methods in interfaces &lt;em&gt;to avoid declaring the same method in multiple classes&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strings as switch selector &lt;em&gt;to write readable code instead of huge if statements&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Underscore in numerical constants &lt;em&gt;to increase legibility&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Deeper changes are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The new date API is simplifying the handling of date and time logic.
The solution is based on the learning of the &lt;a href=&#34;https://www.joda.org/joda-time/&#34;&gt;Joda&lt;/a&gt; time library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support of Lambda constructs greatly eliminates the need for verbose anonymous classes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_useful_constructs&#34;&gt;Useful Constructs&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern Java has introduced powerful constructs to write legible and maintainable code.
Modern Java code is quite different from Java 5 code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Java Modules&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Dependencies management supported at language level.&lt;br/&gt;
The &lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_(programming_language)&#34;&gt;Ada&lt;/a&gt; programming language has support for module since 1985.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Streams and Lambda&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Support for functional programming approaches.
Streams are declarative and support internal iterators.&lt;br/&gt;
&lt;em&gt;The Booch Ada component library has supported internal iterators since 1985&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Record&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Very compact notation to define a data class and transparent handling of properties.
Records are immutable objects and finally use modern naming for getters
&lt;sup class=&#34;footnote&#34; id=&#34;_footnote_algebraic-types&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Sealed Types&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Interesting way to restrict inheritance to a set of selected classes.
Very helpful for library designers.
You can publish an interface in the public API and limit the classes implementing this interface&lt;sup class=&#34;footnoteref&#34;&gt;[&lt;a class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reflection versus Lambda&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;References to methods and constructors are part of the lambda extension.
The &lt;em&gt;LambdaMetafactory&lt;/em&gt; class allows you to create a reference at runtime.
The reflection operations can be replaced by lambda expressions.
The code is more performant and has security issues.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Text Blocks&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;We can finally write legible multi-lines strings.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_cumbersome_aspects&#34;&gt;Cumbersome Aspects&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We still have open wounds in the legibility and elegance of the Java programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unsolved legibility problems through annotations polluting your domain model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Null values (and the missing of an &lt;a href=&#34;https://en.wikipedia.org/wiki/Elvis_operator&#34;&gt;Elvis Operator&lt;/a&gt; or a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Null_coalescing_operator&#34;&gt;Null Coalescing Operator&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fluent interface when setting multiple properties in an instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing support for modifiable properties (read-only properties have initial support in the record construct).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing logging interface similar to &lt;a href=&#34;https://www.slf4j.org/&#34;&gt;slf4j&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reified generics to have access to generic types during runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_next_improvements&#34;&gt;Next Improvements?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have the first signs of possible improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;A more concise notation for getters and setters&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The record extension finally provides a more concise and legible convention for getter and setters.
I hope the convention will be used in all new library classes.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Stop using checked exceptions and replace them with runtime exception&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Lambda expressions cannot handle checked exceptions.
Only runtime exceptions can be thrown in a lambda expression.
Experience with other programming languages shows that checked exceptions do not provide gains in the quality of delivered code.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Pattern matching with deconstruction&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;First pattern matching constructs are available in switch and if statements.
Discussions are underway to extend pattern matching with object deconstruction.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Value Types&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Value types would be a huge improvement in performance and support of modern processor architecture if the Valhalla product delivers.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The only drawback we have with modern Java development is the sluggish catch-up of open-source tools and libraries.
For example &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; needed five years to provide module support in the Java plugin.
Gradle 6.4 was the first version really supporting Java modules.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Records and Sealed Types are the Java implementation for &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;Algebraic Data Types&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Why Is Java Path Class Better?</title>
      <link>https://blog.tangly.net/blog/2021/why-is-java-path-class-better/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/why-is-java-path-class-better/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-02-02-head.jpg&#34; alt=&#34;2021 02 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java NIO &lt;em&gt;New Input Output&lt;/em&gt; is an alternative IO API for Java, meaning alternative to the standard Java IO and Java Networking APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java NIO offers a different IO programming model than the traditional IO APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One major feature of interest is the support of alternate file systems.
An in-memory file system is ideal for test file related operations in unit and integration tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sometimes NIO is claimed to mean Non-blocking IO.
However, this is not what NIO meant originally.
Also, parts of the NIO APIs are actually blocking - e.g. the file APIs - so the label &amp;#34;Non-blocking&amp;#34; would be slightly misleading.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_unit_tests&#34;&gt;Unit Tests&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;Jimfs&lt;/a&gt; library implements an in-memory file system.
You can find other implementations of in-memory file systems if you want to use another library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The approach is ideal to write unit tests working with files.
You cannot assume to have access to a well-defined file system in a generic continuous integration pipeline.
Unit tests using an in-memory file system can be deployed in a continuous integration pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When you look at the implementation of &lt;em&gt;Path.of&lt;/em&gt; or &lt;em&gt;Paths.get&lt;/em&gt;, you will see:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;more&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;FileSystems&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getDefault&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;more&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So, while this method and similar ones are very convenient, using them will imply you want to access your default file system.
The one your JVM is running on, not your in-memory file system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hence, when wanting to make sure your code works against in-memory file systems, you must make sure to never call these helper methods.
Instead, you should always use the &lt;em&gt;FileSystem&lt;/em&gt; or a &lt;em&gt;Path&lt;/em&gt; instance as an anchor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Depending on your project and your libraries, this is quite a challenge to pull off
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_paths&#34;&gt;Paths&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Alternative file system operations require all methods to use path objects instead of file objects.
File objects contain the name of the accessed file but lose all references to the underlying file system.
All operations using file objects implicitly use the default file system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Path objects encapsulate the file and the file system.
Operations are aware of the underlying file system and behave as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;FileSystem&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fs&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;  &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

&lt;span style=&#34;color: #953800&#34;&gt;Files&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;createDirectory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fs&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;ORGANIZATION&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;crm/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;  &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span style=&#34;color: #953800&#34;&gt;Files&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;copy&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;myFile&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fs&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;ORGANIZATION&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;crm/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)),&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;StandardCopyOption&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;REPLACE_EXISTING&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define a file system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Work with the file system to create paths and avoid using helper methods using the default file system&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Consider Java &lt;em&gt;java.io.File&lt;/em&gt; class as a legacy abstraction.
Avoid using it and moving over to the Java path abstraction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Remember &lt;em&gt;java.nio.Path&lt;/em&gt; class has a reference to a file system, the &lt;em&gt;java.io.File&lt;/em&gt; class only uses the default file system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The javadoc definition states that a file is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An abstract representation of file and directory path names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User interfaces and operating systems use system-dependent pathname strings to name files and directories.
The javadoc definition states that * The java.nio.file package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This API may be used to overcome the limitations of the java.io.File class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use file instances to manipulate abstract file path names.
Use path instances to manipulate files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware that&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;/tmp/myfile.txt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #953800&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;toPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #6e7781&#34;&gt;// is implemented as&lt;/span&gt;

&lt;span style=&#34;color: #953800&#34;&gt;FileSystems&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getDefault&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you need to convert a file instance to a path instance hosed in the desired file system, please write&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;/tmp/myfile.txt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #953800&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fileSytem&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learnt_lessons&#34;&gt;Learnt Lessons&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Legacy libraries heavily use &lt;em&gt;File&lt;/em&gt; objects in their algorithms and their public interface.
Such libraries do &lt;strong&gt;not&lt;/strong&gt; work with in-memory file systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The simplest approach is to always provide an API returning streams in addition to file system methods.
It is always possible to map a stream to a file system specific streams for read and write operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The more complex approach is to replace all &lt;em&gt;File&lt;/em&gt; objects with &lt;em&gt;Path&lt;/em&gt; objects.
Ideally, the Java community should declare the &lt;em&gt;File&lt;/em&gt; class as a deprecated one.
Another solution would be to extend File with an internal path instance.
This approach could break backward compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. I regularly open issues in various open-source libraries to request an API extension to support Path. The maintainer of the library is often not aware you need &lt;em&gt;Path&lt;/em&gt; to unit test with in-memory file systems.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Software Development for Students</title>
      <link>https://blog.tangly.net/blog/2021/software-development-for-students/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/software-development-for-students/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-04-head.jpg&#34; alt=&#34;2021 01 04 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Computer science students shall achieve technical excellence when reaching bachelor level.
They should be proficient with industry good practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Students understand the theory and principles behind these practices.
Experience with one of the best of breed tools enforces learning and automatism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The focus of a technical university is to teach the concepts and methods.
The tools are used to practice and to increase student learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_source_code_version_management_with_git&#34;&gt;Source Code Version Management with Git&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; is the standard tool for the distributed source code management system.
It is supported by all major development IDE and continuous integration environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First-year undergraduates shall master the basic git commands to write their semester projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Second-year sophomores shall master the &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; commands used to work in teams.
Pull requests are a standard approach to review team colleague works and to consolidate new functions into the application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_modern_java_software_development&#34;&gt;Modern Java Software Development&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java is the preferred programming language for the majority of teaching institutions around the world.
The programming language has evolved the last ten years.
Students should learn the current way of writing code in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The actual Java approach is to use streams and renounce in most cases to use instructions such as &lt;em&gt;for&lt;/em&gt; or &lt;em&gt;while&lt;/em&gt; loops or conditional &lt;em&gt;if&lt;/em&gt; statements.
Delegation and lambda constructs often replace inheritance design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since JDK 16, Java provides &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;Algebraic Data Types&lt;/a&gt; with records and sealed classes.
Records implement &lt;a href=&#34;https://en.wikipedia.org/wiki/Product_type&#34;&gt;Product Types&lt;/a&gt;.
Sealed classes implement &lt;a href=&#34;https://en.wikipedia.org/wiki/Tagged_union&#34;&gt;Tagged Unions&lt;/a&gt;, also called sum types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA IDE&lt;/a&gt; is now the industrial standard for the Java and often Python world.
The IDEA environment promotes the use of modern Java constructs.
Currently, constructs such as records, sealed classes, closeable resources, switch instructions as expressions are new approaches to write legible Java code.
Concepts such as Optional, Streams, immutable objects, and unchecked expressions promote more functional programming styles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; is our preferred build tool for Java projects.
The approach is straight forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_technical_excellence&#34;&gt;Technical Excellence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The DevOps and software craftsmanship movement strongly promotes technical excellence and intrinsic quality in software development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-04-devOps.png&#34; alt=&#34;720&#34; width=&#34;480&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Students shall be fluent with&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static code analysis.
IntelliJ IDEA provides an &lt;em&gt;analysis&lt;/em&gt; function for static code analysis.
The IDE environment is free for students.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unit tests and integration tests Use the seminal libraries &lt;em&gt;JUnit5&lt;/em&gt;, &lt;em&gt;Mockito&lt;/em&gt;, and &lt;em&gt;AssertJ&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous integration pipeline uses the CI pipeline of your product management tool; either &lt;em&gt;GitLab&lt;/em&gt;, &lt;em&gt;GitHub&lt;/em&gt;, &lt;em&gt;Bitbucket&lt;/em&gt;, or &lt;em&gt;Azure DevOps&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should only check text artifacts into a &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; repository.
Modern approaches with &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt; and &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; syntax promote this axiom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt; is a text-based diagramming approach.
Major diagram types are supported.
ALl UML diagram types can be described with the tool.
&lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; has native support for diagrams in general and PlantUML in particular.
Asciidoc supports additional diagrams and diagramming tools such as &lt;a href=&#34;https://mermaid-js.github.io/mermaid&#34;&gt;Mermaid&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_and_scrum&#34;&gt;Agile and Scrum&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile and Scrum are the standard methods to develop software products in the industry.
All students shall excel in agile development approaches.
Scrum is the most used approach and should be taught to all computer science students.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Students shall understand the agile concepts and main constructs.
When working in a Scrum environment, they have used the backlog, issues, stories, definition of done.
They have planned their projects with a vision, a roadmap, epics, and sprints.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_gitlab_as_a_students_tool&#34;&gt;Gitlab as a Student’s Tool&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-04-gitlab.png&#34; alt=&#34;2021 01 04 gitlab&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gitlab is an integrated solution for software development in teams and DevOps approaches.
It is the official tool provided in our &lt;a href=&#34;https://www.hslu.ch/en/lucerne-school-of-information-technology/&#34;&gt;Computer Science Department&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Students learn computer science principles and hands-on how to develop software applications.
They will use their learning to develop commercial software components when working after the completion of their studies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_gitlab_as_a_lecturers_tool&#34;&gt;Gitlab as a Lecturer’s Tool&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All the source code and artifacts of a student class are available in Gitlab.
The development history over a project or a semester is visible in Git.
The lecturers can access the artifacts or use scripts to extract the data necessary to set the grades for the students.
The grading process can be standardized.
The decision process is part of the Gitlab data and is auditable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The student series is a set of blogs showing how to use central tools for modern software development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/software-development-for-students&#34;&gt;Software Development for Students&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2018/pragmatic-craftsmanship-professional-software-developer&#34;&gt;Pragmatic Craftsmanship&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2017/why-use-current-software-components&#34;&gt;Current Software Components&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2016/git-branches-for-the-impatient&#34;&gt;Git Branches for the Impatient&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2017/git-local-repositories-for-the-impatient&#34;&gt;Git Local Repositories For the Impatient&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/gitlab-for-bachelor-students&#34;&gt;Gitlab for Bachelor Students&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/advocate-zero-bug-policy-in-your-projects/&#34;&gt;Zero Bug Policy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020//creating-a-technical-website-with-hugo-and-asciidoc&#34;&gt;Creating a Technical Website with Hugo and AsciiDoc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/gitlab-for-bachelor-students&#34;&gt;GitLab for Bachelor Students&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Gitlab for Bachelor Students</title>
      <link>https://blog.tangly.net/blog/2021/gitlab-for-bachelor-students/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/gitlab-for-bachelor-students/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-03-head.jpg&#34; alt=&#34;720&#34; width=&#34;480&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Computer science students shall be proficient with a basic set of software development techniques.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Technical excellence&lt;/em&gt; is a mandatory skill for all software developers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Agile development approaches&lt;/em&gt; are state of the industry and used in almost all software development initiatives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;DevOps&lt;/em&gt; approaches are used in modern organizations.
They predate agile development approaches.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Technical schools should provide an in-depth experience in these areas to prepare their students for their future activities after completing their bachelor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The below mind map consolidates concepts, tools and approaches based on the &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; tooling established in some universities.
The approach emphasizes &lt;strong&gt;agile&lt;/strong&gt; and &lt;strong&gt;DevOps&lt;/strong&gt; concepts and approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock kroki&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://kroki.io/plantuml/svg/eNqVVNtu2kAQfecr5qlqIdQv7UtkoYAdUVBoKSQfMFkPZsV6190LEa3y7501EDCJIuXBkncu58yemdkb59H6SuqiwrqTOr9TNOgczrnE0mIF_zoAX9dOheYPYIRiU1oTdJEZZSwoWa79owrE3ufOcydNDjg9SD_VZGr-h253bs1KCkmaP9ftdno9GFovVyi8gxlqLKki7dneYwonBSTJWPokaSypiFzXpSXSg2GxRS2oAPanSeMZvI6aB6VgQX8COe_OwiCn7a_aNQmZ0V7qYIKDifbE9_XS6Oi6ABtbLBSdk10GSK_wEeayJiU1uVZdZzQ5u7dkdx-E6LEaM9yShoxFsqgOukz0yqLzNggfLAE65iromJEbsSG7Dz2dWZTaOOmN3TUu4NbETnPfywZ0xhBWwxS32JwftPRwH2U8Ak2j6fsJeMbADHgyDJ0j66eHKufoPSM6QF3ApJCmcpCmcaYGe4EWFOfA2GN6bIZScgqT_JYx-n0YalQ7J8_y-tFaSkUwrGtrUKzJNcbD4Dr4PJrP7r60MvoMztafsNyQF2uYsdAsUKsPkS4nJ0vdJstNhVJDbmXswz7igvBhdncF2bfXnHOF2rP3LSojQpz8ZvTajLHndlOYJ92I0G-EFVJyyovhhNwYltITjIlvhaynO_L_CKXZR_TfHjpev9PAvSjLq0LK1LG8dmVLYUN1ccsWbnwllCmv4baWwl3BkquRLYrLjImn_fq5a7hHt-GkUbA63h6yNb9T7yWPDSpOWBiMT1czZwtShK59q1bO0qz8E_LW_A6opN-dw3O9XItgYoor86Ijz-NwP4t_6ahnkixr40ehdO8pHJfu4g6wCPwuVPSKZYqZycxH0G6I3-z9u_0fncvXiw==&#34; alt=&#34;students-proficiencies&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Italic terms identify concrete tools.
Green font marks Gitlab features.
Light blue background concepts map to technical university guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should develop software applications using agile and DevOps techniques.
You shall put your source code under a version management system.
The actual industrial standard is &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;, a distributed version control system - &lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_version_control&#34;&gt;DVCS&lt;/a&gt; -.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More sophisticated source code management systems based on &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; with additional agile and DevOps functionalities are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; is a closed-source solution and most well-known solution.
Microsoft acquired them in 2020.
Some Swiss technical universities - ZHAW, University of Bern - use the academic GitHub campus program.
CI and CD pipelines are not part of the GitHub product and must be installed separately.
The academic program means you receive GitHub licenses.
Your organization is responsible for running the software on the premises.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; is an open-source solution and a strong contender for GitHub.
CI and CD pipelines are part of the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; is a closed-source solution of Atlassian.
CI and CD pipelines are part of the product.
Atlassian also owns JIRA, Confluence and Trello.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/devops/&#34;&gt;Azure Devops&lt;/a&gt; is a closed-source solution and Microsoft answers to .NET development.
CI and CD pipelines access is under definition by Microsoft.
They slowly open their product to additional development stacks such as Java, Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gitea.io/&#34;&gt;Gitea&lt;/a&gt; is a community-managed lightweight code hosting solution written in Go.
The project is hosed on GitHub.
It is published under the MIT license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gogs.io/&#34;&gt;Gogs&lt;/a&gt; is a painless self-hosted Git service.
The project is hosed on GitHub.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gitolite.com/&#34;&gt;Gitolite&lt;/a&gt; allows you to set up git hosting on a central server.
It has fine-grained access control, and many more powerful features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Schools often select &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; due to his open source license and the tremendous DevOps functionality.
The gitlab solution supports source code versioning, DevOps pipelines, agile development approaches, and quality insurance for the produced artifacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The technical university of Lucerne &lt;a href=&#34;https://www.hslu.ch/en/&#34;&gt;HSLU&lt;/a&gt; has selected &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; platform as the standard DevOps environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Well-known companies in Switzerland such as Roche Diagnostics, UBS&lt;a href=&#34;#ubs-gitlab&#34;&gt;[1]&lt;/a&gt;, Siemens&lt;a href=&#34;#siemens-gitlab&#34;&gt;[2]&lt;/a&gt; have also standardized on this platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our students can more easily bridge between academical teachings and industrial practices and acquire deeper understanding of DevOps and agile practices.
Semester and bachelor theses are easier to realize through the use of known software development tool chains.
Students can concentrate on the content of their thesis.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_basic_git_knowledge_for_students&#34;&gt;Basic Git Knowledge for Students&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Studying the history of software development practices shows the raise and fall of &lt;a href=&#34;https://en.wikipedia.org/wiki/Source_Code_Control_System&#34;&gt;SCCS&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Concurrent_Versions_System&#34;&gt;CVS&lt;/a&gt;, ClearCase, Visual Source Safe, or
&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Subversion&#34;&gt;Subversion&lt;/a&gt;.
The current most popular and used tool is &lt;a href=&#34;https://en.wikipedia.org/wiki/Git&#34;&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Any software developer or web designer can create a &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; hosted project with a few commands in the shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Linux distributions often include the git application.
If not use the package manager to download and install the &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;MacOS users should use &lt;a href=&#34;https://brew.sh/&#34;&gt;homebrew&lt;/a&gt; as a package manager.
Homebrew can download and install a huge set of Unix packages.
To install git, you just have to execute &lt;em&gt;brew install git&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The huge advantage of package managers is the update function to install new versions of your applications without any configuration activities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are a Windows user you can find a Windows package on the &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git home page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Git has three different &lt;em&gt;areas&lt;/em&gt; for your code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Working directory&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The area that you will be doing all of your work in (creating, editing, deleting, and organizing files).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Staging area&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The area where you will list the changes that you have made to the working directory.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Repository&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Where Git permanently stores the changes you have made as different versions of the project.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git init &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
git clone https://gitlab.enterpriselab.ch/tangly/tangly-os.git &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

git add README.md &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
git add * &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

git commit -m &amp;#34;commit message, should be clear and legible&amp;#34; &lt;i class=&#34;conum&#34; data-value=&#34;5&#34;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
git push &lt;i class=&#34;conum&#34; data-value=&#34;6&#34;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
git pull &lt;i class=&#34;conum&#34; data-value=&#34;7&#34;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;

git status &lt;i class=&#34;conum&#34; data-value=&#34;8&#34;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
git remote &lt;i class=&#34;conum&#34; data-value=&#34;9&#34;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
git --version &lt;i class=&#34;conum&#34; data-value=&#34;10&#34;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Create&lt;/strong&gt; a new repository for the root folder of your project, the folder &lt;em&gt;.git&lt;/em&gt; is created and contains all the git tracking information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Clone&lt;/strong&gt; the repository &lt;em&gt;tangly-os&lt;/em&gt; and copy all files into the current folder.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the README file to git.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add all files to git.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;5&#34;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Commit files.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;6&#34;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Push files to the remote repository you cloned in step 2.
Your changes are now public and available to other developers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;7&#34;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Pull files from the remote repository you cloned in step 2.
Your local repository contains the last public changes of other developers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;8&#34;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns status information about your local project.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;9&#34;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns the list of remote repositories your project is connected to.
Often you have just one remote to synchronize with.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;10&#34;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Displays the version of your git installation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See our blog &lt;a href=&#34;../../2017/git-local-repositories-for-the-impatient&#34;&gt;Git Local Repositories For the Impatient&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See our blog &lt;a href=&#34;../../2016/git-branches-for-the-impatient&#34;&gt;Git Branches for the Impatient&lt;/a&gt; for more advanced commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ci_pipelines_for_students&#34;&gt;CI Pipelines for Students&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-03-cicd_pipeline.png&#34; alt=&#34;720&#34; width=&#34;480&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The minimal Gradle build file of a Java project is elementary and compact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;gradle&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Multi-module Gradle build file requires an additional &lt;em&gt;gradle.settings&lt;/em&gt; file identifying your modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;gradle&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;net.tangly.bdd&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;net.tangly.bus&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;net.tangly.commons&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The initial build file for each module is the same as for a minimal Gradle project.
You can now compile, test and check your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;gradle build &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
gradle test &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
gradle check &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
gradle clean &lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Compile the simple or multi-module Java project.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Execute the unit tests of the project.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Perform static analysis checks if you define them.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;4&#34;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Clean the output folders and delete all generated files.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are now ready to create a complete continuous integration pipeline of your project in gitlab.
A complete &lt;em&gt;.gitlab-ci.yml&lt;/em&gt; configuration for a gradle project would be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color: #116329&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;openjdk:15&lt;/span&gt;

&lt;span style=&#34;color: #116329&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;

&lt;span style=&#34;color: #116329&#34;&gt;before_script&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;export GRADLE_USER_HOME=`pwd`/.grade&lt;/span&gt;

&lt;span style=&#34;color: #116329&#34;&gt;stages&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;build&lt;/span&gt;
  &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;test&lt;/span&gt;

&lt;span style=&#34;color: #116329&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;stage&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;build&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;./gradlew --build-cache assemble&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;$CI_COMMIT_REF_NAME&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;policy&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;push&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;paths&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;build&lt;/span&gt;
      &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;.gradle&lt;/span&gt;

&lt;span style=&#34;color: #116329&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;stage&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;test&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;./gradlew check&lt;/span&gt;
  &lt;span style=&#34;color: #116329&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;$CI_COMMIT_REF_NAME&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;policy&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;pull&lt;/span&gt;
    &lt;span style=&#34;color: #116329&#34;&gt;paths&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;build&lt;/span&gt;
      &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;.gradle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_java_development_environment&#34;&gt;Java Development Environment&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please prefer workstation powered with Linux or macOS if you are developing in Java, Groovy or Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You will be more efficient and avoid all the problems related to virus scanners, missing packages or arcane path length problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install the latest LTS JDK and the latest JDK on your workstation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install IntelliJ IDEA IDE.
Students can request a student license and work with the Ultimate edition.
The community edition is free for everybody.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the static analysis function of the IntelliJ IDEA has a static analysis feature.&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;Select the file or package to inspect in the project view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the right mouse button to display the context menu and select the menu item &lt;em&gt;Analyze/Inspect Code…​&lt;/em&gt;.
The findings will teach you how to write better Java code and eliminate common errors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Gradle to build your application&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;IntelliJ IDEA environment provides all the tools to work efficiently locally.
All the tools identified in the above mindmap are supported in IDE and associated plugins.
Students can work offline and learn the tools in a gentle manner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The students can use the &lt;a href=&#34;https://www.jetbrains.com/help/idea/running-inspections.html&#34;&gt;IDEA Static Code Analyzer&lt;/a&gt; without any additional configuration.
The quality is good enough, and the feature empowers junior developers to learn modern and correct Java code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More advanced scenarios use &lt;a href=&#34;https://spotbugs.github.io/&#34;&gt;SpotBugs&lt;/a&gt; and the associated IDEA plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_write_unit_tests_for_a_java_application&#34;&gt;How to Write Unit Tests for a Java Application&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should write unit and integration tests for your Java application using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://junit.org/junit5/&#34;&gt;JUnit 5&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://assertj.github.io/doc/&#34;&gt;AssertJ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_document_your_project&#34;&gt;How to Document Your Project&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Static code generators are becoming the standard approach for the technical documentation.
One huge advantage is you can check the whole documentation into your git repository.
You have a synchronization between a released version of your application and the corresponding documentation.
Both are stored in the same repository and can be marked with a version label You can use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.markdownguide.org/&#34;&gt;Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://asciidoc.org/&#34;&gt;AsciiDoc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;IntelliJ has native support for markdown and an excellent plugin for Asciidoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gitlab provides the &lt;a href=&#34;https://docs.gitlab.com/ee/user/project/pages/&#34;&gt;Pages&lt;/a&gt; concept to create and publish complete documentation of a product.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_diagrams&#34;&gt;Diagrams&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-03-diagrams.png&#34; alt=&#34;720&#34; width=&#34;480&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt; is a simple and powerful tool for diagramming.
The tool is compatible with git philosophy and static website generators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The IntelliJ Asciidoc is used to write technical documentation and to display embedded PlantUML diagrams.
Asciidoc format has native support for PlantUML diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Students have training in technical notation such as UML, BPNM, C4 and others.
They can now apply these notations to their projects using plantUML.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_and_scrum&#34;&gt;Agile and Scrum&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Students have training in agile development and the Scrum framework.
Gitlab allows them to apply these &lt;a href=&#34;https://about.gitlab.com/solutions/agile-delivery/&#34;&gt;Agile Delivery Concepts&lt;/a&gt; to their semester and bachelor projects.
Lecturers have access to the agile and Scrum artifacts and can qualify the quality of the work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advanced_git_for_complex_team_development&#34;&gt;Advanced Git for Complex Team Development&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once you master the basic commands, consider learning advanced commands like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_merge&#34;&gt;Merge&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Merge your branch &lt;em&gt;my-branch&lt;/em&gt; back into &lt;em&gt;trunk&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git commit –m &amp;#34;Some commit message&amp;#34; &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
git checkout trunk &lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt; &lt;/span&gt;git merge my-branch &lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Develop some code and commit it in the currently selected my-branch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;2&#34;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Switched to branch &lt;em&gt;trunk&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;3&#34;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Merge the branch &lt;em&gt;my-branch&lt;/em&gt; into &lt;em&gt;trunk&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_rebase&#34;&gt;Rebase&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Rebase trunk into your branch &lt;em&gt;my-branch&lt;/em&gt;.
Note that after a rebase, the commit ids of the rebased branch are new.
A rebase is not simply a moving of commits around in history.
Git actually creates brand-new commits with new commit ids and permanently deletes the old commits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should prefer to rebase only with local branches.
Avoid rebasing shared branches.
If you rebase a branch that was pulled from GitHub or GitLab, and then push it back, the server will reject it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git rebase my-branch trunk&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_squash&#34;&gt;Squash&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Git squash is a technique that helps you to take a series of commits and condense it to a few commits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let’s see how to squash the last three commits to a single commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git rebase -i HEAD~3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following content will be shown:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;pick 474bfdc2 3rd last commit
pick 1bffc15c 2nd last commit
pick 474bf0c2 last commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For the commits that you want to squash, replace the pick instruction with fixup, so it becomes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;fixup 474bfdc2 3rd last commit
fixup 1bffc15c 2nd last commit
pick 474bf0c2 last commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_cherry_picking&#34;&gt;Cherry Picking&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Cherry-picking in Git means choosing a commit from one branch and applying it onto another.
This is in contrast with other ways, such as &lt;em&gt;merge&lt;/em&gt; and &lt;em&gt;rebase&lt;/em&gt;, which normally apply many commits onto another branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can display the hashes of your commits in the &lt;em&gt;trunk&lt;/em&gt; with the command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git log --oneline trunk&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now you can cherry-pick the commit you are interested in and apply it into your branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;console&#34;&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git checkout my-branch
&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;git cherry-pick &amp;lt;commit-hash&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_local_and_remote_branch&#34;&gt;Local and Remote Branch&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read the post &lt;a href=&#34;../../2016/git-branches-for-the-impatient&#34;&gt;Git Branches for the Impatient&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_pull_request&#34;&gt;Pull Request&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read the documentation of GitLab, BitBucket or GitHub.
You will use pull requests if you are working in a team for a project.
Sadly, students rarely work teams during their studies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2017/git-local-repositories-for-the-impatient&#34;&gt;Git Local Repositories for the Impatient&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2016/git-branches-for-the-impatient&#34;&gt;Git Branches for the Impatient&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/creating-a-technical-website-with-hugo-and-asciidoc&#34;&gt;Creating a Technical Website with Hugo and AsciiDoc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/support-comments-for-static-hugo-website&#34;&gt;Support Comments For Static Hugo Website&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;ubs-gitlab&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;https://www.inside-it.ch/de/post/ubs-schliesst-den-umzug-in-die-devcloud-ab-20210813&#34;&gt;UBS schliesst Umzug auf GitLab&lt;/a&gt;.
&lt;a href=&#34;https://www.inside-it.ch/&#34;&gt;inside-it&lt;/a&gt;. 2021-08-13.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;siemens-gitlab&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://about.gitlab.com/customers/siemens/&#34;&gt;Siemens GitLab&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Reference Codes</title>
      <link>https://blog.tangly.net/blog/2020/reference-codes/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/reference-codes/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-11-01-head.jpg&#34; alt=&#34;2020 11 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reference codes are an old concept.
They are often used in the relational database schema definition as enumeration values.
The database specialists often call them lookup tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reference codes are dynamic enumeration values.
By dynamic, we mean you can add values without recompiling the source code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In modern DevOps environments where deployment of a new version is performed in minutes, this advantage is somewhat shallow.
We view reference codes more as strongly typed and efficient tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you easily add the concept of reference codes in your application?
We provide an initial setup approach requiring mere minutes to add codes to your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_enumerations_as_codes&#34;&gt;Enumerations as Codes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a professional designer, you have declared sets of fixed values as enumeration in your source code.
Now you can extend your enumeration classes with the code interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional information is available under link:../../../docs/bus/businessmodels/ Below the source code in modern Java is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;isEnabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;EnumCode&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_1&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_2&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_3&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_4&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CODE_TEST_5&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;EnumCode&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #953800&#34;&gt;EnumCode&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;ordinal&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8250df&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;isEnabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above approach is a low impact transformation of your application.
Once your enumeration types implement the code interface, you are free to migrate selected types to external persistent and extensible solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_persistent_codes&#34;&gt;Persistent Codes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Codes can be defined and stored as JSON sets or in SQL table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java code for the JSON approach is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;/**
 * Utility method to read all code values from a JSON file using the org.json library.
 *
 * @param clazz   class of the reference code
 * @param factory placeholder to pass the class constructor as lambda expression
 * @param path    path to the JSON file containing the code values
 * @param &amp;lt;T&amp;gt;     class of the reference code
 * @return code type and all its values
 * @throws IOException if a file access error occurred
 */&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeFactory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;IOException&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Reader&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Files&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;newBufferedReader&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;StandardCharsets&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;Iterator&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;iter&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;JSONArray&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;JSONTokener&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;reader&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ArrayList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;iter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #953800&#34;&gt;JSONObject&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;JSONObject&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;iter&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getBoolean&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;
            &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The JSON files containing the code values can be stored as resource files and delivered either with application or in a separate jar file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java code for the SQL table is quite similar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #6e7781&#34;&gt;/**
* Utility method to read all code values from a relational database table using Java regular API.
*
* @param clazz class of the reference code
* @param factory placeholder to pass the class constructor as lambda expression
* @param dataSource data source to the database to read from
* @param tableName name of the table containing the code values
* @param &amp;lt;T&amp;gt; class of the reference code
* @return code type and all its values
* @throws SQLException if a database access error occurred */&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeFactory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;DataSource&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dataSource&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tableName&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;SQLException&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;SQL_QUERY&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;SELECT id, code, enabled FROM &amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tableName&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Connection&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;dataSource&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Statement&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;statement&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;createStatement&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;ResultSet&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;statement&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;SQL_QUERY&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #953800&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;ArrayList&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #953800&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;resultSet&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;getBoolean&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;CodeType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;clazz&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;codes&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At the database level, you can define integrity rules in the schema to increase data quality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design&#34;&gt;Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You have the freedom to model set of values as enumeration, reference codes, or tags.
Each approach has specific advantages and tradeoffs.
The costs of moving from one approach to another are quite small.
Just choose one solution, implement it, and track its adequacy and user acceptance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We provide a Java library BUS implementing these constructs.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;Open Source Components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The unit tests contain examples for enumeration codes, JSON codes and SQL database stored codes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: The power of Tags and Comments</title>
      <link>https://blog.tangly.net/blog/2020/the-power-of-tags-and-comments/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/the-power-of-tags-and-comments/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-09-01-head.jpg&#34; alt=&#34;2020 09 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A software architect models customer domains and maps them to &lt;em&gt;excellent&lt;/em&gt; software constructs.
The solution shall support future customer groups and expand to store additional information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Tags&lt;/em&gt;, also called labels, provide an informal ontology to classify customer data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags are extensible and are machine-readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Comments&lt;/em&gt; empower users to store relevant unstructured information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Comments are only for human beings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are good approaches to provide searchable tags and labels and avoid wild growth of useless records?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Can you as a designer govern the ontology defined through labels?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tags&#34;&gt;Tags&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags add semantic information to business entities.
Tags are often defined as a crowd ontology without enforced schemas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Invest in domain modeling to define and maintain tags, and you will move tags to full-fledged ontology into your domain models.
This ontology supports meaningful search, segmentation and reporting over historical and geographical raw data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags with associated values are also used to decorate unrelated entities with orthogonal information.
For example, you can associate geographical coordinates – GIS – to pictures, meetings, or addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A tag has three parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;optional namespace&lt;/em&gt; to classify the tag in the overall ontology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;mandatory name&lt;/em&gt; to uniquely identify the tag in the context of its optional namespace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;optional value&lt;/em&gt; providing details to the tag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For example, we could define a tag such as &lt;em&gt;geo:longitude=50.167958&lt;/em&gt; to provide the meta-information of longitude to an entity.
This tag has a namespace &lt;em&gt;geo&lt;/em&gt;, a name &lt;em&gt;longitude&lt;/em&gt; and a double value &lt;em&gt;50.167958&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional information is available under link:../../../docs/core/models/ Below the source code in modern Java is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;@NotNull&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should strongly consider the introduction of tag types to constrain the possible values of a specific tag.
For example, you can define that the namespace geo contains only the longitude and latitude tags.
Both these tags have mandatory values of type double.
Once your design supports tag types, you can add generic validation rules in the user interface and in business logic for all existing tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The ontology enforcement allows consistent reporting and data drilling over departments in your company and over time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_comments&#34;&gt;Comments&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Comments provide human-readable information and hints for entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An author writes a comment at a specific time.
Comments shall usually be immutable.
To respect human fallibility, a correction mode can be supported.
If changed, the new comment replaces the older one and is marked as edited.
The edition feature is part of the workflow and not part of the domain model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An author can be another computer system.
It can provide information about its actions through comments.
If the deletion of comments is disabled, the comment history is an audit trail documenting what happened over time with an entity instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware that the authors define an external identifier space.
If your application requires a user account, you can connect the author with the user account.
The consequence is that you should only disable these accounts and never delete them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Policy should be defined to handle the fact that collaborators quit the company over time and are no more active users; but they are still referenced as authors.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The code in Java is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Comment&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasTags&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;created&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #6e7781&#34;&gt;// getters and setters&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design&#34;&gt;Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our architecture follows the principles of domain-driven design.
Comments are always associated with a specific bounded domain of the overall application.
For example, we often model the persistence view of a domain through a database schema.
Each bounded domain has an own independent scheme and could have a persistence store for comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tags are classification information associated with an instance and should be stored within the entity.
The set of tags is often transformed to a textual representation and stored in a column.
The search features of the underlying database can be applied for selecting instances of interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tag types are a medium to define an ontology and create valid tag instances.
A set of tag types shall always be associated with a specific domain of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We provide a Java library &lt;a href=&#34;https://blog.tangly.net/docs/domains/crm/&#34;&gt;CRM&lt;/a&gt; implementing these constructs.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;tangly open source components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Entities, Identifiers, External identifiers and Names</title>
      <link>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-08-01-head.png&#34; alt=&#34;2020 08 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A software architect models customer domains and maps them to powerful software abstractions &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-storytelling&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.
Soon you correlate internal efficient identifiers, meaningful external identifiers, and domain entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You enjoy long conversations with the enterprise data architect and identify the system owning a specific external identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you relate to external systems and communicate with other companies?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you define internal identifiers, which grow with application success?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you bridge the customer world with your software solution?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are the good practices to create a maintainable, legible and efficient model of your domain model?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_entity_concept&#34;&gt;Entity Concept&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need an approach to model customer domain entities and map them to a legible and maintainable software construct
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An entity is a user domain model abstraction and is mapped to a software type.
The entity has:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;unique mandatory internal&lt;/em&gt; object identifier &lt;strong&gt;&lt;em&gt;oid&lt;/em&gt;&lt;/strong&gt;, we recommend the use of numeric values to improve performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A public and &lt;em&gt;external identifier&lt;/em&gt; &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt;, we recommend the use of text to adequately support various external identification schemes.
An example is the European enterprise identifier EUID identifying a company or a certified natural person in Europe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A human-readable &lt;em&gt;name&lt;/em&gt;.
A name does not need to be unique in the system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A more sophisticated variant provides additional features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A set of tags to classify the instance through a crowd based ontology.
Tags are often called labels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A list of comments to add human-readable information to the instance.
Comments have a timeline and can be sorted by creation date.
The comments can be extended to add audit information such as functional change information or activities related to the instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These entity features should be defined as a set of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mixin&#34;&gt;mixin&lt;/a&gt; interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_internal_object_identifiers_oid&#34;&gt;Internal Object Identifiers &lt;em&gt;oid&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The object identifier &lt;em&gt;oid&lt;/em&gt; uniquely identifies an instance of a specific type or belonging to a specific type hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This identifier shall be a numerical value to increase the performance of persistent solutions.
It is used as an internal identifier in the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It should never be visible outside the system or published through an API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ideally, the identifier is universally valid and uniquely identifies an instance in all contexts.
For example, the concept of UUID tries to provide such an identifier.
The drawback is that the UUID is not a numerical value and cumbersome for a developer or a user to memorize.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An interesting approach is to support unique identifiers in the context of a bounded domain.
All entities of the domain will have unique object identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The implementation can use a sequence from the domain database or schema.
A programmatic identity generator can also be established in the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because the &lt;em&gt;oid&lt;/em&gt; is never exported, the solution is powerful and simple to realize.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;History has taught developers not to spare on the size of identifiers.
Please use a long value meaning 64 bits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid using the internal identifier to communicate with external systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you respect this rule, you are free to migrate your objects to another identification scheme in the future.
New schemes are often helpful when the application grows, or you have later to import and take over a lot of legacy data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_external_object_identifiers_id&#34;&gt;External Object Identifiers &lt;em&gt;id&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The external unique identifier &lt;em&gt;id&lt;/em&gt; shall uniquely identify an entity instance.
It is used as an external identifier to communicate with other systems.
It should always be visible outside the system and is used in any public API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try to have exactly one external identifier per object to communicate with external systems.
This restriction is a corollary of the rule stating an instance is owned by exactly one system.
This system is the one defining and managing the external unique identifiers for the related instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should clearly define the owning system for the external identification scheme.
This information shall be documented and accessible to all involved parties.
This process is part of the enterprise architecture activities of your ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;External identifier ownership is often a murky situation when working with legacy systems.
You often have multiple sources of external identifiers, sometimes overlapping and sometimes not covering all instances.
You have to formulate a long-term strategy to clean up your landscape and handle the problems until these cleanup activities are completed.
By handling, we mean administrative and import rules matching the various external identifiers to the same object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One possible solution is to use tags.
Store externally defined identifiers as tags.
Document these tags as specific for the external system.
This approach scales to multiple external identifiers, and multiple systems managing the same external identifier.
So you have a scalable approach and do not pollute your domain model with spurious information defined in external systems.
Upon completion of the refactoring activities, these tags document historical information and could safely be removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Multiple external object identifiers imply the existence of mapping functions to identify the object referenced.
Because the ownership of external identifiers is outside your system, you are dependent on these systems and have to hope they are good citizens.
The key rule of good systems is that they never change external identifiers.
As soon as you modify identifiers, they are per definition no more real identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_names_name&#34;&gt;Names &lt;em&gt;name&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The entity &lt;em&gt;name&lt;/em&gt; is a human-readable name to distinguish between entity instances.
Ideally, it should be almost unique.
The fallback is to use the external unique identifier &lt;em&gt;id&lt;/em&gt; known to all external systems.
The drawback is that we have no guarantee it is legible for users.
Names are essential for well-designed user interfaces.
Never require from your users memorizing external identifiers, please provide names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For example, the first and last names of a person is the name for a natural entity.
Social security number is a possible external identifier An internal identifier is used as a primary key in the persistence storage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advices&#34;&gt;Advices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Internal object identifiers are identifiers.
An identifier is immutable and should be numerical for performance reasons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;External object identifiers have exactly one application in charge to create them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Names are human-readable and improve the legibility and usability of the user interface and reports.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;External identifiers can be tricky.
In Switzerland, we had an old social security number, which is still referenced in a lot of legal systems.
For example, it is still part of your tax salary yearly form.
This is the reason I strongly advocate internal identifiers.
You have no control over external systems providing accepted external identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are a key element to model entities using the domain driven design &lt;em&gt;DDD&lt;/em&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have a new social security number, which is used in social insurance workflows.
&lt;em&gt;The same number is also used in medical insurance workflows.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also have a federal identity card number, a federal passport number, and a federal driver’s license number.
Additional used identifiers are medical card insurance numbers, a state tax personal identification number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All these external identifiers shall reference the same natural person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More interesting is that a tourist living in the European zone has none of these numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please implement the internal identifier feature as an interface marker.
The external identifier and name features can be grouped into one interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional information is available under &lt;a href=&#34;../../../docs/core/models/&#34;&gt;models&lt;/a&gt;.
Below the source code in modern Java is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasId&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We provide a Java library &lt;em&gt;core&lt;/em&gt; implementing these constructs.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;tangly open source components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_extensions&#34;&gt;Extensions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See our blog how to extend the entity concept with the powerful and flexible concepts of tags and comment approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another blog shows a constrained form of tags using the concept of reference codes also called reference tables or lookup tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-storytelling&#34;&gt;&lt;/a&gt;[1] S. Hofer and H. Schwentner, &lt;em&gt;Domain Storytelling&lt;/em&gt;. Pearson Education, Limited, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B099ZNXCJT&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B099ZNXCJT&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[2] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[3] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: A Journey Implementing Digital Invoices</title>
      <link>https://blog.tangly.net/blog/2020/a-journey-implementing-digital-invoices/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/a-journey-implementing-digital-invoices/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-07-01-head.png&#34; alt=&#34;2020 07 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our company has the ambition to digitize all our workflows since our inception.
We proudly state we never bought a printer or a fax machine.
Analog machines should become obsolete in the digital age.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Companies should be more environment-aware and save some trees.
See our blog on &lt;a href=&#34;../../2019/a-journey-to-be-a-digital-company-tangly-llc&#34;&gt;A Journey to Be a Digital Company&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Switzerland finally introduced a digital payment slip.
It uses a QR code and still assumes you need to print it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The European Union is more innovative and mandates that invoices to government parties must be digital.
Our company exchanges contracts and invoices with partners and customers using the standardized and well-known PDF format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is time to explore extensions to support the new legal requirements in Switzerland and in Europe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We show open source-based solutions, and the tradeoffs we had to accept.
Beware our solutions are based on the Java stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_swiss_qr_code&#34;&gt;Swiss QR Code&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-en.pdf&#34;&gt;Swiss QR-bill&lt;/a&gt; standard is based on a 2D barcode and associated human-readable text mirroring the data encoded in the barcode.
The barcode approach assumes the buyer will print the invoice.
The interested parties have to scan the barcode to digitize the invoice information.
This approach clearly breaks digitalization efforts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our approach is to add the barcode to the PDF invoice document.
The workflow can open the digitally received document and parse programmatically the image of the barcode.
The generation of the invoice and associated barcode is fully digital.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach works well only if the issuer fills the so-called SWICO field of the QR code with needed information.
For example, the due date of the invoice and the enumeration of different VAT tax percentages and corresponding VAT taxes are only stored in this field.
In other words, the standard does not foresee that the due date of the invoice should be a mandatory field.
Stated bluntly, the committee in charge of the standard realized they missed and stuck all missing elements in the so-called SWICO field.
It is clear that it is impossible to define a digital payment workflow without information on such a due date, and the VAT percentages and amounts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The library &lt;a href=&#34;https://github.com/manuelbl/SwissQRBill&#34;&gt;Swiss QR Bill&lt;/a&gt; is a mature and a simple solution to read and to write legal Swiss QR codes.
The library is under MIT license and is available for Java and .NET stacks.
The code is under active development.
The main developer is responsive to suggestions and trouble reports.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_zugferd&#34;&gt;ZUGFeRD&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The ZUGFeRD is a German initiative to promote digital invoices in Germany and in Europe.
The ZUGFeRD approach is to store the invoice data as an XML part in the PDF document of the invoice.
The standard is also called &lt;em&gt;Factur-X&lt;/em&gt; in France.
It is compatible with the European B2G invoices standard, namely &lt;a href=&#34;http://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32014L0055&#34;&gt;EN16931&lt;/a&gt;.
It can also be used for B2B invoices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;XML is not really a human-readable format.
A JSON-based approach would have been more friendly.
The advantage is that the standard contains all relevant information for an invoice and streamlines the digital processing of invoices.
You can define a workflow extracting and parsing the XML payload from all received invoices, and feeding the information to your ERP system for further processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The library &lt;a href=&#34;https://github.com/ZUGFeRD/mustangproject&#34;&gt;Mustang ZUGFerD&lt;/a&gt; is a mature and usable solution to read and write digital ZUGFeRD invoices.
The library is under Apache 2.0 license.
The current version 2.1 of the standard is fully supported.
ZUGFeRD additionally can transform a PDF/A-1 into a PDF/A-3 format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other similar libraries are also available, but the ones we found have quite restrictive licenses.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pdf_aspects&#34;&gt;PDF Aspects&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The PDF format is universally known.
Special variants such as PDF/A1 and PDF/A3 are defined for archiving purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Apache foundation hosts the library &lt;a href=&#34;https://pdfbox.apache.org/&#34;&gt;PDFBox&lt;/a&gt;.
It provides all low-level functions to create, read and edit PDF documents.
The library is naturally under &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_License&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But no open source products are available for high-level functions.
In particular, support for the creation of archive formats is non-existent.
The famous &lt;em&gt;iText&lt;/em&gt; library provides all these features, but sadly is no more open source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://ghostscript.com/&#34;&gt;Ghostscript&lt;/a&gt; provides command line support to transform a PDF document in a PDF/A version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The online service &lt;a href=&#34;https://www.pdftron.com/pdf-tools/pdfa-converter/&#34;&gt;pdftron&lt;/a&gt; provides free PDF translation to the archive format.
The &lt;a href=&#34;https://www.scribus.net/&#34;&gt;Scribus&lt;/a&gt; application supports archive format export.
The drawback is that these approaches are they require manual steps
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Mustang library supports the transformation of a PDF/A1 to a PDF/A3 document.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_2&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_2&#34; title=&#34;View footnote.&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_approach&#34;&gt;Approach&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We decided to extend our open source library to create digital invoices.
The extensions support the Swiss QR Code and the ZUGFeRD 2.1 standards.
All the information is stored in one PDF document.
This document is sent electronically to the customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our current approach is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generate&lt;/strong&gt; AsciiDoc Invoice from our invoice model (Java source code)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generate&lt;/strong&gt; the PDF output format of Invoice using AsciiDocPDF&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt; Swiss QR code as last page in the PDF invoice document&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt; ZUGFeRD XML payload in the PDF invoice document&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Currently, we do not generate PDF/A1 documents as required in the ZUGFeRD standard.
PDFBox could provide the tool box to generate in this format, but it would be quite an endeavor.
An extension to PDFBox with similar functionality to iText would ideally become available in the future.
Otherwise, we have to write the missing code; in particular, the embedding of fonts, pictures and files into the PDF document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We selected the AsciiDoc format to provide a simple approach to custom templates for invoices.
We avoided proprietary solutions based on Microsoft Office templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Feel free to use our library and examples.
They are released under Apache 2.0 license.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learnings&#34;&gt;Learnings&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source code for the invoice component is available as a Java package.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;tangly open source components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The generator code for the Swiss QR bill and ZUGFeRD data is available as Java package.
The developer was very supportive to improve the component.
For example, it is now possible to write unit tests using in-memory file systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Facture-X component also supports unit tests using in-memory file systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Not all Java developers have realized that the Java class &lt;strong&gt;File&lt;/strong&gt; should be deprecated.
&lt;strong&gt;java.io.File&lt;/strong&gt; instances always access the default file system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;java.nio.Path&lt;/strong&gt; instances contain the file system it should use and support in-memory file systems.
Use &lt;strong&gt;java.nio.Files&lt;/strong&gt; to create input streams, output streams, buffered readers, or buffered writers using path instances.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The investment to create the generators and test them against regular invoices of &lt;a href=&#34;https://www.tangly.net&#34;&gt;tangly llc&lt;/a&gt; was around four man-days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find more information about how to digitize your company in a blog describing our journey to a digital company.
We are quite proud of not having any Microsoft Office our Outlook tools.
Our whole toolchain is based on open source solutions and performs flawlessly since the foundation of our company.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. &lt;a href=&#34;https://www.onlyoffice.com/&#34;&gt;OnlyOffice&lt;/a&gt; also support PDF/A creation. They provide a free local installation package for Linux, macOS, and Windows
&lt;/div&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_2&#34;&gt;
&lt;a href=&#34;#_footnoteref_2&#34;&gt;2&lt;/a&gt;. LibreOffice can open and manipulate PDF files. You can open a PDF file and export it as PDF from LibreOffice. The application supports exporting to PDF/A version 1b, 2b and 3b. It also supports PDF/UA.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Gradle 6.4 Finally Supports Java Modules</title>
      <link>https://blog.tangly.net/blog/2020/gradle-6.4-finally-supports-java-modules/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/gradle-6.4-finally-supports-java-modules/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-05-01-head.jpg&#34; alt=&#34;2020 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 9 release introduced the concept of &lt;a href=&#34;https://www.oracle.com/corporate/features/understanding-java-9-modules.html&#34;&gt;modules&lt;/a&gt; within the Java language.
Java 9 was released in September 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Until now, creating Java modules was quite cumbersome and Gradle did only offer limited support through external plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the release of &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; 6.4 in May 2020, software developers can finally easily generate well-behaved Java modules.
We had to wait almost three years for native support!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Support for modules is native in the Java plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You only need to add &lt;strong&gt;one configuration line&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Start using Java modules and have language support to enforce modularity in your product.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_java_modules_in_gradle_6_4&#34;&gt;Java Modules in Gradle 6.4&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle supports the Java module system with everything you need to compile, test and execute tests for Java modules.
You can also build Javadoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While there is some overlap with Gradle’s dependency management features, Java modules offer module boundaries that are enforced by the Java runtime.
Modularity is enforced at the language level instead of coding conventions or using external tools such as &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The only thing you need to configure is module path inference for the Java plugins.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;java&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;modularity&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;inferModulePath&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
 &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then you just need to make sure you write a proper Java module by providing a module information file.
An example of a module information file is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;dsl&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;tangly&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fsm&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;utilities&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;apache&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;logging&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;log4j&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;requires&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;org&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;jetbrains&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;annotations&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;;&lt;/span&gt;
 &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 14 in Gradle Java 14 was also released in Spring 2020. It is worth experimenting with the new preview features.
The following configuration is needed in Gradle to compile, test, execute and generate JavaDoc when using Java 14 preview features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;groovy&#34;&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;withType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;JavaCompile&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;encoding&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;fork&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;incremental&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;warnings&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;deprecation&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;compilerArgs&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;-parameters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;--enable-preview&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;-Xlint:unchecked&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;withType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;Test&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;useJUnitPlatform&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;()&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;setExcludeTags&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;integration&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;localTest&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
     &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jvmArgs&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;--enable-preview&amp;#34;&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;maxParallelForks&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;8&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;failFast&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;false&lt;/span&gt;
   &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;withType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;Javadoc&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;javadoc&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;encoding&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
       &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;addBooleanOption&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;-enable-preview&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
       &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;addStringOption&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;-release&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;14&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt;
     &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;withType&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;JavaExec&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
     &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;jvmArgs&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#39;--enable-preview&amp;#39;&lt;/span&gt;
   &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware that &lt;a href=&#34;https://www.jacoco.org/&#34;&gt;JaCoCo&lt;/a&gt; shall only release a version supporting code coverage for JDK 14 and, in particular, record not before June 2020.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Gradle 7.0 released in Spring 2021 transparently supports Java modules. If you use the &lt;em&gt;java-library&lt;/em&gt; plugin, the support of Java modules is transparent.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Agile Component Design</title>
      <link>https://blog.tangly.net/blog/2020/agile-component-design/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/agile-component-design/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-04-01-head.jpg&#34; alt=&#34;2020 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are an experienced programmer.
You master your primary technology stack and systematically write clean code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your team recognized your merits and asked you to take ownership of whole packages in the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are now responsible for creating or modifying a software component in your current application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is a &lt;strong&gt;design&lt;/strong&gt; activity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you create a good, legible, maintainable component architecture?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you validate your functional and non-functional requirements?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yes, you are right.
You are responsible for &lt;strong&gt;architecture decisions&lt;/strong&gt; at component or subsystem level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below a set of tools to improve the quality of your design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design_approaches&#34;&gt;Design Approaches&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_patterns_and_idioms&#34;&gt;Patterns and Idioms&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The pattern movement was started last millennium.
Very talented and experienced developers have documented how to solve common problems elegantly and effectively.
Depending on the programming language, you are using different idioms are preferred.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The way to solve the same problem is different in Java, Scala, C++, Python or C#.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should know all regular structural, behavioral and creational patterns &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#design-patterns&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.
Explore your programming language and discover how idioms and patterns have evolved between major releases.
For example, lambda expressions and streams introduced in Java 8 - released Spring 2014 - completely transform the solution for regular business logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records introduced in Java 14 - released Spring 2020 - have a huge impact on how your architecture deals with data transfer objects – DTO – and immutability
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_read_open_source_code&#34;&gt;Read Open Source Code&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Stop inventing the wheel again and again.
&lt;a href=&#34;https://en.wikipedia.org/wiki/Not_invented_here&#34;&gt;Avoid Not Invented&lt;/a&gt; Here syndrome.
Your current problem was already solved multiple times.
Explore open source solutions, read posts, study books.
Select the most adequate solution and fill free to adapt and improve it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instead of searching for a solution for days, post your question on an adequate forum or on &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt;.
Fill free to improve the suggested solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Become more efficient and use the wisdom of all these developers accessible through the Internet.
Always verify the quality and adequacy of their proposed solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_standard_api&#34;&gt;Java Standard API&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Know your programming language and the huge associated standard libraries part of your technology stack.
Wisdom is coded in this code.
Standard patterns are implemented in almost all packages.
Idioms are encoded everywhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See how Java deals with human and machine time with &lt;a href=&#34;https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/package-summary.html&#34;&gt;java.time&lt;/a&gt; package.
Decades of trials and errors were needed to finally create a balanced and simple to use time abstractions.
The author of &lt;a href=&#34;https://www.joda.org/joda-time/&#34;&gt;Joda Time&lt;/a&gt; experimented years before he wrote the java time package – JSR 310 – introduced in Java 8.
All these decisions and learning are encoded in this code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_clean_architecture&#34;&gt;Clean Architecture&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_clean_code&#34;&gt;Clean Code&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You want to create a clean architecture &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-architecture&#34;&gt;2&lt;/a&gt;]&lt;/span&gt; you are proud of.
You must first write a clean code &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-code&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.
Clean architecture build up on clean code.
Promote clean code in your agile team.
Agile code is clean code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Modern integrated development environments &lt;em&gt;IDE&lt;/em&gt; provide static code analysis tools to detect smells in your source code.
&lt;a href=&#34;https://www.sonarlint.org/&#34;&gt;SonarLint&lt;/a&gt; is available for all major integrated development environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use these tools to steadily improve the quality of your code and remove well-known smells.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Do not fall to the fallacy to draw beautiful and useless &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Modeling_Language&#34;&gt;UML&lt;/a&gt; diagram and write thick
&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_architecture_description&#34;&gt;Software Architecture Design&lt;/a&gt; documents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The real architecture is hidden in the source code of your product.
You still document all major &lt;a href=&#34;https://en.wikipedia.org/wiki/Architectural_decision&#34;&gt;Architectural Decisions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_know_your_programming_language&#34;&gt;Know Your Programming Language&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are developing in Java, you should use the current features of the programming language.
For example, with Java 14, you have access to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Try with resources and &lt;em&gt;closeable&lt;/em&gt; resources.
This construct is an implementation of automatic resource management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutable collections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Streams, optionals, filters, and collectors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predicates and functions to define lambda expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Records and immutability for objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pattern matching syntactic sugar as for &lt;em&gt;instanceof&lt;/em&gt; operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch expressions and not only switch statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Text blocks to write legible multi-line text expression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_aggressive_refactoring&#34;&gt;Aggressive Refactoring&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The entropy of the source code increases over time.
Only continuous and aggressive refactoring mitigates the degenerescence of your application &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#refactoring&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#refactoring-2nd&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#refactoring-to-patterns&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#working-effectively-with-legacy-code&#34;&gt;7&lt;/a&gt;]&lt;/span&gt;.
Each time you correct an error or add a new functionality refactor your code.
Remove smells, compiler warnings and migrate older code to use newer and better features of your programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_acceptance_test_driven_development&#34;&gt;Acceptance Test Driven Development&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your users want a working application.
Write acceptance tests insuring all relevant functions are tested through your continuous integration pipeline.
You guarantee your users the application behaves as specified.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_test_driven_development&#34;&gt;Test Driven Development&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Testability and changeability of your application are architectural aspects.
You must have a way to verify these non-functional requirements.
Test driven development is a proven approach to fulfill these requirements and validate them continuously.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_continuous_integration&#34;&gt;Continuous Integration&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Continuous integration and delivery are the mechanisms to continuously validate and verify all functional and non-functional requirements are correctly implemented
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#continuous-delivery-pipelines&#34;&gt;8&lt;/a&gt;]&lt;/span&gt;.
You guarantee your users and customers that any software delivery they get is compliant and correct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each time you find a discrepancy, add a test validating the requirement behind this fault.
The same error will never happen again.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_good_practices&#34;&gt;Good Practices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Publish your components on a central repository such as &lt;em&gt;Maven Central&lt;/em&gt;.
Your users have easy and standardized access to your components and their latest version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Build tools such as &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle Build Tool&lt;/a&gt; and &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; or IDE such as &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; allows potential users to fetch the component without having to install out-of-the-box mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Javadoc is the standard and hugely helpful approach to document classes and component public interfaces in Java.
Similar tools exist for other programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture design records provide hints why specific design decisions were chosen.
Your users can better understand the path you follow and the selected tradeoffs of your design.
They do not have to agree, but they can understand the arguments why you choose so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Static code generator is an actual good practice to provide the current documentation and tutorials for your components.
We write all our documentation in the &lt;a href=&#34;https://asciidoc.org/&#34;&gt;Asciidoc&lt;/a&gt; format - including &lt;a href=&#34;https://plantuml.com/&#34;&gt;plantUML&lt;/a&gt; and highlighted source code - and generate our website using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; tool suite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Start small and improve your approach every day.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_agile_architecture_series&#34;&gt;Agile Architecture Series&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The agile architecture track contains the following blogs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also published our &lt;a href=&#34;https://www.tangly.net/insights/continuous-learning/agile-architecture-course&#34;&gt;agile architecture course&lt;/a&gt; (3 ECTS) used for teaching computer science students at bachelor level at Swiss technical universities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_links&#34;&gt;Links&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.innoq.com/en/blog/is-domain-driven-design-overrated/&#34;&gt;Is Domain Driven Design Overrated?&lt;/a&gt;.
Stefan Tilkov.2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tilkov.com/post/2021/03/01/ddd-is-overrated/&#34;&gt;DDD is overrated&lt;/a&gt;.
Stefan Tilkov. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-principles&#34;&gt;Agile Architecture Principles&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-code-is-clean-code&#34;&gt;Agile Code is Clean Code!&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2019/agile-architecture-within-scrum/&#34;&gt;Agile Architecture within Scrum&lt;/a&gt;
Marcel Baumann. 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/agile-component-design&#34;&gt;Agile Component Design&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/legacy-systems-refactoring&#34;&gt;Legacy Systems Refactoring&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/how-agile-collaborators-learn&#34;&gt;How Agile Collaborators Learn&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;design-patterns&#34;&gt;&lt;/a&gt;[1] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, &lt;em&gt;Design Patterns&lt;/em&gt;. Addison-Wesley Professional, 1995 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B000SEIBB8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B000SEIBB8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[3] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[4] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, First. Addision-Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B004PQQRK2&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B004PQQRK2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-2nd&#34;&gt;&lt;/a&gt;[5] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-to-patterns&#34;&gt;&lt;/a&gt;[6] J. Kerievsky, &lt;em&gt;Refactoring to Patterns&lt;/em&gt;. Addison-Wesley Professional, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321213351&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321213351&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;working-effectively-with-legacy-code&#34;&gt;&lt;/a&gt;[7] M. C. Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;. Prentice Hall, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0131177052&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0131177052&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;continuous-delivery-pipelines&#34;&gt;&lt;/a&gt;[8] D. Farley, &lt;em&gt;Continuous Delivery Pipelines&lt;/em&gt;. 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B096YGZVZ9&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B096YGZVZ9&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. Java 17 LTS added full support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;algebraic data types.&lt;/a&gt; with the record and sealed concepts.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Java Records Are Here - Available in JDK 14</title>
      <link>https://blog.tangly.net/blog/2020/java-records-are-here-available-in-jdk-14/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/java-records-are-here-available-in-jdk-14/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-03-01-head.jpg&#34; alt=&#34;2020 03 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need &lt;strong&gt;justification&lt;/strong&gt; not to use immutable objects in our solutions, rather than an &lt;strong&gt;affirmative reason&lt;/strong&gt; to use them.
Records provide a first-class means for modeling data-only aggregates.
They have been available in Java since the release of JDK 14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records are often seen as &lt;em&gt;syntactic sugar&lt;/em&gt; to easily create &lt;em&gt;immutable objects&lt;/em&gt; without having to write too much boilerplate code.
Records as a clean definition of immutable objects can have a tremendous impact on your component design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You as a designer have to reflect why your abstractions are not immutable and what is the rationale behind.
From my experience, it improves the quality of your design.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records guarantee:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An immutable class concept which is the strongest argument for the use of record.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cannot change their state after construction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t change the state of the whole system in any way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not do side effects, like inputs and outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records provide&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A set of boilerplate methods generated by the Java ecosystem.
These methods are always semantically correct and efficient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A public constructor initializing all instance variables Getters for all instance variables.
The name of the getters is PropertyType property().
We get rid of the cumbersome and outdated convention &lt;em&gt;PropertyType getProperty()&lt;/em&gt; propagated by Java Beans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A semantic correct implementation of &lt;em&gt;hashCode()&lt;/em&gt; and &lt;em&gt;equals()&lt;/em&gt;.
Your objects can be used in standard API collections without difficult to find bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A human-readable implementation &lt;em&gt;toString()&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The huge advantage of the approach against IDE code generation is the guaranty that these methods are semantically always correct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advantages&#34;&gt;Advantages&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The key benefits of immutable objects are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thread safety&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomicity of failure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Absence of hidden side effects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protection against null reference errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ease of caching&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prevention of identity mutation, &lt;em&gt;see contract for API standard collections&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoidance of temporal coupling between methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for referential transparency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protection from instantiating logically invalid objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protection from inadvertent corruption of existing objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design_impact&#34;&gt;Design Impact&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I updated my open source projects to use the record abstraction.
What a surprise!
I found regularly undocumented trade-offs why a class was not implemented as an immutable type.
Quite often, I was just lazy and took a shortcut.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Records motivate you as a clean coder and designer to decide why a class should be mutable or not.
This pressure had a tremendous impact on the quality of my subsystem design.
The Java language guarantees that all record classes must be immutable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Immutable value objects are a cornerstone in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Design&lt;/a&gt; &lt;em&gt;DDD&lt;/em&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When you are using Data Transfer Objects, DTO they should probably always be records.
In the long run, you should eliminate your DTO, they are just waste and break all the rules of abstraction and information hiding.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tricks_and_tips&#34;&gt;Tricks and Tips&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can define a constructor extension to validate the passed arguments.
This validation block is automatically inserted at the beginning of the generated constructor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;Range&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;lo&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;hi&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Range&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;lo&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;hi&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #6e7781&#34;&gt;// referring here to the implicit constructor parameters&lt;/span&gt;
            &lt;span style=&#34;color: #cf222e&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0a3069&#34;&gt;&amp;#34;(%d,%d)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;lo&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;hi&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;
 &lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;if the record has more than a few instance variables, calling the constructor with various sets of default values can become cumbersome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Two approaches easily mitigate this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create static factory methods taking care of default parameter values for simple situations.
Look at the standard API List class and the set of static methods &lt;em&gt;of&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement the builder pattern to provide full flexibility to the consumers of your class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Start using the new concept of record in your source code and implicitly improve the quality of your design.
At the same time, write less boilerplate code and enjoy coding.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Time to Migrate to a Modern JDK, Laggards!</title>
      <link>https://blog.tangly.net/blog/2019/time-to-migrate-to-a-modern-jdk-laggards/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2019/time-to-migrate-to-a-modern-jdk-laggards/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-10-01-head.jpg&#34; alt=&#34;2019 10 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Are you still using &lt;em&gt;Java 8&lt;/em&gt; to run your mission-critical systems?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Are you truly using daily a &lt;em&gt;six years old&lt;/em&gt; technology stack?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Are you already applying for a Java laggard club membership?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are still using Java 8, you are using technologies released in Spring 2014.
You are missing all the improvements in the garbage collector, runtime engine, and various APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java 11 LTS was released in September 2018.
The current LTS release is one year old.
You had one year to migrate to this long-term solution version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is time to modernize the fundament of your application and invest a small amount of effort in it.
The payback is fantastic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_advantages&#34;&gt;Advantages&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You have economic gains through&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Major performance improvements make your application faster.
You have either higher customer satisfaction or need less processing resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Major garbage collector updates make your application more predictable.
The maximum amount of memory is often lower.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better behavior in container environment translates to less resource usage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have more legible and maintainable source code.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since Java 8, useful new language features have been introduced, along with new tooling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Various standard APIs were extended with convenience methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One important change was that internal APIs - largely those classes in packages that started with sun.misc.* - were hidden from use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;APIs that are not core to the JDK have also been removed in Java 11 or later.
These changes may impact your application, but there is a clear path to avoid these problems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to select either the long-term support path or upgrade every six months the Java runtime.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When upgrading the choice you face is whether to use the latest version of Java, currently 13 and be prepared to upgrade every six months.
Or upgrade to the latest LTS 11 to give yourself up to three years to think about your next upgrade,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t be tempted to ignore compiler warnings.
Deprecation is being taken much more seriously in this modern Java world, and both Java 10 and Java 11 removed APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In less than two years, the next LTS will be released with Java 17. It is scheduled for September 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become more agile&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Once over this first upgrade, it is worth at least testing the application on the latest version of Java every 6 months, for example in CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In all cases, openJDK is now the new default.
Various companies - Oracle, Redhat, Amazon, Azul, IBM - provide commercial support for openJDK for different timelines.
You are more flexible with your migration timeline.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2019-10-01-jdk-releases.png&#34; alt=&#34;2019 10 01 jdk releases&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_migrate&#34;&gt;How to Migrate?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You do not need to implement Java modules to migrate to Java 9 or beyond.
It is worth the effort to slowly support the module approach.
Your architecture will become more modular and the interfaces are more clearly defined.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are basically four incremental phases to fully migrate to Java 11 or later:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run an existing Java application with the JDK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile the application with the JDK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the new features of the current JDK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modularize the application to use the module system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You could recompile and run your solution with the new Java version without code changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Changes are necessary if you use deprecated packages or access Sun internal packages.
All deprecated packages have a compatible alternate implementation.
Often you need to update the import statements.
Sun packages have a documented migration path to alternate approaches providing similar functionality.
By the way, the &lt;em&gt;Sun&lt;/em&gt; company already stated years ago, you should not use these internal packages.
So it is time to clean up your code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_call_for_action&#34;&gt;Call for Action&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Start your migration to a modern JDK now and leave Java 8 behind you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anyway, you can only tinker with the date, you will have to migrate at some point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Sonar Lint for the Impatient</title>
      <link>https://blog.tangly.net/blog/2018/sonar-lint-for-the-impatient/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/sonar-lint-for-the-impatient/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-05-01-head.png&#34; alt=&#34;2018 05 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Remove issues before they reach customer sites.
No quality problems shall reach your Git master branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt; is a central server that processes full analyses (triggered by the various SonarQube Scanners).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Its purpose is to give a 360° vision about the quality of your code base.
For this, it analyzes all the source lines of your product on a regular basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It should be added that SonarQube also performs scans with well-known third party analyzers (&lt;a href=&#34;https://spotbugs.github.io/&#34;&gt;SpotBugs&lt;/a&gt; - previously FindBugs -,
&lt;a href=&#34;http://checkstyle.sourceforge.net/&#34;&gt;Checkstyle&lt;/a&gt;, &lt;a href=&#34;https://pmd.github.io/&#34;&gt;PMD&lt;/a&gt;) whereas SonarLint does not include those.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I think the reason is a prioritization on performance and findBugs relying on java byte-code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_is_sonarlint&#34;&gt;What is SonarLint?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SonarLint lives only in your IDE (IntelliJ, Eclipse, or Visual Studio).
Its purpose is to give instantaneous feedback as you type your code.
For this, it concentrates on what code you are adding or updating.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Findings are displayed in the source code with information such as rule violation, rating of the rule and explanation.
You have a window where all findings are displayed to provide an overview and navigation support.
You are free to analyze a single file, a package, or the whole product; you can also exclude files or packages from the analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Connect SonarLint to your preferred code quality application.
It then uses the same code analyzers, rules and settings locally that are used on the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Issues marked as Won’t Fix or False Positive in SonarQube or SonarCloud disappear from your IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Both SonarLint and SonarQube rely on the same static source code analyzers – most of them being written using SonarSource technology.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_to_use_it&#34;&gt;How to use It?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;the SonarLint in your favorite IDE&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;configure the SonarCube instance to synchronize the rule set used in your product.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the plugin to access your SonarCube instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run it.&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;See the messages in the next few seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jump to the source and correct the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate until all issues are solved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run your unit tests and acceptance tests – TDD and ATDD -.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit your changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This approach guarantees you always release source code with less SonarCube issues.
SonarCube always shows no findings for new code and for refactored code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And you have made a step to the journey to become a professional software developer and achieve
&lt;a href=&#34;../../2018/pragmatic-craftsmanship-professional-software-developer/&#34;&gt;craftsmanship&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Java 10 aka 18.3 Changes</title>
      <link>https://blog.tangly.net/blog/2018/java-10-aka-18.3-changes/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/java-10-aka-18.3-changes/</guid>
      <description>
        
        
        &lt;div class=&#34;openblock float-group&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-03-01-head.png&#34; alt=&#34;2018 03 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Oracle has decided to release a new JDK two times a year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The next release of Java 10 aka 18.3 will be available in March 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JDK 11 aka 18.9 will be released in September 2018.
Java 11 will also be a long-term support &lt;em&gt;LTS&lt;/em&gt; release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For Java to remain competitive, it must not just continue to move forward — it must move forward faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Mark Reinhold
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_visible_change&#34;&gt;The Visible Change&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The visible change is the dawn of the keyword &lt;strong&gt;var&lt;/strong&gt;.
Now instead of typing the type declaration of a local variable - local to a method, a block or an instruction - you can use the keyword var.
The constraint is that the variable is initialized at declaration.
Stay tune for more support in JDK 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When the type declaration is a complex generic type definition, the var shortcut is a boon.
The code is less verbose and the legibility is at least as good.
When the type is a class name, I got the impression. the benefit is less clear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As an exercise, I updated the source code of open source libraries which I have written and the associated tests as in&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #953800&#34;&gt;Event&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Events&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Event&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Events&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;AA_AB&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #cf222e&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;Event&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;Events&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #116329&#34;&gt;AA_AB&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first impression is that the new construct sometimes simplifies the code of the library and very often improves the test cases.
Perhaps it takes time until I am accustomed to the new way of writing Java code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_under_the_hood_changes&#34;&gt;Under the Hood Changes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source code of the JDK is consolidated into one repository.
It makes development work more efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The garbage collector shall have a clear and documented API.
Developing and adding new garbage collectors is easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Various updates such as the Unicode newest version.
The extensions are used in library classes to better support locales.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Open JDK and Oracle JDK are slowly merging.
For example, CA certificates will be provided to OpenJDK by Oracle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_outlook&#34;&gt;Outlook&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The rhythm of releases is staggering higher.
Starting Spring 2018, we will have * The new rule as blogged by Mark Reinhold &lt;a href=&#34;https://mreinhold.org/blog/forward-faster&#34;&gt;Moving Java Forward Faster&lt;/a&gt;.
* You will get a new JDK every six months * You will get security updates every three months * You will get a long-term support release every three years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This means that you shall update your JDK in development environment six times a year if you want to install the new JDK and the security releases.
We recommend automating the process in your environment.
And you shall deliver your applications in Docker containers to support the whole ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The tool landscape is still struggling to adapt to the new rhythm.
I am working with IntelliJ IDE and I had to wait for the EAP 2018.3 before being able to write JDK 10 code in the IDE.
I use Gradle as a building tool and also to wait until JDK 10 was at least partially supported.
And I am still waiting for the update of the code coverage plugin.
Before that, I was back to stone age, writing software with a text editor and compiling it with the command line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The library landscape is often behind. They are regularly incompatible with the newest version of the JDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;JavaFX will be removed from the regular JDK distribution in Fall 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The cloud landscape does not support the latest JDK as SAAS.
You must provide your custom docker images with the expected JDK or JRE.
So we are back to IAAS.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Why is it so Cool to Develop with Java?</title>
      <link>https://blog.tangly.net/blog/2018/why-is-it-so-cool-to-develop-with-java/</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2018/why-is-it-so-cool-to-develop-with-java/</guid>
      <description>
        
        
        &lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2018-01-01-head.jpg&#34; alt=&#34;2018 01 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Why is it so cool to develop software using Java, a modern IDE and agile tools?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because the environment empowers you and incredibly speed-up your development outcomes.
In seconds, you know if the next code increment adds value to your product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Test driven development and static quality tools are integrated in your IDE.
Each time you check some code into your Git repository, all configured checks shall be executed before allowing the commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Liberated your team works adding functions and no more spend unaccounted hours in setting up infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This trend is propagating to other technology stacks such as Python or C#, but less for PHP or Javascript/Node.js worlds.
I still experience higher maturity in the Java toolchain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below, our current set of techniques and tools to multiply our results and bring earlier products to your customers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_java_quality&#34;&gt;Java Quality&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_solution_quality&#34;&gt;Solution Quality&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most efficient approaches to improving the intrinsic quality of your software solution are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Use Pair Programming&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Write regularly together source code.
Decide that all complex code parts shall always be developed through pair programming.
If you feel adventurous, give a try to mob programming.
Pair Programmers learn:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To perform a form of continuous review.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To provide a measurable increase of quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To evaluate more options than solo programmers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To smooth the low points of your partner and level-up the high points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To produce simpler solutions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Use Refactoring&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Before pushing your code to the Git repository, always take a look and refactor your code.
You are a craftsman and shall be proud of your result,&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Use Java 8 Lambdas and Streams&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Actual Java code builds on lambda expressions and stream constructs.
Your for loops are replaced by stream pipeline, your algorithms extensively use lambdas.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Use Java 9 Modules&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It is finally possible to clearly define public interfaces of a whole software component.
Configure the dependencies to other libraries and identify specific modules as privileged participants.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Do not write Java code as it was done last millennium.
Use the actual constructs to write solid and resilient code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pairs complete a task in 60% of time taken by a solo programmer.
So two people are almost but not quite twice as fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Programmers working in pairs produce higher-quality output.
Teams with high scores in stability and throughput spend 44% more time on new work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;No better way to spread learning in a team!&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_code_quality&#34;&gt;Code Quality&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most efficient tools to detect glitches or legacy constructs in your code are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;SonarLint&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The plugin for your favorite IDE provides all the SonarCube checkers to apply on your source code.
Purify it before pushing it into the continuous build pipeline.
The plugin supports download of tailored rules from your company SonarCube instance.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;SpotBugs&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The successor of the wildly popular FindBugs tool can be integrated in your build pipeline to improve the odds of correctness.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;PMD&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Is another tool to automatically detect potential quality problems.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;IntelliJ IDEA build-in Checks&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You are lazy and do not want to use additional tools.
Please use at least the build-in checkers of IntelliJ IDEA to improve your code.
It is very unprofessional to have equality problems or boolean condition errors in modern code.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_test_quality&#34;&gt;Test Quality&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_test_driven_development_tdd&#34;&gt;Test Driven Development - TDD&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are serious about development quality code.
So you are working with the test driven approach TDD and need to write unit tests.
Each time you write some code, you go through the loop &amp;#34;red - green - refactor - commit&amp;#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Junit 5&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;is the standard and best unit test framework for Java solutions.
The newest version supports lambdas is a pleasure to use.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;AssertJ&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;enables the writing of legible assert statements in your unit tests.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Mockito&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Tests must be lightning fast, thousands of unit tests shall run in a few seconds.
Remove all dependencies to external components from your source code, mock these elements with Mockito.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Hamcrest&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Your test conditions are complex.
You want to have a legible code, start using hamcrest to write clear assertions in your tests.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please never access a database or a file system when running unit tests.
If you low-level tests with files, use an
&lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;in-memory file system mock&lt;/a&gt;.
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each time an error is found in productive code, write first a test to reproduce it, then correct the error.
This approach guarantees the same error will never again occur.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_acceptance_test_driven_development_atdd&#34;&gt;Acceptance Test Driven Development - ATDD&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You are serious about delivering the functions your customer needs.
Each story you implement has acceptance criteria.
These acceptance criteria define your requirements.
See &lt;a href=&#34;https://en.wikipedia.org/wiki/Specification_by_example&#34;&gt;specification by example&lt;/a&gt;.
Your acceptance tests document and validate these requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Cucumber&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Write your acceptance criteria and document your requirements in one step.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Remember stories are not requirements, they are work items.
Requirements are coded and documented in your acceptance tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_continuous_integration&#34;&gt;Continuous Integration&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile means reacting to all changes.
Lean means build-in quality.
Your continuous pipeline certifies after each change that your solution is correct and has the correct behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Gradle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Is the new standard for building your artifacts.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Jenkins&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Is the regular tool for a local build pipeline.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you have a choice, use cloud continuous integration for team activities.
Decide if you prefer the cloud approach – e.g., with TravisCI or Bitbucket Pipelines – or Jenkins within Docker for your local integration activities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A smooth running CI pipeline is a boost for team morale and motivation.
To know that your application compiles and runs through all your automated tests anytime is such a good feeling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_continuous_delivery_and_deployment&#34;&gt;Continuous Delivery and Deployment&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Agile means to react fast the changes.
You need to deliver and deploy your new solution to your customers in minutes or hours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Docker&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Virtual machines were a powerful construct, but they are slow and require a lot of resources.
Docker is the answer.
Start a testing instance in 300 milliseconds.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Tomcat and TomEE&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Embedded servers deployed in docker image in a matter of seconds.
Actual versions of Tomcat or TomEE support it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;hsqldb&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;In memory database are lighting fast for integration and test staging areas.
Later move to a file-based database for the production area.
The database shall be a configuration of the delivery and not require a new compilation.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Google Cloud AppEngine&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;To deploy various integration environments&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_design_quality&#34;&gt;Design Quality&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Important decisions and overall structure shall be documented for new team members.
Architecture Decision Record: A lightweight approach to document architecture decisions using Markdown documents and traceability through the decision history.
UML: Sometimes I would like to draw some UML diagrams to explain a design solution.
I am currently using a textual tool to define such diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_development_quality&#34;&gt;Development Quality&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Analog Board&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Nothing beats a big analog board in the team room as the ideal information radiator.
If you want your collocated to work effectively and solve problems as a team, you shall provide an analog board.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Trello, Stride, BitBucket, Hipchat and others Atlassian tools for distributed teams&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The first advice is to have a collocated team.
The productivity and performance gains are unachievable in a distributed environment.
We have splendid experience with Atlassian and Google App solutions to mitigate the drawback of distributed teams and establish a team work atmosphere.
But a collocated team still rocks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;IntelliJ IDEA&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This IDE is the choice for refactoring, powerful context suggestions, and efficient programming.
If you use Eclipse or Netbeans, try a friendly refactoring competition with an IDEA convert.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Git&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Stop using Subversion, CVS, TFS or other geriatric tools.
Agile development, efficient integration in delivery pipelines, and extensive refactoring require Git.
Migrate now to &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; and leave dreaded message &lt;em&gt;Tree conflict detected, please solve manually&lt;/em&gt; behind you.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These tools shall be used in the agile way.
You do not have long-lived branches in your source code management tool.
Either you have only short-lived local branches or better, you work against the trunk.
Complex branching strategies are just a waste for a lean practitioner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I decided to collect all these hints in the same long post.
They belong together.
Every day you design a solution, you code it, test it, improve it and guarantee its quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These activities are tangled together to producing a product you are proud of.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And yes, I know about GitHub, Gitlab, Slack, Ant, Maven, Jetty, Amazon Cloud, AssertJ, Subversion, Eclipse, Netbeans and other good tools.
But I still prefer the ones above; I am convinced to be more productive with them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. After years of neglect, a Jimfs 1.2 was released in January 2021 and published on maven central.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
