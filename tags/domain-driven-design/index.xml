<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Domain-Driven-Design on tangly Components</title>
    <link>https://blog.tangly.net/tags/domain-driven-design/</link>
    <description>Recent content in Domain-Driven-Design on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/tags/domain-driven-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EclipseStore</title>
      <link>https://blog.tangly.net/blog/2024/eclipsestore/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/eclipsestore/</guid>
      <description>Eclipse Store [1] is a Java-native persistence layer built for cloud-native microservices and serverless systems. EclipseStore is the only data storage solution that uses the native Java object model instead of database-specific structure or format.&#xA;It enables storing any Java object graph of any size and complexity transaction-safe into any binary data storage such as plain files, persistent volumes, or cloud object storage.&#xA;Snapshots of the object graph differences are regularly saved to the storage.</description>
    </item>
    <item>
      <title>Modular Monoliths are the new Graal</title>
      <link>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</guid>
      <description>A modular monolith is a software design approach in which a monolith is designed with an emphasis on interchangeable and potentially reusable modules.&#xA;A modular monolith can be split in the future into a set of microservices.&#xA;Delay the split as long as you can. Microservices have a steep price tag during operations.&#xA;A modular monolith provides:&#xA;Independent and parallel development approach.&#xA;Diminish coupling and improve cohesion. The interfaces are better documented and thinner.</description>
    </item>
    <item>
      <title>Software Structure with DDD</title>
      <link>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</guid>
      <description>Domain Driven Development DDD is the preferred software architecture approach for designing digital products. The method nicely matches with the operational concepts of microservices.&#xA;Domain-driven design is a holistic approach to understanding, designing and building software applications.&#xA;Seminal books [1, 2, 3] describes the approach and key concepts defining the development method.&#xA;Concrete recipes and examples of code structure are still sparse.&#xA;How should you structure your namespaces and modules?</description>
    </item>
    <item>
      <title>Meaningful Identifiers</title>
      <link>https://blog.tangly.net/blog/2021/meaningful-identifiers/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/meaningful-identifiers/</guid>
      <description>Identifiers are a key concept to successfully model complex business domains. They permeate how our modern civilization functions.&#xA;Could you imagine a country without a car registration number of vehicles, internet addresses, postal addresses or social security numbers?&#xA;Identifiers are identifiers.&#xA;Identifiers cannot be changed at any time.&#xA;Updating identifiers means introducing mapping relations between the old and the new values.&#xA;In computer science, identifiers IDs are lexical tokens that name entities.</description>
    </item>
    <item>
      <title>Value Objects as Embedded Entities</title>
      <link>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</guid>
      <description>This post discusses the value object pattern, and the factory pattern, which are tactical patterns in the domain-driven design Domain-Driven Design approach.&#xA;Value objects represent typed values that have no conceptual identity in your domain. They can help you write better codes that are less error-prone, more performant and more expressive.&#xA;Value objects define the second kind of domain objects besides entities. Their main characteristic is immutability:&#xA;Attributes of a value object never change.</description>
    </item>
    <item>
      <title>Entities, Identifiers, External identifiers and Names</title>
      <link>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</guid>
      <description>A software architect models customer domains and maps them to powerful software abstractions [1]. Soon you correlate internal efficient identifiers, meaningful external identifiers, and domain entities.&#xA;You enjoy long conversations with the enterprise data architect and identify the system owning a specific external identifier.&#xA;How do you relate to external systems and communicate with other companies?&#xA;How do you define internal identifiers, which grow with application success?&#xA;How can you bridge the customer world with your software solution?</description>
    </item>
  </channel>
</rss>
