<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tangly Components – domain-driven-design</title>
    <link>https://blog.tangly.net/tags/domain-driven-design/</link>
    <description>Recent content in domain-driven-design on tangly Components</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Jun 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://blog.tangly.net/tags/domain-driven-design/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: Modular Monoliths are the new Graal</title>
      <link>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/modular-monoliths-are-the-new-graal/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_modular_monoliths_are_the_new_graal&#34;&gt;Modular Monoliths are the new Graal&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-02-head.svg&#34; alt=&#34;2022 06 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith is a software design approach in which a monolith is designed with an emphasis on interchangeable and potentially reusable modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith can be split in the future into a set of microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Delay the split as long as you can.
Microservices have a steep price tag during operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A modular monolith provides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Independent and parallel development approach&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diminish coupling and improve cohesion.
The interfaces are better documented and thinner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better observability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_benefits_of_modular_monoliths&#34;&gt;Benefits of Modular Monoliths&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Adopting the modular approach for monolithic applications can have benefits in a few key areas, including better-organized dependencies, increased &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_reuse&#34;&gt;code reusability&lt;/a&gt;, and increased code observability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Reusability&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;For large development teams, developing modular components of an application helps to increase reusability.
Modular components can be reused and repurposed and can help teams establish a single source of truth.
This can lead to faster and more consistent development.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Better-Organized Dependencies&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Because modular monoliths make individual functions more independent, they, by nature, make dependencies more organized and visible.
This makes it easier for developers to easily assess which parts of the application require which dependencies.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Increased Observability&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Developing with modularity in mind means code is more accessible to developers.
For Java developers in particular, interface classes and their requisite javadoc comments help to enhance accessibility and interoperability for developers who may need to work with the modularized function.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Monolith Benefits&lt;/th&gt;
&lt;th class=&#34;tableblock halign-center valign-top&#34;&gt;Modular Monolith Benefits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Low operational complexity.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Low operational complexity.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Can be more secure than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Can be more secure than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Easy to manage database consistency.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Easy to manage database consistency.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Less complex than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Less complex than microservice application.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Monoliths are usually a nightmare to maintain.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Developed code is reusable.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Often called big ball of mud.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Has better-organized dependencies than a standard monolith.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;em&gt;Observability is often low.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Better code observability than a standard monolith.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_when_to_use_a_modular_monolith&#34;&gt;When to Use a Modular Monolith&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Any time a developer is working on a monolithic application, using principles of modularity can help them to improve the processes for their team.
Whether that means making dependencies more manageable within the application, improving developer interoperability on the modular components of that application, or adding modular components to the house repository, embracing modularity can have a positive impact on teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For the application itself, embracing modularity can help to organize dependencies, making it easier and less time-consuming to change components within the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good practices shall be applied to refactor the application [&lt;a href=&#34;#clean-code&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;4&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_when_not_to_use_a_modular_monolith&#34;&gt;When Not to Use a Modular Monolith&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course, just as microservices are not one size fits all solutions, neither is modularity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For developers working on small projects with small development teams, developing their code in a modular way may not be worth the added time or formality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_final_thoughts&#34;&gt;Final Thoughts&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Architecture approach for modular monoliths or microservices is &lt;em&gt;Domain Driven Design&lt;/em&gt;
[&lt;a href=&#34;#domain-driven-design&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;7&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are like many Java developers who are still working on a monolithic application, then employing modularization best practices can help make your application achieve some benefits of microservices without the associated cost of refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, modular monoliths have significant shortcomings when compared to microservices — especially in terms of continuous testing, integration, and deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_links&#34;&gt;Links&lt;/h3&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;software-structure-with-ddd&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;../../2022/software-structure-with-ddd/&#34;&gt;Software Structure with DDD&lt;/a&gt;
Marcel Baumann. 2022.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[1] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[2] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[3] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, First. Addision-Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B004PQQRK2&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B004PQQRK2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[4] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[5] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[6] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[7] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Software Structure with DDD</title>
      <link>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2022/software-structure-with-ddd/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_software_structure_when_using_domain_driven_design&#34;&gt;Software Structure when using Domain-Driven Design&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-01-head.jpg&#34; alt=&#34;2022 06 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Development&lt;/a&gt; &lt;em&gt;DDD&lt;/em&gt; is the preferred software architecture approach for designing digital products.
The method nicely matches with the operational concepts of microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design is a holistic approach to understanding, designing and building software applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Seminal books [&lt;a href=&#34;#domain-driven-design&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;3&lt;/a&gt;] describes the approach and key concepts defining the development method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Concrete recipes and examples of code structure are still sparse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How should you structure your namespaces and modules?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We propose a simple and adequate code structure for implementation using modern Java constructs.
The approach builds on the strengths of the Java packages and modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The language visibility rules enforce cohesion and minimize coupling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The described approach is ideal for small to medium software solutions.
The source code size of a bounded domain is often less than 50&amp;#39;000 lines of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The heart of software is its ability to solve domain-related problems for its user.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Eric Evans&lt;br/&gt;
&lt;cite&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_layers_in_ddd&#34;&gt;Layers in DDD&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design &lt;em&gt;DDD&lt;/em&gt; has four layers in the architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Interface
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;This layer is in charge of the interaction with the user, whether software presents information to the user or receives information from the user.&lt;br/&gt;
&lt;em&gt;I use vaadin to increase productivity.
Vaadin allows us to use the single technology stack Java to develop all backend and frontend functionalities.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Application
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;This is a thin layer between the interface and the domain, it could call domain services to serve the solution purposes.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Domain
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;The heart of the software, this layer holds domain logic and business knowledge.&lt;br/&gt;
&lt;em&gt;A major goal is to avoid any tainting of the core domain model from other layers.&lt;/em&gt;
&lt;em&gt;Try to avoid extending domain entities with implementation specific root classes or to a lesser degree annotations.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Infrastructure
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;A supporting layer for the other layers.
This layer contains supporting libraries or external services like a database or UI supporting library.&lt;br/&gt;
&lt;em&gt;I use libraries to minimize effort in support functions such as persistence, JSON transformation, archiving, and reporting.
The microstream library is a good example of this approach.
The persistence capability is less than fifty lines of code.
No changes in the domain model was necessary.
We did not have to add a root persistent class or use annotations.&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_package_structure&#34;&gt;Package Structure&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bounded domain shall be configured as a Java module [&lt;a href=&#34;#java-9-modularity&#34;&gt;4&lt;/a&gt;].
The exported services and entities are explicitly listed with the &lt;em&gt;exports&lt;/em&gt; directive.
A huge advantage is the obligation to list all dependencies with the &lt;em&gt;requires&lt;/em&gt; directive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2022-06-01-hexagonal-architecture.png&#34; alt=&#34;2022 06 01 hexagonal architecture&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java compiler validates the module dependencies and interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Services
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;defines the bounded domain context.
The domain uses the library to implement a bounded domain.
The ports, handlers and realms are declared in the context package for small bounded domains.
Complex domains can declare these interfaces in separate packages for legibility.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Logic
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains common business logic and features.
Elaborate domains can contain more business features.
Use a package structure increasing legibility and enforcing separation of concerns.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Ports
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the services receiving data and events from the environment.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Handlers
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the services providing data and events to the environment and to other applications.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Realm
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the repository functions to persist and create domain entities and object values.
The current approach uses the &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; library.
The amount of code to persist the domain model is minimal and non-intrusive
&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Domain
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;contains the abstraction describing the bounded domain.
Care is taken to define resilient and legible domain abstractions.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center kroki&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://kroki.io/plantuml/svg/eNqNkUEKwkAMRfc9xaxbbK9QRMGFCxEvkM7EGphmZJIKUry7Yyu4EFvJJiQv-T-kFoWoAl6zIRtOWWEYtVTg1t_LPG9Czw7dyoUOiPM8KxaAckoSV5iqsh5EUIxDsZEa4tboBQ00ohGsUmAx4TzWprmqWla4hmT4LfDdXm1ZSQllXPWD2Tn_j5JgvJHFGbHNx_UPYt0LMYrsQ0t21hOw8xjnkEO6fK5_RPBdAh4pamT3eusToIuaUw==&#34; alt=&#34;bounded-domain-structure&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above diagram shows the package structure for a bounded domain named &lt;strong&gt;bounded-domain&lt;/strong&gt;.
The names with the regular font are package names, the ones in italics are class names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The infrastructure supports classes are not part of this structure.
These classes shall be defined in a separate Java module and imported with regular dependency declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We use the &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; tool to ensure the expected structure is provided for each bounded domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The user interface for a bounded domain is stored in a separate package and often in its own Java module.
The bounded domain implementation shall not constrain the technologies used to provide a user interface.
Different approaches for user interface realization are available and no clear winner can currently be identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I mainly use &lt;a href=&#34;https://www.vaadin.com&#34;&gt;Vaadin&lt;/a&gt; to realize browser- or mobile-first internal applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_java_considerations&#34;&gt;Java Considerations&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Entities shall have well-documented internal or external identifiers.
Entities visible to other bounded domains shall always have an external identifier.
Identifiers are always immutable objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Objects that have a distinct identity that runs through time and different representations.
You also hear these called &lt;em&gt;reference objects&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value objects shall be expressed as Java value types.
Record construct is the preferred way to model a value object in Java.
The record concept provides the expected &lt;em&gt;equals(Object)&lt;/em&gt; behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Objects that matter only as the combination of their attributes.
Two value objects with the same values for all their attributes are considered equal.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An aggregate is a set of Entities and Value Objects that do not make sense alone.
Every aggregate has a root entity, which will be responsible for providing all methods involving business rules that will modify its child entities.
The first rule is that aggregates reference each other by identity instead of object references.
Aggregates shall be constructed with the help of factory patterns such as factory method, abstract factory, or builder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A DDD aggregate is a cluster of domain objects that can be treated as a unit.
An example may be an order and its line-items, these will be separate objects.
Tt is useful to treat the order together with its line items as a single aggregate.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Martin Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Rich domains are models that have full control of their data and do not rely on external objects to manipulate them.
Anemic domains are models that rely on other classes to validate their data.
Anemic domains are a smell in the domain-driven design world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Services should be pure functions and be stateless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pure functions are functions (or methods) that do not change the value of any object outside it.
It avoids side effects and guarantees the same output for certain inputs, meaning it needs to be completely deterministic.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Spring project has added support for bounded domain in their framework with the &lt;a href=&#34;https://github.com/spring-projects/spring-modulith&#34;&gt;Modulith&lt;/a&gt; extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gradle modules are a natural mapping for bounded domains.
Use either Java modules or archUnit to enforce that communication always goes through bounded domain interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_architecture_integrity&#34;&gt;Architecture Integrity&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A Bounded Context is a logical boundary of a domain where particular terms and rules apply consistently.
Inside this boundary, all terms, definitions and concepts form the Ubiquitous Language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good practices shall be applied to ensure the quality of the bounded domain software architecture [&lt;a href=&#34;#clean-architecture&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#refactoring-databases&#34;&gt;7&lt;/a&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Java Platform Module System (JPMS) encourages us to build more reliable and strongly encapsulated modules.
As a result, these features can help to isolate our contexts and establish clear boundaries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bounded domain is implemented as a Java module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The domain internal layered architecture is verified with &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; custom validation rules.
The rules are coded as unit tests and are processed in the continuous integration pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The advantages of the architecture are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The whole company talking the same ubiquitous language, reduced risk of misunderstandings.
Everyone needs to be aligned, both in vocabulary and ownership of the components.
The engineers have common understanding and coding guidelines to realize the layers inside a bounded domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have a segregated architecture defining a modular monolith application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smaller and well-defined components are easier to maintain.
Your services are independent and can more easily be refactored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Development scalability is implicitly provided.
Teams can develop simultaneous and independently bounded domain features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_bounded_domain_relations&#34;&gt;Bounded Domain Relations&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are five main types of relationships between Bounded Contexts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hdlist&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Partnership
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a relationship between two contexts that cooperates to align the two teams with dependent goals.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Shared Kernel
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a kind of relationship when common parts of several contexts are extracted to another context/module to reduce code duplication.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Customer-supplier
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;a connection between two contexts, where one context (upstream) produces data, and the other (downstream) consumes it.
In this relationship, both sides are interested in establishing the best possible communication.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Conformist
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;this relationship also has upstream and downstream, however, downstream always conforms to the upstream’s APIs.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;hdlist1&#34;&gt;
Anti-corruption layer
&lt;/td&gt;
&lt;td class=&#34;hdlist2&#34;&gt;
&lt;p&gt;this relationship kind is widely used for legacy systems to adapt them to a new architecture and gradually migrate from the legacy codebase.
The protection layer acts as an adapter to translate data from the upstream and protect from undesired changes&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Great technologies, programming languages and tools are used when building software applications.
That is good and right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But unfortunately, it is often lost that the decisive factor for the success of a project is not technology, but the solution.
In order to understand the subject matter or domain, we need a common language with the domain experts and users.
If we do not map the technical model in the software and its architecture, it will not help our users in their work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a computer scientist, it is easy to fall into the trap of focusing on technology instead of specialist knowledge
footnoote:[In the modern trend of technology driven curriculum this dreadful approach is often encountered].
The principle of bounded contexts from DDD can help us here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain-driven design (DDD) is a useful approach that provides excellent guidelines for modeling and building systems, but it is a means to an end, not an end in itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While the concepts are valid, you lose a lot if you limit yourself to using them only: There actually is a life beyond DDD.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Stefan Tilkov&lt;br/&gt;
&lt;cite&gt;2021&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The DDD approach emphasizes systematic refactoring and code improvements [&lt;a href=&#34;#refactoring-2nd&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;#clean-code&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;5&lt;/a&gt;].
It recommends test driven approach for bounded domain development [&lt;a href=&#34;#agile-testing&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;#more-agile-testing&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;#bridging-communication-gap&#34;&gt;13&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[1] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[2] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[3] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-9-modularity&#34;&gt;&lt;/a&gt;[4] S. Mak, &lt;em&gt;Java 9 Modularity&lt;/em&gt;. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491954167&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491954167&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[5] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[6] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, First. Addision-Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B004PQQRK2&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B004PQQRK2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-databases&#34;&gt;&lt;/a&gt;[7] A. Scott and P. J. Sadalage, &lt;em&gt;Refactoring Databases&lt;/em&gt;. Addison-Wesley Professional, 2006 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B001QAP36E&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B001QAP36E&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring-2nd&#34;&gt;&lt;/a&gt;[8] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, Second. Addision-Wesley, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134757599&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134757599&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[9] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[10] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;agile-testing&#34;&gt;&lt;/a&gt;[11] L. Crispin, &lt;em&gt;Agile testing&lt;/em&gt;. Addison-Wesley, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321534468&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321534468&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;more-agile-testing&#34;&gt;&lt;/a&gt;[12] J. G. Gregory and L. Crispin, &lt;em&gt;More Agile Testing&lt;/em&gt;. Addison-Wesley Professional [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321967054&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321967054&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;bridging-communication-gap&#34;&gt;&lt;/a&gt;[13] G. Adzic, &lt;em&gt;Bridging the Communication Gap&lt;/em&gt;. Neuri Limited, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B008YZ993W/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B008YZ993W/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34;&gt;
&lt;hr/&gt;
&lt;div class=&#34;footnote&#34; id=&#34;_footnotedef_1&#34;&gt;
&lt;a href=&#34;#_footnoteref_1&#34;&gt;1&lt;/a&gt;. You do &lt;strong&gt;not&lt;/strong&gt; need to modify your domain model. No inheritance from a special persistence class, no annotations are required.
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Meaningful Identifiers</title>
      <link>https://blog.tangly.net/blog/2021/meaningful-identifiers/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/meaningful-identifiers/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_meaningful_identifiers&#34;&gt;Meaningful Identifiers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-02-head.jpg&#34; alt=&#34;2021 01 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are a key concept to successfully model complex business domains.
They permeate how our modern civilization functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Could you imagine a country without a car registration number of vehicles, internet addresses, postal addresses or social security numbers?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are &lt;strong&gt;identifiers&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers cannot be changed at any time.
Updating identifiers means introducing mapping relations between the old and the new values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In computer science, identifiers &lt;em&gt;IDs&lt;/em&gt; are lexical tokens that name entities.&lt;br/&gt;
Identifiers are used extensively in virtually all information processing systems.&lt;br/&gt;
Identifying entities makes it possible to refer to them, which is essential for any kind of symbolic processing.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_external_well_defined_identifiers&#34;&gt;External Well-Defined Identifiers&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The best identifiers are externally well-defined identifiers.
A unique and well-defined authority is responsible for defining and publishing them.
Ideally, the authorities should only create new identifiers and never delete existing ones.
The published information is available to all interested parties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Examples are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Currency names as defined in &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_4217&#34;&gt;ISO standard 4217&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Country abbreviations as defined in &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes&#34;&gt;ISO standard 3166&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Social security numbers are well documented in the country they are used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Car numbers are well-known and documented.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try to use global externally defined identifiers as much as possible.
Always document the authority in charge to create these identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Examples you are using are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IBAN account numbers are defined worldwide through &lt;a href=&#34;https://en.wikipedia.org/wiki/International_Bank_Account_Number&#34;&gt;ISO 13616&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bank connections are defined as Business Identifier Codes through &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_9362&#34;&gt;BIC ISO 9362&lt;/a&gt;.
The registration authority is &lt;a href=&#34;https://en.wikipedia.org/wiki/Society_for_Worldwide_Interbank_Financial_Telecommunication&#34;&gt;SWIFT&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Car numbers and country acronyms are defined worldwide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passport numbers are defined worldwide.
Each country has its own structure and conventions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Social security numbers are a counter-example.
There are currently only defined locally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_external_managed_identifiers&#34;&gt;External Managed Identifiers&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You shall document the source of truth for all externally defined and managed identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source of truth shall work as a benevolent responsible.
It should support all interested parties and guaranty their identifiers can be trusted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_internal_managed_identifiers&#34;&gt;Internal Managed Identifiers&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One possible approach is to define a naming convention such as&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Year - Acronym - Counter&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An example of such an identifier would be&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;2021-CNT-0001 (Contract number 1 in year 2021)
2020-EVT-0101 (Event number 101 in year 2020)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Variations are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A full date as prefix, our system uses this convention to name invoices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A more readable acronym, our ERP system uses the word invoice to name invoices.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beware if you export internal managed identifiers, you become a source of truth.
You are responsible for documenting these identifiers and the process to create new ones.
You shall also guaranty that existing identifiers are never recycled.
If your identifiers are strings, you shall clearly define the supported languages and character sets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_domain_driven_design&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain Driven Design&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Domain Driven Design &lt;em&gt;DDD&lt;/em&gt; is a powerful and modern approach to define agile software architecture.
Some key rules are related to identity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Entity has a well-defined identity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An entity is an object that is not defined by its attributes, but rather by a thread of continuity and its identity.
Any instance of an entity abstraction must have a unique identifier.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Identify aggregate through identity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An aggregate is a group of objects that are bound together by a root entity, called the aggregate root.
Objects outside the aggregate are allowed to hold references to the root but not to any other object of the aggregate.
The aggregate root is responsible for checking the consistency of changes in the aggregate.
An aggregate is found and referenced through the identifier of the aggregate root entity.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Reference over aggregate through identity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An aggregate shall reference another aggregate through the identity of their root entity instance.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The concept of identity is therefore central to the domain-driven design approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_lessons_learnt&#34;&gt;Lessons Learnt&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Always try to find an external, well-defined identifier for your entities.
Beware of legal aspects when you are using government defined identifiers such as social security numbers, passport numbers or car numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid by all means to using an internal privately defined identifier as a public one.
You will bear the burden of documenting, manage and evolve the scheme as soon as you do this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Value Objects as Embedded Entities</title>
      <link>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2021/value-objects-as-embedded-entities/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_value_objects_as_embedded_entities&#34;&gt;Value Objects as Embedded Entities&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2021-01-01-head.png&#34; alt=&#34;2021 01 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This post discusses the value object pattern, and the factory pattern, which are tactical patterns in the domain-driven design
&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;DDD&lt;/a&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value objects represent typed values that have no conceptual identity in your domain.
They can help you write better codes that are less error-prone, more performant and more expressive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Value objects define the second kind of domain objects besides entities.
Their main characteristic is immutability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Attributes of a value object &lt;strong&gt;never&lt;/strong&gt; change&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A second characteristic is that they do not have external identifiers.
Unlike an entity, two value objects with the exact same properties are considered equal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A third one is they should be self-validating.
A value object shall verify the validity of its attributes when being created.
If any of its attributes are invalid, the object should not be created and an error or exception should be raised.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Immutable value objects are defined as &lt;strong&gt;record&lt;/strong&gt; in Java. Use the constructor to validate your objects.
Throw an &lt;em&gt;IllegalArgumentException&lt;/em&gt; if a validation error occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Value_object&#34;&gt;Value Objects&lt;/a&gt; do have attributes and methods as entities.
Attributes of value objects are immutable.
Methods of value objects can only be queries without side effects.
Operations never command a change to the internal state of a value object.
We can pass value objects to clients without worrying they change them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Many objects can be modeled as value objects instead of entities because they are defined through their attributes.
These objects measure, quantify or describe things in the domain model.
Because they are so easy to handle, we should model domain abstractions as value objects as often as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_addresses_phone_numbers_email_addresses&#34;&gt;Addresses, Phone Numbers, Email Addresses&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some value objects are part of any commercial application domain.
Postal addresses, phone numbers and email addresses are canonical value objects.
Other candidates are bank account IBAN numbers, job titles, job descriptions, company legal status.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This means that these objects do not have an object identifier and should not be stored in a separate table if stored in an SQL database.
Value objects shall be embedded objects and be part of an object such as a person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A person is an entity.
It should have an external identifier and has a postal address, multiple phone numbers, and one or more email addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check your domain model and validate these assumptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Postal address, phone numbers, email addresses are value objects and have no external or internal identifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They are always owned by other value objects or more often by entities such as people, companies, delivery forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They are immutable objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Business processes can replace such an object with a new instance without impeding other domain instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programmed in modern Java, these value objects should be &lt;strong&gt;records&lt;/strong&gt; to guaranty immutability at the language level.
As a bonus, you get the &lt;strong&gt;hashCode&lt;/strong&gt; and &lt;strong&gt;equals&lt;/strong&gt; methods for free.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A Java record class declaration is very compact.
Often it is a one-liner.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_invoice_lines&#34;&gt;Invoice Lines&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Invoice lines are lines containing details in an invoice.
Invoice lines are always value objects belonging to exactly one invoice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To complicate matter, invoice lines have different types, such as a regular line with a specific article, quantity, unit price and computed price.
Often VAT aspects must be considered and computed for the overall invoice.
An invoice line can also be a subtotal for a set of regular invoice lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;VAT definition and computation is often a murky domain.
The VAT value can be dependent on the article, the company selling it and the client buying it.
When public administration defines a domain and associated business rules, the world often becomes quite complicated and ambiguous.
The VAT administrative laws in Switzerland are more than 2000 pages of an illegible text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The complete definition of this business domain is not part of this article.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The following design challenges exist&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Serialization libraries such as JSON Jackson library cannot handle invoice lines with multiple Java class types.
A workable approach is described and implemented with the open source component &lt;a href=&#34;https://blog.tangly.net/docs/gleam/&#34;&gt;Gleam&lt;/a&gt;.
The solution is to define selectors to instantiate the correct Java class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoices are complex objects and ideal candidates for a document-oriented persistent approach.
Invoices should not be stored in a relation-based persistence store, meaning an SQL database.
To store them in a table, you have to model the various types of lines and add a technical identifier to each invoice line instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_factories&#34;&gt;Factories&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The factory pattern in Domain Driven Design &lt;em&gt;DDD&lt;/em&gt; can be seen as a super pattern for the Gang of Four (GoF) creation patterns.
Factories are concerned with creating new entities and value objects.
They also validate the invariants for the newly created objects.
We can place a factory on the entity or value object itself or on an independent object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Java &lt;strong&gt;record&lt;/strong&gt; constructs support validation of properties as part of the constructor.
Invalid objects cannot be constructed if the constructor validation detects a violation.
This mechanism ensures only valid instances exist in the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Factories that are declared on the same object they create are either factory methods or prototype methods.
The factory method creates a completely new object from the method parameters.
The prototype method uses an existing instance to derive a new object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The prototype method is supported with the keyword &lt;strong&gt;with&lt;/strong&gt; in C#.
The JEPs for deconstruction and construction of objects in a &lt;strong&gt;switch&lt;/strong&gt; statement could provide a similar approach in the future for Java.
The current version of Java &lt;em&gt;JDK 16&lt;/em&gt; does not support this feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When the creation logic is complex or has dependencies that are not needed by the created object.
It is best to create a separate factory.
This factory could provide multiple ways to create new instances.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_value_objects_in_persistent_store&#34;&gt;Value Objects in Persistent Store&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We encourage experimenting with the &lt;a href=&#34;https://microstream.one/&#34;&gt;MicroStream&lt;/a&gt; approach for small projects.
The effort to persist a Java object graph is very small.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can always move to a no SQL solution when your application is successful and time comes to harden it.
Another standard but cumbersome approach is to move to JPA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Entities, Identifiers, External identifiers and Names</title>
      <link>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/blog/2020/entities-identifiers-external-identifiers-and-names/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_entities_identifiers_external_identifiers_and_names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock left&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../pics/2020-08-01-head.png&#34; alt=&#34;2020 08 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A software architect models customer domains and maps them to powerful software abstractions.
Soon you correlate internal efficient identifiers, meaningful external identifiers, and domain entities.
You enjoy our long conversations with the enterprise data architect and find out the system owning a specific external identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you relate to external systems and communicate with other companies?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How do you define internal identifiers, which grow with application success?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can you bridge the customer world with your software solution?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are the good practices to create a maintainable, legible and efficient model of your domain model?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_entity_concept&#34;&gt;Entity Concept&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need an approach to model customer domain entities and map them to a legible and maintainable software construct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An entity is a user domain model abstraction and is mapped to a software type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Any entity has a &lt;em&gt;unique mandatory internal&lt;/em&gt; object identifier &lt;strong&gt;&lt;em&gt;oid&lt;/em&gt;&lt;/strong&gt;, we recommend the use of numeric values to improve performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Public and &lt;em&gt;external identifier&lt;/em&gt; &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt;, we recommend the use of text to adequately support various external identification schemes.
An example is the European enterprise identifier EUID identifying a company or a certified natural person in Europe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Human-readable &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A more sophisticated variant provides additional features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A set of tags to classify the instance through a crowd based ontology.
Tags are often called labels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A list of comments to add human-readable information to the instance.
Comments have a timeline and can be sorted by creation date.
The comments can be extended to add audit information such as functional change information or activities related to the instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These entity features should be defined as a set of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mixin&#34;&gt;mixin&lt;/a&gt; interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_internal_object_identifiers_oid&#34;&gt;Internal Object Identifiers &lt;em&gt;oid&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The object identifier &lt;em&gt;oid&lt;/em&gt; uniquely identifies an instance in a given context.
This identifier shall be a numerical value to increase the performance of persistent solutions.
It is used as an internal identifier in the application.
It should never be visible outside the system or published through an API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ideally, the identifier is universally valid and uniquely identifies an instance in all contexts.
For example, the concept of UUID tries to provide such an identifier.
The drawback is that UUID is not a numerical value and cumbersome for a developer to memorize.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An interesting approach is to support unique identifiers in the context of a bounded domain.
All entities of the domain will have unique object identifier.
The implementation can use a sequence from the domain database or schema.
A programmatic identity generator can also be established in the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because the &lt;em&gt;oid&lt;/em&gt; is never exported, the solution is as powerful and simple to realize.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;History has taught developers not to spare on the size of identifiers.
Please use a long value meaning 64 bits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Avoid using the internal identifier to communicate with external systems.
If you respect this rule, you are free to migrate your objects to another identification scheme in the future.
New schemes are often helpful when the application grows, or you have later to import and take over a lot of legacy data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_external_object_identifiers_id&#34;&gt;External Object Identifiers &lt;em&gt;id&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The external unique identifier id shall uniquely identify an entity instance.
It is used as an external identifier to communicate with other systems.
It should always be visible outside the system and used in any API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try to have exactly one external identifier per object to communicate with external systems.
This restriction is a corollary of the rule stating an instance is owned by exactly one system.
This system is the one defining and managing the external unique identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should clearly define the owning system for the external identification scheme.
This information shall be documented and accessible to all involved parties.
This process is part of the enterprise architecture activities of your ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;External identifier ownership is often a murky situation when working with legacy systems.
You often have multiple sources of external identifiers, sometimes overlapping and sometimes not covering all instances.
You have to formulate a long-term strategy to clean up your landscape and handle the problems until these clean-up activities are completed.
By handling, we mean administrative and import rules matching the various external identifiers to the same object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One possible solution is to use tags.
Store externally defined identifiers as tags.
Document these tags as specific for the external system.
This approach scales to multiple external identifiers, and multiple systems managing the same external identifier.
So you have a scalable approach and do not pollute your domain model with spurious information defined in external systems.
Upon completion of refactoring, these tags document historical information and could safely be removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Multiple external object identifiers imply the existence of mapping functions to identify the object referenced.
Because the ownership of external identifiers is outside your system, you are dependent on these systems and have to hope they are good citizens.
The key rule of good systems is that they never change external identifiers.
As soon as you modify identifiers, they are per definition no more real identifiers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_names_name&#34;&gt;Names &lt;em&gt;name&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The entity name is a human-readable name to distinguish between entity instances.
Ideally, it should be almost unique.
The fallback is to use the external unique identifier &lt;em&gt;id&lt;/em&gt; known to all external systems.
The drawback is that we have no guarantee it is legible for users.
Names are essential for well-designed user interfaces.
Never require from your users memorizing external identifiers, please provide names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For example, the first and last names of a person is the name for a natural entity.
Social security number is a possible external identifier.
An internal identifier is used as a primary key in the persistence storage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_advices&#34;&gt;Advices&lt;/h3&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Internal object identifiers are identifiers.
An identifier is immutable and should be numerical for performance reasons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;External object identifiers have exactly one application in charge to create them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Names are human-readable and improve the legibility and usability of the user interface and reports.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;External identifiers can be tricky.
In Switzerland, we had an old social security number, which is still referenced in a lot of legal systems.
For example, it is still part of your tax salary yearly form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Identifiers are a key element to model entities using the domain driven design &lt;em&gt;DDD&lt;/em&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have a new social security number, which is used in social insurance workflows.
&lt;em&gt;The same number is also used in medical insurance workflows.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also have a federal identity card number, a federal passport number, a federal driver license number, additional medical card insurance numbers, a state tax personal identification number, and more external identifiers.
All these external identifiers shall reference the same natural person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More interesting is that a tourist living in the European zone has none of these numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please implement the internal identifier feature as an interface marker.
The external identifier and name features can be grouped into one interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additional information is available under &lt;a href=&#34;../../../docs/core/models/&#34;&gt;models&lt;/a&gt;.
Below the source code in modern Java is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;oid&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasId&lt;/span&gt; &lt;span style=&#34;color: #cf222e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #953800&#34;&gt;HasOid&lt;/span&gt; &lt;span style=&#34;color: #0550ae&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #cf222e&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #8250df&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #953800&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #24292f;background-color: #f6f8fa&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #0550ae&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #0550ae&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We provide a Java library BUS implementing these constructs.
More information is available under &lt;a href=&#34;https://blog.tangly.net/&#34;&gt;tangly open source components&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_extensions&#34;&gt;Extensions&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See our blog how to extend the entity concept with the powerful and flexible concepts of tags and comment approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another blog shows a constrained form of tags using the concept of reference codes also called reference tables or lookup tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Related concepts are discussed in our blog series&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/entities-identifiers-external-identifiers-and-names&#34;&gt;Entities, Identifiers, External identifiers and Names&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/the-power-of-tags-and-comments&#34;&gt;The power of Tags and Comments&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2020/reference-codes&#34;&gt;Reference Codes&lt;/a&gt;
Marcel Baumann. 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/value-objects-as-embedded-entities&#34;&gt;Value Objects as Embedded Entities&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../2021/meaningful-identifiers&#34;&gt;Meaningful Identifiers&lt;/a&gt;
Marcel Baumann. 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
