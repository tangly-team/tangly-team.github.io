<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on tangly Components</title>
    <link>https://blog.tangly.net/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Actor Model</title>
      <link>https://blog.tangly.net/blog/2024/actor-model/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/actor-model/</guid>
      <description>Concurrent programming has always been tricky. Accessing a shared state from multiple threads is a central problem, where hard-to-catch errors may easily appear.&#xA;Protected access to identified shared variables is easy to realize. Mechanisms to avoid deadlocks or starvation are cumbersome to implement and almost impossible to validate.&#xA;The need for concurrent programming has increased tremendously with the fact that all modern processors and many microcontrollers have multiple cores.</description>
    </item>
    <item>
      <title>Bus Sensors and Actuators</title>
      <link>https://blog.tangly.net/blog/2023/bus-sensors-and-actuators/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/bus-sensors-and-actuators/</guid>
      <description>Your embedded system has a set of sensors and actors.&#xA;Some sensors and actors are connected to a bus. Typical buses are CAN bus, Serial Peripherical Interface, Ethernet, Bluetooth, or I2C standards.&#xA;The bus is a shared medium used to communicate with a set of external active or passive components.&#xA;Which design rules shall you follow when designing sensors and actors using a bus architecture?&#xA;Do you need to consider threading design?</description>
    </item>
    <item>
      <title>Sensors and Actuators</title>
      <link>https://blog.tangly.net/blog/2023/sensors-and-actuators/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/sensors-and-actuators/</guid>
      <description>Embedded design maps domain abstractions to the underlying hardware.&#xA;A temperature sensor is a domain abstraction of a physical hardware temperature sensor.&#xA;A valve is a domain abstraction of a physical hardware valve. A physical valve can be a simple opened-closed device, or a proportional device.&#xA;The microcontroller board reads the temperature sensor through an I2C or SPI bus. It controls the valve through a GPIO, a PWM or a CAN bus controller.</description>
    </item>
    <item>
      <title>Command Interpreter</title>
      <link>https://blog.tangly.net/blog/2023/command-interpreter/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/command-interpreter/</guid>
      <description>Most digital products have a command interpreter.&#xA;External systems send requests to the system and often await an answer. A command interpreter can model this behavior.&#xA;The channels used to transmit requests and return answers are variable. Messages can be transmitted other various buses and protocols.&#xA;An operator can send a command over a CAN bus, Serial Peripherical Interface, Ethernet or Bluetooth connection.&#xA;A regular command line interpreter inputs commands as a string containing a request and associated parameters.</description>
    </item>
  </channel>
</rss>
