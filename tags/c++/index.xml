<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on tangly Components</title>
    <link>https://blog.tangly.net/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modern Embedded Systems</title>
      <link>https://blog.tangly.net/blog/2025/modern-embedded-systems/</link>
      <pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2025/modern-embedded-systems/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2025-04-01-head.jpg&#34; alt=&#34;2025 04 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Embedded software engineers that have a proper understanding of the corresponding hardware are hard to find.&#xA;When application developers were moving to newer languages like Java and C++, embedded programmers were still moving from assembly language to C.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The reason for slower technology adoption is having a lesser number of embedded programmers, who need to thoroughly understand the hardware platform on which their code runs.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The key driver of RTOS adoption is application complexity.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Logging</title>
      <link>https://blog.tangly.net/blog/2025/logging/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2025/logging/</guid>
      <description>&lt;div class=&#34;openblock float-group&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2025-03-01-head.jpg&#34; alt=&#34;2025 03 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Embedded systems are hard to debug.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;You do not have the luxury of connecting up most of the time with a monitor and keyboard.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Stepping through code is not much use when the application needs to continually respond to real-world events for the bug to appear in the first place.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;And after a while, toggling your single GPIO LED just does not cut it, and you decide you need to be able to log messages and print values.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Distributed Systems</title>
      <link>https://blog.tangly.net/blog/2025/distributed-systems/</link>
      <pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2025/distributed-systems/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2025-01-01-head.png&#34; alt=&#34;2025 01 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The embedded software industry is in the midst of a major revolution.&#xA;A tremendous amount of new development lies ahead.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;New embedded software needs an actual architecture that is inherently safer and easier to understand.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It provides a higher level of abstraction than the usual &lt;em&gt;threading&lt;/em&gt; and &lt;em&gt;synchronization&lt;/em&gt; approach based on a traditional Real-Time Operating System &lt;em&gt;RTOS&lt;/em&gt;&#xA;&lt;sup class=&#34;footnote&#34;&gt;[&lt;a id=&#34;_footnoteref_1&#34; class=&#34;footnote&#34; href=&#34;#_footnotedef_1&#34; title=&#34;View footnote.&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For years, experts in concurrent software have been pointing out that unrestricted use of threads and various blocking mechanisms of an RTOS often leads to programs that are unsafe and difficult to reason about.&#xA;Instead, experts from different industries independently came up with the following best practices, collectively known as the active object or actor design pattern &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#reactive-messaging-patterns-with-actor-model&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Embedded Applications</title>
      <link>https://blog.tangly.net/blog/2024/embedded-applications/</link>
      <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/embedded-applications/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2024-09-01-head.jpg&#34; alt=&#34;2024 09 01 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;An embedded application is a software product placed permanently inside some kind of device to perform a very specific set of functions.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The software is typically specialized for particular hardware with a specific purpose that must meet time, size, energy, and memory constraints.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;As an example, some embedded applications are designed to run for months or years in a row without being turned off or receiving a reset command.&#xA;It is used in areas from agriculture to space probes and more.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Domain-Driven Design with ROS-2</title>
      <link>https://blog.tangly.net/blog/2024/domain-driven-design-with-ros-2/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/domain-driven-design-with-ros-2/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2024-08-02-head.png&#34; alt=&#34;2024 08 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;At its core, &lt;a href=&#34;https://www.ros.org/&#34;&gt;Robot Operation System&lt;/a&gt; provides a message-passing system, often called &lt;em&gt;middleware&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Communication is one of the first needs to arise when implementing a new robot application, or really any software system that will interact with hardware.&#xA;ROSâ€™s built-in and well-tested messaging system saves you time by managing the details of communication between distributed nodes via an anonymous &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;Publish and Subscribe Pattern&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This approach encourages good practices in your software development, including fault isolation, &lt;a href=&#34;https://en.wikipedia.org/wiki/Separation_of_concerns&#34;&gt;Seperation of Concerns&lt;/a&gt;, and clear interfaces.&#xA;Using ROS results in systems that are easier to maintain, contribute to, and reuse.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Actors with CMSIS OS in Cpp</title>
      <link>https://blog.tangly.net/blog/2024/actors-with-cmsis-os-in-cpp/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/actors-with-cmsis-os-in-cpp/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2024-06-03-head.svg&#34; alt=&#34;2024 06 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The actor library defines the actor abstraction with mailboxes and concrete implementation for various target platforms.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://arm-software.github.io/CMSIS_5/RTOS2/html/index.html&#34;&gt;CMSIS-RTOS v2&lt;/a&gt; platform provides an actor implementation for all realtime kernels supporting the CMSIS API.&#xA;The API is under the stewardship of the ARM company.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Any kernel with a &lt;a href=&#34;https://arm-software.github.io/CMSIS_5/RTOS2/html/index.html&#34;&gt;CMSIS-RTOS v2&lt;/a&gt; compatible layer is eligible.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;STM provides the CMSIS integration with &lt;a href=&#34;https://www.freertos.org/index.html&#34;&gt;freeRTOS&lt;/a&gt; for all STM32 microcontrollers.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_library&#34;&gt;Library&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The library defines key abstractions as abstract classes &lt;a href=&#34;#actors&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;#actors-in-cpp&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Actors in Cpp</title>
      <link>https://blog.tangly.net/blog/2024/actors-in-cpp/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/actors-in-cpp/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2024-06-02-head.svg&#34; alt=&#34;2024 06 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There is a strong need for higher-level frameworks ensuring safe concurrent programming.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Actor_model&#34;&gt;Actor Model&lt;/a&gt; is one of the best approaches to safe concurrency and legible code &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#reactive-messaging-patterns-with-actor-model&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;.&#xA;The model is based on &lt;a href=&#34;https://en.wikipedia.org/wiki/Message_passing&#34;&gt;Message Passing&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Although multiple actors can run at the same time, an actor will process a given message sequentially.&#xA;This means that if you send three messages to the same actor, it will just execute one at a time.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Actor Model</title>
      <link>https://blog.tangly.net/blog/2024/actor-model/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2024/actor-model/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2024-05-02-head.svg&#34; alt=&#34;2024 05 02 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Concurrent programming has always been tricky.&#xA;Accessing a shared state from multiple threads is a central problem, where hard-to-catch errors may easily appear.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Protected access to identified shared variables is easy to realize.&#xA;Mechanisms to avoid deadlocks or starvation are cumbersome to implement and almost impossible to validate.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The need for concurrent programming has increased tremendously with the fact that all modern processors and many microcontrollers have multiple cores.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Bus Sensors and Actuators</title>
      <link>https://blog.tangly.net/blog/2023/bus-sensors-and-actuators/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/bus-sensors-and-actuators/</guid>
      <description>&lt;div class=&#34;openblock float-group&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2023-12-05-head.jpg&#34; alt=&#34;2023 12 05 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Your embedded system has a set of sensors and actors.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Some sensors and actors are connected to a bus.&#xA;Typical buses are &lt;a href=&#34;https://en.wikipedia.org/wiki/CAN_bus&#34;&gt;CAN bus&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&#34;&gt;Serial Peripherical Interface&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Ethernet&#34;&gt;Ethernet&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Bluetooth&#34;&gt;Bluetooth&lt;/a&gt;, or &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I2C&lt;/a&gt; standards.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The bus is a shared medium used to communicate with a set of external active or passive components.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Which design rules shall you follow when designing sensors and actors using a bus architecture?&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Do you need to consider threading design?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Sensors and Actuators</title>
      <link>https://blog.tangly.net/blog/2023/sensors-and-actuators/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/sensors-and-actuators/</guid>
      <description>&lt;div class=&#34;openblock float-group&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2023-12-04-head.jpg&#34; alt=&#34;2023 12 04 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Embedded design maps domain abstractions to the underlying hardware.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A temperature sensor is a domain abstraction of a physical hardware temperature sensor.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A valve is a domain abstraction of a physical hardware valve.&#xA;A physical valve can be a simple opened-closed device, or a proportional device.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The microcontroller board reads the temperature sensor through an I2C or SPI bus.&#xA;It controls the valve through a GPIO, a PWM, or a CAN bus controller.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Command Interpreter</title>
      <link>https://blog.tangly.net/blog/2023/command-interpreter/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/blog/2023/command-interpreter/</guid>
      <description>&lt;div class=&#34;imageblock left&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;../pics/2023-12-03-head.jpg&#34; alt=&#34;2023 12 03 head&#34; width=&#34;420&#34; height=&#34;360&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Most digital products have a command interpreter.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;External systems send requests to the system and often await an answer.&#xA;A command interpreter can model this behavior.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The channels used to transmit requests and return answers are variable.&#xA;Messages can be transmitted other various buses and protocols.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;An operator can send a command over a &lt;a href=&#34;https://en.wikipedia.org/wiki/CAN_bus&#34;&gt;CAN bus&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&#34;&gt;Serial Peripherical Interface&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Ethernet&#34;&gt;Ethernet&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Bluetooth&#34;&gt;Bluetooth&lt;/a&gt; connection.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A regular command line interpreter inputs commands as a string containing a request and associated parameters.&#xA;The answer is displayed as a string.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
