<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FSM - Hierarchical Finite State Machine on tangly Components</title>
    <link>https://blog.tangly.net/docs/fsm/</link>
    <description>Recent content in FSM - Hierarchical Finite State Machine on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/docs/fsm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Readme</title>
      <link>https://blog.tangly.net/docs/fsm/readme/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/fsm/readme/</guid>
      <description>Purpose The tangly fsm is a finite state machine library. You can use it in productive projects and academic assignments. The component is using records and requires Java 17 or higher.&#xA;The library provides&#xA;Definition of hierarchical state machine descriptions. The machine states and transitions are generic classes. You provide an enumeration for the set of states, and an enumeration for the set of events triggering the machine. The builder pattern is used to create complex state machine definition declaratively,</description>
    </item>
    <item>
      <title>Release Notes</title>
      <link>https://blog.tangly.net/docs/fsm/releasesnotes/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/fsm/releasesnotes/</guid>
      <description>FSM Library Change Logs This document provides a high-level view of the changes introduced in the FSM library by release. For a detailed view of what has changed, refer to the repository git commits.&#xA;0.2.7 (2024.05.31) Update of library dependencies, update to JDK-21, and modern Gradle approach to build solutions.&#xA;Added statechart diagram support for smcat and mermaid formats.&#xA;Actor library now uses the standard API FLow implementation and virtual thread executor.</description>
    </item>
    <item>
      <title>User Guide Finite State Machine</title>
      <link>https://blog.tangly.net/docs/fsm/userguidefsm/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/fsm/userguidefsm/</guid>
      <description>Features The FSM library aims to provide the following features:&#xA;Easy to use flat state machine for simple use cases. This type of FSM is taught in bachelor engineering courses.&#xA;Hierarchical state machine structure to ease complex state configuration. The hierarchical type of FSM is part of the UML notation.&#xA;Usage of events, transitions, guards and actions. Transition actions, state entry actions, and state exit actions are supported.&#xA;Builder pattern for easy creation of a complete state machine declaration using a fluent approach,</description>
    </item>
    <item>
      <title>User Guide Actors</title>
      <link>https://blog.tangly.net/docs/fsm/userguideactor/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/fsm/userguideactor/</guid>
      <description>User Guide Actors Get Starting A finite state machine actor class is provided to easily create an active class whose behavior is defined through a finite state machine&#xA;class FsmActor&amp;lt;O extends FsmActor&amp;lt;O, S, E&amp;gt;, S extends Enum&amp;lt;S&amp;gt;, E extends Enum&amp;lt;E&amp;gt;&amp;gt; extends Actor&amp;lt;Event&amp;lt;?&amp;gt;, Void&amp;gt; { private static final Logger logger = LoggerFactory.getLogger(); private final StateMachine&amp;lt;O, S, E&amp;gt; fsm; public FsmActor(@Nonnull FsmBuilder&amp;lt;O, S, E&amp;gt; builder, String name) throws SuspendExecution { super(name, new MailboxConfig()); fsm = builder.</description>
    </item>
    <item>
      <title>Design Considerations</title>
      <link>https://blog.tangly.net/docs/fsm/design/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/fsm/design/</guid>
      <description>Design Finite State Machine Definitions A person who never made a mistake never tried anything new. â€” Albert Einstein What is a finite state machine? A Finite State Machine or FSM is an abstract model of deterministic computation, which can be in only one finite state at a specific moment. Finite State Machines are used to model problems in different domains such as AI, games, or application flows. It describes how a program should behave by specifying states and routes between them.</description>
    </item>
  </channel>
</rss>
