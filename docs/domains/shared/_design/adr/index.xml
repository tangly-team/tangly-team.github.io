<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ADR on tangly Components</title>
    <link>https://blog.tangly.net/docs/domains/shared/_design/adr/</link>
    <description>Recent content in ADR on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/docs/domains/shared/_design/adr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OS 001: System Guava Removal</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-001-system-guava-removal/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-001-system-guava-removal/</guid>
      <description>OS-001 Removes usage of Google Guava Library Date: 2018-02-20&#xA;Status Implemented&#xA;Context Guava is an historical effort to provide much-needed functionalities to the Java community. The Java ecosystem evolves quite slowly at the beginning of the millennium. Later stewardship clearly improved with a six-month release schedule approach. Preview and incubator initiatives allowed timely evaluation of new features and idioms in the Java language and ecosystem.&#xA;JDK versions from release 8 often provide better replacement methods for a lot of Guava functions.</description>
    </item>
    <item>
      <title>OS 002: Unit Test Conventions</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-002-unit-test-conventions/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-002-unit-test-conventions/</guid>
      <description>OS-002 Define Unit Test Conventions Date: 2020-06-15&#xA;Status Implemented&#xA;Context Some libraries need to create files on a file system. For example, you want to generate human-readable paper invoices.&#xA;Decision We recommend the following conventions when writing unit tests which need to create files. Use Google Java in memory file system Jimfs. Additional file systems can only be used in Java if all operations are performed through Path objects. Path objects have a reference to the file system; File objects always referenced the default file system.</description>
    </item>
    <item>
      <title>OS 003: Use Modern Java Constructs</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-003-use-modern-java-constructs/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-003-use-modern-java-constructs/</guid>
      <description>OS-003 Remove usage of Google Guava Library Date: 2020-01-01&#xA;Status Implemented&#xA;Context JDK is released every six months to all Java developers. The latest approach is to release a long-term supported version every two years.&#xA;Better approaches support clean code, less verbose source code and reduce programming [5] [2]. These constructs shall be used in our modules as soon as they are released to the developers.&#xA;The advantage is better integration, always synchronized with the current release of the JDK and no incompatibilities.</description>
    </item>
    <item>
      <title>OS 004: Publish Technical Documentation Through Static Website</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-004-publish-technical-documentation-through-static-website/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-004-publish-technical-documentation-through-static-website/</guid>
      <description>OS-004 Publish Technical Documentation Through Static Website Date: 2020-01-01&#xA;Status Implemented&#xA;Context Legible, well-structured and up-to-date technical documentation of released open source components is a service to all our users. Due to the small size of our team, we want a straight forward tool chain to generate the website. In the future, we could move our product to another hosting platform. The solution should be built on a standard to minimize porting overhead.</description>
    </item>
    <item>
      <title>OS 005: Publish Maven Central Artifacts</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-005-publish-maven-central-artifact/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-005-publish-maven-central-artifact/</guid>
      <description>OS-005 Publish Artifacts on Public Java Components Repository Date: 2019-05-01&#xA;Status Implemented&#xA;Links Supersede: FSM-0002&#xA;Context The tangly open source libraries are mature enough to be used in public commercial and academic projects.&#xA;The libraries were used in internal projects and refined to fulfill these requirements. More customers will validate the usefulness of the library and identify extensions for further releases.&#xA;We want to provide a standard and well-known approach for our customers.</description>
    </item>
    <item>
      <title>OS 006: Dependency Injection with Guice</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-006-dependency-injection-guice/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-006-dependency-injection-guice/</guid>
      <description>OS-006 Dependency Injection with Guice Date: 2018-02-20&#xA;Status Implemented&#xA;Context The modules provided as tangly open source components are used in more complex applications.&#xA;These applications often use dependency injection frameworks to construct and initialize their instances. Dependency injection is a technique in which an object receives other objects that it depends on, called dependencies.&#xA;Typically, the receiving object is called a client. The passed-in injected object is called a service.</description>
    </item>
    <item>
      <title>OS 007: Persistence with MicroStream</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-007-persistence-microstream/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-007-persistence-microstream/</guid>
      <description>OS-007: Persistence with MicroStream Date: 2020-11-13&#xA;Status Implemented&#xA;Context The modules provided as tangly open source components are used in more complex applications. These applications require a reliable and performant persistence approach for their data.&#xA;In Java, everything is an object. In contrast, all databases come with their own specific data structure that is incompatible with Java objects.&#xA;This is called impedance mismatch.&#xA;As a consequence, a mapping is required, which means all data must be converted behind the scenes.</description>
    </item>
    <item>
      <title>OS 008: Use log4j2 as default logging framework</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-008-use-log4j2-as-default-logger/</link>
      <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-008-use-log4j2-as-default-logger/</guid>
      <description>OS-008 Use log4j2 as default logging framework Date: 2021-06-15&#xA;Status Implemented&#xA;Context The logging library slf4j seems to be a dead project for at least one year. The last commit in the GitHub slf4j repository was performed two years ago. Version 2.0 of the library is an alpha release on Maven Central dating back to October 2019.&#xA;The apache project log4j has made tremendous progress with the creation of the log4j2 library.</description>
    </item>
    <item>
      <title>OS 009: Use HSQLDB as an SQL DB</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-009-use-hsqldb-as-sql-store/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-009-use-hsqldb-as-sql-store/</guid>
      <description>OS-009 Uses HSQLDB as an SQL store Date: 2022-01-01&#xA;Status Implemented&#xA;Context Applications regularly need to store information in a persistent store. A proven approach is to use an SQL database solution for such activities. The Java ecosystem supports a relational database with libraries.&#xA;The JPA approach provides an object relational mapper. The JOOQL approach has a genuine mapping of SQL statements to type verified Java expressions.&#xA;Decision The HSQLDB SQL database java solution is the preferred choice when an application needs to store data in a relational store.</description>
    </item>
    <item>
      <title>OS 010: Archive Data using TSV and JSON</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-010-archive-data/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-010-archive-data/</guid>
      <description>OS-010 Archive Data using TSV and JSON Date: 2022-01-01&#xA;Status Implemented&#xA;Context Contrary to XML or JSON, TSV is perfectly suited to represent records with the least possible overhead. There are a lot of tools, like spreadsheet editors, which can read and modify TSV files. The fileâ€™s size is at the possible minimum, and the performance of the converter is significantly better than with the other formats.&#xA;Decision TSV is preferred to import data into the application or export information from the solution.</description>
    </item>
    <item>
      <title>OS 011: Vaadin User Interface</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/os-011-vaadin-as-user-interface/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/os-011-vaadin-as-user-interface/</guid>
      <description>OS-011 Vaadin User Interface Date: 2022-01-01&#xA;Status Implemented&#xA;Context Our primary and almost exclusive technical stack is Modern Java.&#xA;A major weakness of the Java ecosystem is the user interface aspects. Swing is old and no more actively supported by Oracle or other major players. JavaFX has a small active community. The platform never had a huge acceptance.&#xA;We could use various JavaScript frameworks to realize our user interfaces. The drawback is supporting an additional technology stack.</description>
    </item>
    <item>
      <title>ERPUI-001: AsciiDoc for Text Fields</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/erpui-001-asciidoc-for-all-texts/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/erpui-001-asciidoc-for-all-texts/</guid>
      <description>ERPUI-001 Asciidoc for Text Fields Date: 2021-06-01&#xA;Status Implemented&#xA;Context Asciidoc is a well-established approach to write rich text documentation or comments. The casual user can learn and use the notation without excessive effort. The legibility and professional appearance of asciidoc texts are striking higher than plain text. Asciidoc is an open standard and used in various environments and tools [1].&#xA;Decision All texts and comments in the ERP components shall use Asciidoc notation to improve legibility.</description>
    </item>
    <item>
      <title>FSM 001: Move Abstractions to JDK Classes</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/fsm-001-move-abstractions-to-jdk-classes/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/fsm-001-move-abstractions-to-jdk-classes/</guid>
      <description>FSM-001 Replace Guard and Action classes with JDK BiPredicate and BiFunction Classes Date: 2017-06-01&#xA;Status Implemented&#xA;Context We need a legible data model for finite state machine definitions. New users should easily understand the finite state machine abstractions and map them to their domain.&#xA;Decision We use standard classes of the JDK to minimize contextual complexity when learning and using the FSM library. We will evaluate if the loss of domain names for classes has a negative impact on the legibility of the library.</description>
    </item>
    <item>
      <title>FSM-002: Publish Maven Central Artifacts</title>
      <link>https://blog.tangly.net/docs/domains/shared/_design/adr/fsm-002-publish-maven-central-artifact/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/shared/_design/adr/fsm-002-publish-maven-central-artifact/</guid>
      <description>FSM-002 Publish Artifacts on Public Java Components Repository Date: 2020-01-01&#xA;Status Retired&#xA;Links Superseded by: OS-0005&#xA;Context The library is mature enough to be used in commercial and academic projects. The library was used in internal projects and refined to fulfill these requirements. More customers will validate the usefulness of the library and identify extensions for further releases.&#xA;Decision The library shall be published on maven central and be accessible to a wide range of developers and organizations.</description>
    </item>
  </channel>
</rss>
