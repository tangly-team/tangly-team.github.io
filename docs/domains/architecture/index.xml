<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ERP Architecture on tangly Components</title>
    <link>https://blog.tangly.net/docs/domains/architecture/</link>
    <description>Recent content in ERP Architecture on tangly Components</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.tangly.net/docs/domains/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction and Goals</title>
      <link>https://blog.tangly.net/docs/domains/architecture/01-introduction-and-goals/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/01-introduction-and-goals/</guid>
      <description>Introduction and Goals Application Goals The application is an application of modern software engineering principles.&#xA;The essential features are used to implement all acquisition, project management and financial process of an agile software consulting company.&#xA;The smoke test is to run the tangly processes on the ERP solution.&#xA;User Journey Leads After meeting a prospect at a conference, I create a lead. I follow up with the lead and add the information in the text of the lead.</description>
    </item>
    <item>
      <title>Architecture Constraints</title>
      <link>https://blog.tangly.net/docs/domains/architecture/02-architecture-constraints/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/02-architecture-constraints/</guid>
      <description>Architecture Constraints Technology Stacks The programming language is Java. The version is the current released JDK.&#xA;Embedded programming language is C++. The version is the current released ISO standard.&#xA;Th user interface for all Java applications is build with {ref-vaadin}. The version is the current released version available on Maven Central.&#xA;The documentation language is English US.&#xA;Exchange of data is over TSV files. JSON is used for mapping complex data structures.</description>
    </item>
    <item>
      <title>System Scope and Context</title>
      <link>https://blog.tangly.net/docs/domains/architecture/03-system-scope-and-context/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/03-system-scope-and-context/</guid>
      <description>System Scope and Context Contents System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.&#xA;If necessary, differentiate the business context (domain specific inputs and outputs) from the technical context (channels, protocols, hardware).&#xA;Motivation The domain interfaces and technical interfaces to communication partners are among your system’s most critical aspects.</description>
    </item>
    <item>
      <title>Solution Strategy</title>
      <link>https://blog.tangly.net/docs/domains/architecture/04-solution-strategy/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/04-solution-strategy/</guid>
      <description>Solution Strategy Technical Approach Software Development Modern Java is the preferred programming language for realization.&#xA;Embedded Software Development Modern C++ is the preferred programming language for embedded functionalities. The source code is object-oriented.&#xA;A realtime operating system RTOS provides scheduling and concurrent processing.&#xA;The communication uses asynchronous message passing. Messages are immutable value objects.&#xA;Thread logic is realized as a finite state machine.&#xA;Documentation Approach Follow the recommendations of arc42 approach for document structure and content.</description>
    </item>
    <item>
      <title>Building Block View</title>
      <link>https://blog.tangly.net/docs/domains/architecture/05-building-block-view/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/05-building-block-view/</guid>
      <description>Building Block View A bounded domain is the key building block for a modular monolith architecture approach. The ERP application is consisting of multiple bounded domains.&#xA;The same approach should be used for a distributed microservice architecture.&#xA;Each bounded domain is a self-contained module that encapsulates the business logic and data for a specific domain. Persistence shall be handled per bounded domain. Ideally, the domain model should be designed to be independent of the persistence technology.</description>
    </item>
    <item>
      <title>Runtime View</title>
      <link>https://blog.tangly.net/docs/domains/architecture/06-runtime-view/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/06-runtime-view/</guid>
      <description>Runtime View Build-In Confidentiality Runtime Isolation The application is a singleton to the running application. A tenant has no knowledge of other tenants or of the application itself. A bounded domain has no knowledge of other bounded domains or of its tenant.&#xA;A domain is interested in all users of its tenant having rights in the domain. The UsersProvider interface provides the list of users for a bounded domain without exposing user or tenant information.</description>
    </item>
    <item>
      <title>Deployment View</title>
      <link>https://blog.tangly.net/docs/domains/architecture/07-deployment-view/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/07-deployment-view/</guid>
      <description>Deployment View Content The deployment view describes:&#xA;technical infrastructure used to execute your system, with infrastructure elements like geographical locations, environments, computers, processors, channels and net topologies as well as other infrastructure elements and&#xA;mapping of (software) building blocks to that infrastructure elements.&#xA;Often systems are executed in different environments, e.g., development environment, test environment, production environment. In such cases, you should document all relevant environments.&#xA;Especially document a deployment view if your software is executed as a distributed system with more than one computer, processor, server or container or when you design and construct your own hardware processors and chips.</description>
    </item>
    <item>
      <title>Cross-cutting Concepts</title>
      <link>https://blog.tangly.net/docs/domains/architecture/08-crosscutting-concepts/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/08-crosscutting-concepts/</guid>
      <description>Cross-cutting Concepts Content This section describes overall, principal regulations and solution ideas that are relevant in multiple parts (= cross-cutting) of your system. Such concepts are often related to multiple building blocks. They can include many different topics, such as&#xA;models, especially domain models&#xA;architecture or design patterns&#xA;rules for using specific technology&#xA;principal, often technical decisions of an overarching (= cross-cutting) nature&#xA;implementation rules&#xA;Motivation Concepts form the basis for conceptual integrity (consistency, homogeneity) of the architecture.</description>
    </item>
    <item>
      <title>Architecture Decisions</title>
      <link>https://blog.tangly.net/docs/domains/architecture/09-architecture-decisions/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/09-architecture-decisions/</guid>
      <description>Architecture Decisions Overall Decisions System Guava Removal&#xA;Unit Test Conventions&#xA;Use Modern Java Constructs&#xA;Publish Technical Documentation through Static Website&#xA;Publish Maven Central Artifacts&#xA;Dependency Injection Guice&#xA;Persistence with MicroStream&#xA;Use log4j2 as Default Logger&#xA;Use hsqldb as SQL store&#xA;Archive Data&#xA;Vaadin as User Interface Approach&#xA;ERP UI Decisions Asciidoc for all Texts&#xA;FSM Decisions Move Abstractions to JDK Classes&#xA;Publish Maven Central Artifacts&#xA;PRJ Decisions link:../adr/prj-001-project-tag-for-project-costs/Project Tag for Project Costs]</description>
    </item>
    <item>
      <title>Quality Requirements</title>
      <link>https://blog.tangly.net/docs/domains/architecture/10-quality-requirements/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/10-quality-requirements/</guid>
      <description>Quality Requirements Content This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals)&#xA;Here you can also capture quality requirements with lesser priority, which will not create high risks when they are not fully achieved.&#xA;Motivation Since quality requirements will have a lot of influence on architectural decisions you should know for every stakeholder what is really important to them, concrete and measurable.</description>
    </item>
    <item>
      <title>Technical Risks and Debts</title>
      <link>https://blog.tangly.net/docs/domains/architecture/11-technical-risks/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/11-technical-risks/</guid>
      <description>Risks and Technical Debts Contents A list of identified technical risks or technical debts, ordered by priority&#xA;Motivation “Risk management is project management for grown-ups” (Tim Lister, Atlantic Systems Guild.)&#xA;This should be your motto for systematic detection and evaluation of risks and technical debts in the architecture, which will be needed by management stakeholders (e.g. project managers, product owners) as part of the overall risk analysis and measurement planning.</description>
    </item>
    <item>
      <title>User Manual</title>
      <link>https://blog.tangly.net/docs/domains/architecture/12-user-manual/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/12-user-manual/</guid>
      <description>User Manual Idea The tangly services ERP provides the functionalities to manage service company offerings and legal documents.&#xA;The first customer ever using the application is tangly llc company. The company is an agile consulting and Java stack boutique organization.&#xA;A service company has no inventory, production, or logistics departments.&#xA;A service company has a strong focus on customers, digital products, projects and associated efforts. Cash flow is dictated by the timely invoicing of performed activities.</description>
    </item>
    <item>
      <title>Glossary</title>
      <link>https://blog.tangly.net/docs/domains/architecture/13-glossary/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.tangly.net/docs/domains/architecture/13-glossary/</guid>
      <description>Glossary Term Definition Remarks ADR&#xA;Architecture Design Record&#xA;Architecture Design Records ADR&#xA;DDD&#xA;Domain-Driven Design&#xA;Domain-Driven Design&#xA;DoD&#xA;Definition of Done&#xA;Scrum&#xA;FSM&#xA;Finite State Machine&#xA;SDL&#xA;Specification and Description Language&#xA;UML&#xA;Unified Modeling Language&#xA;UML&#xA;VAT&#xA;Value-Added Tax&#xA;Abbreviations Term Definition Remarks Hdl&#xA;Handler&#xA;A handler is responsible for handling a specific part of the system. It is a facade for the underlying subsystem. The class name has the suffix Hdl.</description>
    </item>
  </channel>
</rss>
