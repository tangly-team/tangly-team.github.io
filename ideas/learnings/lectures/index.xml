<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tangly Components – Lectures</title>
    <link>https://blog.tangly.net/ideas/learnings/lectures/</link>
    <description>Recent content in Lectures on tangly Components</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 May 2019 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://blog.tangly.net/ideas/learnings/lectures/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Ideas: PCP Lectures</title>
      <link>https://blog.tangly.net/ideas/learnings/lectures/pcp-lecture/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/ideas/learnings/lectures/pcp-lecture/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pcp_lectures&#34;&gt;PCP Lectures&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The programming concepts and paradigms &lt;em&gt;PCP&lt;/em&gt; convey the basic for functional programming and modern java programming.
The Clojure language &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#programming-clojure&#34;&gt;1&lt;/a&gt;]&lt;/span&gt; is used to teach functional programming approaches.
The focus is on immutability, functions as first-class citizens, and parallel programming.
Later, we analyze how far it is possible to use these techniques in the modern Java language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Slides and reference literature are in English and published under &lt;a href=&#34;../#modern-java-and-selected-jvm-languages-lectures&#34;&gt;Slides and Literature&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_description&#34;&gt;Description&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;\$2/3\$ of the lecture is the presentation of new concepts.
\$1/3\$ of the lecture is used to discuss exercise solutions and support the students in the application of the concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_modern_java&#34;&gt;Modern Java&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The modern Java &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-by-comparison&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#java-puzzlers&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;#effective-java-3rd&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#things-every-java-programmer-should-know&#34;&gt;5&lt;/a&gt;]&lt;/span&gt; lectures are:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 20%;&#34;/&gt;
&lt;col style=&#34;width: 30%;&#34;/&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Lecture&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Content&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Algebraic Data Types&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Records&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sealed types — interfaces, abstract classes, classes, and records -&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pattern matching and deconstruction in the conditional statements &lt;em&gt;if&lt;/em&gt; and &lt;em&gt;switch&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement the visitor pattern with a functional approach&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lambdas and Streams&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Single abstract method &lt;em&gt;SAM&lt;/em&gt; interface and abstract class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom intermediate and final operations with &lt;em&gt;gatherers&lt;/em&gt; and &lt;em&gt;collectors&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tricks with type inference.
An example of a functional builder is discussed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functional Programming with Java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Modules&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Module concepts and declarations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and deploy services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modernize Java legacy applications and migrate them to a module structure&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Structured Concurrency with Loom&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Virtual threads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Executors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Structured concurrency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do we still need asynchronous programming or asynchronous frameworks?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interested readers can explore further functional programming &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#functional-programming-java&#34;&gt;6&lt;/a&gt;]&lt;/span&gt; and Java modules &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#java-9-modularity&#34;&gt;7&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_clojure&#34;&gt;Clojure&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;To be written&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;programming-clojure&#34;&gt;&lt;/a&gt;[1] S. D. Halloway, &lt;em&gt;Programming Clojure&lt;/em&gt;. 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07BN4C92X&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07BN4C92X&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-by-comparison&#34;&gt;&lt;/a&gt;[2] S. Harrer, J. Lenhard, and L. Dietz, &lt;em&gt;Java By Comparison&lt;/em&gt;. Pragmatic Bookshelf, 2018 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B07CLFTVZS&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B07CLFTVZS&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-puzzlers&#34;&gt;&lt;/a&gt;[3] J. Bloch and N. Gafter, &lt;em&gt;Java™ Puzzlers&lt;/em&gt;. Addison-Wesley Professional, 2005 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/032133678X&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/032133678X&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;effective-java-3rd&#34;&gt;&lt;/a&gt;[4] J. Bloch, &lt;em&gt;Effective Java&lt;/em&gt;, Third. Addison-Wesley Professional, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B078H61SCH&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B078H61SCH&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;things-every-java-programmer-should-know&#34;&gt;&lt;/a&gt;[5] K. Henney, &lt;em&gt;97 Things Every Java Programmer Should Know&lt;/em&gt;. O’Reilly Media, Incorporated, 2019 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B088P8GV8X&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B088P8GV8X&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;functional-programming-java&#34;&gt;&lt;/a&gt;[6] V. Subramaniam, &lt;em&gt;Functional Programming In Java Harnessing The Power Of Java 8 Lambda Expressions&lt;/em&gt;. The Pragmatic Programmers, 2014 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0CJL7VKFL&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0CJL7VKFL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;java-9-modularity&#34;&gt;&lt;/a&gt;[7] S. Mak, &lt;em&gt;Java 9 Modularity&lt;/em&gt;. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491954167&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491954167&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Ideas: SWAT Lectures</title>
      <link>https://blog.tangly.net/ideas/learnings/lectures/swat-lecture/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tangly.net/ideas/learnings/lectures/swat-lecture/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_swat_lectures&#34;&gt;SWAT Lectures&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The software architecture and techniques &lt;em&gt;SWAT&lt;/em&gt; lecture conveys the basics of systematic agile design of a software architecture.
The approach is adequate for the problem of (agile architectural thinking) as well as methods of agile quality assurance.
Students apply the learnt principles of their semester or private software projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is particularly suitable for students who are working on a larger software project at the same time.
The course with 3 &lt;a href=&#34;https://en.wikipedia.org/wiki/European_Credit_Transfer_and_Accumulation_System&#34;&gt;ECTS&lt;/a&gt; was taught at Swiss technical universities during this and the last decade.
The themes are regularly updated to reflect actual trends and technical possibilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Slides and reference literature are in English and published under &lt;a href=&#34;../#agile-software-architecture-and-techniques-lectures&#34;&gt;Slides and Literature&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_description&#34;&gt;Description&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;\$2/3\$ of the lecture is the presentation of new concepts.
\$1/3\$ of the lecture is used to discuss the literature and support the students in the application of the concepts of their software project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The reference books are &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#building-evolutionary-architectures-2nd&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;#building-evolutionary-architectures&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;#refactoring&#34;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Recommended books are &lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#clean-code&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;#clean-coder&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;#clean-architecture&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;#clean-agile&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;#clean-craftsmanship&#34;&gt;8&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The basics of the domain-driven design approach are presented in the third part of the training
&lt;span class=&#34;citation&#34;&gt;[&lt;a href=&#34;#domain-driven-design&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;#implementing-domain-driven-design&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;#domain-driven-design-distilled&#34;&gt;11&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 20%;&#34;/&gt;
&lt;col style=&#34;width: 30%;&#34;/&gt;
&lt;col style=&#34;width: 50%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Lecture&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Content&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Why agile architecture and design?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introduction and administrative information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why is software architecture and design a needed discipline?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architecture Styles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOP Anti-Patterns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Setup environment for exercises and portfolio&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Evolution of Software Architecture and Design over the last Decades&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Evolution of software architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML, RUP and TOGAF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile approaches&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;What is Agile Architecture?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Agile architecture principles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developer vs Architects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Domain-Driven Design &lt;em&gt;DDD&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Agile Approaches with Scrum, eXtreme Programming, LeSS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Architect roles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Technology stacks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevOps impact with continuous integration &lt;em&gt;CI&lt;/em&gt;, continuous delivery &lt;em&gt;CD&lt;/em&gt;, and continuous deployment &lt;em&gt;CD&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Refactoring&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Why refactor?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to refactor?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test driven design &lt;em&gt;TDD&lt;/em&gt;, acceptance test driven development &lt;em&gt;ATDD&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean code and clean architecture&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Errors, Vulnerabilities, and Smells in Source Code&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Definition of smells and how to remove smells.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactoring process with TDD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evolve architecture to newer versions of programming languages or more modular architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tools to detect non-quality&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Component quality&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Architecture of Components and Subsystems&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Patterns, idioms, paradigms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID principles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Onion architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bounded domains&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Verify functional features&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functional and non-functional requirements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verification of functional requirements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TDD, ATDD, BDD approaches&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 9&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Validate Architecture Characteristics&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-functional requirement &lt;em&gt;NFR&lt;/em&gt; measurement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architecture Characteristics and fitness functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevOps and DORA metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics and Automation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compliance and corporate governance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Architecture Documentation&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Why document?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Living documentation, architecture document record &lt;em&gt;ADR&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation as a managed source published in a static website&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Software Architectural Trends (1/2)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functional Programming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reactive Programming&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 12&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Software Architectural Trends (2/2)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Security&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring and Auditing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Realtime Data Warehouse &lt;em&gt;DWH&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 13&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Domain-Driven Design Workshop&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Domain-Driven Development, ubiquitous language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bounded domains, entities, aggregates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event Storming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection to modular monoliths and microservices based architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile and DevOps affiliation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Lecture 14&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Team and Technical Excellence for Architects&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Daily work of architects in agile environment&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_references&#34;&gt;References&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures-2nd&#34;&gt;&lt;/a&gt;[1] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Automated Software Governance&lt;/em&gt;, Second. O’Reilly Media, 2023 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B0BN4T1P27&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B0BN4T1P27&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;building-evolutionary-architectures&#34;&gt;&lt;/a&gt;[2] N. Ford, R. Parsons, and P. Kua, &lt;em&gt;Building Evolutionary Architectures: Support Constant Change&lt;/em&gt;, First. O’Reilly Media, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/1491986360&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/1491986360&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;refactoring&#34;&gt;&lt;/a&gt;[3] M. Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, First. Addision-Wesley, 1999 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B004PQQRK2&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B004PQQRK2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-code&#34;&gt;&lt;/a&gt;[4] R. C. Martin, &lt;em&gt;Clean Code&lt;/em&gt;. Prentice Hall, 2009 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0132350882&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-coder&#34;&gt;&lt;/a&gt;[5] R. C. Martin, &lt;em&gt;The Clean Coder&lt;/em&gt;. Prentice Hall, 2011 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0137081073&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0137081073&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-architecture&#34;&gt;&lt;/a&gt;[6] R. C. Martin, &lt;em&gt;Clean Architecture&lt;/em&gt;. Pearson, 2017 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0134494164&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-agile&#34;&gt;&lt;/a&gt;[7] R. C. Martin, &lt;em&gt;Clean Agile&lt;/em&gt;. Prentice Hall, 2020 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0135781868&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0135781868&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;clean-craftsmanship&#34;&gt;&lt;/a&gt;[8] R. C. Martin, &lt;em&gt;Clean Craftsmanship&lt;/em&gt;. Addison-Wesley Professional, 2021 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B095C16LSW&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B095C16LSW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design&#34;&gt;&lt;/a&gt;[9] E. Evans, &lt;em&gt;Domain-driven design&lt;/em&gt;. Addison-Wesley, 2004 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/0321125215&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/0321125215&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;implementing-domain-driven-design&#34;&gt;&lt;/a&gt;[10] V. Vernon, &lt;em&gt;Implementing Domain driven Design&lt;/em&gt;. Addison-Wesley Professional, 2012 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B00BCLEBN8&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B00BCLEBN8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a id=&#34;domain-driven-design-distilled&#34;&gt;&lt;/a&gt;[11] V. Vernon, &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;. Addison-Wesley Professional, 2016 [Online]. Available: &lt;a href=&#34;https://www.amazon.com/dp/B01JJSGE5S/&#34; class=&#34;bare&#34;&gt;https://www.amazon.com/dp/B01JJSGE5S/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
